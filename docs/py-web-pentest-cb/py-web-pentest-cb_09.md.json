["```py\nimport sys\nimport os\nimport nmap\n\nnm=nmap.Portscanner()\nwith open(\u201c./nmap_output.xml\u201d, \u201cr\u201d) as fd:\n    content = fd.read()\n    nm.analyse_nmap_xml_scan(content)\n    print(nm.csv())\n```", "```py\nnm=nmap.Portscanner()\n```", "```py\nwith open(\u201c./nmap_output.xml\u201d, \u201cr\u201d) as fd:\n```", "```py\n    content = fd.read()\n```", "```py\nnm.analyse_nmap_xml_scan(content)\n    print(nm.csv())\n```", "```py\nimport urllib2\nfrom bs4 import BeautifulSoup\nimport sys\n\ntarurl = sys.argv[1]\nif tarurl[-1] == \u201c/\u201d:\n  tarurl = tarurl[:-1]\nprint\u201d<MaltegoMessage>\u201d\nprint\u201d<MaltegoTransformResponseMessage>\u201d\nprint\u201d  <Entities>\u201d\n\nurl = urllib2.urlopen(tarurl).read()\nsoup = BeautifulSoup(url)\nfor line in soup.find_all(\u2018a\u2019):\n  newline = line.get(\u2018href\u2019)\n  if newline[:4] == \u201chttp\u201d:\n    print\u201d<Entity Type=\\\u201dmaltego.Domain\\\u201d>\u201d \n    print\u201d<Value>\u201d+str(newline)+\u201d</Value>\u201d\n    print\u201d</Entity>\u201d\n  elif newline[:1] == \u201c/\u201d:\n    combline = tarurl+newline\n    print\u201d<Entity Type=\\\u201dmaltego.Domain\\\u201d>\u201d \n    print\u201d<Value>\u201d+str(combline)+\u201d</Value>\u201d\n    print\u201d</Entity>\u201d\nprint\u201d  </Entities>\u201d\nprint\u201d</MaltegoTransformResponseMessage>\u201d\nprint\u201d</MaltegoMessage>\u201d\n```", "```py\nfrom bs4 import BeautifulSoup\n```", "```py\ntarurl = sys.argv[1]\n```", "```py\nif tarurl[-1] == \u201c/\u201d:\n  tarurl = tarurl[:-1]\n```", "```py\nprint\u201d<MaltegoMessage>\u201d\nprint\u201d<MaltegoTransformResponseMessage>\u201d\nprint\u201d  <Entities>\u201d\n```", "```py\nurl = urllib2.urlopen(tarurl).read()\nsoup = BeautifulSoup(url)\n```", "```py\nfor line in soup.find_all(\u2018a\u2019):\n  newline = line.get(\u2018href\u2019)\n```", "```py\nif newline[:4] == \u201chttp\u201d:\n    print\u201d<Entity Type=\\\u201dmaltego.Domain\\\u201d>\u201d\n    print\u201d<Value>\u201d+str(newline)+\u201d</Value>\u201d\n    print\u201d</Entity>\u201d\n```", "```py\nelif newline[:1] == \u201c/\u201d:\n    combline = tarurl+newline\n    if \n    print\u201d<Entity Type=\\\u201dmaltego.Domain\\\u201d>\u201d\n    print\u201d<Value>\u201d+str(combline)+\u201d</Value>\u201d\n    print\u201d</Entity>\u201d\n```", "```py\nprint\u201d  </Entities>\u201d\nprint\u201d</MaltegoTransformResponseMessage>\u201d\nprint\u201d</MaltegoMessage>\u201d\n```", "```py\nimport urllib2\nimport re\nimport sys\n\ntarurl = sys.argv[1]\nurl = urllib2.urlopen(tarurl).read()\nregex = re.compile((\u201c([a-z0-9!#$%&\u2019*+\\/=?^_`{|}~- ]+(?:\\.[*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\u2019*+\\/=?^_`\u201d \u201c{|}~- ]+)*(@|\\sat\\s)(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(\\.|\u201d \u201c\\ sdot\\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\u201d))\n\nprint\u201d<MaltegoMessage>\u201d\nprint\u201d<MaltegoTransformResponseMessage>\u201d\nprint\u201d  <Entities>\u201d\nemails = re.findall(regex, url)\nfor email in emails:\n  print\u201d    <Entity Type=\\\u201dmaltego.EmailAddress\\\u201d>\u201d\n  print\u201d      <Value>\u201d+str(email[0])+\u201d</Value>\u201d\n  print\u201d    </Entity>\u201d\nprint\u201d  </Entities>\u201d\nprint\u201d</MaltegoTransformResponseMessage>\u201d\nprint\u201d</MaltegoMessage>\u201d\n```", "```py\ntarurl = sys.argv[1]\nurl = urllib2.urlopen(tarurl).read()\n```", "```py\nregex = re.compile((\u201c([a-z0-9!#$%&\u2019*+\\/=?^_`{|}~-]+(?:\\.[a-z0- 9!#$%&\u2019*+\\/=?^_`\u201d \u201c{|}~-]+)*(@|\\sat\\s)(?:[a-z0-9](?:[a-z0-9- ]*[a-z0-9])?(\\.|\u201d \u201c\\sdot\\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\u201d))\n```", "```py\nprint\u201d<MaltegoMessage>\u201d\nprint\u201d<MaltegoTransformResponseMessage>\u201d\nprint\u201d  <Entities>\u201d\n```", "```py\nemails = re.findall(regex, url)\n```", "```py\nfor email in emails:\n  print\u201d    <Entity Type=\\\u201dmaltego.EmailAddress\\\u201d>\u201d\n  print\u201d      <Value>\u201d+str(email[0])+\u201d</Value>\u201d\n  print\u201d    </Entity>\u201d\n```", "```py\nprint\u201d  </Entities>\u201d\nprint\u201d</MaltegoTransformResponseMessage>\u201d\nprint\u201d</MaltegoMessage>\u201d\n```", "```py\nimport subprocess\nimport sys\n\nipfile = sys.argv[1]\n\nIPs = open(ipfile, \u201cr\u201d)\noutput = open(\u201csslscan.csv\u201d, \u201cw+\u201d)\n\nfor IP in IPs:\n  try:\n    command = \u201csslscan \u201c+IP\n\n    ciphers = subprocess.check_output(command.split())\n\n    for line in ciphers.splitlines():\n      if \u201cAccepted\u201d in line:\n        output.write(IP+\u201d,\u201d+line.split()[1]+\u201d,\u201d+ line.split()[4]+\u201d,\u201d+line.split()[2]+\u201d\\r\u201d)\n  except:\n    pass\n```", "```py\nimport subprocess\nimport sys\n\nipfile = sys.argv[1]\n```", "```py\nIPs = open(ipfile, \u201cr\u201d)\n```", "```py\noutput = open(\u201csslscan.csv\u201d, \u201cw+\u201d)\n```", "```py\nfor IP in IPs:\n```", "```py\n  try:\n    command = \u201csslscan \u201c+IP\n```", "```py\n    ciphers = subprocess.check_output(command.split())\n```", "```py\n    for line in ciphers.splitlines():\n      if \u201cAccepted\u201d in line:\n        output.write(IP+\u201d,\u201d+line.split()[1]+\u201d,\u201d+ line.split()[4]+\u201d,\u201d+line.split()[2]+\u201d\\r\u201d)\n```", "```py\n  except:\n  pass\n```", "```py\n$ pip install plotly\n\n```", "```py\npython -c \u201cimport plotly;  plotly.tools.set_credentials_file(username=\u2019{username}\u2019,  api_key=\u2019{apikey}\u2019, stream_ids=[{streamids}])\u201d\n\n```", "```py\n$ pip install dpkt\n\n```", "```py\nimport time, dpkt\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\nfrom datetime import datetime\n\nfilename = \u2018hbot.pcap\u2019\n\nfull_datetime_list = []\ndates = []\n\nfor ts, pkt in dpkt.pcap.Reader(open(filename,\u2019rb\u2019)):\n    eth=dpkt.ethernet.Ethernet(pkt) \n    if eth.type!=dpkt.ethernet.ETH_TYPE_IP:\n        continue\n\n    ip = eth.data\n    tcp=ip.data\n\n    if ip.p not in (dpkt.ip.IP_PROTO_TCP, dpkt.ip.IP_PROTO_UDP):\n        continue\n\n    if tcp.dport == 21 or tcp.sport == 21:\n        full_datetime_list.append((ts, str(time.ctime(ts))))\n\nfor t,d in full_datetime_list:\n    if d not in dates:\n        dates.append(d)\n\ndates.sort(key=lambda date: datetime.strptime(date, \u201c%a %b %d %H:%M:%S %Y\u201d))\n\ndatecount = []\n\nfor d in dates:\n    counter = 0\n    for d1 in full_datetime_list:\n        if d1[1] == d:\n            counter += 1\n\n    datecount.append(counter)\n\ndata = Data([\n    Scatter(\n        x=dates,\n        y=datecount\n    )\n])\nplot_url = py.plot(data, filename=\u2019FTP Requests\u2019)\n```", "```py\nimport time, dpkt\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\nfrom datetime import datetime\n\nfilename = \u2018hbot.pcap\u2019\n```", "```py\nfull_datetime_list = []\ndates = []\n```", "```py\nfor ts, pkt in dpkt.pcap.Reader(open(filename,\u2019rb\u2019)):\n    eth=dpkt.ethernet.Ethernet(pkt) \n    if eth.type!=dpkt.ethernet.ETH_TYPE_IP:\n        continue\n\n    ip = eth.data\n    tcp=ip.data\n\n    if ip.p not in (dpkt.ip.IP_PROTO_TCP, dpkt.ip.IP_PROTO_UDP):\n        continue\n\n    if tcp.dport == 21 or tcp.sport == 21:\n        full_datetime_list.append((ts, str(time.ctime(ts))))\n```", "```py\nfor t,d in full_datetime_list:\n    if d not in dates:\n        dates.append(d)\n```", "```py\ndates.sort(key=lambda date: datetime.strptime(date, \u201c%a %b %d H:%M:%S %Y\u201d))\n```", "```py\ndatecount = []\n\nfor d in dates:\n    counter = 0\n    for d1 in full_datetime_list:\n        if d1[1] == d:\n            counter += 1\n\n    datecount.append(counter)\n```", "```py\ndata = Data([\n    Scatter(\n        x=dates,\n        y=datecount\n    )\n])\nplot_url = py.plot(data, filename=\u2019FTP Requests\u2019)\n```"]