["```py\nimport requests\n\nverbs = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE', 'TEST']\nfor verb in verbs:\n    req = requests.request(verb, 'http://packtpub.com')\n    print verb, req.status_code, req.reason\n    if verb == 'TRACE' and 'TRACE / HTTP/1.1' in req.text:\n      print 'Possible Cross Site Tracing vulnerability found'\n```", "```py\nimport requests\n```", "```py\nverbs = ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE', 'CONNECT', 'TEST']\n```", "```py\nfor verb in verbs:\n    req = requests.request(verb, 'http://packtpub.com')\n    print verb, req.status_code, req.reason\n```", "```py\nif verb == 'TRACE' and 'TRACE / HTTP/1.1' in req.text:\n      print 'Possible Cross Site Tracing vulnerability found'\n```", "```py\nimport requests\n\nreq = requests.get('http://packtpub.com')\nheaders = ['Server', 'Date', 'Via', 'X-Powered-By', 'X-Country-Code']\n\nfor header in headers:\n    try:\n  result = req.headers[header]\n        print '%s: %s' % (header, result)\n    except Exception, error:\n        print '%s: Not found' % header\n```", "```py\nreq = requests.get('http://packtpub.com')\n```", "```py\nheaders = ['Server', 'Date', 'Via', 'X-Powered-By', 'X-Country- Code']\n```", "```py\ntry:\n  result = req.headers[header]\n        print '%s: %s' % (header, result)\nexcept:\nprint '%s: Not found' % header\n```", "```py\nimport requests\n\nurls = open(\"urls.txt\", \"r\")\nfor url in urls:\n  url = url.strip()\n  req = requests.get(url)\n  print url, 'report:'\n\n  try:\n    xssprotect = req.headers['X-XSS-Protection']\n    if  xssprotect != '1; mode=block':\n      print 'X-XSS-Protection not set properly, XSS may be possible:', xssprotect\n  except:\n    print 'X-XSS-Protection not set, XSS may be possible'\n\n  try:\n    contenttype = req.headers['X-Content-Type-Options']\n    if contenttype != 'nosniff':\n      print 'X-Content-Type-Options not set properly:',  contenttype\n  except:\n    print 'X-Content-Type-Options not set'\n\n  try:\n    hsts = req.headers['Strict-Transport-Security']\n  except:\n    print 'HSTS header not set, MITM attacks may be possible'\n\n  try:\n    csp = req.headers['Content-Security-Policy']\n    print 'Content-Security-Policy set:', csp\n  except:\n    print 'Content-Security-Policy missing'\n\n  print '----'\n```", "```py\nurls = open(\"urls.txt\", \"r\")\nfor url in urls:\n  url = url.strip()\n  req = requests.get(url)\n  print url, 'report:'\n```", "```py\ntry:\n    xssprotect = req.headers['X-XSS-Protection']\n    if  'xssprotect' != '1; mode=block':\n      print 'X-XSS-Protection not set properly, XSS may be possible'\n  except:\n    print 'X-XSS-Protection not set, XSS may be possible'\n```", "```py\ntry:\n    contenttype = req.headers['X-Content-Type-Options']\n    if contenttype != 'nosniff':\n      print 'X-Content-Type-Options not set properly'\n  except:\n    print 'X-Content-Type-Options not set'\n```", "```py\n  try:\n    hsts = req.headers['Strict-Transport-Security']\n  except:\n    print 'HSTS header not set, MITM attacks may be possible'\n```", "```py\n  try:\n    csp = req.headers['Content-Security-Policy']\n    print 'Content-Security-Policy set:', csp\n  except:\n    print 'Content-Security-Policy missing'\n```", "```py\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nwith open('passwords.txt') as passwords:\n    for password in passwords.readlines():\n        password = password.strip()\n        req = requests.get('http://packtpub.com/admin_login.html', auth=HTTPBasicAuth('admin', password))\n        if req.status_code == 401:\n            print password, 'failed.'\n        elif req.status_code == 200:\n            print 'Login successful, password:', password\n            break\n        else:\n            print 'Error occurred with', password\n            break\n```", "```py\nreq = requests.get('http://packtpub.com/admin_login.html', auth=HTTPBasicAuth('admin', password))\n```", "```py\nimport requests\nfrom ghost import Ghost\nimport logging\nimport os\n\nURL = 'http://packtpub.com'\nreq = requests.get(URL)\n\ntry:\n    xframe = req.headers['x-frame-options']\n    print 'X-FRAME-OPTIONS:', xframe , 'present, clickjacking not likely possible'\nexcept:\n    print 'X-FRAME-OPTIONS missing'\n\nprint 'Attempting clickjacking...'\n\nhtml = '''\n<html>\n<body>\n<iframe src=\"img/'''+URL+'''\" height='600px' width='800px'></iframe>\n</body>\n</html>'''\n\nhtml_filename = 'clickjack.html'\nf = open(html_filename, 'w+')\nf.write(html)\nf.close()\n\nlog_filename = 'test.log'\nfh = logging.FileHandler(log_filename)\nghost = Ghost(log_level=logging.INFO, log_handler=fh)\npage, resources = ghost.open(html_filename)\n\nl = open(log_filename, 'r')\nif 'forbidden by X-Frame-Options.' in l.read():\n    print 'Clickjacking mitigated via X-FRAME-OPTIONS'\nelse:\n    href = ghost.evaluate('document.location.href')[0]\n    if html_filename not in href:\n        print 'Frame busting detected'\n    else:\n        print 'Frame busting not detected, page is likely vulnerable to clickjacking'\nl.close()\n\nlogging.getLogger('ghost').handlers[0].close()\nos.unlink(log_filename)\nos.unlink(html_filename)\n```", "```py\ntry:\n    xframe = req.headers['x-frame-options']\n    print 'X-FRAME-OPTIONS:', xframe , 'present, clickjacking not likely possible'\nexcept:\n    print 'X-FRAME-OPTIONS missing'\n```", "```py\nhtml = '''\n<html>\n<body>\n<iframe src=\"img/'''+URL+'''\" height='600px' width='800px'></iframe>\n</body>\n</html>'''\n\nhtml_filename = 'clickjack.html'\nf = open(html_filename, 'w+')\nf.write(html)\nf.close()\n```", "```py\nlog_filename = 'test.log'\nfh = logging.FileHandler(log_filename)\nghost = Ghost(log_level=logging.INFO, log_handler=fh)\n```", "```py\npage, resources = ghost.open(html_filename)\n```", "```py\nl = open(log_filename, 'r')\nif 'forbidden by X-Frame-Options.' in l.read():\n    print 'Clickjacking mitigated via X-FRAME-OPTIONS'\n```", "```py\nhref = ghost.evaluate('document.location.href')[0]\n```", "```py\nl.close()\n\nlogging.getLogger('ghost').handlers[0].close()\nos.unlink(log_filename)\nos.unlink(html_filename)\n```", "```py\nimport requests\nimport hashlib\n\nuser_agents = { 'Chrome on Windows 8.1' : 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36',\n'Safari on iOS' : 'Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4',\n'IE6 on Windows XP' : 'Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)',\n'Googlebot' : 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' }\n\nresponses = {}\nfor name, agent in user_agents.items():\n  headers = {'User-Agent' : agent}\n  req = requests.get('http://packtpub.com', headers=headers)\n  responses[name] = req\n\nmd5s = {}\nfor name, response in responses.items():\n  md5s[name] = hashlib.md5(response.text.encode('utf- 8')).hexdigest()\n\nfor name,md5 in md5s.iteritems():\n    if name != 'Chrome on Windows 8.1':\n        if md5 != md5s['Chrome on Windows 8.1']:\n            print name, 'differs from baseline'\n        else:\n            print 'No alternative site found via User-Agent spoofing:', md5\n```", "```py\nuser_agents = { 'Chrome on Windows 8.1' : 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36',\n'Safari on iOS' : 'Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4',\n'IE6 on Windows XP' : 'Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)',\n'Googlebot' : 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' }\n```", "```py\nresponses = {}\nfor name, agent in user_agents.items():\n  headers = {'User-Agent' : agent}\n```", "```py\nreq = requests.get('http://www.google.com', headers=headers)\n  responses[name] = req\n```", "```py\nmd5s = {}\nfor name, response in responses.items():\n  md5s[name] = hashlib.md5(response.text.encode('utf- 8')).hexdigest()\n```", "```py\nfor name,md5 in md5s.iteritems():\n    if name != 'Chrome on Windows 8.1':\n        if md5 != md5s['Chrome on Windows 8.1']:\n            print name, 'differs from baseline'\n        else:\n            print 'No alternative site found via User-Agent spoofing:', md5\n```", "```py\nimport requests\n\nreq = requests.get('http://www.packtpub.com')\nfor cookie in req.cookies:\n  print 'Name:', cookie.name\n  print 'Value:', cookie.value\n\n  if not cookie.secure:\n    cookie.secure = '\\x1b[31mFalse\\x1b[39;49m'\n  print 'Secure:', cookie.secure\n\n  if 'httponly' in cookie._rest.keys():\n    cookie.httponly = 'True'\n  else:\n    cookie.httponly = '\\x1b[31mFalse\\x1b[39;49m'\n  print 'HTTPOnly:', cookie.httponly\n\n  if cookie.domain_initial_dot:\n    cookie.domain_initial_dot = '\\x1b[31mTrue\\x1b[39;49m'\n  print 'Loosly defined domain:', cookie.domain_initial_dot, '\\n'\n```", "```py\n  print 'Name:', cookie.name\n  print 'Value:', cookie.value\n```", "```py\nif not cookie.secure:\n    cookie.secure = '\\x1b[31mFalse\\x1b[39;49m'\n  print 'Secure:', cookie.secure\n```", "```py\n  if 'httponly' in cookie._rest.keys():\n    cookie.httponly = 'True'\n  else:\n    cookie.httponly = '\\x1b[31mFalse\\x1b[39;49m'\n  print 'HTTPOnly:', cookie.httponly\n```", "```py\nif cookie.domain_initial_dot:\n    cookie.domain_initial_dot = '\\x1b[31mTrue\\x1b[39;49m'\n  print 'Loosly defined domain:', cookie.domain_initial_dot, '\\n'\n```", "```py\nimport requests\n\nurl = 'http://www.packtpub.com/'\nreq = requests.get(url)\nif req.cookies:\n  print 'Initial cookie state:', req.cookies\n  cookie_req = requests.post(url, cookies=req.cookies, auth=('user1', 'supersecretpasswordhere'))\n  print 'Authenticated cookie state:', cookie_req.cookies\n\n  if req.cookies == cookie_req.cookies:\n      print 'Session fixation vulnerability identified'\n```", "```py\nreq = requests.get(url)\nprint 'Initial cookie state:', req.cookies\n```", "```py\ncookie_req = requests.post(url, cookies=req.cookies, auth=('user1', 'supersecretpasswordhere'))\n```", "```py\nprint 'Authenticated cookie state:', cookie_req.cookies\n\nif req.cookies == cookie_req.cookies:\n  print 'Session fixation vulnerability identified'\n```"]