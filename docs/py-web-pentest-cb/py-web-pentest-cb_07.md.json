["```py\nimport hashlib\nmessage = raw_input(\"Enter the string you would like to hash: \")\nmd5 = hashlib.md5(message.encode())\nprint (md5.hexdigest())\n```", "```py\nimport hashlib\n```", "```py\nmessage = raw_input(\"Enter what you wish to ask the user here: \")\n```", "```py\nmd5 = hashlib.md5(message.encode())\n```", "```py\nEnter the string you would like to hash: pythonrules\n048c0fc556088fabc53b76519bfb636e\n\n```", "```py\nimport hashlib\nmessage = raw_input(\"Enter the string you would like to hash: \")\nsha = hashlib.sha1(message)\nsha1 = sha.hexdigest()\nprint sha1\n```", "```py\nimport hashlib\nmessage = raw_input(\"Enter the string you would like to hash: \")\nsha = hashlib.sha128(message)\nsha128 = sha.hexdigest()\nprint sha128\n```", "```py\nimport hashlib\nmessage = raw_input(\"Enter the string you would like to hash: \")\nsha = hashlib.sha256(message)\nsha256 = sha.hexdigest()\nprint sha256\n```", "```py\nimport hashlib\n```", "```py\nmessage = raw_input(\"Enter the string you would like to hash: )\n```", "```py\nsha = hashlib.sha*(message)\n```", "```py\nsha*=sha.hexdigest()\n```", "```py\nprint sha*\n```", "```py\nimport hashlib\n\nmessage = raw_input(\"Enter the string you would like to hash: \")\n\nmd5 = hashlib.md5(message)\nmd5 = md5.hexdigest()\n\nsha1 = hashlib.sha1(message)\nsha1 = sha1.hexdigest()\n\nsha256 = hashlib.sha256(message)\nsha256 = sha256.hexdigest()\n\nsha512 = hashlib.sha512(message)\nsha512 = sha512.hexdigest()\n\nprint \"MD5 Hash =\", md5\nprint \"SHA1 Hash =\", sha1\nprint \"SHA256 Hash =\", sha256\nprint \"SHA512 Hash =\", sha512\nprint \"End of list.\"\n```", "```py\nimport hashlib\nmessage = raw_input('Please enter the string you would like to hash: ')\n```", "```py\nmd5 = hashlib.md5(message)\nmd5 = md5.hexdigest()\n\nsha1 = hashlib.sha1(message)\nsha1 = sha1.hexdigest()\n\nsha256 = hashlib.sha256(message)\nsha256 = sha256.hexdigest()\n\nsha512 = hashlib.sha512(message)\nsha512 = sha512.hexdigest()\n```", "```py\nprint \"MD5 Hash =\", md5\nprint \"SHA1 Hash =\", sha1\nprint \"SHA256 Hash =\", sha256\nprint \"SHA512 Hash =\", sha512\nprint \"End of list.\"\n```", "```py\nEnter the string you would like to hash: test\nMD5 Hash = 098f6bcd4621d373cade4e832627b4f6\nSHA1 Hash= a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\nSHA256 Hash= 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\nSHA512 Hash= ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0 db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff\nEnd of list.\n\n```", "```py\n#!/usr/bin/python\nimport uuid\nimport hashlib\n\n# Let's do the hashing. We create a salt and append it to the password once hashes.\n\ndef hash(password):\n    salt = uuid.uuid4().hex\n    return hashlib.sha512(salt.encode() + password.encode()).hexdigest() + ':' + salt\n\n# Let's confirm that worked as intended.\n\ndef check(hashed, p2):\n    password, salt = hashed.split(':')\n    return password == hashlib.sha512(salt.encode() + p2.encode()).hexdigest()\n\npassword = raw_input('Please enter a password: ')\nhashed = hash(password)\nprint('The string to store in the db is: ' + hashed)\nre = raw_input('Please re-enter your password: ')\n\n# Let's ensure the passwords matched\n\nif check(hashed, re):\n    print('Password Match')\nelse:\n    print('Password Mismatch')\n```", "```py\nimport uuid\nimport hashlib\n```", "```py\ndef hash(password):\n    salt = uuid.uuid4().hex\n    return hashlib.sha512(salt.encode() + password.encode()).hexdigest() + ':' + salt\n```", "```py\ndef check(hashed, p2):\n    password, salt = hashed.split(':')\n    return password == hashlib.sha512(salt.encode() + p2.encode()).hexdigest()\n```", "```py\npassword = raw_input('Please enter a password: ')\nhashed = hash(password)\nprint('The string to store in the db is: ' + hashed)\nre = raw_input('Please re-enter your password: ')\nif check(hashed, re):\n    print('Password Match')\nelse:\n    print('Password Mismatch')\n```", "```py\nPlease enter a password: password\nThe string to store in the db is: a8be1e0e023e2c9c1e96187c4b966222ccf1b7d34718ad60f8f000094d39 d8dd3eeb837af135bfe50c7baea785ec735ed04f230ffdbe2ed3def1a240c 97ca127:d891b46fc8394eda85ccf85d67969e82\nPlease re-enter your password: password\nPassword Match\n\n```", "```py\nPlease enter a password: password1\nThe string to store in the db is: 418bba0beeaef52ce523dafa9b19baa449562cf034ebd1e4fea8c007dd49cb 1004e10b837f13d59b13236c54668e44c9d0d8dbd03e32cd8afad6eff04541 ed07:1d9cd2d9de5c46068b5c2d657ae45849\nPlease re-enter your password: password\nPassword Mismatch\n\n```", "```py\nimport bcrypt\n# Let's first enter a password\nnew = raw_input('Please enter a password: ')\n# We'll encrypt the password with bcrypt with the default salt value of 12\nhashed = bcrypt.hashpw(new, bcrypt.gensalt())\n# We'll print the hash we just generated\nprint('The string about to be stored is: ' + hashed)\n# Confirm we entered the correct password\nplaintext = raw_input('Please re-enter the password to check: ')\n# Check if both passwords match\nif bcrypt.hashpw(plaintext, hashed) == hashed:\n    print 'It\\'s a match!'\nelse:\n    print 'Please try again.'\n```", "```py\nimport bcrypt\n```", "```py\nnew = raw_input('Please enter a password: ')\n```", "```py\nhashed = bcrypt.hashpw(new, bcrypt.gensalt())\n```", "```py\nprint ('The string about to be stored is: ' + hashed)\n```", "```py\nplaintext = raw_input('Please re-enter the password to check: ')\n```", "```py\nIf bcrypt.hashpw(plaintext, hashed) == hashed:\n  print \"It\\'s a match\"\nelse:\n  print \"Please try again\".\n```", "```py\nPlease enter a password: example\nThe string about to be stored is: $2a$12$Ie6u.GUpeO2WVjchYg7Pk.741gWjbCdsDlINovU5yubUeqLIS1k8e\nPlease re-enter the password to check: example\nIt's a match!\n\nPlease enter a password: example\nThe string about to be stored is: $2a$12$uDtDrVCv2vqBw6UjEAYE8uPbfuGsxdYghrJ/YfkZuA7vaMvGIlDGe\nPlease re-enter the password to check: incorrect\nPlease try again.\n\n```", "```py\nimport hashlib\ntarget = raw_input(\"Please enter your hash here: \")\ndictionary = raw_input(\"Please enter the file name of your dictionary: \")\ndef main():\n    with open(dictionary) as fileobj:\n        for line in fileobj:\n            line = line.strip()\n            if hashlib.md5(line).hexdigest() == target:\n                print \"Hash was successfully cracked %s: The value is %s\" % (target, line)\n                return \"\"\n    print \"Failed to crack the file.\"\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport hashlib\n```", "```py\ntarget = raw_input(\"Please enter your hash here: \")\ndictionary = raw_input(\"Please enter the file name of your dictionary: \")\n```", "```py\ndef main():\n    with open(dictionary) as fileobj:\n        for line in fileobj:\n            line = line.strip()\n            if hashlib.md5(line).hexdigest() == target:\n                print \"Hash was successfully cracked %s: The value is %s\" % (target, line)\n                return \"\"\n    print \"Failed to crack the file.\"\n```", "```py\nif __name__ == \"__main__\":\n    main()\n```", "```py\nPlease enter your hash here: 5f4dcc3b5aa765d61d8327deb882cf99\nPlease enter the file name of your dictionary: dict.txt\nHash was successfully cracked 5f4dcc3b5aa765d61d8327deb882cf99: The value is password\n\n```", "```py\n#!/usr/bin/python\nmsg = raw_input('Please enter the string to encode: ')\nprint \"Your B64 encoded string is: \" + msg.encode('base64')\n```", "```py\nmsg = raw_input('Please enter the string to encode: ')\n```", "```py\nprint \"Your B64 encoded string is: \" + msg.encode('base64')\n```", "```py\nPlease enter the string to encode: This is an example\nYour B64 encoded string is: VghpcyBpcyBhbiBleGFtcGxl\n\n```", "```py\nfrom string import maketrans, lowercase, uppercase\ndef rot13(message):\n   lower = maketrans(lowercase, lowercase[13:] + lowercase[:13])\n   upper = maketrans(uppercase, uppercase[13:] + uppercase[:13])\n   return message.translate(lower).translate(upper)\nmessage = raw_input('Enter :')\nprint rot13(message)\n```", "```py\nfrom string import maketrans, lowercase, uppercase\n```", "```py\ndef rot13(message):\n   lower = maketrans(lowercase, lowercase[13:] + lowercase[:13])\n   upper = maketrans(uppercase, uppercase[13:] + uppercase[:13])\n   return message.translate(lower).translate(upper)\n```", "```py\nmessage = raw_input('Enter :')\n```", "```py\nprint rot13(message)\n```", "```py\nEnter :This is an example of encoding in Python\nGuvf vf na rknzcyr bs rapbqvat va Clguba\n\n```", "```py\nTaPoGeTaBiGePoHfTmGeYbAtPtHoPoTaAuPtGeAuYbGeBiHoTaTmPtHoTmGePoAuGe ErTaBiHoAuRnTmPbGePoHfTmGeTmRaTaBiPoTmPtHoTmGeAuYbGeTbGeLuTmPtTm PbTbOsGePbTmTaLuPtGeAuYbGeAuPbErTmPbGeTaPtGePtTbPoAtPbTmGeTbPtEr GePoAuGeYbTaPtErGePoHfTmGeHoTbAtBiTmBiGeLuAuRnTmPbPtTaPtLuGePoHf TaBiGeAuPbErTmPbPdGeTbPtErGePoHfTaBiGePbTmYbTmPbBiGeTaPtGeTmTlAt TbOsGeIrTmTbBiAtPbTmGePoAuGePoHfTmGePbTmOsTbPoTaAuPtBiGeAuYbGeIr TbPtGeRhGeBiAuHoTaTbOsGeTbPtErGeHgAuOsTaPoTaHoTbOsGeRhGeTbPtErGePoAuGePoHfTmGeTmPtPoTaPbTmGeAtPtTaRnTmPbBiTmGeTbBiGeTbGeFrHfAuOs TmPd\n```", "```py\nstring = \"TaPoGeTaBiGePoHfTmGeYbAtPtHoPoTaAuPtGeAuYbGeBiHoTaTmPtHoTmGePoA uGeErTaBiHoAuRnTmPbGePoHfTmGeTmRaTaBiPoTmPtHoTmGeAuYbGeTbGeLuTmP tTmPbTbOsGePbTmTaLuPtGeAuYbGeAuPbErTmPbGeTaPtGePtTbPoAtPbTmGeTbP tErGePoAuGeYbTaPtErGePoHfTmGeHoTbAtBiTmBiGeLuAuRnTmPbPtTaPtLuGeP oHfTaBiGeAuPbErTmPbPdGeTbPtErGePoHfTaBiGePbTmYbTmPbBiGeTaPtGeTmT lAtTbOsGeIrTmTbBiAtPbTmGePoAuGePoHfTmGePbTmOsTbPoTaAuPtBiGeAuYbG eIrTbPtGeRhGeBiAuHoTaTbOsGeTbPtErGeHgAuOsTaPoTaHoTbOsGeRhGeTbPtE rGePoAuGePoHfTmGeTmPtPoTaPbTmGeAtPtTaRnTmPbBiTmGeTbBiGeTbGeFrHfA uOsTmPd\"\n\nn=2\nlist = []\nanswer = []\n\n[list.append(string[i:i+n]) for i in range(0, len(string), n)]\n\nprint set(list)\n\nperiodic ={\"Pb\": 82, \"Tl\": 81, \"Tb\": 65, \"Ta\": 73, \"Po\": 84, \"Ge\": 32, \"Bi\": 83, \"Hf\": 72, \"Tm\": 69, \"Yb\": 70, \"At\": 85, \"Pt\": 78, \"Ho\": 67, \"Au\": 79, \"Er\": 68, \"Rn\": 86, \"Ra\": 88, \"Lu\": 71, \"Os\": 76, \"Tl\": 81, \"Pd\": 46, \"Rh\": 45, \"Fr\": 87, \"Hg\": 80, \"Ir\": 77}\n\nfor value in list:\n    if value in periodic:\n        answer.append(chr(periodic[value]))\n\nlastanswer = ''.join(answer)\nprint lastanswer\n```", "```py\nstring = --snipped--\nn=2\nlist = []\nanswer = []\n```", "```py\n[list.append(string[i:i+n]) for i in range(0, len(string), n)]\nprint set(list)\n```", "```py\nperiodic ={\"Pb\": 82, \"Tl\": 81, \"Tb\": 65, \"Ta\": 73, \"Po\": 84, \"Ge\": 32, \"Bi\": 83, \"Hf\": 72, \"Tm\": 69, \"Yb\": 70, \"At\": 85, \"Pt\": 78, \"Ho\": 67, \"Au\": 79, \"Er\": 68, \"Rn\": 86, \"Ra\": 88, \"Lu\": 71, \"Os\": 76, \"Tl\": 81, \"Pd\": 46, \"Rh\": 45, \"Fr\": 87, \"Hg\": 80, \"Ir\": 77}\n```", "```py\nfor value in list:\n    if value in periodic:\n        answer.append(chr(periodic[value]))\n```", "```py\nlastanswer = ''.join(answer)\nprint lastanswer\n```", "```py\nset(['Pt', 'Pb', 'Tl', 'Lu', 'Ra', 'Pd', 'Rn', 'Rh', 'Po', 'Ta', 'Fr', 'Tb', 'Yb', 'Bi', 'Ho', 'Hf', 'Hg', 'Os', 'Ir', 'Ge', 'Tm', 'Au', 'At', 'Er'])\nIT IS THE FUNCTION OF SCIENCE TO DISCOVER THE EXISTENCE OF A GENERAL REIGN OF ORDER IN NATURE AND TO FIND THE CAUSES GOVERNING THIS ORDER. AND THIS REFERS IN EQUAL MEASURE TO THE RELATIONS OF MAN - SOCIAL AND POLITICAL - AND TO THE ENTIRE UNIVERSE AS A WHOLE.\n\n```", "```py\nimport string\ninput = raw_input(\"Please enter the value you would like to Atbash Cipher: \")\ntransform = string.maketrans(\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n\"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\")\nfinal = string.translate(input, transform)\nprint final\n```", "```py\nimport string\ninput = raw_input(\"Please enter the value you would like to Atbash Ciper: \")\n```", "```py\ntransform = string.maketrans(\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n\"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\")\n```", "```py\nfinal = string.translate(input, transform)\nprint final\n```", "```py\nPlease enter the value you would like to Atbash Cipher: testing\ngvhgrmt\n\n```", "```py\nimport sys\nimport string\n\nf = open(\"ciphers.txt\", \"r\")\n\nMSGS = f.readlines()\n\ndef strxor(a, b):  \n    if len(a) > len(b):\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a[:len(b)], b)])\n    else:\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b[:len(a)])])\n\ndef encrypt(key, msg):\n    c = strxor(key, msg)\n    return c\n\nfor msg in MSGS:\nfor value in string.ascii_letters:\nfor value2 in string.ascii_letters:\n  for value3 in string.ascii_letters:\nkey = value+value2+value3\nanswer = encrypt(msg, key)\nprint answer[3:]\n```", "```py\nf = open(\"ciphers.txt\", \"r\")\n\nMSGS = f.readlines()\n```", "```py\ndef strxor(a, b):  \n    if len(a) > len(b):\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a[:len(b)], b)])\n    else:\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b[:len(a)])])\n\ndef encrypt(key, msg):\n    c = strxor(key, msg)\n    return c\n```", "```py\nfor msg in MSGS:\nfor value in string.ascii_letters:\nfor value2 in string.ascii_letters:\n  for value3 in string.ascii_letters:\nkey = value+value2+value3\n```", "```py\nanswer = encrypt(msg, key)\nprint answer[3:]\n```", "```py\nC = \"\"\nA = \"\"\nM = \"\"\n\nprint \"Starting attempt to brute\"\n\nfor i in range(1, 99999999):\n    a = str((A * int(str(i)+'00') + C) % 2**M)\n    if a[-2:] == \"47\":\n        b = str((A * int(a) + C) % 2**M)\n        if b[-2:] == \"46\":\n            c = str((A * int(b) + C) % 2**M)\n            if c[-2:] == \"57\":\n                d = str((A * int(c) + C) % 2**M)\n                if d[-2:] == \"56\":\n                    e = str((A * int(d) + C) % 2**M)\n                    if e[-2:] == \"07\":\n                        f = str((A * int(e) + C) % 2**M)\n                        if f[-2:] == \"38\":\n                            g = str((A * int(f) + C) % 2**M)\n                            if g[-2:] == \"81\":\n                                h = str((A * int(g) + C) % 2**M)\n                                if h[-2:] == \"32\":\n                                    j = str((A * int(h) + C) % 2**M)\n                                    if j[-2:] == \"19\":\n                                        k = str((A * int(j) + C) % 2**M)\n                                        if k[-2:] == \"70\":\n                                            l = str((A * int(k) + C) % 2**M)\n                                            if l[-2:] == \"53\":\n                                                print \"potential number found: \"+l\nprint \"next 9 values are:\"\nfor i in range(1, 10):\n    l = str((A * int(l) + C) % 2**M)\n    print l[-2:]\n```", "```py\nC = \"\"\nA = \"\"\nM = \"\"\n```", "```py\nfor i in range(1, 99999999):\n```", "```py\na = str((A * int(str(i)+'00') + C) % 2**M)\n```", "```py\n    if a[-2:] == \"47\":\n```", "```py\n        b = str((A * int(a) + C) % 2**M)\n```", "```py\nprint \"potential number found: \"+l\n```", "```py\nimport re\ndef hashcheck (hashtype, regexstr, data):\n    try:\n        valid_hash = re.finditer(regexstr, data)\n        result = [match.group(0) for match in valid_hash]\n        if result: \n            return \"This hash matches the format of: \" + hashtype\n    except: pass\nstring_to_check = raw_input('Please enter the hash you wish to check: ')\nhashes = (\n(\"Blowfish(Eggdrop)\", r\"^\\+[a-zA-Z0-9\\/\\.]{12}$\"),\n(\"Blowfish(OpenBSD)\", r\"^\\$2a\\$[0-9]{0,2}?\\$[a-zA-Z0- 9\\/\\.]{53}$\"),\n(\"Blowfish crypt\", r\"^\\$2[axy]{0,1}\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0- 9./]{1,}$\"),\n(\"DES(Unix)\", r\"^.{0,2}[a-zA-Z0-9\\/\\.]{11}$\"),\n(\"MD5(Unix)\", r\"^\\$1\\$.{0,8}\\$[a-zA-Z0-9\\/\\.]{22}$\"),\n(\"MD5(APR)\", r\"^\\$apr1\\$.{0,8}\\$[a-zA-Z0-9\\/\\.]{22}$\"),\n(\"MD5(MyBB)\", r\"^[a-fA-F0-9]{32}:[a-z0-9]{8}$\"),\n(\"MD5(ZipMonster)\", r\"^[a-fA-F0-9]{32}$\"),\n(\"MD5 crypt\", r\"^\\$1\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"MD5 apache crypt\", r\"^\\$apr1\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0- 9./]{1,}$\"),\n(\"MD5(Joomla)\", r\"^[a-fA-F0-9]{32}:[a-zA-Z0-9]{16,32}$\"),\n(\"MD5(Wordpress)\", r\"^\\$P\\$[a-zA-Z0-9\\/\\.]{31}$\"),\n(\"MD5(phpBB3)\", r\"^\\$H\\$[a-zA-Z0-9\\/\\.]{31}$\"),\n(\"MD5(Cisco PIX)\", r\"^[a-zA-Z0-9\\/\\.]{16}$\"),\n(\"MD5(osCommerce)\", r\"^[a-fA-F0-9]{32}:[a-zA-Z0-9]{2}$\"),\n(\"MD5(Palshop)\", r\"^[a-fA-F0-9]{51}$\"),\n(\"MD5(IP.Board)\", r\"^[a-fA-F0-9]{32}:.{5}$\"),\n(\"MD5(Chap)\", r\"^[a-fA-F0-9]{32}:[0-9]{32}:[a-fA-F0-9]{2}$\"),\n(\"Juniper Netscreen/SSG (ScreenOS)\", r\"^[a-zA-Z0-9]{30}:[a-zA-Z0- 9]{4,}$\"),\n(\"Fortigate (FortiOS)\", r\"^[a-fA-F0-9]{47}$\"),\n(\"Minecraft(Authme)\", r\"^\\$sha\\$[a-zA-Z0-9]{0,16}\\$[a-fA-F0- 9]{64}$\"),\n(\"Lotus Domino\", r\"^\\(?[a-zA-Z0-9\\+\\/]{20}\\)?$\"),\n(\"Lineage II C4\", r\"^0x[a-fA-F0-9]{32}$\"),\n(\"CRC-96(ZIP)\", r\"^[a-fA-F0-9]{24}$\"),\n(\"NT crypt\", r\"^\\$3\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"Skein-1024\", r\"^[a-fA-F0-9]{256}$\"),\n(\"RIPEMD-320\", r\"^[A-Fa-f0-9]{80}$\"),\n(\"EPi hash\", r\"^0x[A-F0-9]{60}$\"),\n(\"EPiServer 6.x < v4\", r\"^\\$episerver\\$\\*0\\*[a-zA-Z0-9]{22}==\\*[a- zA-Z0-9\\+]{27}$\"),\n(\"EPiServer 6.x >= v4\", r\"^\\$episerver\\$\\*1\\*[a-zA-Z0- 9]{22}==\\*[a-zA-Z0-9]{43}$\"),\n(\"Cisco IOS SHA256\", r\"^[a-zA-Z0-9]{43}$\"),\n(\"SHA-1(Django)\", r\"^sha1\\$.{0,32}\\$[a-fA-F0-9]{40}$\"),\n(\"SHA-1 crypt\", r\"^\\$4\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"SHA-1(Hex)\", r\"^[a-fA-F0-9]{40}$\"),\n(\"SHA-1(LDAP) Base64\", r\"^\\{SHA\\}[a-zA-Z0-9+/]{27}=$\"),\n(\"SHA-1(LDAP) Base64 + salt\", r\"^\\{SSHA\\}[a-zA-Z0- 9+/]{28,}[=]{0,3}$\"),\n(\"SHA-512(Drupal)\", r\"^\\$S\\$[a-zA-Z0-9\\/\\.]{52}$\"),\n(\"SHA-512 crypt\", r\"^\\$6\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"SHA-256(Django)\", r\"^sha256\\$.{0,32}\\$[a-fA-F0-9]{64}$\"),\n(\"SHA-256 crypt\", r\"^\\$5\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"SHA-384(Django)\", r\"^sha384\\$.{0,32}\\$[a-fA-F0-9]{96}$\"),\n(\"SHA-256(Unix)\", r\"^\\$5\\$.{0,22}\\$[a-zA-Z0-9\\/\\.]{43,69}$\"),\n(\"SHA-512(Unix)\", r\"^\\$6\\$.{0,22}\\$[a-zA-Z0-9\\/\\.]{86}$\"),\n(\"SHA-384\", r\"^[a-fA-F0-9]{96}$\"),\n(\"SHA-512\", r\"^[a-fA-F0-9]{128}$\"),\n(\"SSHA-1\", r\"^({SSHA})?[a-zA-Z0-9\\+\\/]{32,38}?(==)?$\"),\n(\"SSHA-1(Base64)\", r\"^\\{SSHA\\}[a-zA-Z0-9]{32,38}?(==)?$\"),\n(\"SSHA-512(Base64)\", r\"^\\{SSHA512\\}[a-zA-Z0-9+]{96}$\"),\n(\"Oracle 11g\", r\"^S:[A-Z0-9]{60}$\"),\n(\"SMF >= v1.1\", r\"^[a-fA-F0-9]{40}:[0-9]{8}&\"),\n(\"MySQL 5.x\", r\"^\\*[a-f0-9]{40}$\"),\n(\"MySQL 3.x\", r\"^[a-fA-F0-9]{16}$\"),\n(\"OSX v10.7\", r\"^[a-fA-F0-9]{136}$\"),\n(\"OSX v10.8\", r\"^\\$ml\\$[a-fA-F0-9$]{199}$\"),\n(\"SAM(LM_Hash:NT_Hash)\", r\"^[a-fA-F0-9]{32}:[a-fA-F0-9]{32}$\"),\n(\"MSSQL(2000)\", r\"^0x0100[a-f0-9]{0,8}?[a-f0-9]{80}$\"),\n(\"MSSQL(2005)\", r\"^0x0100[a-f0-9]{0,8}?[a-f0-9]{40}$\"),\n(\"MSSQL(2012)\", r\"^0x02[a-f0-9]{0,10}?[a-f0-9]{128}$\"),\n(\"TIGER-160(HMAC)\", r\"^[a-f0-9]{40}$\"),\n(\"SHA-256\", r\"^[a-fA-F0-9]{64}$\"),\n(\"SHA-1(Oracle)\", r\"^[a-fA-F0-9]{48}$\"),\n(\"SHA-224\", r\"^[a-fA-F0-9]{56}$\"),\n(\"Adler32\", r\"^[a-f0-9]{8}$\"),\n(\"CRC-16-CCITT\", r\"^[a-fA-F0-9]{4}$\"),\n(\"NTLM)\", r\"^[0-9A-Fa-f]{32}$\"),\n)\ncounter = 0\nfor h in hashes:\n    text = hashcheck(h[0], h[1], string_to_check)\n    if text is not None:\n        counter += 1\n        print text\nif counter == 0:\n    print \"Your input hash did not match anything, sorry!\"\n```", "```py\ndef hashcheck (hashtype, regexstr, data):\n    try:\n        valid_hash = re.finditer(regexstr, data)\n        result = [match.group(0) for match in valid_hash]\n        if result: \n            return \"This hash matches the format of: \" + hashtype\n    except: pass\n```", "```py\nstring_to_check = raw_input('Please enter the hash you wish to check: ')\n```", "```py\nhashes = (\n(\"Blowfish(Eggdrop)\", r\"^\\+[a-zA-Z0-9\\/\\.]{12}$\"),\n(\"Blowfish(OpenBSD)\", r\"^\\$2a\\$[0-9]{0,2}?\\$[a-zA-Z0- 9\\/\\.]{53}$\"),\n(\"Blowfish crypt\", r\"^\\$2[axy]{0,1}\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0- 9./]{1,}$\"),\n(\"DES(Unix)\", r\"^.{0,2}[a-zA-Z0-9\\/\\.]{11}$\"),\n(\"MD5(Unix)\", r\"^\\$1\\$.{0,8}\\$[a-zA-Z0-9\\/\\.]{22}$\"),\n(\"MD5(APR)\", r\"^\\$apr1\\$.{0,8}\\$[a-zA-Z0-9\\/\\.]{22}$\"),\n(\"MD5(MyBB)\", r\"^[a-fA-F0-9]{32}:[a-z0-9]{8}$\"),\n(\"MD5(ZipMonster)\", r\"^[a-fA-F0-9]{32}$\"),\n(\"MD5 crypt\", r\"^\\$1\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0-9./]{1,}$\"),\n(\"MD5 apache crypt\", r\"^\\$apr1\\$[a-zA-Z0-9./]{8}\\$[a-zA-Z0- 9./]{1,}$\"),\n(\"MD5(Joomla)\", r\"^[a-fA-F0-9]{32}:[a-zA-Z0-9]{16,32}$\"),\n(\"MD5(Wordpress)\", r\"^\\$P\\$[a-zA-Z0-9\\/\\.]{31}$\"),\n(\"MD5(phpBB3)\", r\"^\\$H\\$[a-zA-Z0-9\\/\\.]{31}$\"),\n(\"MD5(Cisco PIX)\", r\"^[a-zA-Z0-9\\/\\.]{16}$\"),\n(\"MD5(osCommerce)\", r\"^[a-fA-F0-9]{32}:[a-zA-Z0-9]{2}$\"),\n(\"MD5(Palshop)\", r\"^[a-fA-F0-9]{51}$\"),\n(\"MD5(IP.Board)\", r\"^[a-fA-F0-9]{32}:.{5}$\"),\n(\"MD5(Chap)\", r\"^[a-fA-F0-9]{32}:[0-9]{32}:[a-fA-F0-9]{2}$\"),\n[...cut out...]\n(\"NTLM)\", r\"^[0-9A-Fa-f]{32}$\"),\n)\n```", "```py\ncounter = 0\nfor h in hashes:\n    text = hashcheck(h[0], h[1], string_to_check)\n    if text is not None:\n        counter += 1\n        print text\n```", "```py\nif counter == 0:\n    print \"Your input hash did not match anything, sorry!\"\n```", "```py\nPlease enter the hash you wish to check: ok\nNo Matches\n\n```", "```py\nPlease enter the hash you wish to check: fd7a4c43ad7c20dbea0dc6dacc12ef6c36c2c382a0111c92f24244690eba65a2\nThis hash matches the format of: SHA-256\n\n```"]