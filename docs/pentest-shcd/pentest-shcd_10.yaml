- en: Real-World Scenarios – Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实场景-第2部分
- en: In this chapter, we will practice exploit development but from a different approach,
    which is our vulnerable parameter that will be inside the HTTP header. We will
    look at how to intercept and see the actual content of the HTTP header.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将练习利用开发，但从不同的角度，即我们的易受攻击的参数将在HTTP标头中。我们将看看如何拦截并查看HTTP标头的实际内容。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Sync Breeze Enterprise
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步Breeze企业
- en: Fuzzing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊测试
- en: Controlling the instruction pointer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制指令指针
- en: Injecting shellcode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入shellcode
- en: Sync Breeze Enterprise
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步Breeze企业
- en: Our scenario today will be Sync Breeze Enterprise V.10.0.28\. You can see the
    exploit at [https://www.exploit-db.com/exploits/42928/](https://www.exploit-db.com/exploits/42928/)
    and you can download the vulnerable version from it or [https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe](https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天的场景将是Sync Breeze Enterprise V.10.0.28。您可以在[https://www.exploit-db.com/exploits/42928/](https://www.exploit-db.com/exploits/42928/)上看到攻击，也可以从中下载易受攻击的版本或[https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe](https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe)。
- en: 'Download and install it. Then open it and go to Tools | Advanced Options |
    Server. Make sure that Enable Web Server on Port: 80 is activated:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装它。然后打开它，转到工具|高级选项|服务器。确保启用端口80上的Web服务器已激活：
- en: '![](img/00355.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00355.jpeg)
- en: 'Save the changes. Then, from our attacking machine and via Firefox, let''s
    connect to this service using port `80`, which gives us this page:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改。然后，从我们的攻击机器上，通过Firefox，使用端口`80`连接到此服务，这给了我们这个页面：
- en: '![](img/00356.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00356.jpeg)
- en: 'Now, let''s try to perform some fuzzing on the login''s parameter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试对登录参数进行一些模糊测试：
- en: '![](img/00357.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00357.jpeg)
- en: Fuzzing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊测试
- en: 'Now, let''s generate some `A` characters using Python:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用Python生成一些`A`字符：
- en: '![](img/00358.gif)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00358.gif)
- en: 'Let''s copy this string and use it as input for this login form:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复制此字符串并将其用作此登录表单的输入：
- en: '![](img/00359.gif)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00359.gif)
- en: 'Then, let''s copy the actual input from this window and get the length of the
    actual input:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们从此窗口复制实际输入并获取实际输入的长度：
- en: '![](img/00360.gif)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00360.gif)
- en: 'The actual length of the input is `64` and we injected `100`. There is something
    at the client side that prevents us from injecting more than `64` characters.
    Let''s confirm it just by right-clicking on the `username` text input and then
    navigating to Inspect | Elements:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的实际长度为`64`，我们注入了`100`。客户端端有一些东西阻止我们注入超过`64`个字符。只需右键单击“用户名”文本输入，然后导航到检查|元素即可确认：
- en: '![](img/00361.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00361.jpeg)
- en: We can simply change the `maxlength="64"` value and continue with the fuzzing,
    but we need to build our exploit. Let's try to look inside the HTTP header, using
    any proxy application, such as Burp Suite or OWASP **Zed Attack Proxy** (**ZAP**).
    I'm going to use Burp Suite here and set up a proxy so that I can intercept this
    HTTP header.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地更改`maxlength="64"`的值并继续进行模糊测试，但我们需要构建我们的攻击。让我们尝试使用任何代理应用程序，如Burp Suite或OWASP
    ** Zed Attack Proxy **（** ZAP **）查看HTTP标头的内容。我将在这里使用Burp Suite并设置代理，以便我可以拦截此HTTP标头。
- en: 'Start Burp Suite, then go to Proxy | Options, and make sure that Burp Suite
    is listening on port `8080` on the loopback address `127.0.0.1`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Burp Suite，然后转到代理|选项，并确保Burp Suite正在侦听环回地址127.0.0.1上的端口`8080`：
- en: '![](img/00362.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00362.jpeg)
- en: 'Then, through your browser, set a proxy on the loopback address `127.0.0.1`
    using port `8080`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过您的浏览器，使用端口`8080`在环回地址`127.0.0.1`上设置代理：
- en: '![](img/00363.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00363.jpeg)
- en: 'Make the login page ready and activate the intercept in Burp Suite by navigating
    to Proxy | Intercept:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 准备登录页面，并通过导航到代理|拦截来激活Burp Suite中的拦截：
- en: '![](img/00364.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00364.jpeg)
- en: 'Now, the intercept is ready. Let''s inject any number of characters in the
    login form and then click on Login and get back to Burp Suite:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，拦截已准备就绪。让我们在登录表单中注入任意数量的字符，然后单击登录并返回到Burp Suite：
- en: '![](img/00365.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00365.jpeg)
- en: 'Close Burp Suite. Set the proxy back to normal and let''s build our fuzzing
    code using this header and fuzzing the `username` parameter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Burp Suite。将代理设置回正常状态，然后使用此标头构建我们的模糊代码并对`用户名`参数进行模糊测试：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s start with `300`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`300`开始：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, attach Sync Breeze to the Immunity Debugger (run the Immunity Debugger
    as an administrator):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将Sync Breeze附加到Immunity Debugger（以管理员身份运行Immunity Debugger）：
- en: '![](img/00366.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00366.jpeg)
- en: Make sure to attach it to the server (`syncbrs`), not the client (`syncbrc`),
    then hit the run program.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将其附加到服务器（`syncbrs`），而不是客户端（`syncbrc`），然后点击运行程序。
- en: 'Now, start the exploit code on our attacking machine:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的攻击机器上启动攻击代码：
- en: '![](img/00367.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00367.jpeg)
- en: 'Nothing happened. Let''s increase the fuzzing value to `700`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 什么也没发生。让我们将模糊值增加到`700`：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, re-run the exploit:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新运行攻击：
- en: '![](img/00368.gif)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00368.gif)
- en: 'Again nothing happened. Let''s increase the fuzzing value to `1000`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次什么也没发生。让我们将模糊值增加到`1000`：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, re-run the exploit:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新运行攻击：
- en: '![](img/00369.gif)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00369.gif)
- en: 'It worked! Let''s take a look at the registers too:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！让我们也看看寄存器：
- en: '![](img/00370.gif)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00370.gif)
- en: 'There are the `A` characters in the stack:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈中有`A`字符：
- en: '![](img/00371.gif)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00371.gif)
- en: Controlling the instruction pointer
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制指令指针
- en: 'Okay, perfect. Let''s create the pattern to get the offset of the EIP:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，完美。让我们创建模式以获取EIP的偏移量：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, reset the junk value to the new pattern:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将垃圾值重置为新模式：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Close the Immunity Debugger and go to Task Manager | Services | Services...;
    now, select Sync Breeze Enterprise and then select Start to start the service
    again:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Immunity Debugger，转到任务管理器|服务|服务...;现在，选择Sync Breeze Enterprise，然后选择开始以重新启动服务：
- en: '![](img/00372.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00372.jpeg)
- en: 'Then, make sure that the program is running and connected:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确保程序正在运行并已连接：
- en: '![](img/00373.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00373.jpeg)
- en: Now, run the Immunity Debugger (as an administrator) again, attach `syncbrs`,
    and hit the run program.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次以管理员身份运行Immunity Debugger，附加`syncbrs`，并运行程序。
- en: 'Then, run the exploit from the attacking machine:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从攻击机器上运行攻击：
- en: '![](img/00374.gif)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00374.gif)'
- en: 'The EIP value now is `42306142`; let''s locate this exact offset of EIP:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在EIP值是`42306142`；让我们找到这个确切的EIP偏移量：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output for the preceding command can be seen in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出可以在以下截图中看到：
- en: '![](img/00375.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00375.jpeg)'
- en: 'Also, we could use the `mona` plugin inside the Immunity Debugger:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以在Immunity Debugger中使用`mona`插件：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出可以在以下截图中看到：
- en: '![](img/00376.gif)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00376.gif)'
- en: 'Let''s confirm:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Close the Immunity Debugger and start the Sync Breeze Enterprise service and
    make sure the program is running and connected. Then, start the Immunity Debugger
    (as an administrator), attach `syncbrs`, and hit the run program.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Immunity Debugger并启动Sync Breeze Enterprise服务，并确保程序正在运行和连接。然后，启动Immunity Debugger（作为管理员），附加`syncbrs`，并运行程序。
- en: 'Then, re-run the exploit:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新运行攻击：
- en: '![](img/00377.gif)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00377.gif)'
- en: 'Now, we can control the instruction pointer:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以控制指令指针：
- en: '![](img/00378.gif)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00378.gif)'
- en: Injecting shell code
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入shell代码
- en: 'So, our final injection should look like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最终的注入应该是这样的：
- en: '![](img/00379.gif)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00379.gif)'
- en: Close the Immunity Debugger and start the Sync Breeze Enterprise service and
    make sure the program is running and connected. Then start the Immunity Debugger,
    attach `syncbrs`, and hit the run program.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Immunity Debugger并启动Sync Breeze Enterprise服务，并确保程序正在运行和连接。然后启动Immunity Debugger，附加`syncbrs`，并运行程序。
- en: 'Okay, let''s find `JMP ESP`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们找到`JMP ESP`：
- en: '![](img/00380.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00380.jpeg)'
- en: 'Then, search for `JMP ESP`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，搜索`JMP ESP`：
- en: '![](img/00381.gif)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00381.gif)'
- en: 'We got a long list of them; let''s just pick one, `10090c83`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一个很长的列表；让我们随便选一个，`10090c83`：
- en: We selected this address because this location is persistent to the application
    (`libspp.dll`). If we selected an address related to the system (such as `SHELL32.dll`
    or `USER32.dll`), then that address would change every time the system reboots.
    As we saw in the previous chapter, it would only work in the runtime and would
    be useless when the system reboots.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了这个地址，因为这个位置对应应用程序（`libspp.dll`）是持久的。如果我们选择了与系统相关的地址（如`SHELL32.dll`或`USER32.dll`），那么该地址会在系统重新启动时发生变化。正如我们在上一章中看到的，它只在运行时起作用，在系统重新启动时将无效。
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s also set up the NOP sled:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也设置NOP sled：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s generate a bind TCP shell code on port `4321`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在端口`4321`上生成一个绑定TCP shell代码：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output for the preceding command can be seen in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出可以在以下截图中看到：
- en: '![](img/00382.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00382.jpeg)'
- en: 'Our final exploit code should look like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的攻击代码应该是这样的：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ready! Let's close the Immunity Debugger and start the Sync Breeze Enterprise
    service; then, run the exploit.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了！让我们关闭Immunity Debugger并启动Sync Breeze Enterprise服务；然后运行攻击。
- en: 'Now, connect the victim machine using the `nc` command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`nc`命令连接受害机：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for the preceding command can be seen in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出可以在以下截图中看到：
- en: '![](img/00383.gif)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00383.gif)'
- en: It worked!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we performed the same steps as we did in the previous chapter,
    but we added a small part related to the HTTP header. What I want you to do is
    to navigate in [www.exploit-db.com](http://www.exploit-db.com), try to find any
    buffer overflow, and make your own exploits as we did here. The more you practice,
    the more you will master this attack!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们执行了与上一章相同的步骤，但是增加了与HTTP头部相关的一小部分。我希望你能在[www.exploit-db.com](http://www.exploit-db.com)中浏览，尝试找到任何缓冲区溢出，并像我们在这里做的那样制作自己的攻击。你练习得越多，就会越精通这种攻击！
- en: In the next chapter, we will take a look at a complete practical example of **structured
    exception handling** (**SEH**).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一个完整的**结构化异常处理**（**SEH**）的实际例子。
