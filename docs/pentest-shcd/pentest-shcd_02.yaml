- en: Lab Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验室设置
- en: In this chapter, we are going to set up an isolated lab to use for the rest
    of this book. We will see how to install tools such as Metasploit Framework in
    order to create shellcodes and exploit development. We will also see how to install
    C language IDE and a compiler for Microsoft Windows, before looking at the Python
    programming language for Windows and Linux. Then, we will look at installing and
    getting familiar with debugger interfaces
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将建立一个隔离的实验室，用于本书的其余部分。我们将看到如何安装诸如Metasploit框架之类的工具，以创建shellcode和利用开发。我们还将看到如何在Microsoft
    Windows上安装C语言IDE和编译器，然后再看看Windows和Linux上的Python编程语言。然后，我们将看看安装和熟悉调试器界面
- en: Primarily, we will need three machines. The first is an attacker to simulate
    remote attacking, and that will be Linux OS. Here, I prefer Kali Linux because
    it contains all the tools we will need, along with which we will be going to install
    some extra tools. The second will be Ubuntu 14.04 LTS x64, and the third will
    be Windows 7 x64.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要三台机器。第一台是用于模拟远程攻击的攻击者，将是Linux操作系统。在这里，我更喜欢Kali Linux，因为它包含了我们需要的所有工具，另外我们还将安装一些额外的工具。第二台将是Ubuntu
    14.04 LTS x64，第三台将是Windows 7 x64。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Configuring the attacker machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置攻击者机器
- en: Configuring the Linux victim machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Linux受害者机器
- en: Configuring the Windows victim machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Windows受害者机器
- en: Configuring the Linux victim machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Linux受害者机器
- en: Configuring Ubuntu for assembly x86
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Ubuntu以进行x86汇编
- en: Networking
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: You can use VMware, KVM, or VirtualBox, but make sure you select the host-only
    network because we don't want to expose those vulnerable machines to the outside
    world.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用VMware、KVM或VirtualBox，但请确保选择仅主机网络，因为我们不希望将这些易受攻击的机器暴露给外部世界。
- en: Configuring the attacker machine
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置攻击者机器
- en: 'As I said earlier, the attacker machine will be our main base and I prefer
    Kali Linux, but if you are going to use another distribution, then you have to
    install the following packages:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，攻击者机器将是我们的主要基地，我更喜欢Kali Linux，但如果您要使用其他发行版，那么您必须安装以下软件包：
- en: 'First, we need to make sure that the C compiler is installed; use the `gcc
    -v` command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保C编译器已安装；使用`gcc -v`命令：
- en: '![](img/00034.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: If not, just install it using `$ sudo apt-get install gcc` (Debian distributions)
    or `$ sudo yum install gcc` (Red Hat distributions). Accept and install `gcc`
    with its dependencies.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有，只需使用`$ sudo apt-get install gcc`（Debian发行版）或`$ sudo yum install gcc`（Red
    Hat发行版）。接受并安装带有其依赖项的`gcc`。
- en: 'Also, we are going to use the Python programming language in exploit development.
    Python comes by default with most Linux distributions, and to make sure that it''s
    installed, just use `$ python -V` or just `python`. Then, the Python interpreter
    will start (hit *Ctrl* + *D* to exit):'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们将在利用开发中使用Python编程语言。Python默认随大多数Linux发行版一起安装，要确保它已安装，只需使用`$ python -V`或`python`。然后，Python解释器将启动（按*Ctrl*
    + *D*退出）：
- en: '![](img/00035.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: For text editors, I use `nano` as my CLI text editor and `atom` as my GUI text
    editor; `nano` also comes with most Linux distributions.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于文本编辑器，我使用`nano`作为我的CLI文本编辑器，`atom`作为我的GUI文本编辑器；`nano`也随大多数Linux发行版一起安装。
- en: If you want to install `atom`, go to [https://github.com/atom/atom/releases/](https://github.com/atom/atom/releases/),
    and you will find a beta release and stable release. Then, download the Atom package
    for your system, `.deb` or `.rpm` and install it using `$ sudo dpkg -i package-name.deb`
    (Debian distribution) or `$ sudo rpm -i package-name.rpm` (Red Hat distribution).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要安装`atom`，请转到[https://github.com/atom/atom/releases/](https://github.com/atom/atom/releases/)，您将找到一个测试版和稳定版。然后，根据您的系统下载Atom软件包，`.deb`或`.rpm`，并使用`$
    sudo dpkg -i package-name.deb`（Debian发行版）或`$ sudo rpm -i package-name.rpm`（Red
    Hat发行版）进行安装。
- en: 'This is what the Atom interface looks like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Atom界面的样子：
- en: '![](img/00036.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: 'We are going to use the Metasploit Framework when creating shellcode and also
    in exploit development. To install Metasploit, I recommend you use the all-in-one
    installer via [https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers](https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers).
    This script is going to install Metasploit along with its dependencies (Ruby and
    PostgreSQL). Look at the next example (installing Metasploit on ARM, but it''s
    the same as Intel):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建shellcode和利用开发时，我们将使用Metasploit框架。要安装Metasploit，我建议您使用全自动安装程序通过[https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers](https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers)。这个脚本将安装Metasploit以及它的依赖项（Ruby和PostgreSQL）。看下一个例子（在ARM上安装Metasploit，但与Intel相同）：
- en: 'First, we fetch the installer using the `curl` command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用`curl`命令获取安装程序：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we give it an appropriate permission using the `chmod` command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`chmod`命令给予适当的权限：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, start the installer:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，启动安装程序：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And now it will start downloading Metasploit Framework along with its dependencies.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在它将开始下载Metasploit框架以及它的依赖项。
- en: 'To create a database for Metasploit Framework, just use `msfconsole` and follow
    the instructions:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为Metasploit框架创建数据库，只需使用`msfconsole`并按照说明操作：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, it will set up a new database and Metasploit Framework starts:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将设置一个新的数据库，Metasploit框架开始：
- en: '![](img/00037.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: As we are going to use assembly programming language, let's take a look at the
    assembler (`nasm`) and the linker (`ld`).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将使用汇编编程语言，让我们看看汇编器（`nasm`）和链接器（`ld`）。
- en: 'First, we need to install `nasm` by using `$ sudo apt-get install nasm` (Debian
    distributions). For Red Hat distributions, according to NASM''s website, you first need
    to add this repository to your `/etc/yum/yum.repos.d` as `nasm.repo`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`$ sudo apt-get install nasm`来安装`nasm`（Debian发行版）。对于Red Hat发行版，根据NASM的网站，您首先需要将此存储库添加到您的`/etc/yum/yum.repos.d`中作为`nasm.repo`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, use `$ sudo yum update && sudo yum install nasm` to update and install
    `nasm` and `$ nasm -v` to get NASM''s version:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`$ sudo yum update && sudo yum install nasm`来更新和安装`nasm`，以及`$ nasm -v`来获取NASM的版本：
- en: '![](img/00038.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'Use the command `$ ld -v` to get the linker''s version:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令`$ ld -v`来获取链接器的版本：
- en: '![](img/00039.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: Configuring Linux victim machine
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Linux受害机器
- en: This machine will be Ubuntu 14.04 x64\. You can download it from  [http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/).
    Also, we have to follow previous instructions for `gcc`, Python, and `nasm`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这台机器将是Ubuntu 14.04 x64。您可以从[http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/)下载它。此外，我们必须遵循先前的指示来安装`gcc`，Python和`nasm`。
- en: Now, let's install a very friendly GUI named edb-debugger. You can follow this
    page, [https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu)](https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu))
    or follow the next instruction.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装一个非常友好的GUI，名为edb-debugger。您可以按照此页面[https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu)](https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu))或按照下一个指示。
- en: 'First, install dependencies, using the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下命令安装依赖项：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, clone and compile Capstone 3.0.4, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，克隆并编译Capstone 3.0.4，如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, clone and compile edb-debugger, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，克隆并编译edb-debugger，如下所示：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, start edb-debugger using the `$ sudo ./edb` command, which opens the
    following window:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`$ sudo ./edb`命令启动edb-debugger，打开以下窗口：
- en: '![](img/00040.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: 'As we can see, edb-debugger has the following four windows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，edb-debugger有以下四个窗口：
- en: The disassembler window converts the machine language into assembly language
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反汇编窗口将机器语言转换为汇编语言
- en: The Registers window contains all the current contents of all registers
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寄存器窗口包含所有寄存器的当前内容
- en: The Data Dump window contains the memory dump for the current process
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转储窗口包含当前进程的内存转储
- en: The Stack window contains the contents of the stack for the current process
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈窗口包含当前进程的堆栈内容
- en: Now to the final step. It's necessary to disable **Address Space Layout Randomization** (**ASLR**)
    for learning purposes. It's a security mechanism in Linux, and we will talk about
    it later.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在到最后一步。为了学习目的，需要禁用**地址空间布局随机化**（**ASLR**）。这是Linux中的一种安全机制，我们稍后会谈论它。
- en: Just execute the `$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space` command.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只需执行`$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space`命令。
- en: 'Also, we are going to disable the stack protector and NX when using `gcc` when
    compiling is done, using:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将在使用`gcc`进行编译时禁用堆栈保护程序和NX，使用：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring Windows victim machine
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Windows受害机器
- en: Here, we are going to configure a Windows machine as a victim machine, which
    is Windows 7 x64.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将配置Windows机器作为受害机器，这是Windows 7 x64。
- en: First, we need to install C compiler and IDE, I suggest *Code::Blocks*, and
    to install it, download the binary from [http://www.codeblocks.org/downloads/binaries.](http://www.codeblocks.org/downloads/binaries) Here,
    I'm going to install `codeblocks-16.01mingw-setup.exe` (the latest version). Download
    and install the `mingw` version.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装C编译器和IDE，我建议使用*Code::Blocks*，要安装它，从[http://www.codeblocks.org/downloads/binaries.](http://www.codeblocks.org/downloads/binaries)下载二进制文件。在这里，我将安装`codeblocks-16.01mingw-setup.exe`（最新版本）。下载并安装`mingw`版本。
- en: 'At the first boot of *Code::Blocks*, a window will pop up to configure the
    compiler. Select GNU GCC Compiler, click Set as default, and then click OK:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次启动*Code::Blocks*时，将弹出一个窗口以配置编译器。选择GNU GCC Compiler，点击Set as default，然后点击OK：
- en: '![](img/00041.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: 'Then, the IDE interface will pop up:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，IDE界面将弹出：
- en: '![](img/00042.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: Now we have a C compiler and IDE. Now, let's move to installing debuggers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了C编译器和IDE。现在，让我们转向安装调试器。
- en: 'First, we need *Immunity Debugger* for x86; download Immunity from [https://debugger.immunityinc.com/ID_register.py](https://debugger.immunityinc.com/ID_register.py).
    Fill this form in, download, and then install it using the default settings, and
    it will ask you to confirm installing Python. After that we need to install a
    plugin for a debugger named `mona`, created by the Corelan team, [https://www.corelan.be](https://www.corelan.be).
    It''s a wonderful plugin that will help us in exploit development. Download the `mona.py`
    file from their GitHub repository, [https://github.com/corelan/mona](https://github.com/corelan/mona),
    then copy it to `C:\Program Files (x86)\Immunity Inc\Immunity Debugger\Immunit\PyCommands`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要x86的*Immunity Debugger*；从[https://debugger.immunityinc.com/ID_register.py](https://debugger.immunityinc.com/ID_register.py)下载Immunity。填写这个表格，下载，然后使用默认设置安装它，它会要求您确认安装Python。之后，我们需要安装一个名为`mona`的调试器插件，由Corelan团队创建，[https://www.corelan.be](https://www.corelan.be)。这是一个很棒的插件，将帮助我们进行利用开发。从他们的GitHub存储库[https://github.com/corelan/mona](https://github.com/corelan/mona)下载`mona.py`文件，然后将其复制到`C:\Program
    Files (x86)\Immunity Inc\Immunity Debugger\Immunit\PyCommands`：
- en: '![](img/00043.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: This is what the Immunity Debugger looks like, and it consists of four major
    windows, exactly as explained in edb-debugger.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Immunity Debugger的外观，它由四个主要窗口组成，正如在edb-debugger中所解释的那样。
- en: 'Also, we now have Python, and to confirm, just navigate to `C:\Python27\`.
    Then, click on Python, and the Python interpreter will pop up:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们现在有Python，要确认，只需导航到`C:\Python27\`。然后，点击Python，Python解释器将弹出：
- en: '![](img/00044.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: Now, let's install x64dbg. It's also a debugger for Windows x86 and also x64,
    but when it comes to x86 Windows, there is nothing better than Immunity Debugger.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装x64dbg。这也是Windows x86和x64的调试器，但是当涉及到x86 Windows时，没有比Immunity Debugger更好的了。
- en: 'Go to [https://sourceforge.net/projects/x64dbg/files/snapshots/](https://sourceforge.net/projects/x64dbg/files/snapshots/),
    then download the latest version. Uncompress it and then navigate to `/release`
    to start **x96dbg**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://sourceforge.net/projects/x64dbg/files/snapshots/](https://sourceforge.net/projects/x64dbg/files/snapshots/)，然后下载最新版本。解压缩然后导航到`/release`以启动**x96dbg**：
- en: '![](img/00045.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: 'Then, click x64dbg:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击x64dbg：
- en: '![](img/00046.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'Now we are looking at the x64dbg interface, which also contains four major
    windows, exactly as explained in edb-debugger:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在看x64dbg界面，它也包含四个主要窗口，正如在edb-debugger中所解释的那样：
- en: '![](img/00047.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: Configuring Ubuntu for assembly x86
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为汇编x86配置Ubuntu
- en: This is not mandatory for this book, but has been included for if you want to
    try assembly for x86\. The machine used will be Ubuntu 14.04 x86, and you can
    download it from [http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于本书来说并不是强制性的，但如果您想尝试x86汇编，它已经包含在内。使用的机器将是Ubuntu 14.04 x86，您可以从[http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/)下载。
- en: We have to follow the previous instructions to install NASM, GCC, the text editor,
    and I'm going to use GDB as my debugger.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须遵循先前的说明来安装NASM、GCC、文本编辑器，我将使用GDB作为我的调试器。
- en: Networking
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: As we are going to run vulnerable applications for doing exploit research on
    our victim machines and injecting shellcodes, we have to set up a secure network
    after configuring each machine. This is done using a host-only network mode to
    make sure that all machines are connected together, but that they will still be
    offline and not exposed to the outside world.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在受害者机器上运行易受攻击的应用程序进行利用研究和注入shellcode，因此在配置每台机器后，我们必须建立一个安全的网络。这是通过使用主机模式来确保所有机器连接在一起，但它们仍然是脱机的，不会暴露在外部世界中。
- en: 'If you are using VirtualBox, then go to Preferences | Network and set up Host-only
    Networks:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是VirtualBox，则转到首选项|网络并设置主机模式网络：
- en: '![](img/00048.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'Then, set up an IP range that doesn''t conflict with your external IP, for
    example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置一个与外部IP不冲突的IP范围，例如：
- en: '**IP address**: `192.168.100.1`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP地址**：`192.168.100.1`'
- en: '**Netmask**: `255.255.255.0`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网掩码**：`255.255.255.0`'
- en: Then, you can activate the DHCP server from the DHCP Server tab.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以从DHCP服务器选项卡激活DHCP服务器。
- en: 'You should see it in your `ifconfig`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在您的`ifconfig`中看到它：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, activate this network (for example, `vboxnet0`) on your guest machine''s
    adapter:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您的客户机适配器上激活此网络（例如，`vboxnet0`）：
- en: '![](img/00049.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: 'If you are using VMware Workstation, go to Edit | Virtual Network Editor:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是VMware Workstation，请转到编辑|虚拟网络编辑器：
- en: '![](img/00050.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'Also, you can make sure that the host-only network is up:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以确保主机模式网络已启动：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, from the guest machine settings, go to Network Adapter, and select Host-only:
    A private network shared with the host:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从客户机设置中，转到网络适配器，并选择主机模式：与主机共享的私有网络：
- en: '![](img/00051.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we went through installing three major operating systems:
    one to simulate the attacker machine to try remote exploitation, the second was
    Ubuntu x64, and the third was Windows 7 the last two operating systems being victims.
    Also, there was an extra machine to try assembly x86.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了三个主要的操作系统：一个用于模拟攻击者机器以尝试远程利用，第二个是Ubuntu x64，第三个是Windows 7，最后两个操作系统是受害者。另外，还有一台额外的机器用于尝试汇编x86。
- en: Also, we went through disabling some security mechanisms in Linux, only for
    learning purposes, then we went through network configuration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还禁用了Linux中的一些安全机制，仅供学习目的，然后我们进行了网络配置。
- en: In the next chapter, let's take a big step by learning assembly, which will
    enable us to write our own shellcodes and make you really understand how a computer
    executes every command.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们迈出一大步，学习汇编，这将使我们能够编写自己的shellcode，并让您真正了解计算机如何执行每个命令。
