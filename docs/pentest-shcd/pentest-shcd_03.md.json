["```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep exit\n#define __NR_exit 60\n#define __NR_exit_group 231\n```", "```\n$ man 2 exit \n```", "```\nvoid _exit(int status);\n```", "```\nmov rax, 60\nmov rdi, 0\n```", "```\n$ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep write \n#define __NR_write 1\n#define __NR_pwrite64 18\n#define __NR_writev 20\n#define __NR_pwritev 296\n#define __NR_process_vm_writev 311\n#define __NR_pwritev2 328\n```", "```\n$ man 2 write\n```", "```\nssize_t write(int fd, const void *buf, size_t count);\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_world\n    mov rdx, length\n    syscall\n\nsection .data\n\n    hello_world: db 'hello world',0xa\n    length: equ $-hello_world\n```", "```\n$ nasm -felf64 hello-world.nasm -o hello-world.o\n$ ld hello-world.o -o hello-world\n$ ./hello-world \n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_world\n    mov rdx, length\n    syscall\n\n    mov rax, 60\n    mov rdi, 1\n    syscall\n\nsection .data\n\n    hello_world: db 'hello world',0xa\n    length: equ $-hello_world\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rdx,0x1234\n    push rdx\n    push 0x5678\n    pop rdi\n    pop rsi\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\nsection .data\n```", "```\n$ nasm -felf64 stack.nasm -o stack.o\n$ ld stack.o -o stack\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x1234\n    mov rbx, 0x56789\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x1234\n    mov rbx, 0x56789\n\n    mov rdi, rax\n    mov rsi, rbx\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov al, [mem1]\n    mov bx, [mem2]\n    mov ecx, [mem3]\n    mov rdx, [mem4]\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    mem1: db 0x12\n    mem2: dw 0x1234\n    mem3: dd 0x12345678\n    mem4: dq 0x1234567891234567\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov al, 0x34\n    mov bx, 0x5678\n    mov byte [mem1], al\n    mov word [mem2], bx\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n\n    mem1: db 0x12\n    mem2: dw 0x1234\n    mem3: dd 0x12345678\n    mem4: dq 0x1234567891234567\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x1234\n    mov rbx, 0x5678\n    xchg rax, rbx\n    mov rcx, 0x9876\n    xchg rcx,[mem1]\n\n```", "```\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    mem1: dw 0x1234\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    lea rax, [mem1]\n    lea rbx, [rax]\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    mem1: dw 0x1234\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax,0x1\n    add rax,0x2\n\n    mov rbx,0x3\n    add bl, byte [mem1]\n\n    mov rcx, 0x9\n    sub rcx, 0x1\n\n    mov dl,0x5\n    sub byte [mem2], dl\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    mem1: db 0x2\n    mem2: db 0x9\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x5\n    stc\n    adc rax, 0x1\n\n    mov rbx, 0x5\n    stc\n    sbb rbx, 0x1\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x5\n    inc rax\n    inc rax\n\n    mov rbx, 0x6\n    dec rbx\n    dec rbx\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rcx,0x5\n    mov rbx,0x1\n\nincrement:\n\n    inc rbx\n    loop increment\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rcx, 0x5\n\nprint:\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello\n    mov rdx, length\n    syscall\n\nloop print\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    hello: db 'Hello There!',0xa\n    length: equ $-hello\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rcx, 0x5\n\nincrement:\n\n    push rcx\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello\n    mov rdx, length\n    syscall\n    pop rcx\n\nloop increment\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n    hello: db 'Hello There!',0xa\n    length: equ $-hello\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\njmp exit_ten\n\n    mov rax, 60\n    mov rdi, 12\n    syscall\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nexit_ten:\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\n    mov rax, 60\n    mov rdi, 1\n    syscall\n\nsection .data\n```", "```\n    mov rax, 60\n    mov rdi, 10\n    syscall\n```", "```\n    mov rax, 60\n    mov rdi, 12\n    syscall\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n```", "```\n$ nasm -felf64 jmp-un.nasm -o jmp-un.o\n$ ld jmp-un.o -o jmp-un\n$ ./jmp-un\n$ echo $?\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_one\n    mov rdx, length_one\n    syscall\n\njmp print_three\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_two\n    mov rdx, length_two\n    syscall\n\nprint_three:\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_three\n    mov rdx, length_three\n    syscall\n\n    mov rax, 60\n    mov rdi, 11\n    syscall\n\nsection .data\n\n    hello_one: db 'hello one',0xa\n    length_one: equ $-hello_one\n\n    hello_two: db 'hello two',0xa\n    length_two: equ $-hello_two\n\n    hello_three: db 'hello three',0xa\n    length_three: equ $-hello_three\n```", "```\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_two\n    mov rdx, length_two\n    syscall\n```", "```\n$ nasm -felf64 jmp_hello.nasm -o jmp_hello.o\n$ ld jmp_hello.o -o jmp_hello\n$ ./jmp_hello\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_one\n    mov rdx, length_one\n    syscall\n\n    stc\n\njb print_three\n\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_two\n    mov rdx, length_two\n    syscall\n\nprint_three:\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, hello_three\n    mov rdx, length_three\n    syscall\n\n    mov rax, 60\n    mov rdi, 11\n    syscall\n\nsection .data\n\n    hello_one: db 'hello one',0xa\n    length_one: equ $-hello_one\n\n    hello_two: db 'hello two',0xa\n    length_two: equ $-hello_two\n\n    hello_three: db 'hello three',0xa\n    length_three: equ $-hello_three\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov al, 0xaa\n    add al, 0xaa\n\njb exit_ten\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nexit_ten:\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov al, 0x1\n    sub al, 0x1\n\njbe exit_ten\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nexit_ten:\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\nmov al, 0x1\nsub al, 0x3\n\njns exit_ten\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nexit_ten:\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\naddition:\n\n    add bl,al\n    ret\n\n_start:\n\n    mov al, 0x1\n    mov bl, 0x3\n    call addition\n\n    mov r8,0x4\n    mov r9, 0x2\n    call addition\n\n    mov rax, 60\n    mov rdi, 1\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax,0x10111011\n    mov rbx,0x11010110\n    and rax,rbx\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax,0x10111011\n    mov rbx,0x11010110\n    or rax,rbx\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax,0x10111011\n    mov rbx,0x11010110\n    xor rax,rbx\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov al,0x00\n    not al\n\n    mov rax, 60\n    mov rdi, 10\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x0fffffffffffffff\n    sal rax, 4\n    sal rax, 4\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x0fffffffffffffff\n    sar rax, 4\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0x0fffffffffffffff\n    shl rax, 4\n    shl rax, 4\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n_start:\n\n    mov rax, 0xffffffffffffffff\n    shr rax, 32\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0xffffffff00000000\n    ror rax, 32\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```", "```\nglobal _start\n\nsection .text\n\n_start:\n\n    mov rax, 0xffffffff00000000\n    rol rax, 32\n\n    mov rax, 60\n    mov rdi, 0\n    syscall\n\nsection .data\n```"]