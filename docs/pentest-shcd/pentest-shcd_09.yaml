- en: Real-World Scenarios – Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界的场景-第1部分
- en: Now we will recap this book by practicing fuzzing, controlling the instruction
    pointer, and injecting a shellcode using real targets. What I'll do is navigate
    through [exploit-db.com](https://exploit-db.com/) and choose real targets from
    there.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过在真实目标上练习fuzzing、控制指令指针和注入shellcode来总结本书。我将浏览[exploit-db.com](https://exploit-db.com/)，并从中选择真实目标。
- en: Freefloat FTP Server
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Freefloat FTP Server
- en: 'Let''s start with the Freefloat FTP Server v1.0, which you can download it
    from here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这里下载Freefloat FTP Server v1.0，开始吧：
- en: '[https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip).
    Also, you can see the exploit on Windows XP at [https://www.exploit-db.com/exploits/40711/](https://www.exploit-db.com/exploits/40711/).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip)。此外，您还可以在[https://www.exploit-db.com/exploits/40711/](https://www.exploit-db.com/exploits/40711/)上看到Windows
    XP上的利用程序。'
- en: 'The Freefloat FTP Server has many vulnerable parameters, which can be useful
    to practice on, and we will choose one of them here to do a full exercise:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Freefloat FTP Server有许多易受攻击的参数，可以用来练习，我们将在这里选择其中一个进行全面练习：
- en: '![](img/00329.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00329.jpeg)'
- en: 'Now, let''s download it from [https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip)
    on our Windows machine and unzip it. Now, open its directory, then open Win32,
    and start the FTP server. It will show in the taskbar on the right-hand corner.
    Open it to see the configuration:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的Windows机器上从[https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip)下载它并解压缩。现在，打开它的目录，然后打开Win32，并启动FTP服务器。它将显示在右上角的任务栏中。打开它以查看配置：
- en: '![](img/00330.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00330.jpeg)'
- en: The vulnerable server is up and running on port `21`. Let's confirm that from
    our attacking machine, using `nc`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 易受攻击的服务器正在端口`21`上运行。让我们从攻击机上使用`nc`确认一下。
- en: 'First, the IP address of our victim machine is `192.168.129.128`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们受害机的IP地址是`192.168.129.128`：
- en: '![](img/00331.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00331.jpeg)'
- en: 'Then from the attacking machine, execute the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从攻击机上执行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00332.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00332.jpeg)'
- en: 'Let''s try an anonymous access:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试匿名访问：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00333.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00333.jpeg)'
- en: We are in! How about if we focus on the `USER` parameter?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功了！如果我们专注于`USER`参数呢？
- en: Fuzzing
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fuzzing
- en: 'Since the manual way of using the `nc` command is not efficient, let''s build
    a script to do so using the Python language:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于手动使用`nc`命令的方式不高效，让我们使用Python语言构建一个脚本来执行：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s try the fuzzing phase with the `USER` parameter. Let''s start with
    a `junk` value of `50`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用`USER`参数进行fuzzing阶段。让我们从`junk`值为`50`开始：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And from our victim machine, let''s attach the Freefloat FTP Server inside
    the Immunity Debugger and hit the run program once:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从我们的受害机上，让我们将Freefloat FTP Server附加到Immunity Debugger中，并运行程序一次：
- en: '![](img/00334.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00334.jpeg)'
- en: 'Let''s register the contents:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注册一下内容：
- en: '![](img/00335.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00335.jpeg)'
- en: 'Then, make sure that the program is in the running state:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确保程序处于运行状态：
- en: '![](img/00336.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00336.jpeg)'
- en: 'Now, let''s run our exploit and then take a look at the Immunity Debugger:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行我们的利用程序，然后看看Immunity Debugger：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00337.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00337.jpeg)'
- en: 'Nothing happened! Let''s increase the junk value to `200`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 什么都没发生！让我们把垃圾值增加到`200`：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s re-run this exploit and watch the Immunity Debugger:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新运行这个利用程序，并观察Immunity Debugger：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00338.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00338.jpeg)'
- en: 'Again nothing happened; let''s increase to `500`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次什么都没发生；让我们增加到`500`：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, run the exploit:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行利用程序：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00339.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00339.jpeg)'
- en: 'The program crashed! Let''s take a look at the registers too:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 程序崩溃了！让我们也看看寄存器：
- en: '![](img/00340.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00340.jpeg)'
- en: 'The instruction pointer is filled with our junk:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 指令指针被我们的垃圾填满了：
- en: '![](img/00341.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00341.jpeg)'
- en: The stack is also filled with the junk value as expected, which takes us to
    the next phase.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 栈也像预期的那样填满了垃圾值，这将带我们进入下一个阶段。
- en: Controlling the instruction pointer
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制指令指针
- en: In this phase, we will control the instruction pointer by calculating the exact
    offset of the EIP register.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将通过计算EIP寄存器的确切偏移量来控制指令指针。
- en: 'Let''s create the pattern as we did before, using Metasploit Framework:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像之前一样使用Metasploit Framework创建模式：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00342.gif)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00342.gif)'
- en: 'This is our pattern, so the exploit should look like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的模式，所以利用程序应该是这样的：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Close the Immunity Debugger, re-run the Freefloat FTP Server, and attach it
    to the Immunity Debugger. Then, hit the run program:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Immunity Debugger，重新运行Freefloat FTP Server，并将其附加到Immunity Debugger。然后，运行程序：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00343.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00343.jpeg)'
- en: 'The current pattern inside the EIP is `37684136`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: EIP中的当前模式是`37684136`：
- en: '![](img/00344.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00344.jpeg)'
- en: 'We have the pattern located inside the EIP; now, let''s get the exact offset
    of it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在EIP中找到了模式；现在，让我们获取它的确切偏移量：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在以下截图中看到：
- en: '![](img/00345.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00345.jpeg)'
- en: 'It''s at offset `230`; let''s confirm that:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它在偏移量`230`；让我们确认一下：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Close the Immunity Debugger and start it again along with the Freefloat FTP
    Server, attach it inside the Immunity Debugger, and hit the run program. Then
    execute our exploit:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Immunity Debugger，然后再次启动它并启动Freefloat FTP服务器，将其附加到Immunity Debugger中，然后运行程序。然后执行我们的利用：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出可以在以下截图中看到：
- en: '![](img/00346.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00346.jpeg)'
- en: 'Also, let''s look at the registers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，让我们看看寄存器：
- en: '![](img/00347.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00347.jpeg)'
- en: '`EIP` now contains `42424242`; so we now control `EIP`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`EIP`现在包含`42424242`；所以我们现在控制了`EIP`。'
- en: Let's move on to the next phase, which is finding a place for our shellcode
    and injecting it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一阶段，找到一个地方放置我们的shellcode并注入它。
- en: Injecting shellcode
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入shellcode
- en: 'Let''s take a look at another approach to analyzing our pattern inside the
    Freefloat FTP Server:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看分析Freefloat FTP服务器内部模式的另一种方法：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s re-run the Freefloat FTP Server, attach it to the Immunity Debugger,
    and hit the run program icon. Then, run the exploit:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新运行Freefloat FTP服务器，将其附加到Immunity Debugger中，然后点击运行程序图标。然后运行利用：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The program will crash again; then, from the command bar, enter `!mona findmsp`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将再次崩溃；然后，从命令栏输入`!mona findmsp`：
- en: '![](img/00348.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00348.jpeg)'
- en: 'According to the Rapid7 blog at [https://blog.rapid7.com/2011/10/11/monasploit/](https://blog.rapid7.com/2011/10/11/monasploit/),
    the `findmsp` command does the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Rapid7博客[https://blog.rapid7.com/2011/10/11/monasploit/](https://blog.rapid7.com/2011/10/11/monasploit/)，`findmsp`命令执行以下操作：
- en: Looks for the first 8 bytes of the cyclic pattern anywhere in the process memory
    (normal or unicode-expanded).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进程内存中（正常或unicode扩展）寻找循环模式的前8个字节的任何地方。
- en: Looks at all the registers and lists the registers that either point at, or
    are overwritten with, a part of the pattern. It will show the offset and the length
    of the pattern in the memory after that offset if the registers point into the
    pattern.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看所有寄存器，并列出指向模式的部分或被覆盖的寄存器。如果寄存器指向模式，则它将显示偏移量和该偏移量之后内存中模式的长度。
- en: Looks for pointers into a part of the pattern on the stack (shows offset and
    length).
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在堆栈上寻找指向模式部分的指针（显示偏移量和长度）。
- en: Looks for artifacts of the pattern on the stack (shows offset and length).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在堆栈上寻找模式的痕迹（显示偏移量和长度）。
- en: Queries the SEH chain and determines whether it was overwritten with a cyclic
    pattern or not.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询SEH链，并确定它是否被循环模式覆盖。
- en: 'After that, hit *Enter*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，按下*Enter*：
- en: '![](img/00349.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00349.jpeg)'
- en: This analysis tells us the exact offset, which is `230`. It also tells us that
    the best place to hold a shellcode would be inside the stack and will use the
    ESP register since none of the patterns got out from the stack. So, let's continue
    as we did before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分析告诉我们确切的偏移量是`230`。它还告诉我们，最好放置shellcode的地方是在堆栈内部，并且将使用ESP寄存器，因为没有一个模式从堆栈中脱离出来。所以，让我们继续之前的步骤。
- en: 'Our exploit should look like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的利用应该是这样的：
- en: '![](img/00350.gif)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00350.gif)'
- en: 'Now, let''s find the address to `JMP ESP`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找到`JMP ESP`的地址：
- en: '![](img/00351.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00351.jpeg)'
- en: 'Then, search for `JMP ESP`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，搜索`JMP ESP`：
- en: '![](img/00352.gif)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00352.gif)'
- en: Now we need to choose any address here to perform a jump to ESP. I'll select
    `75BE0690`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要选择任何地址来执行跳转到ESP。我会选择`75BE0690`。
- en: 'For the shellcode, let''s choose something else that is small; for example, let''s
    try this shellcode at [https://www.exploit-db.com/exploits/40245/](https://www.exploit-db.com/exploits/40245/),
    which generates a message box on the victim''s machine:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于shellcode，让我们选择一些小的东西；例如，让我们尝试这个shellcode在[https://www.exploit-db.com/exploits/40245/](https://www.exploit-db.com/exploits/40245/)，它在受害者的机器上生成一个消息框：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So, our final shellcode should look like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的最终shellcode应该是这样的：
- en: '![](img/00353.gif)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00353.gif)'
- en: 'Let''s create our final exploit:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的最终利用：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we are all set; let''s re-run just the Freefloat FTP Server, and then run
    our exploit:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了；让我们重新运行Freefloat FTP服务器，然后运行我们的利用：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出可以在以下截图中看到：
- en: '![](img/00354.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00354.jpeg)'
- en: Our exploit worked!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的利用成功了！
- en: An example
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个例子
- en: 'What I want you to do is to try this example but with a different parameter,
    for example, the `MKD` parameter, and I''ll give you a chunk code to start with:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你尝试这个例子，但使用一个不同的参数，例如`MKD`参数，我会给你一段代码来开始：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It's exactly like this scenario, so try to be more creative.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这个场景一样，所以尝试更有创意一些。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we did a real and full scenario starting from fuzzing. We then
    looked at how to control the EIP, and then inject and execute a shellcode.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们从模糊化开始了一个真实且完整的场景。然后我们看了如何控制EIP，然后注入和执行shellcode。
- en: In the next chapter, we will use a real-world scenario but from a different
    approach, which is intercepting and fuzzing a parameter inside the HTTP header.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用一个不同的方法来进行真实世界的场景，即拦截和模糊化HTTP头部内的参数。
