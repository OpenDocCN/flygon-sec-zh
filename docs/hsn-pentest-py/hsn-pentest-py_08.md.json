["```py\ncurl -vgw \"\\n\" -X POST 'http://127.0.0.1:1337/<API KEY>/v0.1/scan' -d '{\"application_logins\":[{\"password\":\"password\",\"username\":\"admin\"}],\"name\":\"My first project\",\"scan_configurations\":[{\"name\":\"Crawl strategy - fastest\",\"type\":\"NamedConfiguration\"}],\"scope\":{\"exclude\":[{\"rule\":\"http://192.168.250.1/dvwa/logout.php\",\"type\":\"SimpleScopeDef\"}],\"include\":[{\"rule\":\"http://192.168.250.1/dvwa\",\"type\":\"SimpleScopeDef\"}]},\"urls\":[\"http://192.168.250.1/dvwa/login.php\"]}'\n\n```", "```py\ncurl -vgw \"\\n\" -X POST 'http://127.0.0.1:1337/<API KEY>/v0.1/scan' -d '{\"application_logins\":[{\"password\":\"password\",\"username\":\"admin\"}],\"scope\":{\"exclude\":[{\"rule\":\"http://192.168.250.1/dvwa/logout.php\",\"type\":\"SimpleScopeDef\"}],\"include\":[{\"rule\":\"http://192.168.250.1/dvwa/\",\"type\":\"SimpleScopeDef\"}]},\"urls\":[\"http://192.168.250.1/dvwa/\"]}'\n```", "```py\ncurl -vgw \"\\n\" -X POST 'http://127.0.0.1:1337/Sm2fbfwrTQVqwH3VERLKIuXkiVbAwJgm/v0.1/scan' -d '{\"application_logins\":[{\"password\":\"password\",\"username\":\"admin\"}],\"scan_callback\":{\"url\":\"http://127.0.0.1:8000\"},\"scope\":{\"exclude\":[{\"rule\":\"http://192.168.250.1/dvwa/logout.php\",\"type\":\"SimpleScopeDef\"}],\"include\":[{\"rule\":\"http://192.168.250.1/dvwa/\",\"type\":\"SimpleScopeDef\"}]},\"urls\":[\"http://192.168.250.1/dvwa/\"]}'\n```", "```py\nimport requests\nimport json\nfrom urlparse import urljoin\nimport socket\nimport ast\nimport time\nclass Burp_automate():\n    def __init__(self):\n        self.result=\"\"\n        self.api_key=\"odTOmUX9mNTV3KRQ4La4J1pov6PEES72\"\n        self.api_url=\"http://127.0.0.1:1337\"\n\n    def start(self):\n        try:\n\n            data='{\"application_logins\":[{\"password\":\"password\",\"username\":\"admin\"}],\"scan_callback\":{\"url\":\"http://127.0.0.1:8001\"},\"scope\":{\"exclude\":[{\"rule\":\"http://192.168.250.1/dvwa/logout.php\",\"type\":\"SimpleScopeDef\"}],\"include\":[{\"rule\":\"http://192.168.250.1/dvwa/\",\"type\":\"SimpleScopeDef\"}]},\"urls\":[\"http://192.168.250.1/dvwa/\"]}'\n            request_url=urljoin(self.api_url,self.api_key)\n            request_url=str(request_url)+\"/v0.1/scan\"\n            resp=requests.post(request_url,data=data)\n\n            self.call_back_listener()\n        except Exception as ex:\n            print(\"EXception caught : \" +str(ex))\n\n    def poll_details(self,task_id):\n        try:\n            while 1:\n                time.sleep(10)\n                request_url=urljoin(self.api_url,self.api_key)\n                request_url=str(request_url)+\"/v0.1/scan/\"+str(task_id)\n                resp=requests.get(request_url)\n                data_json=resp.json()\n\n                issue_events=data_json[\"issue_events\"]\n                for issues in issue_events:\n\n                    if issues[\"issue\"][\"severity\"] != \"info\":\n                        print(\"------------------------------------\")\n                        print(\"Severity : \" + issues[\"issue\"].get(\"severity\",\"\"))\n                        print(\"Name : \" + issues[\"issue\"].get(\"name\",\"\"))\n                        print(\"Path : \" + issues[\"issue\"].get(\"path\",\"\"))\n                        print(\"Description : \" + issues[\"issue\"].get(\"description\",\"\"))\n                        if issues[\"issue\"].get(\"evidence\",\"\"):\n                            print(\"URL : \" + issues[\"issue\"][\"evidence\"][0][\"request_response\"][\"url\"])\n                        print(\"------------------------------------\")\n                        print(\"\\n\\n\\n\")\n                if data_json[\"scan_status\"]==\"succeeded\":\n                    break\n\n        except Exception as ex:\n            print(str(ex))\n\n    def call_back_listener(self):\n        try:\n            if 1 :\n                task_id=0\n                s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                s.bind(('127.0.0.1', 8001))\n                s.listen(10)\n\n                conn, addr = s.accept()\n\n                if conn:\n                    while True:\n                        data = conn.recv(2048)\n                        if not data:\n                            break\n                        try:\n                            index=str(data).find(\"task_id\")\n                            task_id=str(data)[index:index+12]\n                            task_id=task_id.replace('\"',\"\")\n                            splitted=task_id.split(\":\")\n                            t_id=splitted[1]\n                            t_id=t_id.lstrip().rstrip()\n                            t_id=int(t_id)\n                            if t_id:\n                                task_id=t_id\n                                break\n                        except Exception as ex:\n                            print(\"\\n\\n\\nNot found\" +str(ex))\n\n                if task_id:\n                    print(\"Task id : \" +str(task_id))\n                    self.poll_details(task_id)\n                else:\n                    print(\"No task id obtaimed,  Exiting : \" )\n\n        except Exception as ex:\n            print(\"\\n\\n\\n@@@@Call back exception :\" +str(ex))\n\nobj=Burp_automate()\nobj.start()\n\n```", "```py\nimport requests\nimport json\nimport time\nimport pprint\n\nclass SqliAutomate():\n\n def __init__(self,url,other_params={}):\n self.url=url\n self.other=other_params \n\n def start_polling(self,task_id):\n try:\n time.sleep(30)\n poll_resp=requests.get(\"http://127.0.0.1:8775/scan/\"+task_id+\"/log\")\n pp = pprint.PrettyPrinter(indent=4)\n #print(poll_resp.json())\n pp.pprint(poll_resp.json())\n except Exception as ex:\n print(\"Exception caught : \" +str(ex))\n\n def start(self):\n try: \n task_resp=requests.get(\"http://127.0.0.1:8775/task/new\")\n data=task_resp.json()\n if data.get(\"success\",\"\") ==True:\n task_id=data.get(\"taskid\")\n print(\"Task id : \"+str(task_id))\n data_={'url':self.url}\n data_.update(self.other)\n opt_resp=requests.post(\"http://127.0.0.1:8775/option/\"+task_id+\"/set\",json=data_)\n if opt_resp.json().get(\"success\")==True:\n start_resp=requests.post(\"http://127.0.0.1:8775/scan/\"+task_id+\"/start\",json=data_)\n if start_resp.json().get(\"success\")==True:\n print(\"Scan Started successfully .Now polling\\n\")\n self.start_polling(task_id)\n except Exception as ex:\n print(\"Exception : \"+str(ex))\n\nother={'cookie':'PHPSESSID=7brq7o2qf68hk94tan3f14atg4;security=low'}\nobj=SqliAutomate('http://192.168.250.1/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit',other)\nobj.start()\n\n```", "```py\nroot@thp3:~/sqli_automate# python sqli_automate.py\nTask id : d0ba910ae1236ff4\nScan Started successfully .Now polling\n\n{   u'log': [   {   u'level': u'INFO',\n                    u'message': u'testing connection to the target URL',\n                    u'time': u'13:13:15'},\n                {   u'level': u'INFO',\n                    u'message': u'checking if the target is protected by some kind of WAF/IPS/IDS',\n                    u'time': u'13:13:15'},\n                {   u'level': u'INFO',\n                    u'message': u'testing if the target URL content is stable',\n                    u'time': u'13:13:15'},\n                {   u'level': u'INFO',\n                    u'message': u'target URL content is stable',\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing if GET parameter 'id' is dynamic\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'WARNING',\n                    u'message': u\"GET parameter 'id' does not appear to be dynamic\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"heuristic (basic) test shows that GET parameter 'id' might be injectable (possible DBMS: 'MySQL')\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"heuristic (XSS) test shows that GET parameter 'id' might be vulnerable to cross-site scripting (XSS) attacks\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing for SQL injection on GET parameter 'id'\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'AND boolean-based blind - WHERE or HAVING clause'\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'WARNING',\n                    u'message': u'reflective value(s) found and filtering out',\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'\",\n                    u'time': u'13:13:16'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'\",\n                    u'time': u'13:13:17'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u'GET parameter \\'id\\' appears to be \\'OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)\\' injectable (with --not-string=\"Me\")',\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"GET parameter 'id' is 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable \",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"testing 'MySQL inline queries'\",\n                    u'time': u'13:13:18'},\n                {   u'level': u'INFO',\n                    u'message': u\"'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test\",\n                    u'time': u'13:13:28'},\n                {   u'level': u'INFO',\n                    u'message': u'target URL appears to have 2 columns in query',\n                    u'time': u'13:13:29'},\n                {   u'level': u'INFO',\n                    u'message': u\"GET parameter 'id' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable\",\n                    u'time': u'13:13:29'},\n                {   u'level': u'WARNING',\n                    u'message': u\"in OR boolean-based injection cases, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval\",\n                    u'time': u'13:13:29'},\n                {   u'level': u'INFO',\n                    u'message': u'the back-end DBMS is MySQL',\n                    u'time': u'13:13:29'}],\n    u'success': True}\n```"]