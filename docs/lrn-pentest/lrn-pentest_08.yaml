- en: Understanding Password Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解密码攻击
- en: In cryptanalysis, password cracking can be defined as the process of recovering
    the cleartext passphrase by using its hash counterpart. Passwords are part of
    our daily lives; we use them in almost everything we do. As the security of systems
    has developed by looking at various ways to encrypt passwords, so have the tools
    that can crack them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码分析中，密码破解可以被定义为通过使用其哈希对应物来恢复明文密码短语的过程。密码是我们日常生活的一部分；我们几乎在所做的一切事情中都使用它们。随着系统安全性的发展，以寻找各种加密密码的方法，可以破解它们的工具也在发展。
- en: In this chapter, you will benefit from taking a look at how passwords have become
    part of our everyday lives. You will gain skills in finding, building, and customizing
    wordlists. You will learn how to leverage wordlists and use them in various password
    cracking tools within Kali Linux. You will gain an understanding of the various
    tools, and when and how they can be used in a penetration test.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将受益于了解密码如何成为我们日常生活的一部分。您将学会查找、构建和定制单词列表的技能。您将学会如何利用单词列表，并在Kali Linux中使用各种密码破解工具。您将了解各种工具，以及它们在渗透测试中何时以及如何使用。
- en: 'As you progress through the chapter, you will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在本章的学习，您将学到以下内容：
- en: Introduction to password attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码攻击简介
- en: Working with wordlists
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单词列表
- en: Offline password cracking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线密码破解
- en: Online password cracking
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线密码破解
- en: Dumping passwords from memory
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从内存中转储密码
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements are required for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下技术要求：
- en: Kali Linux 2019.1
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux 2019.1
- en: Metasploitable 2 and 3 virtual machines
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploitable 2和3虚拟机
- en: Introduction to password attacks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码攻击简介
- en: Passwords are nothing new. They have been around for centuries. For example,
    the Roman military used passwords to distinguish friend from foe. In the early
    1960s, the concept of passwords was used by people accessing computer systems
    and sharing data. The purpose was to help keep individual files secret from other
    individuals. From there on, it became the de facto standard for computer security,
    both for personal and corporate use. At inception, securing passwords was not
    much of a concern. As time went by, and because of the boom of the internet, security
    became more of a concern as people started having sensitive information on the
    internet.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 密码并不是什么新鲜事物。它们已经存在了几个世纪。例如，罗马军队使用密码来区分敌我。在20世纪60年代初，密码的概念被用于访问计算机系统和共享数据。目的是帮助保持个人文件对其他人的保密。从那时起，它成为了计算机安全的事实标准，无论是个人还是企业使用。在最初，保护密码并不是多大的问题。随着时间的推移，由于互联网的蓬勃发展，安全性变得更加重要，因为人们开始在互联网上存储敏感信息。
- en: Hashing and salting were later introduced to aid in the security of passwords.
    Hashing performs a one-way transformation of the password, in essence turning
    the password into a string of characters. Salting is a unique value of data that
    is added to the password, which results in a different hash being generated. Comparing
    a password that is simply hashed to a password that is hashed with salt will result
    in two completely different hashes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希和盐后来被引入以帮助密码的安全性。哈希对密码进行单向转换，实质上将密码转换为一串字符。盐是添加到密码中的唯一数据值，导致生成不同的哈希。比较简单哈希的密码和加盐哈希的密码将导致两个完全不同的哈希。
- en: Today, usernames and passwords are a combination that is used by people every
    day. Devices such as computer systems, mobile devices, game consoles, tablets,
    and more, are all protected by passwords. As a computer user, you probably have
    passwords for many purposes, such as logging into a system, and accessing email,
    databases, networks, websites, applications, and elevated services.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，用户名和密码是人们每天使用的组合。诸如计算机系统、移动设备、游戏机、平板电脑等设备都受到密码的保护。作为计算机用户，您可能有许多用途的密码，例如登录系统、访问电子邮件、数据库、网络、网站、应用程序和提升服务。
- en: During a penetration testing engagement, you will often encounter passwords
    as your smallest obstacle. Businesses with a high level of security maturity will
    still have users who are the weakest link. As we have learned in [Chapter 4](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml)*,
    Mastering Social Engineering*, users can be exploited by using social engineering.
    Users are also predictable, and the majority will use passwords that are easy
    to predict.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试过程中，您经常会遇到密码作为最小的障碍。安全成熟度较高的企业仍然会有用户成为最薄弱的环节。正如我们在[第4章](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml)*，掌握社会工程学*中所学到的，用户可以通过社会工程学来被利用。用户也是可以预测的，大多数人会使用容易预测的密码。
- en: Passwords introduce an inseparable problem. Shorter passwords are easier to
    remember, and easier to guess. Longer passwords are harder to crack, but also
    harder to remember. Add complexity into the mix and the problem remains the same.
    If password requirements are too complex, users will end up forgetting them or, even worse,
    write them down. This introduces problems such as a high volume of password resets,
    which you can exploit by social engineering. Writing passwords down can easily
    be noted while walking through the building. Now, let's factor into consideration
    the fact that users have passwords for multiple online services such as Amazon,
    Spotify, iTunes, Facebook, and Instagram, and the list goes on. Keeping track
    of so many passwords is difficult, and has led to many people using the same password
    more than once. This introduces a major problem if an attacker is able to obtain
    one password; everything can be accessed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 密码引入了一个不可分割的问题。较短的密码更容易记住，也更容易猜测。较长的密码更难破解，但也更难记住。增加复杂性后问题仍然存在。如果密码要求太复杂，用户最终会忘记它们，甚至更糟的是，写下来。这会引入诸如大量密码重置的问题，您可以通过社会工程学来利用。写下密码可以在走过建筑物时轻松注意到。现在，让我们考虑一下用户为多个在线服务（如亚马逊、Spotify、iTunes、Facebook和Instagram等）使用密码的事实，列表还在继续。跟踪这么多密码很困难，导致许多人多次使用相同的密码。如果攻击者能够获得一个密码，这将引入一个重大问题，一切都可以被访问。
- en: Let's take a look at how we can leverage various methods to crack passwords
    and, in some cases, you don't even need to crack the password to use services.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用各种方法来破解密码，有些情况下，您甚至不需要破解密码就可以使用服务。
- en: Working with wordlists
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单词列表
- en: In order to crack a password, you need to have a list of credentials that you
    can try. You can utilize a user list (which contains usernames only), a password
    list (which contains passwords only), or a list that combines the two.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了破解密码，您需要有一个可以尝试的凭据列表。您可以使用用户列表（仅包含用户名）、密码列表（仅包含密码）或结合两者的列表。
- en: '**Userlists** is a list that contains usernames. It can be built by performing
    reconnaissance on your target, or, in some cases, it may be provided to you for
    the penetration test. If you need to build your own **userlist**, there are some
    questions to consider. Is the target using `firstname.lastname`as the username?
    Perhaps the target''s username is the same as their email address? A good way
    to find usernames is looking at the metadata of files publicly posted on the internet.
    You can use a simple Google query to find specific file types, using the `filetype:`
    search string.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户列表**是包含用户名的列表。它可以通过对目标进行侦察来构建，或者在某些情况下，可能会为您提供进行渗透测试。如果您需要构建自己的**用户列表**，有一些问题需要考虑。目标是否使用`firstname.lastname`作为用户名？也许目标的用户名与其电子邮件地址相同？查找用户名的好方法是查看公开发布在互联网上的文件的元数据。您可以使用简单的Google查询来查找特定的文件类型，使用`filetype:`搜索字符串。'
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing Information
    Gathering*, we looked at how to use Google **dorks** for information gathering.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)中，*执行信息收集*，我们看了如何使用Google
    **dorks**进行信息收集。
- en: Within Kali Linux, using Firefox ESR, and using the search string `filetype:xls`,
    I was able to pick up a number of documents that had details that could give me
    a clue as to the username structure *(*as shown in the following screenshot*). *You
    can perform the same analysis using a tool such as ExifTool**. **ExifTool is a
    cross-platform tool that supports a number of file formats. It's lightweight and
    you are able to obtain a lot of information from files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中，使用Firefox ESR，并使用搜索字符串`filetype:xls`，我能够找到一些文档，其中包含可以给我提供用户名结构线索的详细信息*（如下面的屏幕截图所示）*。您可以使用诸如ExifTool**之类的工具执行相同的分析。**ExifTool是一个跨平台工具，支持多种文件格式。它很轻便，您可以从文件中获取大量信息。
- en: 'To install ExifTool in Kali Linux, you need to run the following command from
    a Terminal window:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Kali Linux中安装ExifTool，您需要从终端窗口运行以下命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once installed, you can query the file using the `exiftool [options] file` command. To
    view a full list of the options, you can use the `man exiftool` command, which
    will display the documentation within the Terminal, as shown in the following
    screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以使用`exiftool [options] file`命令查询文件。要查看选项的完整列表，可以使用`man exiftool`命令，在终端中显示文档，如下面的屏幕截图所示：
- en: '![](img/133d64c5-6152-4115-9734-83f73acbcd9b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/133d64c5-6152-4115-9734-83f73acbcd9b.png)'
- en: 'Figure 1: Extracting metadata using the exiftool'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：使用exiftool提取元数据
- en: In the preceding screenshot, we are able to determine that this specific company's
    username structure is `name.surname`. We can perform further investigation using
    LinkedIn to obtain a list of employees who work at the company and generate a
    username list from there.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们能够确定这家特定公司的用户名结构是`name.surname`。我们可以使用LinkedIn进行进一步调查，以获取在该公司工作的员工名单，并从中生成用户名列表。
- en: '**Password** **lists** contain passwords. You can download these or even build
    your own. Kali Linux contains some password lists, although these are not as comprehensive
    as the ones you will find on the internet.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码列表**包含密码。您可以下载这些密码列表，甚至创建自己的密码列表。Kali Linux包含一些密码列表，尽管这些列表不如您在互联网上找到的那些全面。'
- en: 'The built-in wordlists are found at `/usr/share/wordlists` and contain the
    famous `rockyou.txt` password list, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的单词列表位于`/usr/share/wordlists`，包含著名的`rockyou.txt`密码列表，如下面的屏幕截图所示：
- en: '![](img/2849d3b3-714c-4564-a032-1b401b95f04c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2849d3b3-714c-4564-a032-1b401b95f04c.png)'
- en: 'Figure 2: Kali Linux built-in word lists'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Kali Linux内置的单词列表
- en: Some of the tools within Kali Linux have their own wordlists; for example, the
    tool **John the Ripper** has a password list located at `/usr/share/John/password.lst`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux中的一些工具有自己的单词列表；例如，工具**John the Ripper**在`/usr/share/John/password.lst`中有一个密码列表。
- en: The Metasploit framework has a number of wordlists located in `/usr/share/metasploit-framework/data/wordlists`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架中有许多单词列表，位于`/usr/share/metasploit-framework/data/wordlists`中。
- en: 'There are a number of online resources where you can obtain password lists.
    Some websites host older password lists that are not updated often. The ones that
    are kept updated are located at sites such as WeakPass ([https://weakpass.com](https://weakpass.com))
    and Seclists ([https://github.com/danielmiessler/SecLists/tree/master/Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords)).
    Seclists can be installed inside Kali Linux using the `apt install seclists` command. This
    will download the current release of the password lists into the `/usr/share/seclists`
    path, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线资源可以获取密码列表。一些网站托管着不经常更新的旧密码列表。那些经常更新的位于WeakPass（[https://weakpass.com](https://weakpass.com)）和Seclists（[https://github.com/danielmiessler/SecLists/tree/master/Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords)）等网站。可以使用`apt
    install seclists`命令在Kali Linux中安装Seclists。这将把当前版本的密码列表下载到`/usr/share/seclists`路径中，如下面的屏幕截图所示：
- en: '![](img/b2e7567a-8640-4ede-9650-6cefd4211359.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2e7567a-8640-4ede-9650-6cefd4211359.png)'
- en: 'Figure 3: List of password lists from Seclists'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：Seclists的密码列表
- en: Some sites, such as CrackStation ([https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm)),
    host a fairly large database and offer an online hash cracker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站，如CrackStation（[https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm)），托管着一个相当大的数据库，并提供在线哈希破解器。
- en: Password profiling
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码概要
- en: As you plan a penetration test, it is important to have a customized password
    list that will apply exclusively to your target. Having a profiled password list
    can aid in the success of a penetration test, as you eliminate the time spent
    using a public wordlist, which is generally very broad.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划渗透测试时，拥有一个专门针对目标的定制密码列表非常重要。拥有一个概要密码列表可以帮助渗透测试的成功，因为你可以省去使用通常非常广泛的公共单词列表所花费的时间。
- en: One way to customize your password list and make it more specific to the target
    is by using the technique of password profiling. Password profiling involves taking
    words or phrases from the organization you are targeting and including them in
    a wordlist with the aim of improving your chances of finding a valid password.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 定制密码列表并使其更具体于目标的一种方法是使用密码概要技术。密码概要涉及从您正在针对的组织中提取单词或短语，并将其包含在单词列表中，以提高找到有效密码的机会。
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing Information
    Gathering*, we performed Nmap scans on the Metasploitable 2 and 3 virtual machines.
    Some of the open services were SSH (port `22`) and FTP (port `21`). In the previous
    [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving into the Metasploit
    Framework, *we explored some attacks against these vulnerable virtual machines.
    Now, we will perform some attacks that leverage a password file, but instead of
    using a password file form the internet, which will contain thousands of passwords,
    we will build one that has been profiled.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)中，*执行信息收集*，我们对Metasploitable
    2和3虚拟机进行了Nmap扫描。一些开放的服务包括SSH（端口`22`）和FTP（端口`21`）。在之前的[第5章](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)中，*深入研究Metasploit框架*，我们探讨了一些针对这些易受攻击的虚拟机的攻击。现在，我们将执行一些利用密码文件的攻击，但我们不会使用来自互联网的密码文件，其中包含成千上万个密码，而是构建一个经过概要处理的密码文件。
- en: Kali Linux comes with a tool called **CeWL**. CeWL spiders a given URL to a
    depth that you can specify, and returns a list of words that can be used. CeWL
    is customizable, allowing you to specify the minimum and maximum length of words,
    extract words from the metadata of files, and much more.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux带有一个名为**CeWL**的工具。CeWL可以对给定的URL进行蜘蛛爬行，您可以指定深度，并返回可以使用的单词列表。CeWL是可定制的，允许您指定单词的最小和最大长度，从文件的元数据中提取单词等等。
- en: To build a wordlist related to the Metasploitable virtual machines, we can use
    the wiki page that is available at [https://github.com/rapid7/metasploitable3/wiki.](https://github.com/rapid7/metasploitable3/wiki)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建与Metasploitable虚拟机相关的单词列表，可以使用[https://github.com/rapid7/metasploitable3/wiki](https://github.com/rapid7/metasploitable3/wiki)上提供的wiki页面。
- en: 'Using the following command, we will generate the wordlist that we will use
    for a password brute force. In the command, we defined the minimum word count
    *(*`-m 7`*), *the spider depth (`-d 1`), and then we instructed CeWL to write
    the output to a file on the desktop called `metasploitable-dict.txt` (`-w`) as
    follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，我们将生成用于密码暴力破解的单词列表。在命令中，我们定义了最小单词计数（`-m 7`）、蜘蛛深度（`-d 1`），然后我们指示CeWL将输出写入到名为`metasploitable-dict.txt`的桌面文件中（`-w`），如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the command is completed, we have a wordlist that currently contains 2,443
    words, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令完成，我们就有了一个当前包含2,443个单词的单词列表，如下面的屏幕截图所示：
- en: '![](img/3484e296-b279-4301-bc3a-98e4441e543c.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3484e296-b279-4301-bc3a-98e4441e543c.png)'
- en: 'Figure 4: CeWL-generated wordlist'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：CeWL生成的单词列表
- en: To perform a word count on a text file, you can use the command `wc -w` [file].
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要对文本文件进行单词计数，可以使用`wc -w` [文件]命令。
- en: 'Now, we can perform a test using the wordlist we have just created. We will
    run the wordlist against the Metasploitable 3 virtual machine to check whether
    we can access it using the **Server Message Block** (**SMB**) protocol. This can
    be checked using the auxiliary module `auxiliary/scanner/smb/smb_login` by performing
    the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用刚刚创建的单词列表进行测试。我们将运行单词列表针对Metasploitable 3虚拟机，以检查我们是否可以使用**服务器消息块**（**SMB**）协议访问它。这可以通过使用辅助模块`auxiliary/scanner/smb/smb_login`进行检查，具体步骤如下：
- en: From a Terminal window, open the Metasploit Framework using the `msfconsole` command. Ensure
    that you have the PostgreSQL service started before running the `msfconsole` command.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端窗口中，使用`msfconsole`命令打开Metasploit框架。在运行`msfconsole`命令之前，请确保已启动PostgreSQL服务。
- en: Load the auxiliary scanner using the `use auxiliary/scanner/smb/smb_login` command.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`use auxiliary/scanner/smb/smb_login`命令加载辅助扫描器。
- en: 'Next, we will define the following options:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义以下选项：
- en: '`SET RHOSTS [IP]`: Here, you will define the Metasploitable 3 virtual machine''s
    IP address. This can be picked up using `netdiscover -r [subnet]` or by logging
    into the virtual machine and checking its IP address using the `ipconfig` command
    from a command prompt window.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET RHOSTS [IP]`：在这里，您将定义Metasploitable 3虚拟机的IP地址。这可以使用`netdiscover -r [subnet]`或通过登录虚拟机并使用命令提示符窗口中的`ipconfig`命令来检查其IP地址来获取。'
- en: '`SET USER_FILE [path]` and `SET PASS_FILE [path]`: Here, we define the wordlist.
    Using the wordlist generated by **CeWL**, the path we defined was `/root/Desktop/metasploitable-dict.txt`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET USER_FILE [path]`和`SET PASS_FILE [path]`：在这里，我们定义了字典。使用**CeWL**生成的字典，我们定义的路径是`/root/Desktop/metasploitable-dict.txt`。'
- en: '`SET STOP_ON_SUCCESS true`: This tells the scanner to stop scanning once it
    has found a successful credential.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET STOP_ON_SUCCESS true`：这告诉扫描器一旦找到成功的凭据就停止扫描。'
- en: '`SET VERBOSE false`: This stops the scanner from displaying the output on the
    screen. It will only display the successful output.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET VERBOSE false`：这将阻止扫描器在屏幕上显示输出。它只会显示成功的输出。'
- en: 'Once the options are defined, we run the scanner using the `run` command. Once
    a successful credential is found, the output is displayed as per the following
    screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了选项，我们使用`run`命令运行扫描器。一旦找到成功的凭据，输出将显示如下截图所示：
- en: '![](img/d538d797-2e17-445c-8db7-c00f25e5715a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d538d797-2e17-445c-8db7-c00f25e5715a.png)'
- en: 'Figure 5: Output from the Metasploit Framework SMB login scanner'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：Metasploit Framework SMB登录扫描器的输出
- en: Metasploit stores discovered credentials in its database. The credentials can
    be accessed using the `creds` command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit将发现的凭据存储在其数据库中。可以使用`creds`命令访问凭据。
- en: A key point to keep in mind is that the larger your wordlist, the more time
    it will take. By using a profiled wordlist, you are reducing the amount of time
    spent on finding a valid login.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的一个关键点是，您的字典越大，花费的时间就越长。通过使用配置文件字典，您可以减少寻找有效登录所花费的时间。
- en: Password mutation
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码变异
- en: Users will often mutate their passwords in a variety of ways. Some types of
    mutations include adding in numbers at the end of the password, swapping out characters,
    such as using a 3 for an "e", using capital letters, and more.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户经常以各种方式变异他们的密码。一些变异类型包括在密码末尾添加数字，交换字符，例如使用3代替“e”，使用大写字母等。
- en: Using John the Ripper, we can perform mutations on a password list. John the
    Ripper comes with an extensive configuration file that holds a number of predefined
    password mutation rules. This configuration file can be found at `/etc/John/john.conf`**.**
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用John the Ripper，我们可以对密码列表执行变异。John the Ripper附带一个包含许多预定义密码变异规则的广泛配置文件。此配置文件可以在`/etc/John/john.conf`中找到。
- en: 'Within the configuration file are rulesets defined as `[List.Rules:<name>]`,
    for example `[List.Rules:Wordlist]` or `[List.Rules:hashcat]`, and the list goes
    on. You can view the various current rules by using a simple concatenate query: `cat
    /etc/john/john.conf |grep List.Rules`, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件中定义为`[List.Rules:<name>]`的规则集，例如`[List.Rules:Wordlist]`或`[List.Rules:hashcat]`，还有很多。您可以使用简单的连接查询来查看各种当前规则：`cat
    /etc/john/john.conf |grep List.Rules`，如下截图所示：
- en: '![](img/5820c743-f93e-48d9-b213-7b0b2792f153.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5820c743-f93e-48d9-b213-7b0b2792f153.png)'
- en: 'Figure 6: Snippet of the current rulesets within John the Ripper'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：John the Ripper中当前规则集的片段
- en: Let's perform a few mutations. For illustration purposes, I will create a new
    file called `mutate-test.txt` and put just one word inside `password` and store
    it on the desktop.You can do this using leafpad, nano, or your favorite text editor.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行一些变异。为了说明，我将创建一个名为`mutate-test.txt`的新文件，并在其中放入一个单词`password`，然后将其存储在桌面上。您可以使用leafpad、nano或您喜欢的文本编辑器来完成这个操作。
- en: 'Once the file is created, we can perform some mutations and observe the output.
    Editing the `John.conf`, file, I have added in a custom ruleset called `List.Rules:Custom`
    as per the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，我们可以执行一些变异并观察输出。编辑`John.conf`文件，我根据以下截图添加了一个自定义规则集，名为`List.Rules:Custom`：
- en: '![](img/f2340f0a-d8a5-4396-a512-3a45c039deab.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2340f0a-d8a5-4396-a512-3a45c039deab.png)'
- en: 'Figure 7: Custom rule mutation'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：自定义规则变异
- en: 'In this custom rule, I am telling John the Ripper to add two additional numbers
    to the end of each password. Here is a list of the common commands that you can
    use within a ruleset:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个自定义规则中，我告诉John the Ripper在每个密码的末尾添加两个额外的数字。以下是您可以在规则集中使用的常见命令列表：
- en: '`$`: This appends a character or number to a word. In the preceding custom
    rule, you will notice I have defined a group of numbers that is denoted by **[**`0`**-**`9`**]**.
    This will append `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, and `9` to the word.
    You can also append a single character; for example, using the command `$9` will
    append just a `9` to the word.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`：这会在单词后附加一个字符或数字。在前面的自定义规则中，您会注意到我定义了一个由`0-9`表示的一组数字。这将在单词后附加`0`、`1`、`2`、`3`、`4`、`5`、`6`、`7`、`8`和`9`。您还可以附加一个单个字符；例如，使用命令`$9`将只在单词后附加`9`。'
- en: '`^`: This prepends a character or number to a word. Here, you can define ranges
    as per the previous `$` command.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^`：这会在单词前添加一个字符或数字。在这里，您可以根据前面的`$`命令定义范围。'
- en: '`l`: This converts all the characters to lowercase, and `c`converts them to
    uppercase.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`：这将所有字符转换为小写，`c`将它们转换为大写。'
- en: '`t`:This toggles the case of all characters in the word.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t`：这会切换单词中所有字符的大小写。'
- en: 'Let''s take a look at the output of this rule using the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令查看此规则的输出：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have a new file called `mutated.txt`, which will have the word defined in `mutation-test.txt`mutated.
    The `stdout` command is used to output candidate passwords. Notice that the content of
    the `mutated.txt` file contains two additional characters at the end of the main
    word, as shown in the following previous :'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名为`mutated.txt`的新文件，其中包含在`mutation-test.txt`中定义的单词的变异。`stdout`命令用于输出候选密码。请注意，`mutated.txt`文件的内容在主要单词末尾包含两个额外的字符，如前面的截图所示：
- en: '![](img/5b8b1f98-235f-43ee-bedb-ebd674836619.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b8b1f98-235f-43ee-bedb-ebd674836619.png)'
- en: 'Figure 8: Mutated password list'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：变异密码列表
- en: As you work with password mutations, you will find that some rules work better
    than others. The key is to find what works for your target, and knowing that you
    have the flexibility of John the Ripper to perform password mutations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用密码变异时，您会发现一些规则比其他规则更有效。关键是找到适合您目标的方法，并知道您可以使用John the Ripper来执行密码变异。
- en: Offline password attacks
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线密码攻击
- en: Offline password attacks are a way of cracking passwords without being discovered.
    Since there is no brute forcing to an active service, the risk of detection is
    a lot less. The aim is to obtain the hashed version of a password and reverse
    it back to plain text. Different hashing algorithms output different hashes of
    varying bit lengths. Since hashes are made up of hexadecimal numbers, which are
    four bits each, identifying a hash bit length would entail counting the number
    of hexadecimal numbers and multiplying by four.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 离线密码攻击是一种在不被发现的情况下破解密码的方法。由于没有对活动服务进行暴力破解，因此被发现的风险要小得多。目标是获取密码的哈希版本并将其逆转回纯文本。不同的哈希算法输出不同位长度的哈希。由于哈希由十六进制数字组成，每个数字占四位，因此识别哈希位长度将涉及计算十六进制数字的数量并乘以四。
- en: For example, a hash of `63640264849A87C90356129D99EA165E37AA5FABC1FEA46906DF1A7CA50DB492` contains
    64 characters. **64 x 4 = 256**. This tells us that the bit length of the hash
    is `256` bits. In this example, the most common hashing algorithm that would output
    a `256` bit hash is `SHA-256`. What if you have a hash that is `128` bits? Here,
    we have a few algorithms that come into play, such as `MD2`, `MD4`, `MD5`, and
    `RipeMD-128`. This is where your intuition comes into play when identifying what
    hash you have. For example, if you have extracted a hash from a MySQL database,
    the chances are that the hash is an `MD5` hash.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，哈希值`63640264849A87C90356129D99EA165E37AA5FABC1FEA46906DF1A7CA50DB492`包含64个字符。**64
    x 4 = 256**。这告诉我们哈希的位长度为`256`位。在这个例子中，最常见的哈希算法输出`256`位哈希的算法是`SHA-256`。如果您有一个`128`位的哈希呢？在这里，有一些算法可以发挥作用，比如`MD2`、`MD4`、`MD5`和`RipeMD-128`。在识别您拥有的哈希时，您的直觉就发挥作用了。例如，如果您从MySQL数据库中提取了一个哈希，那么这个哈希很可能是一个`MD5`哈希。
- en: Fortunately, there are tools that can help you identify a hash, thus making
    your time spent on performing a manual calculation a lot less. However, knowing
    how to calculate the hash bit lengths and training your powers of perception will
    never be a waste.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些工具可以帮助您识别哈希，从而使您在进行手动计算时花费的时间大大减少。然而，知道如何计算哈希位长度并训练您的感知能力永远不会是浪费。
- en: 'In the current release of Kali Linux (2019.1), there is a tool called **Hash
    Identifier**, which will attempt to identify a hash. This tool can be run from
    a Terminal window using the `hash-identifier` command. Let''s attempt to identify
    the `SHA-256` hash discussed previously. Notice the output in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的Kali Linux（2019.1）中，有一个名为**Hash Identifier**的工具，它将尝试识别哈希。可以使用`hash-identifier`命令从终端窗口运行此工具。让我们尝试识别之前讨论的`SHA-256`哈希。请注意以下截图中的输出：
- en: '![](img/a6ac5a7d-120a-4d4c-ba07-d27a95d16016.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6ac5a7d-120a-4d4c-ba07-d27a95d16016.png)'
- en: 'Figure 9: Identifying a hash using hash-identifier'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：使用hash-identifier识别哈希
- en: Using `hash-identifier` makes identifying hashes simple, as the hash identified
    is very specific.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`hash-identifier`可以简化识别哈希的过程，因为识别出的哈希非常具体。
- en: John the Ripper
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: John the Ripper
- en: John the Ripper is both feature-rich and fast. It leverages several cracking
    modes in one program and is fully configurable (as we have seen with password
    mutations). John the Ripper is available on multiple platforms, which makes it
    easy to use the same cracker on multiple systems. It is included by default in
    Kali Linux.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper既功能丰富又快速。它在一个程序中利用了几种破解模式，并且是完全可配置的（正如我们在密码变异中所见）。John the Ripper可在多个平台上使用，这使得在多个系统上使用相同的破解程序变得容易。它默认包含在Kali
    Linux中。
- en: 'Some of the features of John the Ripper are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper的一些特点如下：
- en: Hash types can be autodetected
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希类型可以自动检测
- en: Cross-platform support
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台支持
- en: Support of multiple hash algorithms
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种哈希算法
- en: 'The syntax for John the Ripper is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper的语法如下：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have identified the hashing algorithm, let''s attempt to crack
    this hash using John the Ripper by taking the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了哈希算法，让我们尝试使用John the Ripper来破解这个哈希，采取以下步骤：
- en: '**Step 1**: Add the hash to a text file using a text editor. I have named the
    file `sha256hash.txt`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤1**：使用文本编辑器将哈希添加到文本文件中。我将文件命名为`sha256hash.txt`。'
- en: '**Step 2**: Within a Terminal window, run the following command:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤2**：在终端窗口中运行以下命令：'
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In my example, I have used the `rockyou.txt wordlist`. So, the full command
    in my environment is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的示例中，我使用了`rockyou.txt`单词列表。因此，在我的环境中，完整的命令如下：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice the output in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下截图中的输出：
- en: '![](img/81603372-6a2c-45e4-a5a9-91b5a4815143.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81603372-6a2c-45e4-a5a9-91b5a4815143.png)'
- en: 'Figure 10: Cracking an SHA-256 hash using John the Ripper'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：使用John the Ripper破解SHA-256哈希
- en: 'John the Ripper stores all cracked passwords in a `john.pot` file, which is
    located where you have installed John the Ripper. By default, in Kali Linux 2019.1,
    it is located at `/root/.John/john.pot`, as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper将所有破解的密码存储在一个`john.pot`文件中，该文件位于您安装John the Ripper的位置。在Kali Linux
    2019.1中，默认情况下，它位于`/root/.John/john.pot`，如下面的截图所示：
- en: '![](img/67eceafc-1e07-4a50-ade8-038256e2dfbc.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67eceafc-1e07-4a50-ade8-038256e2dfbc.png)'
- en: 'Figure 11: Cracked passwords stored in the john.pot file.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：存储在john.pot文件中的破解密码。
- en: 'Let''s attempt to crack the hashes we have dumped from [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*,
    Diving into the Metasploit Framework*, using John the Ripper. From a Terminal
    window, use the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试破解我们从[第5章](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*，深入Metasploit框架*中转储的哈希，使用John
    the Ripper。从终端窗口，使用以下命令：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this command, we are defining the wordlist to be used (`rockyou.txt`), the
    ruleset to use (`wordlist`), and where to store the cracked hashes (`meta3.pot`):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们定义要使用的单词列表（`rockyou.txt`）、要使用的规则集（`wordlist`）以及要存储破解的哈希的位置（`meta3.pot`）：
- en: '![](img/26b32871-5bdb-4e07-8e01-1745b1d39b30.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26b32871-5bdb-4e07-8e01-1745b1d39b30.png)'
- en: 'Figure 12: Using John the Ripper to crack the hashes obtained from Metasploitable
    3'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：使用John the Ripper破解从Metasploitable 3获得的哈希
- en: Cracking password hashes can sometimes be very time-consuming and not feasible
    when you are pressed for time during a penetration test. Another approach of making
    use of dumped password hashes is to re-authenticate to a remote system using a
    valid combination of a username and NTLM/LM hash. This technique is called **Pass-the-Hash**
    (**PTH**), and has been around since 1997.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 破解密码哈希有时可能非常耗时，在渗透测试期间时间紧迫时可能不可行。利用转储的密码哈希的另一种方法是使用用户名和NTLM/LM哈希的有效组合重新验证到远程系统。这种技术称为**传递哈希**（**PTH**），自1997年以来一直存在。
- en: Even though we were only able to crack three passwords, we still cracked a privileged
    account, which is the **administrator** account. If I had to use a more complex
    wordlist and more complex rules within John the Ripper, it would have probably
    cracked all of the hashes. Keep in mind that as you add more complexity, the time
    to crack the passwords takes a bit longer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们只能破解三个密码，但我们仍然破解了一个特权帐户，即**管理员**帐户。如果我使用更复杂的单词列表和更复杂的规则在John the Ripper中，它可能会破解所有哈希。请记住，随着你增加更多的复杂性，破解密码所需的时间会稍长一些。
- en: 'In order to crack accounts on a Linux system, you will need the following two
    files:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了破解Linux系统上的帐户，您将需要以下两个文件：
- en: '`/etc/passwd`: This contains the user information'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/passwd`：包含用户信息'
- en: '`/etc/shadow`: This containing the corresponding password hashes for the users'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/shadow`：包含用户的相应密码哈希'
- en: 'Before we can crack the passwords, these two files need to be combined. This
    can be done by using the `unshadow` command, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够破解密码之前，这两个文件需要合并。这可以通过使用`unshadow`命令来完成，如下截图所示：
- en: '![](img/ddef5309-e4c2-43da-baf7-1658250d55f0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddef5309-e4c2-43da-baf7-1658250d55f0.png)'
- en: 'Figure 13: Using the unshadow command to combine the passwd and shadow files'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：使用unshadow命令组合passwd和shadow文件
- en: 'Now, we can leverage this combined file with John the Ripper using the following
    command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令将这个组合文件与John the Ripper结合起来：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'John will begin cracking the passwords of the Linux hashes (as shown in the
    following screenshot). Notice in this scenario that we did not define the format;
    John the Ripper is able to identify the `hash type` and apply the correct cracking
    algorithm, as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: John将开始破解Linux哈希的密码（如下截图所示）。请注意，在这种情况下，我们没有定义格式；John the Ripper能够识别`哈希类型`并应用正确的破解算法，如下截图所示：
- en: '![](img/11f6009f-2c15-423f-97f2-55a2c4baa0f8.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11f6009f-2c15-423f-97f2-55a2c4baa0f8.png)'
- en: 'Figure 14: Using John the Ripper to crack the hashes obtained from Metasploitable
    2'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：使用John the Ripper破解从Metasploitable 2获得的哈希
- en: Even though the `root` password was not cracked in the preceding screenshot,
    leveraging a more complex wordlist and rules within John the Ripper will likely
    crack the password.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在前面的截图中`root`密码没有被破解，但利用更复杂的单词列表和John the Ripper中的规则很可能会破解密码。
- en: Hashcat
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hashcat
- en: Hashcat is another offline password cracking tool that is claimed to be the
    world's fastest and most advanced password recovery utility. It is installed by
    default within Kali Linux, and it combines both the CPU and GPU versions in a
    single program.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat是另一个离线密码破解工具，据称是世界上最快和最先进的密码恢复实用程序。它默认安装在Kali Linux中，并将CPU和GPU版本结合在一个程序中。
- en: The program supports a multitude of hashing algorithms, with unique modes for
    password cracking. Hashcat supports multiple platforms, such as Windows, macOS,
    and Linux.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序支持多种哈希算法，具有用于破解密码的独特模式。Hashcat支持多个平台，如Windows、macOS和Linux。
- en: 'Some of the features of Hashcat are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat的一些特点如下：
- en: It supports multiple threads
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持多线程
- en: Multihash support (cracking multiple hashes at the same time)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多哈希支持（同时破解多个哈希）
- en: Multi-device support (utilizing multiple devices in the same system)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多设备支持（在同一系统中利用多个设备）
- en: Multi-device types (utilizing mixed device types in the same system)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多设备类型（在同一系统中使用混合设备类型）
- en: It is multi-algorithm based (MD4, MD5, SHA1, DCC, NTLM, MySQL, and much more)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是基于多算法的（MD4、MD5、SHA1、DCC、NTLM、MySQL等）
- en: It uses specialized rules to extend attack modes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用专门的规则来扩展攻击模式
- en: 'The syntax for running Hashcat is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Hashcat的语法如下：
- en: '[PRE8]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Some of the common options used are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的选项如下：
- en: '`-m`defines the hash type using the number of the hash. For example, MD5 is
    number 0, and SHA1 is 100.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`使用哈希的编号定义哈希类型。例如，MD5是编号0，SHA1是100。'
- en: '`-a` defines the attack mode.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`定义攻击模式。'
- en: '`-o` defines the output file.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`定义输出文件。'
- en: 'The attack modes in Hashcat are defined as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat中的攻击模式定义如下：
- en: '**Dictionary attack**: (Also called straight mode or attack mode zero), this tries
    all words in a given list.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字典攻击**：（也称为直接模式或攻击模式零），尝试给定列表中的所有单词。'
- en: '**Combination attack:** (Known as mode *1*), this concatenates words from multiple
    wordlists.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组合攻击**：（称为模式*1*），这将多个单词列表中的单词连接起来。'
- en: '**Brute force and mask attack:** (Mode 3) tries all characters from given character
    sets.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴力和掩码攻击**：（模式3）尝试给定字符集中的所有字符。'
- en: '**Hybrid attack:** (Mode *6* and *7*) combines wordlists and masks and the
    other way around. Rules can also be used with this attack mode.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合攻击：**（模式*6*和*7*）结合了单词列表和掩码，反之亦然。规则也可以与此攻击模式一起使用。'
- en: 'Hashcat supports a multitude of hashing algorithms; these can be seen under
    the `[Hash modes]` section, as shown in the following screenshot, when using the `hashcat
    -h` command from a Terminal window. The following screenshot is just a snippet
    of the hash algorithms supported. When you run the command in your own lab, you
    will see the full list:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat支持多种哈希算法；当您从终端窗口使用`hashcat -h`命令时，可以在`[Hash modes]`部分看到这些算法，如下截图所示。以下截图只是支持的哈希算法的一部分。当您在自己的实验室运行命令时，您将看到完整的列表。
- en: '![](img/e143ccc7-cfcc-40c0-aee8-dc95d63c6c75.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e143ccc7-cfcc-40c0-aee8-dc95d63c6c75.png)'
- en: 'Figure 15: Hashcat-supported algorithms'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：Hashcat支持的算法
- en: If you have a GPU, you can really leverage the power of Hashcat for password
    cracking. Unfortunately, GPU cracking is not with in the scope of this book.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有GPU，您可以真正利用Hashcat进行密码破解的能力。不幸的是，GPU破解不在本书的范围内。
- en: Online password attacks
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线密码攻击
- en: Just like using an automated vulnerability scanner, we can leverage tools to
    automatically attempt to log in to services and find valid credentials. These
    tools are designed to automate online password attacks until the server responds
    with a valid login. An online password attack can be defined as trying to log
    in to a live service by brute forcing credentials until a valid combination is
    discovered.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用自动漏洞扫描器一样，我们可以利用工具自动尝试登录服务并找到有效的凭据。这些工具旨在自动化在线密码攻击，直到服务器响应有效的登录。在线密码攻击可以被定义为尝试通过暴力破解凭据登录到一个活动服务，直到发现有效的组合。
- en: The trouble with online password attacks is that they can be noisy, and trigger
    alarms. Let's look at some of the online password attack tools that are commonly
    used.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在线密码攻击的问题在于它们可能会很吵，触发警报。让我们来看一些常用的在线密码攻击工具。
- en: Hydra
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hydra
- en: Hydra is a login cracker that is very fast and flexible. It supports modules
    that can easily be added. It provides powerful authentication brute forcing for
    many protocols and services.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是一个非常快速和灵活的登录破解器。它支持可以轻松添加的模块。它为许多协议和服务提供了强大的身份验证暴力破解。
- en: 'The syntax for Hydra is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra的语法如下：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following are some of the options that are available:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用的选项：
- en: '`-l` denotes a single username.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`表示一个单一的用户名。'
- en: '`-L` defines a username list.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-L`定义用户名列表。'
- en: '`-p` defines a single password.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`定义一个单一的密码。'
- en: '`-P` defines a password list.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`定义密码列表。'
- en: '`-t` is used to limit concurrent connections.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`用于限制并发连接。'
- en: '`-V` tells Hydra to display verbose output.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-V`告诉Hydra显示详细输出。'
- en: '`-f` is used to stop on the correct login.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`用于在正确登录时停止。'
- en: '`-s` is used to define a port.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`用于定义一个端口。'
- en: '`-x` leverages a brute force mode. For example, `-x 5:8:A1` generates passwords
    5 to 8 characters in length with uppercase and numbers.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`利用暴力破解模式。例如，`-x 5:8:A1`生成长度为5到8个字符的密码，包括大写字母和数字。'
- en: Hydra supports a number of services, some of which include `ssh`, `smb`, `smtp[s]`,
    LDAP, http/s, Telnet, and MySQL.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra支持多种服务，其中一些包括`ssh`、`smb`、`smtp[s]`、LDAP、http/s、Telnet和MySQL。
- en: Let's leverage Hydra to attack services on the Metasploitable 2 virtual machine.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用Hydra攻击Metasploitable 2虚拟机上的服务。
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)*, Performing Information
    Gathering*, we performed an Nmap scan against the Metasploitable 2 virtual machine.
    One of the services that we discovered was `ftp` port `21`. Using the password
    list we generated earlier, we can use this with Hydra to perform an online password
    attack.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)*，执行信息收集*中，我们对Metasploitable
    2虚拟机进行了Nmap扫描。我们发现的其中一个服务是`ftp`端口`21`。使用我们之前生成的密码列表，我们可以使用Hydra来进行在线密码攻击。
- en: 'From a Terminal window in Kali Linux, we use the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从Kali Linux的终端窗口，我们使用以下命令：
- en: '[PRE10]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this command, we are defining a `username` and `password` list. You will
    notice in my example that I am using the same file for both. You can leverage
    a dedicated `username file` if you have one. The service we are targeting is `ftp`,
    and we want Hydra to stop once a valid login is found, so we use the `-f` option,
    as shown in the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们定义了一个`用户名`和`密码`列表。您会注意到在我的例子中，我使用了相同的文件。如果您有一个专门的`用户名文件`，您可以利用它。我们要攻击的服务是`ftp`，我们希望Hydra在找到有效登录后停止，所以我们使用了`-f`选项，如下截图所示：
- en: '![](img/1b06ff81-da30-4975-be38-e0cadf90caf5.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b06ff81-da30-4975-be38-e0cadf90caf5.png)'
- en: 'Figure 16: Using Hydra to brute force a login to the FTP service of Metasploitable
    2'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：使用Hydra对Metasploitable 2的FTP服务进行暴力破解登录
- en: 'Hydra has the ability to resume canceled scans. In the following screenshot,
    you will notice that I used a larger password list and purposefully canceled the
    scan using the *Ctrl* + *C* key sequence. Take note of the following message that
    Hydra wrote. Hydra created a `hydra.restore` file that can be used to resume the
    session:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra有恢复取消扫描的能力。在以下截图中，您会注意到我使用了一个更大的密码列表，并故意使用了*Ctrl* + *C*键序列取消了扫描。请注意Hydra写下的以下消息。Hydra创建了一个`hydra.restore`文件，可以用来恢复会话：
- en: '![](img/81586fb6-3531-4b5d-83cb-86d1a4a38c3d.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81586fb6-3531-4b5d-83cb-86d1a4a38c3d.png)'
- en: 'Figure 17: Hydra resume functionality'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图17：Hydra恢复功能
- en: It's important to keep in mind that most services are configured to lock out
    accounts after a certain number of failed login attempts. This is one way of getting
    noticed by the target's IT staff. Intrusion prevention devices can also come into
    play when there are rapid successions of login attempts. The key is to slow down
    the number of password attempts made to the service. However, this will cost you
    time.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，大多数服务都配置为在一定数量的登录尝试失败后锁定帐户。这是被目标的IT人员注意到的一种方式。当登录尝试迅速连续发生时，入侵防范设备也可能发挥作用。关键是要减慢对服务的密码尝试次数。然而，这会花费您时间。
- en: Hydra is a tool that you should have in your penetration testing toolkit. It
    is capable of running through massive lists of usernames, passwords, and targets.
    It can be tuned using various flags to adapt to situations you may encounter during
    penetration tests.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是您应该在渗透测试工具包中拥有的工具。它能够运行大量的用户名、密码和目标列表。可以使用各种标志对其进行调整，以适应渗透测试中可能遇到的情况。
- en: Medusa
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Medusa
- en: Medusa is claimed to be a speedy, parallel, and modular login brute force tool.
    It supports many services that allow remote authentication.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa声称是一个快速、并行和模块化的登录暴力破解工具。它支持许多允许远程认证的服务。
- en: 'The following are some of the key features of Medusa:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Medusa的一些关键特性：
- en: '**Parallel testing**: This provides the capability of testing against multiple
    hosts, users, or passwords simultaneously.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行测试**：这提供了同时针对多个主机、用户或密码进行测试的能力。'
- en: '**Variable user input**: This provides the ability to specify the target information
    in a variety of ways. You can use files that contain a hosts'' list, for example,
    or you can define a single host in the command.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可变用户输入**：这提供了以各种方式指定目标信息的能力。例如，您可以使用包含主机列表的文件，或者可以在命令中定义单个主机。'
- en: '**Modular design**: Modules exist as independent files (`.mod`). If any changes
    are needed to the modules, the core application does not need to be modified.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化设计**：模块存在为独立文件（`.mod`）。如果需要对模块进行任何更改，核心应用程序无需修改。'
- en: '**Multiple protocols supported**: Similar to Hydra, Medusa supports a wide
    range of applications, including `smtp`, `http`, `pop3`, and `sshv2`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多种协议**：与Hydra类似，Medusa支持广泛的应用程序，包括`smtp`、`http`、`pop3`和`sshv2`。'
- en: 'The following are some of the options that are available with Medusa:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Medusa提供的一些选项：
- en: '`-h` defines the target hostname of the IP address.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`定义目标主机名或IP地址。'
- en: '`-H` specifies the file containing multiple targets.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-H`指定包含多个目标的文件。'
- en: '`-U` specifies the file containing usernames.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-U`指定包含用户名的文件。'
- en: '`-P` specifies the file containing passwords.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`指定包含密码的文件。'
- en: '`-g [num]` defines the number of seconds after which Medusa will give up trying
    to connect.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-g [num]`定义Medusa放弃尝试连接的秒数。'
- en: '`-r [num]` defines the number of seconds between retry attempts.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r [num]`定义重试尝试之间的秒数。'
- en: '`-M` specifies the name of the module that will be used. Note that this is
    without the `.mod` extension.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-M`指定将使用的模块的名称。请注意，这是没有`.mod`扩展名的。'
- en: '`-m` defines parameters to pass to the module.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`定义传递给模块的参数。'
- en: '`-Z` defines a previous scan that you would like to resume.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Z`定义了您想要恢复的先前扫描。'
- en: 'Medusa supports a number of modules. A current list of supported modules can
    be viewed using the `medusa -d` command from a Terminal window, as shown in the
    following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa支持多个模块。可以使用终端窗口中的`medusa -d`命令查看当前支持的模块列表，如下面的屏幕截图所示：
- en: '![](img/15f250fd-ee6d-4973-89af-0e4e66c05293.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15f250fd-ee6d-4973-89af-0e4e66c05293.png)'
- en: 'Figure 18: List of modules supported by Medusa'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图18：Medusa支持的模块列表
- en: 'The syntax for Medusa is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa的语法如下：
- en: '[PRE11]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s perform an FTP attack using Medusa, as we have done with Hydra. The
    command used is as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Medusa执行FTP攻击，就像我们用Hydra一样。使用的命令如下：
- en: '[PRE12]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, I am using the same text file for both the `username` and `passwords`.
    The module being used is `ftp`, and I want Medusa to stop on the first match using
    the `-f` option, as shown in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我正在使用相同的文本文件作为`用户名`和`密码`。正在使用的模块是`ftp`，我希望Medusa在第一次匹配时停止使用`-f`选项，如下面的屏幕截图所示：
- en: '![](img/fb1ff715-3da1-491c-809c-cb3de8567c75.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb1ff715-3da1-491c-809c-cb3de8567c75.png)'
- en: 'Figure 19: Performing an FTP brute force using Medusa'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图19：使用Medusa进行FTP暴力破解
- en: 'Medusa has the capability to resume canceled scans, as shown in the following
    screenshot*.* These can be resumed using the `-Z [unique code]` command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa有恢复取消扫描的能力，如下面的屏幕截图所示。可以使用`-Z [唯一代码]`命令恢复这些扫描：
- en: '![](img/ae831555-b72c-4d0b-8f8c-b102932fe2bc.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae831555-b72c-4d0b-8f8c-b102932fe2bc.png)'
- en: 'Figure 20: Medusa resume functionality'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：Medusa恢复功能
- en: Medusa is another tool that should be in your penetration testing toolkit. It
    is flexible and supports different sets of protocols compared to Hydra.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa是另一个应该在您的渗透测试工具包中的工具。它灵活，并支持与Hydra相比不同的协议集。
- en: Ncrack
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ncrack
- en: Ncrack is a powerful and fast password cracking tool that is focused on network-based
    services that rely on authentication. It is designed to be modular, leveraging
    a command-line syntax that is not new if you are familiar with Nmap's syntax.
    You are able to integrate scans that were executed with Nmap into Ncrack. The
    protocols supported by Ncrack include `ssh`, `rdp`, `ftp`, `telnet`, `http/s`,
    `smb`, and many more.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Ncrack是一个强大而快速的密码破解工具，专注于依赖认证的基于网络的服务。它被设计为模块化，利用命令行语法，如果您熟悉Nmap的语法，这并不陌生。您可以将使用Nmap执行的扫描集成到Ncrack中。Ncrack支持的协议包括`ssh`、`rdp`、`ftp`、`telnet`、`http/s`、`smb`等等。
- en: 'Ncrack is included with Kali Linux, so there is no need to install it as it
    is available to use out of the box. The syntax for Ncrack is as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Ncrack已包含在Kali Linux中，因此无需安装，因为它可以直接使用。Ncrack的语法如下：
- en: '[PRE13]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following are some of the options that are available in Ncrack:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Ncrack提供的一些选项：
- en: '`-cl` defines the minimum number of concurrent parallel connections.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-cl`定义最小并发并行连接数。'
- en: '`-CL` defines the maximum number of concurrent parallel connections.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-CL`定义最大并发并行连接数。'
- en: '`-at` defines the number of authentication attempts per connection. This is
    a good way to avoid account lockouts.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-at`定义每个连接的认证尝试次数。这是避免帐户锁定的好方法。'
- en: '`-U` specifies a username file.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-U`指定用户名文件。'
- en: '`-P` specifies a password file.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`指定密码文件。'
- en: '`-iX` defines the file to input from an Nmap XML output file (`-oX` switch
    in Nmap).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-iX`定义从Nmap XML输出文件（Nmap中的`-oX`开关）输入的文件。'
- en: '`-iN` defines the file to input from an Nmap normal output file (`-oN` switch
    in Nmap).'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-iN`定义从Nmap正常输出文件（Nmap中的`-oN`开关）输入的文件。'
- en: -`iL` defines a list of hosts or networks.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -`iL`定义主机或网络列表。
- en: 'To display the current list of modules that is supported by Ncrack, you can
    run the `ncrack -V` command, as shown in the following screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示Ncrack支持的当前模块列表，可以运行`ncrack -V`命令，如下面的截图所示：
- en: '![](img/b9e3b7f4-efab-4491-ab50-e7ea39274ba9.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9e3b7f4-efab-4491-ab50-e7ea39274ba9.png)'
- en: 'Figure 21: Modules supported by Ncrack'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图21：Ncrack支持的模块
- en: 'Since Ncrack has the ability to perform a brute force attack, let''s perform
    this attack against the Metasploitable 3 virtual machine. Use the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ncrack具有执行暴力破解攻击的能力，让我们对Metasploitable 3虚拟机执行此攻击。使用以下命令：
- en: '[PRE14]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this command, I am using the same file for both the usernames and passwords.
    I am using the `-f` option to stop on a match and `-vv` for an increased verbose
    output, as shown in the following screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我正在使用相同的文件来存储用户名和密码。我正在使用`-f`选项来在匹配时停止，`-vv`用于增加详细输出，如下面的截图所示：
- en: '![](img/7777fd83-04c1-474e-998e-2159d6376146.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7777fd83-04c1-474e-998e-2159d6376146.png)'
- en: 'Figure 22: Using Ncrack against the RDP service of Metasploitable 3'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图22：使用Ncrack攻击Metasploitable 3的RDP服务
- en: While using Ncrack to perform the RDP brute force login, the Metasploitable
    3 virtual machine session was locked. This is something to keep in mind as you
    perform your penetration tests. If an active user or administrator is using a
    system and their session is locked, it's bound to raise an alarm.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Ncrack执行RDP暴力破解登录时，Metasploitable 3虚拟机会话被锁定。这是在进行渗透测试时需要牢记的事情。如果活动用户或管理员正在使用系统并且他们的会话被锁定，这肯定会引起警报。
- en: 'Ncrack enables you to resume a current session by saving a restore file if
    you terminate a scan, as shown in the following screenshot*. *This scan can be
    resumed using the `ncrack --resume [filename]` command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您终止扫描，Ncrack可以通过保存还原文件来恢复当前会话，如下面的截图所示*。*可以使用`ncrack --resume [filename]`命令来恢复此扫描：
- en: '![](img/6dcffb08-8413-4255-80ad-683f9cc34ac7.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dcffb08-8413-4255-80ad-683f9cc34ac7.png)'
- en: 'Figure 23: Resuming an Ncrack session'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图23：恢复Ncrack会话
- en: The protocol you are attempting to brute force in your penetration test will
    determine the tool that you will use. In some cases, you might have a choice of
    more than one tool, and your choice might boil down to the speed of the tool itself.
    A common option to speed up a bruce force attack is to increase the number of
    login threads. In some cases, such as RDP and SMB, this may not be possible, due
    to the restrictions associated with the protocol.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您在渗透测试中尝试暴力破解的协议将决定您将使用的工具。在某些情况下，您可能可以选择多个工具，您的选择可能取决于工具本身的速度。加快暴力破解攻击的常见选项是增加登录线程的数量。在某些情况下，例如RDP和SMB，由于协议相关的限制，这可能是不可能的。
- en: Another factor to consider is the protocol authentication negotiations. For
    example, the authentication negotiations of a protocol such as RDP are more time-consuming
    than that of HTTP. However, if you manage to successfully brute force the RDP
    protocol, your reward is often a lot larger, as this can lead to additional hashes
    that might be of higher privilege. The art behind brute forcing with online tools
    is choosing your targets, user lists, and password files carefully, and with intuition
    before initiating the attack.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要考虑的因素是协议认证协商。例如，RDP等协议的认证协商比HTTP更耗时。然而，如果您成功地暴力破解了RDP协议，您的回报通常会更大，因为这可能会导致更高特权的附加哈希。使用在线工具进行暴力破解的技巧在于在发起攻击之前仔细选择目标、用户列表和密码文件，并且要有直觉。
- en: Dumping passwords from memory
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从内存中获取密码
- en: Password cracking can really be fun, but dumping passwords from memory of a
    compromised host is much quicker. This will give you quick access to credentials
    that can allow you to either elevate your privileges or move laterally in the
    environment. Some systems might be configured with `wdigest` authentication, which
    will provide you with clear text passwords, while others might be more secure,
    which you can then leverage as a pass the hash attack.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 破解密码确实可以很有趣，但从受损主机的内存中获取密码要快得多。这将使您快速访问凭据，从而可以提升权限或在环境中横向移动。一些系统可能配置了`wdigest`认证，这将为您提供明文密码，而其他系统可能更安全，您可以利用它们进行哈希传递攻击。
- en: 'Let''s take a look at some possibilities of dumping passwords from memory.
    We will use what we have learned in the previous chapter ([Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*,
    Diving into the Metasploit Framework)*, and perform an exploit toward the Metasploitable
    3 virtual machine using the `eternalblue` exploit. For the payload, we will leverage
    a `meterpreter` shell, as shown in the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看从内存中获取密码的一些可能性。我们将利用前一章学到的知识（[第5章](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*，深入了解Metasploit框架)*，并对Metasploitable
    3虚拟机执行`eternalblue`漏洞利用。对于有效载荷，我们将利用`meterpreter` shell，如下面的截图所示：
- en: '![](img/9d7aa0b4-47aa-4a7a-a9f7-0bc1127b4c55.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d7aa0b4-47aa-4a7a-a9f7-0bc1127b4c55.png)'
- en: 'Figure 24: Options used in the EternalBlue exploit'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图24：EternalBlue漏洞利用中使用的选项
- en: Once we have a `meterpreter` session established, we can leverage the built-in
    tools of the Metasploit Framework, or use a tool such as **Mimikatz** or **Windows
    Credential Editor**. Using Mimikatz from a `meterpreter` session does not load
    anything to the remote system (nothing touches the disk). The beauty with this
    method is that it's harder to detect since there is nothing being written to the
    disk. Using a tool such as **Windows Credential Editor** (**WCE**) requires us
    to upload the tool to the remote system and then dump the credentials from memory.
    Since this involves writing to the remote system disk, the chances of detection
    are greater.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们建立了`meterpreter`会话，我们可以利用Metasploit框架的内置工具，或者使用诸如**Mimikatz**或**Windows凭据编辑器**之类的工具。从`meterpreter`会话中使用Mimikatz不会加载任何内容到远程系统（不会触及磁盘）。这种方法的美妙之处在于它更难以检测，因为没有任何内容被写入磁盘。使用**Windows凭据编辑器**（**WCE**）这样的工具需要我们将工具上传到远程系统，然后从内存中获取凭据。由于这涉及向远程系统磁盘写入，因此检测的可能性更大。
- en: 'Built into Metasploit, we have the ability to obtain the hashes from memory
    using the `msv` command from a `meterpreter` session. You will notice in the following
    screenshot that we have both the `LM` and `NTLM` hashes dumped from memory for
    the current users:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit中内置了从`meterpreter`会话中使用`msv`命令获取内存中的哈希的功能。您将在以下截图中注意到，我们已经从当前用户的内存中转储了`LM`和`NTLM`哈希：
- en: '![](img/db72ee51-b8e0-4dea-9775-48a3a54d8d30.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db72ee51-b8e0-4dea-9775-48a3a54d8d30.png)'
- en: 'Figure 25: Dumping MSV hashes using Metasploit'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图25：使用Metasploit转储MSV哈希
- en: The next option we have is to dump the Kerberos credentials from memory. This
    can be done using the `kerberos` command from a `meterpreter` session, as shown
    in the following screenshot*.*
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个选择是从内存中转储Kerberos凭据。这可以使用`meterpreter`会话中的`kerberos`命令来完成，如下截图所示。
- en: 'Notice here that we are able to obtain clear text credentials:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们能够获取明文凭据：
- en: '![](img/8474b3a4-cb1f-4f7c-9251-0f3c448e37c5.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8474b3a4-cb1f-4f7c-9251-0f3c448e37c5.png)'
- en: 'Figure 26: Dumping Kerberos credentials using Metasploit'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图26：使用Metasploit转储Kerberos凭据
- en: 'The same is possible using the `wdigest` command, as shown in the following
    screenshot*.* This is possible since the authentication protocol being used is
    `wdigest`, which is insecure:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wdigest`命令也是可能的，如下截图所示。这是可能的，因为正在使用的身份验证协议是`wdigest`，这是不安全的：
- en: '![](img/7b6b883a-a3ed-486e-9d3a-dae3084cd0f7.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b6b883a-a3ed-486e-9d3a-dae3084cd0f7.png)'
- en: 'Figure 27: Dumping wdigest credentials using Metasploit'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图27：使用Metasploit转储wdigest凭据
- en: From `meterpreter`, we are able to leverage Mimikatz. Mimikatz was created to
    demonstrate the vulnerabilities in authentication protocols used by Microsoft
    operating systems. It is the most widely used hacker tool and hosts a ton of features,
    and is constantly being updated.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 从`meterpreter`，我们能够利用Mimikatz。Mimikatz是为了演示Microsoft操作系统使用的身份验证协议的漏洞而创建的。它是最广泛使用的黑客工具，拥有大量功能，并且不断更新。
- en: Mimikatz can be loaded using the `load mimikatz` command from a `meterpreter`
    session. Once it has been loaded, you can use the pipe commands to Mimikatz using `mimikatz_command
    -f`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`meterpreter`会话中的`load mimikatz`命令加载Mimikatz。加载后，您可以使用`mimikatz_command
    -f`命令对Mimikatz进行管道命令。
- en: 'To dump the hashes of a compromised host, you can use the `mimikatz_command
    -f samdump::hashes` command, as shown in the following screenshot.Notice the **New
    Technology LAN Manager** (**NTLM**) hashes that can be copied if you want to perform
    offline password cracking against them:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要转储受损主机的哈希值，您可以使用`mimikatz_command -f samdump::hashes`命令，如下截图所示。注意，如果您想对其进行离线密码破解，可以复制**新技术局域网管理器**（**NTLM**）哈希：
- en: '![](img/256784b0-106d-4a39-895f-e4e2f7fd89c2.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/256784b0-106d-4a39-895f-e4e2f7fd89c2.png)'
- en: 'Figure 28: Dumping hashes from the SAM database using Mimikatz inside Meterpreter'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图28：在Meterpreter中使用Mimikatz转储SAM数据库中的哈希
- en: 'You can extract the passwords from memory using the `mimikatz_command -f sekurlsa::searchPasswords`
    command, as shown in the following screenshot:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`mimikatz_command -f sekurlsa::searchPasswords`命令从内存中提取密码，如下截图所示：
- en: '![](img/b8e79e3e-787f-4316-a008-2c242543a48c.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8e79e3e-787f-4316-a008-2c242543a48c.png)'
- en: 'Figure 29: Extracting passwords from memory using Mimikatz'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图29：使用Mimikatz从内存中提取密码
- en: 'Using the flexibility of `meterpreter`, you can `upload` files, such as the
    Windows credential editor. This will allow you to dump passwords from memory as
    follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 利用`meterpreter`的灵活性，您可以`上传`文件，例如Windows凭据编辑器。这将允许您从内存中转储密码，如下所示：
- en: '![](img/7f03bdd5-9195-4e5a-bfaa-5165df3edfce.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f03bdd5-9195-4e5a-bfaa-5165df3edfce.png)'
- en: 'Figure 30: Using Windows credential editor to dump credentials from memory'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图30：使用Windows凭据编辑器从内存中转储凭据
- en: Being able to dump passwords from memory can be really rewarding, especially
    if a high privilege account is obtained on the first shot.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从内存中转储密码可能会非常有益，特别是如果第一次就获得了高特权帐户。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Passwords are something that we all use daily, and having a good understanding
    of how to crack passwords can aid in a successful penetration test. Keep in mind
    the trade-off with password security; the more complex the password is, the greater
    are the chances of people circumventing it. Password re-use is a common flaw that
    people make, so you might end up discovering that an end user's password for an
    online service is the same as their user account for the corporate network. In
    all the tools used for password cracking, there is support for throttling brute
    force attempts. This feature enables you to blend in brute force attacks with
    everyday traffic and ultimately reduce lockouts.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 密码是我们每天都在使用的东西，了解如何破解密码可以帮助成功进行渗透测试。请记住密码安全性的权衡；密码越复杂，人们绕过它的机会就越大。密码重复使用是人们常犯的一个缺陷，因此您可能会发现，某个终端用户的在线服务密码与其企业网络用户帐户的密码相同。在用于破解密码的所有工具中，都支持限制暴力攻击尝试。此功能使您能够将暴力攻击与日常流量混合在一起，最终减少锁定。
- en: In this chapter, you have learned about the history of passwords. We looked
    at how you can discover usernames from public files that expose metadata. You
    have learned about online resources where password and user lists can be obtained.
    You learned how to use your powers of perception in password profiling, and how
    to create profile password lists. We looked at password mutating, and how we can
    make a profiled password list better suited for your target. We dived into offline
    password attacks and how various tools can be used to crack password hashes. In
    the online password attack section, we looked at using various tools to perform
    brute force attacks against network services that leverage authentication.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了密码的历史。我们看了一下如何从公开文件中发现暴露元数据的用户名。您已经了解了可以获取密码和用户列表的在线资源。您学会了如何在密码配置文件中使用您的感知能力，以及如何创建配置文件密码列表。我们研究了密码变异，以及如何使配置文件密码列表更适合您的目标。我们深入研究了离线密码攻击以及如何使用各种工具来破解密码哈希。在在线密码攻击部分，我们看了如何使用各种工具对利用身份验证的网络服务进行暴力攻击。
- en: In the next chapter ([Chapter 7](5b0d52fc-f241-4d66-ae8a-0238b1c96399.xhtml), *Working
    with Burp Suite*), we will look at how to use Burp Suite in a penetration test.
    We will work with the various modules of Burp Suite and perform various attacks
    on web servers.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（第7章《使用Burp Suite》）中，我们将学习如何在渗透测试中使用Burp Suite。我们将使用Burp Suite的各种模块，并对Web服务器进行各种攻击。
- en: Questions
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is one way of obtaining usernames publicly?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用户名的一种方式是什么？
- en: What is the benefit of password profiling?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码分析的好处是什么？
- en: What tool can be used for password mutation?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么工具可以用于密码变异？
- en: What is the difference between online and offline password attacks?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线和离线密码攻击有什么区别？
- en: What should you keep in mind when dumping credentials from memory?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从内存中转储凭据时应该记住什么？
