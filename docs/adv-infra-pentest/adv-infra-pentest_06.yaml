- en: Exploiting Git and Continuous Integration Servers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Git和持续集成服务器
- en: '**Continuous integration** (**CI**) and **Continuous delivery** (**CD**) are
    becoming two major parts of modern software development. This chapter is an amazing
    opportunity to discover how to secure CI servers. We are going to start with refreshers
    about software development methodologies and CI. In addition to learning how to
    build a CI environment from scratch, we will discover what it takes to secure
    CI and CD pipelines.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续交付**（**CD**）正在成为现代软件开发的两个重要部分。本章是一个了解如何保护CI服务器的绝佳机会。我们将从头开始学习软件开发方法和CI的构建。除了学习如何从头开始构建CI环境，我们还将了解如何保护CI和CD流水线需要做些什么。'
- en: Software development methodologies
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发方法论
- en: 'A software project, like any project, needs to go through well-defined steps
    to be well-managed. In order to ensure efficient project management, a software
    development project requires a number of steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何项目一样，软件项目需要经历明确定义的步骤才能得到良好的管理。为了确保高效的项目管理，软件开发项目需要一系列步骤：
- en: '**Requirements**'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**需求**'
- en: '**Design**'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计**'
- en: '**Implementation**'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施**'
- en: '**Verification**'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证**'
- en: '**Maintenance**'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**维护**'
- en: 'The steps are shown here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: '![](img/00177.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: 'The previous steps are carried out through different methods, according to
    business requirements. There are many development methodologies:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据业务需求，先前的步骤通过不同的方法进行。有许多开发方法论：
- en: '**Waterfall methodology:** This is a linear and sequential  methodology; there
    is no turning back in it.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布方法论：这是一种线性和顺序的方法论；在其中不能回头。
- en: '**Prototyping methodology:** In this methodology, the product is built and
    tested again and again.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原型方法论**：在这种方法论中，产品被反复构建和测试。'
- en: '**Spiral methodology:** This methodology is risky and costly to use as it is
    done by iterating the development processes (objectives identification, alternatives,
    constraints, and planning).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**螺旋方法论**：这种方法论是有风险和成本高昂的，因为它通过迭代开发过程（目标识别、替代方案、约束和规划）来完成。'
- en: '**Agile methodologies: **Agile methodologies are methods based on iterating
    and incrementing, which creates a flexible and a rapidly adaptive environment.
    There are many well-known agile methods, such as:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏捷方法论：**敏捷方法论是基于迭代和增量的方法，创造了一个灵活和快速适应的环境。有许多著名的敏捷方法，例如：'
- en: '**Crystal:** This methodology is based on people communications and interactions.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水晶：**这种方法论基于人员的沟通和互动。'
- en: '**Scrum:** This is an  agile methodology (there are even some experts who are
    considering it as an important part in agile movement and not an agile methodology)
    for managing software development, by dividing the project into actions during 
    specific time periods called **sprints**.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scrum**：这是一种敏捷方法论（甚至有一些专家认为它是敏捷运动的重要组成部分，而不是一种敏捷方法论），用于将软件开发项目分解为在特定时间段内进行的**冲刺**。'
- en: '**Extreme Programming** (**XP**): This includes short development cycles and
    is aligned with customer needs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**极限编程**（**XP**）：包括短期开发周期，并与客户需求保持一致。'
- en: '**Feature-Driven Development** (**FDD**): This is a features- and client-centric
    methodology.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征驱动开发**（**FDD**）：这是一种以特征和客户为中心的方法论。'
- en: 'Agile development methodologies are less risky than other classic methodologies.
    The following graph shows the Agile development cycle:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发方法论比其他经典方法论风险较小。以下图表显示了敏捷开发周期：
- en: '![](img/00178.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: Continuous integration
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: 'CI is a software development practice where developers have the chance to integrate
    their code many times a day before waiting for the end of the project. Nowadays,
    CI is a key practice in every software project. These frequent check-ins solve
    the classic integration headaches, and they allow developers and CI adopters the
    following benefits:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CI是一种软件开发实践，开发人员有机会在项目结束之前每天多次集成他们的代码。如今，CI是每个软件项目中的关键实践。这些频繁的检查解决了经典的集成问题，并使开发人员和CI采用者获得以下好处：
- en: Error detection in a short period of time
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在短时间内检测错误
- en: Detecting and locating issues easily
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松检测和定位问题
- en: Delivering software products faster
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地交付软件产品
- en: CI adoption is a major step for avoiding tense integrations, and it delivers
    software in time because inaccurate time and effort estimates are main causes
    of a failed project, in addition to the lack of effective communication at all
    levels. CI is based on automation. Automation is an integral aspect of CI. Thus,
    automation of the tests will ensure faster development and in product-to-market time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CI采用是避免紧张集成的重要一步，并且它能够及时交付软件，因为不准确的时间和工作量估计是项目失败的主要原因，另外还有各个层面缺乏有效沟通。CI基于自动化。自动化是CI的一个重要方面。因此，测试的自动化将确保更快的开发和产品上市时间。
- en: Types of tests
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型
- en: 'As discussed before, automating tasks is a necessity in CI. You can perform
    many types of test, and not necessarily all of them at once. According to a test
    automation strategy introduced by Mike Cohn, tests can be represented by the following
    pyramid:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，自动化任务在CI中是必不可少的。您可以执行许多类型的测试，而不一定要一次执行所有测试。根据Mike Cohn介绍的测试自动化策略，测试可以用以下金字塔表示：
- en: '![](img/00179.gif)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.gif)'
- en: '**Unit tests** are narrow in scope and typically verify the behavior of individual
    methods or functions.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**范围狭窄，通常验证单个方法或函数的行为。'
- en: '**Integration tests** make sure that multiple components behave correctly together.
    This can involve several classes, as well as testing the integration with other
    services.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成测试**确保多个组件正确地一起运行。这可能涉及多个类，以及与其他服务的集成测试。'
- en: '**Acceptance tests** are similar to the integration tests, but they focus on
    the business cases rather than the components themselves.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收测试**类似于集成测试，但它们侧重于业务案例而不是组件本身。'
- en: '**UI tests** will make sure that the application functions correctly from a
    user perspective.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**UI测试**将确保应用程序从用户角度正确运行。'
- en: 'The following summarizes the CI environment:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CI环境的总结：
- en: '![](img/00180.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: Continuous integration versus continuous delivery
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成与持续交付
- en: '**C****I** is a subset of **CD**. In the CD process, we add an extra layer
    that automates the delivery during the release process. This additional step ensures
    that even after the release of the product and the delivery to the client, you
    can make new changes quickly based on a predefined schedule (daily, weekly, monthly,
    and so on) according to your business requirements. If all the tests are successful,
    the new changes will be deployed automatically, which speeds up the release of
    a product to your customers in an efficient way.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI**是**CD**的一个子集。在CD过程中，我们添加了一个额外的层，用于在发布过程中自动化交付。这个额外的步骤确保即使在产品发布和交付给客户之后，您也可以根据预定的时间表（每天、每周、每月等）根据业务需求快速进行新的更改。如果所有测试都成功，新的更改将被自动部署，从而以高效的方式加快产品向客户的发布。'
- en: 'To accelerate the process, you can add a further step called Continuous deployment.
    The following diagram shows the three operations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快流程，您可以添加一个称为持续部署的进一步步骤。以下图表显示了三个操作：
- en: '![](img/00181.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: DevOps
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps
- en: '**DevOps** is an enhanced practice that enables collaboration between developers
    and operation managers during the entire product life cycle. It is a set of tools
    and mindset principles implemented for successfully building a communication channel
    between the two parties. You can have a clearer understanding by looking at the
    following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps**是一种增强的实践，它在整个产品生命周期中使开发人员和运营经理之间能够进行协作。这是一组工具和思维原则，用于成功地建立两方之间的沟通渠道。通过查看以下图表，您可以更清楚地了解：'
- en: '![](img/00182.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: Continuous integration with GitHub and Jenkins
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub和Jenkins进行持续集成
- en: 'We have had an overview of development methodologies and the different product
    life cycle processes. Now let''s learn how to build a real-world CI environment
    using GitHub and the Jenkins CI server, illustrated here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经概述了开发方法和不同的产品生命周期过程。现在让我们学习如何使用GitHub和Jenkins CI服务器构建真实的CI环境，如下所示：
- en: '![](img/00183.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: Jenkins is an open source automation server. Thanks to its ability to automate
    tasks, it can perform CI. You can download it from [https://jenkins.io/:](https://jenkins.io/)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个开源的自动化服务器。由于它具有自动化任务的能力，它可以执行CI。您可以从[https://jenkins.io/:](https://jenkins.io/)下载它。
- en: '![](img/00184.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: Installing Jenkins
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins
- en: 'During the demonstration, we are going to use an Ubuntu 16.04 machine. To install
    Jenkins, you need to add the repository key, add the Jenkins Debian package repository
    to the `sources.list` file using the `echo` command, and update the `sources.list`
    file by typing:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示中，我们将使用Ubuntu 16.04机器。要安装Jenkins，您需要添加存储库密钥，使用`echo`命令将Jenkins Debian软件包存储库添加到`sources.list`文件，并通过输入以下内容来更新`sources.list`文件：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/00185.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'Now, install Jenkins using the `apt-get install Jenkins` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`apt-get install Jenkins`命令安装Jenkins：
- en: '![](img/00186.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: 'You can check whether the Jenkins service is running by typing:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入以下内容来检查Jenkins服务是否正在运行：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/00187.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00187.jpeg)'
- en: Open port `8080` for Jenkins by typing `sudo ufw allow 8080`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入`sudo ufw allow 8080`来为Jenkins打开端口`8080`。
- en: 'Go to `https://www.<your domain/IP here>.com:8080` and complete the required
    configurations:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 访问`https://www.<your domain/IP here>.com:8080`并完成所需的配置：
- en: '![](img/00188.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00188.jpeg)'
- en: 'Select your plugin mode:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您的插件模式：
- en: '![](img/00189.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00189.jpeg)'
- en: 'Create an Admin User, save, and we are done:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个管理员用户，保存，然后我们完成了：
- en: '![](img/00190.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00190.jpeg)'
- en: Voila!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大功告成！
- en: '![](img/00191.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00191.jpeg)'
- en: 'Create a new item and complete the configurations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目并完成配置：
- en: '![](img/00192.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00192.jpeg)'
- en: Continuous integration attacks
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成攻击
- en: 'Like any modern organization, precious assets, continuous integrations, and
    CD servers are high targets because they represent good entry points for compromising
    production systems. There are many dangerous attacks that threaten CI servers.
    The following are some examples of CI/CD server attacks:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何现代组织一样，宝贵的资产、持续集成和CD服务器是高度的目标，因为它们代表着入侵生产系统的良好入口点。有许多危险的攻击威胁CI服务器。以下是一些CI/CD服务器攻击的示例：
- en: Reverse shell using CI
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CI进行反向shell
- en: Unauthorized commit to master
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经授权提交到主分支
- en: Jenkins-CI Script-Console Java Execution
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins-CI脚本控制台Java执行
- en: Continuous integration server penetration testing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成服务器渗透测试
- en: Securing CI and CD servers is essential. Establishing security controls is critical
    to securing the pipelines, as they are a bridge between the source code and the
    production servers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 保护CI和CD服务器至关重要。建立安全控制对于保护流水线至关重要，因为它们是源代码和生产服务器之间的桥梁。
- en: Rotten Apple project for testing continuous integration  or continuous delivery
    system security
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rotten Apple项目用于测试持续集成或持续交付系统的安全性
- en: The Rotten Apple project is an open source project developed with the aim of
    giving developers and penetration testers an easy and efficient experience when
    testing CI servers, by delivering various features and capabilities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Rotten Apple项目是一个开源项目，旨在为开发人员和渗透测试人员在测试CI服务器时提供简单高效的体验，通过提供各种功能和能力。
- en: You can clone the project from its GitHub repository by typing `sudo git clone
    https://github.com/claudijd/rotten_apple.   `
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入`sudo git clone https://github.com/claudijd/rotten_apple`来从其GitHub存储库克隆项目。
- en: Continuous security with Zed Attack Proxy
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zed Attack Proxy进行持续安全性
- en: '**Zed Attack Proxy** (**ZAP**), shown here, is a well-known security open source
    tool. It comes with various useful capabilities for penetration testers. ZAP can
    play a huge role as an additional CI security layer. In other words, it could
    be a continuous security layer for a web application. ZAP and Jenkins deliver
    the possibility of experiencing an additional component. Then, you are not delivering
    a software project in time, but you are enhancing the security of the CI/DI pipelines:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zed Attack Proxy**（**ZAP**），如图所示，是一个著名的开源安全工具。它具有各种对渗透测试人员有用的功能。ZAP可以作为额外的CI安全层发挥重要作用。换句话说，它可以成为Web应用程序的持续安全层。ZAP和Jenkins提供了体验额外组件的可能性。然后，您不仅仅是按时交付软件项目，而是增强了CI/DI管道的安全性：'
- en: '![](img/00193.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00193.jpeg)'
- en: Thanks to a ZAP Jenkins plugin, you can enhance the security of a CI environment.
    After the tests, ZAP will generate a report in different formats (XHTML, XML,
    and JSON).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢ZAP Jenkins插件，您可以增强CI环境的安全性。测试后，ZAP将以不同格式（XHTML、XML和JSON）生成报告。
- en: 'To install the ZAP plugin, you can use the web interface: go to `manage Jenkins
    -> manage plugins`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装ZAP插件，可以使用Web界面：转到“管理Jenkins -> 管理插件”。
- en: 'Use the Filter bar to search for ZAP, as in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过滤栏搜索ZAP，如下面的屏幕截图所示：
- en: '![](img/00194.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00194.jpeg)'
- en: 'Click on Install without restart:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“无需重启安装”：
- en: '![](img/00195.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00195.jpeg)'
- en: 'Go to the job and select the Run OWASP ZAP proxy in the Build options:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 转到作业并在构建选项中选择运行OWASP ZAP代理：
- en: '![](img/00196.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00196.jpeg)'
- en: 'Complete the required configuration and finally build the job:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所需的配置，最后构建作业：
- en: '>![](img/00197.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/00197.jpeg)'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was an overview of the hidden power of CI servers and their benefits
    for enterprises. Thus, we discovered how to build a CI environment step by step
    and learned what it takes to secure CI/CD servers. The next chapter will take
    you on an intensive journey where you will learn how Metasploit and PowerShell
    are used to attack organization infrastructures.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了CI服务器的潜在力量及其对企业的好处。因此，我们了解了如何逐步构建CI环境，并了解了保护CI/CD服务器所需的步骤。下一章将带您进行一次深入的旅程，您将了解如何使用Metasploit和PowerShell来攻击组织基础设施。
