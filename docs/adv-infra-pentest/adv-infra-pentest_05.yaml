- en: Docker Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker开发
- en: After learning how to exploit and defend Active Directory, let's continue our
    journey. This chapter will walk you through the different aspects of Docker containers.
    In this chapter, we will cover the basics from installing and configuring Docker
    to exploiting it. You will also get a glimpse of the power of Docker containers
    by learning how to build a complete penetration testing laboratory.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何利用和保护Active Directory之后，让我们继续我们的旅程。本章将带您了解Docker容器的不同方面。在本章中，我们将从安装和配置Docker到利用它的基础知识。您还将通过学习如何构建完整的渗透测试实验室来一窥Docker容器的威力。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Docker threats
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker威胁
- en: Docker breakout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker突破
- en: Build a Docker penetration testing lab
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Docker渗透测试实验室
- en: Docker fundamentals
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker基础知识
- en: 'Docker has spread like wildfire across modern organizations, thanks to its
    capabilities and promising services. It is an open source project with an Apache
    2.0 license that allows developers to package up their applications, without caring
    about dependencies issues, that has made a huge impact in modern application development.
    Since its development in March 2013, it has allowed developers to focus on their
    products instead of wasting time on fixing library problems. Thus, the three main
    principles of Docker are: develop, ship, and run. These three terms explain the
    main concept of Docker. Developers just need to develop their applications, and
    Docker will take care of the rest, in other words. It allows them to ship the
    applications and deploy them in any system. For more information about container
    management services, have a look at the project official website, [www.docker.com](http://www.docker.com), [as
    shown here:](http://www.docker.com)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Docker凭借其功能和有前途的服务在现代组织中迅速传播开来。这是一个开源项目，采用Apache 2.0许可证，允许开发人员打包他们的应用程序，而不必担心依赖问题，这在现代应用程序开发中产生了巨大影响。自2013年3月开发以来，它使开发人员能够专注于他们的产品，而不是浪费时间解决库问题。因此，Docker的三个主要原则是：开发、交付和运行。这三个术语解释了Docker的主要概念。开发人员只需开发他们的应用程序，Docker将处理其余部分，换句话说。它允许他们交付应用程序并在任何系统中部署它们。有关容器管理服务的更多信息，请访问项目官方网站[www.docker.com](http://www.docker.com)，如下所示：
- en: '![](img/00136.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: Virtualization
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化
- en: 'Before diving into Docker''s magic powers, let''s go back into the past and
    discover how and why all this happened. Necessity is the mother of invention,
    as they say, and many years ago technicians were facing a huge problem called
    **the iceberg problem**; they were noticing that organizations were using only
    30% of their total technical resources. So, the need for a new way of optimizing
    resources was raised. That is when the term virtualization appeared. Virtualization
    is based on breaking up large-scale resources into small resources. It is not
    only a great way to manage resources but the isolation approach added a protection
    layer, in addition to many other advantages such as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨Docker的魔力之前，让我们回到过去，发现这一切是如何发生的以及为什么会发生。正如他们所说，需求是发明之母，许多年前技术人员面临着一个巨大的问题，被称为**冰山问题**；他们注意到组织只使用了其总技术资源的30%。因此，提出了对资源进行优化的新方法的需求。这就是虚拟化这个术语出现的时候。虚拟化是基于将大规模资源分解为小资源的原理。这不仅是管理资源的好方法，而且隔离方法增加了一层保护，除了许多其他优点，例如：
- en: Minimizing costs (many hosts on one hardware)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低成本（一个硬件上的多个主机）
- en: Easy management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单管理
- en: Separating resources into logical, separate virtual machines
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将资源分隔为逻辑上的独立虚拟机
- en: 'To make all this happen, software named hypervisor is needed. It is a piece
    of software that manages all the virtualization aspects. It resides between the
    hardware and software. The basic role of a hypervisor is to manage the resources
    by assigning the required amount for operating the systems. The are two main types
    of hypervisors:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现所有这些，需要一种名为虚拟机监视程序的软件。它是一种管理所有虚拟化方面的软件。它位于硬件和软件之间。虚拟机监视程序的基本作用是通过为操作系统分配所需的资源来管理资源。虚拟机监视程序有两种主要类型：
- en: '**Type 1**: This type of hypervisor runs directly on the bare metal of the
    hardware, such as VMware ESXi and Xen'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型1**：这种类型的虚拟机监视程序直接在硬件的裸金属上运行，例如VMware ESXi和Xen'
- en: '**Type 2**: This type of hypervisor runs on an operating system such as VMware
    Workstation and Sun VirtualBox'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型2**：这种类型的虚拟机监视程序在操作系统上运行，例如VMware Workstation和Sun VirtualBox'
- en: 'The following diagram illustrates the difference between the two types of hypervisors:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了两种类型的虚拟机监视程序之间的区别：
- en: '![](img/00137.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: Cloud computing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算
- en: 'Cloud computing has seen a phenomenal growth in recent years. This computing
    paradigm is based on resource pools that provide customers with scalability and
    a long list of services. It reduces costs while clients are paying only for what
    they use, provides electric bills or other services. In other words, you pay as
    you go. This managed compute infrastructure provides a different on-premises environment
    and services such as storage, networks, applications, servers, and other many
    needed services in every modern organization. We can divide cloud computing models
    into the following three models:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，云计算取得了惊人的增长。这种计算范式基于资源池，为客户提供可伸缩性和一长串的服务。它降低了成本，客户只支付他们使用的部分，提供电费或其他服务。换句话说，你按需付费。这种托管计算基础设施提供了不同的本地环境和服务，如存储、网络、应用程序、服务器和其他现代组织中所需的许多服务。我们可以将云计算模型分为以下三种模型：
- en: '**Software as a Service** (**SaaS**):The client is given access to end-user
    applications hosted in the cloud'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件即服务**（**SaaS**）：客户可以访问托管在云中的最终用户应用程序'
- en: '**Platform as a Service** (**PaaS**): The client is given access to a runtime
    environment and processing platforms'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务**（**PaaS**）：客户可以访问运行时环境和处理平台'
- en: '**Infrastructure as a Service** (**IaaS**): The client is given access to a
    virtualized infrastructure, including servers, storage, and networks'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即服务（IaaS）：客户可以访问虚拟化基础设施，包括服务器、存储和网络
- en: 'The following diagram gives a simple description of the different models:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表简要描述了不同的模型：
- en: '![](img/00138.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: 'When we talk about cloud computing, organizations can benefit from three types
    of cloud computing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论云计算时，组织可以从三种类型的云计算中受益：
- en: Public cloud
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共云
- en: Private cloud
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有云
- en: Hybrid cloud
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合云
- en: Cloud computing security challenges
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算安全挑战
- en: The information hosted in the cloud is an attractive target for malicious attackers.
    That is why it is essential to understand cloud security issues and know how to
    address them. According to the 2017 Cloud Security Report, more than 350,000 information
    security professionals think that data protection is the number one concern in
    front of adopting cloud computing. Stealing sensitive information is really a
    serious concern when it comes to cloud computing. With the EU **General Data Protection
    Regulation** (**GDPR**), starting from 2018, European companies will face  restrictions
    on internal data flows and could be fined millions of dollars if they don't respect
    the new regulations. Encryption is always a great solution to protecting sensitive
    cloud data. Weak authentication and the lack of a good identity management is
    one of the biggest cloud threats. Two-factor authentication mechanisms should
    be in place to make hacking attempts harder.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 云中托管的信息是恶意攻击者的一个吸引人的目标。这就是为什么了解云安全问题并知道如何解决它们至关重要。根据2017年的云安全报告，超过35万名信息安全专业人员认为数据保护是采用云计算的头号关注点。在涉及云计算时，窃取敏感信息确实是一个严重的问题。从2018年开始，根据欧盟《通用数据保护条例》（GDPR），欧洲公司将面临对内部数据流的限制，并且如果他们不遵守新规定可能会被罚款数百万美元。加密始终是保护敏感云数据的一个很好的解决方案。弱身份验证和缺乏良好的身份管理是最大的云威胁之一。应该采用双因素身份验证机制，使黑客攻击变得更加困难。
- en: Docker containers
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker容器
- en: 'Docker containers are a form of virtualization but instead of creating an entire
    virtual machine, developers need to create containers. In other words, Docker
    containers are small virtual machines without the headache of creating virtual
    machines. The following diagram shows the difference between a virtual machine
    and a Docker container:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器是一种虚拟化形式，但开发人员不需要创建整个虚拟机，而是需要创建容器。换句话说，Docker容器是没有创建虚拟机的麻烦的小型虚拟机。以下图表显示了虚拟机和Docker容器之间的区别：
- en: '![](img/00139.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: Deploying Docker containers will give developers the ability to reduce costs
    in addition to providing a lightweight and scalable environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Docker容器将使开发人员能够降低成本，同时提供轻量级和可扩展的环境。
- en: Now, let's return to the present. To install Docker, we are going to use an
    Ubuntu 16.04 (Kali Linux can also be used) machine as a demonstration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到现在。要安装Docker，我们将使用Ubuntu 16.04（也可以使用Kali Linux）机器进行演示。
- en: 'First, add the GPG key for the official Docker repository:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为官方Docker存储库添加GPG密钥：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/00140.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: 'Add the Docker repository to APT sources:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将Docker存储库添加到APT源：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/00141.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'Finally, install Docker:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装Docker：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/00142.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'To check the Docker daemon, you can use the `systemct1` command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Docker守护程序，可以使用`systemct1`命令：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00143.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'For further information about Docker, just type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker的更多信息，只需键入：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/00144.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: 'To get the Docker version, hit the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Docker版本，请使用以下命令：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/00145.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: 'The typical Docker command format is:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的Docker命令格式是：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Docker containers are based on images that are sets of parameters and filesystems.
    To check all the images in a Docker container, type:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器基于一组参数和文件系统的镜像。要检查Docker容器中的所有镜像，请键入：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To run an image, use the command `run`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行一个镜像，使用`run`命令：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are many other amazing capabilities in Docker. You can check them using
    Docker commands. These are some Docker commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还具有许多其他令人惊叹的功能。您可以使用Docker命令进行检查。以下是一些Docker命令：
- en: '`create`: To create a  new container'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create`：创建新容器'
- en: '`cp`:  To copy files'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp`：复制文件'
- en: '`exec`: To execute a command in a container'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec`：在容器中执行命令'
- en: '`kill`:  To kill a running container'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`：杀死正在运行的容器'
- en: '`network`: To check docker networks'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`network`：检查Docker网络'
- en: '`ps`: To list containers'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`：列出容器'
- en: '`build`: To build a container based on a Dockerfile'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：基于Dockerfile构建容器'
- en: 'You can check all the available commands by typing `sudo docker`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过键入`sudo docker`来检查所有可用命令：
- en: '![](img/00146.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00146.jpeg)'
- en: 'A Dockerfile is a text file that contains information about the environment,
    files, and commands of a required image. You can edit it using any normal text
    editor. The following represents an elasticsearch (elasticsearch is a distributed
    RESTful search and analytics engine). A Dockerfile sample appears as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile是一个包含有关所需镜像的环境、文件和命令信息的文本文件。您可以使用任何普通文本编辑器进行编辑。以下是elasticsearch（elasticsearch是一个分布式RESTful搜索和分析引擎）的Dockerfile示例：
- en: '![](img/00147.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: 'To build an image from a Dockerfile, type:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Dockerfile构建镜像，请键入：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For the demonstration, I am using the Microsoft Azure Cloud platform. You can
    visit the Azure official website from here [www.azure.com](https://azure.microsoft.com/en-us/?v=18.01).
    So, to build an image, I created an Azure container registry and logged in:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示中，我正在使用Microsoft Azure云平台。您可以从这里访问Azure官方网站[www.azure.com](https://azure.microsoft.com/en-us/?v=18.01)。因此，要构建一个镜像，我创建了一个Azure容器注册表并登录：
- en: '![](img/00148.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: 'Click on New and create a new Azure Container Registry:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“新建”并创建新的Azure容器注册表：
- en: '![](img/00149.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: 'To login, I used the `login` command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录，我使用了`login`命令：
- en: '![](img/00150.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: 'To check if we deployed the environment successfully, I used the `pull` command
    which pulls an image or a repository from a registry, which is a default Microsoft
    Azure image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们是否成功部署了环境，我使用了`pull`命令，该命令从注册表中拉取图像或存储库，这是默认的Microsoft Azure图像：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/00151.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00151.jpeg)'
- en: To run a container that is an instance of a Docker image, we need to use the
    `run` command.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行一个Docker镜像的实例容器，我们需要使用`run`命令。
- en: 'To list all the available containers, use the `ps` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有可用的容器，请使用`ps`命令：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/00152.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: 'There are many other useful commands for containers as:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他有用的容器命令，例如：
- en: '`top`: Processes within a container'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`：容器内的进程'
- en: '`stop`: Stops a container'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`：停止容器'
- en: '`rm`: Deletes a container'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rm`：删除容器'
- en: '`stats`:  Statistics about a container'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats`：有关容器的统计信息'
- en: '`pause`: Pause a container'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pause`：暂停容器'
- en: 'A Docker container is based on a life cycle that is illustrated by the following
    workflow:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器基于以下工作流程的生命周期：
- en: '![](img/00153.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00153.jpeg)'
- en: Docker exploitation
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker利用
- en: 'You learned how to install and configure Docker containers. As a penetration
    tester, you need to be aware of the potential security issues and the potential
    threats against Docker systems. According to ClusterHQ in 2015, more than 60%
    of enterprises are concerned about containers'' security more than any other issue
    in the Docker production environment. There are many security concerns that face
    Docker containers. In order to do that, penetration testers should consider the
    following common container security challenges and vectors:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何安装和配置Docker容器。作为渗透测试人员，您需要了解Docker系统可能存在的安全问题和潜在威胁。根据ClusterHQ在2015年的数据，超过60%的企业对Docker生产环境中的容器安全问题更为关注。Docker容器面临许多安全问题。为此，渗透测试人员应考虑以下常见容器安全挑战和向量：
- en: Kernel exploits
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核利用
- en: '**Denial-of-service** (**DoS**)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）'
- en: Container breakout
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器越狱
- en: Poisoned images
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被感染的镜像
- en: Data theft
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据窃取
- en: Kernel exploits
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核利用
- en: 'Docker containers are running on servers, but remember that there is a kernel**. **In
    fact, all the processes share the same kernel**. **Docker comes with many capabilities
    such as:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器正在服务器上运行，但请记住有一个内核**。**实际上，所有进程共享相同的内核**。** Docker具有许多功能，例如：
- en: '`chown`: To change the ownership of any file'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown`：更改任何文件的所有权'
- en: '`fowner`: To bypass permission checks on operations that require the UID of
    a process and the UID of a file to be the same'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fowner`：绕过需要进程UID和文件UID相同的操作的权限检查'
- en: '`kill`: To send kill signals to non-root processes'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`：向非根进程发送终止信号'
- en: '`setgid`: To manipulate process GIDs and  GID list'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setgid`：操纵进程GID和GID列表'
- en: '`setuid`: To manipulate process UIDs'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setuid`：操纵进程UID'
- en: '`net_raw`: To allow the use of raw and packet sockets'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_raw`：允许使用原始和数据包套接字'
- en: 'To check the available capabilities, you can use the `pscap` command. Before
    that, you need to make sure that you have installed the `libcap-ng-utils` dependency:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查可用的功能，可以使用`pscap`命令。在此之前，您需要确保已安装`libcap-ng-utils`依赖项：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/00154.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00154.jpeg)'
- en: '**Set user ID** (**SUID**) upon execution and **Set group ID** (**SGID**) upon
    execution are discussed previously in the [Chapter 2](part0108.html#36VSO0-ccc418ef6725406983cf4586f3600cdf),
    *Advanced Linux Exploitation*. They are two terms that represent access rights.
    They allow users to execute the binaries with the same permissions as its owner.
    These two executions could be exploited by attackers. That is why you need to
    configure Dockerfiles to disable `setuid` rights.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置用户ID**（**SUID**）在执行时和**设置组ID**（**SGID**）在执行时在[第2章](part0108.html#36VSO0-ccc418ef6725406983cf4586f3600cdf)中已经讨论过，*高级Linux利用*。它们是代表访问权限的两个术语。它们允许用户以与其所有者相同的权限执行二进制文件。这两个执行可能会被攻击者利用。这就是为什么您需要配置Dockerfile以禁用`setuid`权限。'
- en: To drop a capability, use the option: `--cap-drop =`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要丢弃一个功能，使用选项：`--cap-drop =`。
- en: 'For example, if you want to drop the `setgid` capability, you can run the following
    command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要丢弃`setgid`功能，可以运行以下命令：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/00155.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00155.jpeg)'
- en: 'If you want to drop all the capabilities and you want only to run `setfcap`, use
    the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想放弃所有功能，并且只想运行`setfcap`，请使用以下命令：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As a security measure, you need to disable the `setuid` rights  by modifying
    the Dockerfile:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 作为安全措施，您需要通过修改Dockerfile来禁用`setuid`权限：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: DoS and resource abuse
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DoS和资源滥用
- en: 'DoS is a serious threat for Docker platforms. Docker faces many DoS threats,
    such as:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: DoS对Docker平台构成严重威胁。 Docker面临许多DoS威胁，例如：
- en: '**Pending signals**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待处理信号**'
- en: '**Posix message queues**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Posix消息队列**'
- en: '**Maximum user processes**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大用户进程**'
- en: '**Maximum files**'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大文件**'
- en: 'To defend against these attacks, we need to:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防御这些攻击，我们需要：
- en: 'Assign memory limits using the `-m`  option:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-m`选项分配内存限制：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Limit the CPU share (1,024 by default) using the `-c` option:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-c`选项限制CPU份额（默认为1,024）：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Another feature in the Linux kernel that you can use to limit the access processes
    is `cgroups` (control groups) using the `--cpu-set-cpus` flag. You can have a
    clearer understanding by checking the following illustration.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核中的另一个功能是使用`cgroups`（控制组）和`--cpu-set-cpus`标志来限制访问进程。您可以通过查看以下插图来更清楚地了解。
- en: '![](img/00156.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00156.jpeg)'
- en: Docker breakout
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker越狱
- en: 'Docker breakout is the operation of bypassing the isolation layer of Docker
    containers, pivoting to the host and getting access to information in an authorized
    way and the process of trying to gain more privilege (privilege escalation). Docker
    breakout could be done, thanks to some different attack vectors. The first vector
    is the threats discussed before: kernel vulnerabilities. Abusing privilege is
    another Docker breakout technique. Attackers can use **inter-container communication**
    (**icc**) which allows containers to communicate with each other. To secure Docker,
    you need to set the `-icc` flag to `false`, in addition to configuring `iptables`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 突破是绕过 Docker 容器的隔离层，转向主机并以授权方式访问信息的操作，以及试图获取更高权限（特权升级）的过程。Docker 突破可以通过一些不同的攻击向量来实现。第一个向量是之前讨论过的威胁：内核漏洞。滥用特权是另一种
    Docker 突破技术。攻击者可以使用**容器间通信**（**icc**），允许容器相互通信。为了保护 Docker，你需要将 `-icc` 标志设置为 `false`，并配置
    `iptables`：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Docker plays a middleware role between kernel and container. As a security
    measure, it blacklisted kernel calls, but in 2015, an exploit was presented that
    exploited a non-blocked kernel call named `CAP_DAC_READ_SEARCH` which allowed
    attackers to break out of the Docker isolation and sneak to the container. The
    code is named *the shocker*, and it was presented as a breakout demonstration. You
    can clone the proof of concept of it from this [https://github.com/gabrtv/shocker](https://github.com/gabrtv/shocker) repository:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在内核和容器之间扮演中间件角色。作为安全措施，它列入了内核调用的黑名单，但在2015年，有一个利用了一个未被阻止的内核调用 `CAP_DAC_READ_SEARCH`
    的漏洞被提出，允许攻击者突破 Docker 隔离并潜入容器。这段代码被命名为 *the shocker*，并被作为突破演示进行了展示。你可以从这个 [https://github.com/gabrtv/shocker](https://github.com/gabrtv/shocker)
    存储库克隆它的概念证明：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To test the exploit, you only need to use the `docker run` command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试利用漏洞，你只需要使用 `docker run` 命令：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Docker is relying on a daemon named Docker daemon. It requires root privileges.
    Non-trusted users present a serious threat. To gain root access, an attacker could
    use the Docker daemon privilege escalation Metasploit module:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 依赖于一个名为 Docker 守护程序的守护程序。它需要 root 权限。不受信任的用户构成严重威胁。为了获得 root 访问权限，攻击者可以使用
    Docker 守护程序特权升级 Metasploit 模块：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Poisoned images
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 被感染的镜像
- en: On Docker Hub, there are more than 100,000 prebuild containers and images. Images
    are a vital component for Docker containers. In fact, containers are built, based
    on images. That is why you need to assert the authenticity of Docker images. Images
    are spread everywhere in the internet, so checking Docker images is a must because
    you don't want to run any arbitrary programs on your infrastructure. To verify
    a Docker image, use the `pull` command to verify if the image is signed. In other
    words, if the pull succeeded, the image is verified. In addition, ensure that
    your settings matches `DOCKER_CONTENT_TRUST=1.`
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Hub 上，有超过 100,000 个预构建的容器和镜像。镜像是 Docker 容器的重要组成部分。实际上，容器是基于镜像构建的。这就是为什么你需要确认
    Docker 镜像的真实性。镜像在互联网上随处可见，因此检查 Docker 镜像是必须的，因为你不希望在基础设施上运行任意程序。要验证 Docker 镜像，使用
    `pull` 命令来验证镜像是否已签名。换句话说，如果拉取成功，则镜像已经验证。此外，确保你的设置与 `DOCKER_CONTENT_TRUST=1` 匹配。
- en: Database passwords and data theft
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库密码和数据窃取
- en: 'When using Docker, you will deal with passwords and credentials on a daily
    basis. Sensitive information and passwords are very highly attractive for attackers,
    as usual. Also, setting the filesystem to read only is a wise decision, by adding
    the `--read-only option`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Docker 时，你将每天处理密码和凭据。敏感信息和密码通常对攻击者非常有吸引力。此外，通过添加 `--read-only` 选项将文件系统设置为只读是一个明智的决定：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Docker bench security
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker bench security
- en: Docker delivers an important script named *Docker bench security*. It is really
    useful to collect and reporting information, warnings, and pass messages using
    a simple output. You can clone the bench from its official GitHub repository [https://github.com/docker/docker-bench-security:](https://github.com/docker/docker-bench-security)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一个重要的脚本，名为 *Docker bench security*。它非常有用，可以收集和报告信息、警告和通过简单输出传递消息。你可以从其官方
    GitHub 存储库 [https://github.com/docker/docker-bench-security:](https://github.com/docker/docker-bench-security)
    克隆 bench：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the script, and it will check Docker, thanks to predefined best practices.
    Basically, it is based on the CIS Docker Community Edition Benchmark v1.1.0:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，它将检查 Docker，感谢预定义的最佳实践。基本上，它基于 CIS Docker 社区版基准 v1.1.0：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/00157.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00157.jpeg)'
- en: Docker vulnerability static analysis with Clair
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Clair 进行 Docker 漏洞静态分析
- en: Clair is an open source project for the static analysis of vulnerabilities in
    Docker containers. It allows penetration testers to identify vulnerabilities in
    containers. You can find its official repository at **[https://github.com/coreos/clair](https://github.com/coreos/clair)**[.](https://github.com/coreos/clair)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Clair 是一个用于静态分析 Docker 容器中漏洞的开源项目。它允许渗透测试人员识别容器中的漏洞。你可以在其官方存储库 **[https://github.com/coreos/clair](https://github.com/coreos/clair)**[.](https://github.com/coreos/clair)
    找到它的官方存储库：
- en: 'The Clair project is composed of the following seven components, illustrated
    in the diagram:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Clair 项目由以下七个组件组成，如图所示：
- en: Content detectors
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容检测器
- en: Datastore
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据存储
- en: Vulnerability updaters
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞更新程序
- en: RESTful API
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful API
- en: Notifiers
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知器
- en: Clients
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端
- en: Vulnerabilities databases
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞数据库
- en: '![](img/00158.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00158.jpeg)'
- en: 'To build a Dockernized environment, visit the official QUAY website [https://quay.io/](https://quay.io/):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个 Dockernized 环境，请访问官方的 QUAY 网站 [https://quay.io/](https://quay.io/)：
- en: '![](img/00159.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00159.jpeg)'
- en: 'Complete your profile with the required information:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用所需的信息完成你的个人资料：
- en: '![](img/00160.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00160.jpeg)'
- en: 'Create a new repository and choose its visibility:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的存储库并选择其可见性：
- en: '![](img/00161.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00161.jpeg)'
- en: 'Select a link to your repository, for example, I used a Dockerfile:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个指向你的存储库的链接，例如，我使用了一个Dockerfile：
- en: '![](img/00162.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00162.jpeg)'
- en: 'Wait until the building operation is finished:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 等待直到构建操作完成：
- en: '![](img/00163.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00163.jpeg)'
- en: 'If you click on the build, you will see the content of the Dockerfile:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击构建，你会看到Dockerfile的内容：
- en: '![](img/00164.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00164.jpeg)'
- en: 'Wait for couple of minutes to finish the operation:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几分钟来完成操作：
- en: '![](img/00165.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: 'To use the security scanner, you need an Enterprise account:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用安全扫描程序，您需要一个企业账户：
- en: '![](img/00166.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00166.jpeg)'
- en: 'After completing your profile, you will be able to test the Quay Security Scanner
    to check whether there are some common Docker vulnerabilities:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 完成配置文件后，您将能够使用Quay安全扫描程序检查是否存在一些常见的Docker漏洞：
- en: '![](img/00167.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00167.jpeg)'
- en: Building a penetration testing laboratory
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个渗透测试实验室
- en: In the previous sections, we discovered the power of Docker containers and learned
    how to defend against Docker exploitation techniques. Let's move on to another
    aspect of Docker containers. In this section, you will learn how to build a penetration
    testing laboratory based on a Dockernized environment.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们发现了Docker容器的强大功能，并学会了如何防御Docker的利用技术。让我们继续学习Docker容器的另一个方面。在本节中，您将学习如何基于Docker化环境构建一个渗透测试实验室。
- en: We started our learning process using Kali Linux distribution, so we will use
    the same distribution as a demonstration.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始使用Kali Linux发行版进行学习，所以我们将使用相同的发行版作为演示。
- en: 'First, let''s clone a Kali Linux container file from GitHub, using the `git
    clone command`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从GitHub克隆一个Kali Linux容器文件，使用`git clone`命令：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/00168.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: 'Open the Dockerfile and add any additional configuration:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Dockerfile并添加任何额外的配置：
- en: '![](img/00169.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00169.jpeg)'
- en: 'For example, I added `metasploit-framework`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我添加了`metasploit-framework`：
- en: '![](img/00170.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00170.jpeg)'
- en: 'Now, let''s build the image using the `build` command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`build`命令构建镜像：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/00171.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00171.jpeg)'
- en: 'After completing the `pull` operation, the files will be extracted:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 完成`pull`操作后，文件将被提取：
- en: '![](img/00172.jpeg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: 'To keep data and make it persistent, make sure that you create an attached
    volume to Kali Linux to keep your files, even after rebooting the system:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持数据并使其持久化，确保您为Kali Linux创建一个附加卷来保存您的文件，即使在重新启动系统后也是如此：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/00173.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/00174.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00174.jpeg)'
- en: 'Now as you can see, you are in the instance:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到，你在实例中：
- en: '![](img/00175.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: 'Voila! Your lab now is ready. For example, if you want to run Metasploit, just
    type  `msfconsole`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！您的实验室现在已经准备好了。例如，如果您想运行Metasploit，只需输入`msfconsole`：
- en: '![](img/00176.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: You can also run any other Kali Linux tool in a Dockerized environment. By doing
    that, you are combining the flexibility of Docker with the power of Kali Linux
    distribution.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Docker化环境中运行任何其他Kali Linux工具。通过这样做，您将结合Docker的灵活性和Kali Linux发行版的强大功能。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was a hands-on experience of learning how to install and configure
    Docker. You learned the capabilities of the Docker environment and how to secure
    it. You also discovered the power of Docker by building a penetration testing
    laboratory. In the next chapter, we will have a clear understanding of how to
    secure **continuous integration** (**CI**) servers.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个动手学习如何安装和配置Docker的经验。您了解了Docker环境的功能以及如何保护它。您还通过构建一个渗透测试实验室发现了Docker的强大之处。在下一章中，我们将清楚地了解如何保护**持续集成**（**CI**）服务器。
