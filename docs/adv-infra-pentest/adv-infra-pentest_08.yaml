- en: VLAN Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN利用
- en: 'Switches are vital components in any modern network. This chapter will take
    you through a learning experience in which we will discover how to perform layer
    2 attacks on the one hand, and how to defend against them on the other hand. It
    is necessary to know how to secure layer 2 because network security is only as
    strong as your weakest layer. In our case, the weakest layer is layer 2\. Compromising
    it could lead to compromising the other layers in the stack. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 交换在任何现代网络中都是至关重要的组件。本章将带您进行学习体验，我们将在一方面发现如何对第2层进行攻击，另一方面将学习如何防御这些攻击。了解如何保护第2层是必要的，因为网络安全的强弱取决于最薄弱的一层。在我们的情况下，最薄弱的一层是第2层。损害它可能导致对堆栈中的其他层进行损害。在本章中，我们将涵盖以下主题：
- en: Switching basics
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换基础知识
- en: MAC attacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MAC攻击
- en: '**Dynamic Host Configuration Protocol** (**DHCP**) attacks'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态主机配置协议（DHCP）攻击
- en: '**Virtual LAN** (**VLAN**) attacks'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟局域网（VLAN）攻击
- en: Switching in networking
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络中的交换
- en: 'Switches are data link layer (layer 2 in the OSI model) devices. Their main
    goal is connecting networking devices by receiving switching packets and forwarding
    them to the destination devices. Switching is an efficient solution for connecting
    devices, though it is not practical if we want to connect a large number of end-system
    devices (computers, phones, and so on) and nodes. A node is an entity that carries
    information from a source to a destination without modifying information or data;
    a set of nodes is called a communication network, as shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 交换是数据链路层（OSI模型中的第2层）设备。它们的主要目标是通过接收交换数据包并将其转发到目标设备来连接网络设备。交换是连接设备的有效解决方案，尽管如果我们想要连接大量的终端设备（计算机，电话等）和节点，它并不实用。节点是从源到目的地传递信息而不修改信息或数据的实体；一组节点称为通信网络，如下图所示：
- en: '![](img/00242.gif)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00242.gif)'
- en: 'In switching, there are three different techniques:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在交换中，有三种不同的技术：
- en: '**Circuit switching**: This is a fixed channel between the sender and the receiver,
    and the dedicated channel is called a **circuit**. Once a connection is established,
    no other devices can use the channel, even if the circuit is not fully used until
    the connection is determined. This type of switching is widely used in telephone
    networks. During circuit switching, we have the following three steps: channel
    establishment, data transfer, and connection determination. There are two types
    of circuit switching:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电路交换：这是发送方和接收方之间的固定通道，专用通道称为**电路**。一旦建立连接，即使电路没有完全使用，其他设备也不能使用通道，直到确定连接。这种类型的交换广泛用于电话网络。在电路交换期间，我们有以下三个步骤：通道建立，数据传输和连接确定。电路交换有两种类型：
- en: '**Frequency division multiplexing (FDM)**: Multiplexing is the process of combining
    many signals into one signal. FDM is an operation where channels are divided without
    frequency overlapping. The following diagram illustrates the FDM process:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频分复用（FDM）：复用是将许多信号合并成一个信号的过程。FDM是一种操作，其中信道在不重叠的频率下进行划分。以下图示了FDM过程：
- en: '![](img/00243.gif)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.gif)'
- en: '**Time division multiplexing (TDM)**: This is another multiplexing operation,
    but it uses time periods instead of frequencies. This operation is more flexible
    and efficient than FDM, and is illustrated here:'
  id: totrans-13
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时分复用（TDM）：这是另一种复用操作，但它使用时间段而不是频率。这种操作比FDM更灵活和高效，如下图所示：
- en: '![](img/00244.gif)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.gif)'
- en: '**Packet switching**: During this switching technique, data is switched and
    forwarded in a specific format called a **packet**. A packet is composed of the
    following elements, shown here:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分组交换：在这种交换技术中，数据以特定格式称为**分组**进行交换和转发。数据包由以下元素组成，如下图所示：
- en: '**Data**: Transferred information'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据：传输的信息
- en: '**Header**: This contains the address of the destination'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部：包含目的地地址
- en: '**Trailer** **(optional)**: In general, this contains some information to indicate
    that it is the end of the packet; sometimes, it is used for error checking:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尾部（可选）：一般来说，这包含一些信息，以指示数据包的结束；有时，它用于错误检查：
- en: '![](img/00245.gif)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.gif)'
- en: In a transmission, packets from different end-systems will multiplex; packets
    are also called **datagrams**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在传输中，来自不同终端系统的数据包将进行复用；数据包也称为**数据报**。
- en: '**Message switching: **This is sometimes called store-and-forward switching.
    In this technique, all the end-systems receive the message, store it, and forward
    it to the next device.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息交换：有时也称为存储-转发交换。在这种技术中，所有终端系统都接收消息，存储它，并将其转发到下一个设备。
- en: LAN switching
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局域网交换
- en: The access method used in LANs is an Ethernet connection based on the IEEE 802.3
    standard. We have different types based on the connection bandwidth (10 Mbps (Ethernet),
    100 Mbps (fast Ethernet), or 1,000 Mbps (gigabit Ethernet)). Ethernet gives you
    the opportunity to choose from different Ethernet-transmission physical devices,
    such as twisted pair and fiber optics.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在局域网中使用的接入方法是基于IEEE 802.3标准的以太网连接。我们根据连接带宽（10 Mbps（以太网），100 Mbps（快速以太网）或1,000
    Mbps（千兆以太网））有不同类型。以太网为您提供了从不同的以太网传输物理设备中进行选择，例如双绞线和光纤。
- en: 'The algorithm used to block devices from sending information at the same time
    is called **Carrier Sense Multiple Access/Collision Detect** (**CSMA/CD**). As
    you can see from the graph shown below two hosts cannot send information at the
    same time:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 用于阻止设备同时发送信息的算法称为**载波监听多路访问/冲突检测**（CSMA/CD）。如下图所示，两个主机不能同时发送信息：
- en: '![](img/00246.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: 'In an Ethernet connection, the traffic of data is determined by **Media Access
    Control** (**MAC**) addresses. This address is a unique 48-bit serial number.
    It is composed equally of the **Organizational Unique Identifier** (**OUI**) and
    the vendor-assigned address, as shown here. It is represented in hexadecimal format:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太网连接中，数据的流量由**媒体访问控制**（**MAC**）地址确定。这个地址是一个独特的48位序列号。它由**组织唯一标识符**（**OUI**）和供应商分配的地址组成，如下所示。它以十六进制格式表示：
- en: '![](img/00247.gif)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.gif)'
- en: 'Transmission in layer 2 can be categorized into three main data transmission
    methods:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2层的传输可以分为三种主要的数据传输方法：
- en: '**Unicast**: This is a transmission mode from a specific network device to
    another specific device. In other words, it is a one-to-one transmission mode.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单播**：这是从特定网络设备到另一个特定设备的传输模式。换句话说，这是一对一的传输模式。'
- en: '**Multicast**: In a multicast operation, a single device sends data to multiple
    networking devices. It is a one-to-many transmission mode where a device sends
    data to a specific group.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多播**：在多播操作中，单个设备向多个网络设备发送数据。这是一种一对多的传输模式，其中设备向特定组发送数据。'
- en: '**Broadcast**: This transmission mode is like multicast, but in a broadcast
    operation, a network device sends data to all the other devices. In broadcast,
    a device uses an `FF-FF-FF-FF-FF-FF` MAC address (the highest possible MAC address).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广播**：这种传输模式类似于多播，但在广播操作中，网络设备向所有其他设备发送数据。在广播中，设备使用`FF-FF-FF-FF-FF-FF` MAC地址（最高可能的MAC地址）。'
- en: 'The following diagram illustrates the difference between the three transmission
    modes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了三种传输模式之间的区别：
- en: '![](img/00248.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: 'In LAN switching, we have the following three techniques:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在LAN交换中，我们有以下三种技术：
- en: '**Store-and-forward switching**: In store-and-forward switching, mode switches
    store all the frames in memory and check for errors, after calculating the **cyclic
    redundancy check** (**CRC**). If there is an error based on the number of bits
    in a frame, the frame will be rejected, otherwise it will be forwarded, as shown:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储转发交换**：在存储转发交换中，交换机将所有帧存储在内存中，并在计算**循环冗余检查**（**CRC**）后检查错误。如果根据帧中的位数存在错误，帧将被拒绝，否则将被转发，如下所示：'
- en: '![](img/00249.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: '**Cut-through switching**: In cut-through switching, mode switches store only
    destination MAC addresses and compare them with its MAC table. This technique
    is faster than the previous technique because it deals with only the first 6 bytes:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换式交换**：在切换式交换中，交换机仅存储目标MAC地址并将其与其MAC表进行比较。这种技术比前一种技术更快，因为它只处理前6个字节：'
- en: '![](img/00250.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: '**Fragment-free switching**: This switching technique combines the two previous
    switching modes. It is a hybrid switching technique. It is like cut-through switching,
    but instead of checking the first 6 bytes, it checks the first 64 bytes because
    to detect collision, we need to check the first 64 bytes.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碎片免费交换**：这种交换技术结合了前两种交换模式。它是一种混合交换技术。它类似于切换式交换，但是不是检查前6个字节，而是检查前64个字节，因为为了检测冲突，我们需要检查前64个字节。'
- en: MAC attack
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MAC攻击
- en: 'MAC addresses are unique identifiers with two assigned parts—the OUI is assigned
    by IEEE, and the second 24 bits are assigned by the manufacturer. These addresses
    are stored in a table called the **Content Addressable Memory** (**CAM**). This
    table has a fixed size. The CAM stores information about MAC addresses after operating,
    as the following graph illustrates:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址是具有两个分配部分的唯一标识符——OUI由IEEE分配，后24位由制造商分配。这些地址存储在一个称为**内容可寻址存储器**（**CAM**）的表中。这个表有固定的大小。CAM在操作后存储有关MAC地址的信息，如下图所示：
- en: '![](img/00251.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: 'In this case, initially, the CAM contains two addresses with their port information.
    To send traffic from **Host A** to **Host B**, information about **Host B** should
    be included in the CAM table but this is not the case in this demonstration. Thus
    **Host A** sends an ARP request to all hosts. The hosts send back information
    about their MAC addresses and ports. Now **Host A** has information about **Host
    B** and stores it in the CAM table, as illustrated:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最初CAM包含两个地址及其端口信息。要从**主机A**发送流量到**主机B**，CAM表中应包含有关**主机B**的信息，但在此演示中并非如此。因此**主机A**向所有主机发送ARP请求。主机发送有关其MAC地址和端口的信息。现在**主机A**有关**主机B**的信息并将其存储在CAM表中，如图所示：
- en: '![](img/00252.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00252.jpeg)'
- en: 'Finally, the CAM table contains all the required information about the hosts,
    including the destination host. So, the traffic from **Host A** to **Host B**
    should operate normally:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，CAM表包含有关主机的所有必需信息，包括目标主机。因此，从**主机A**到**主机B**的流量应正常运行：
- en: '![](img/00253.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg)'
- en: 'Attackers can exploit the CAM table to perform malicious activities. An attack
    called CAM overflow can be carried out. In other words, attackers overflow the
    CAM tables by exploiting the maximum limit of the CAM table size. There are many
    tools available, one of which is **macof**. Let''s suppose that the CAM table
    is full with all the information. An attacker can flood switches using macof by
    sending random source MAC addresses (up to 155,000 MAC entries per minute):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用CAM表执行恶意活动。可以进行一种称为CAM溢出的攻击。换句话说，攻击者通过利用CAM表大小的最大限制来溢出CAM表。有许多可用的工具，其中之一是**macof**。假设CAM表已满载有所有信息。攻击者可以使用macof向交换机发送随机源MAC地址（每分钟最多155,000个MAC条目）来淹没交换机：
- en: '![](img/00254.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00254.jpeg)'
- en: 'Or simply, you can use `macof -i eth1 2> /dev/null`. To defend against MAC
    flooding, you need to limit the number of MAC addresses on an interface using
    port security as shown in the following graph:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者简单地使用`macof -i eth1 2> /dev/null`。为了防御MAC淹没，您需要使用端口安全限制接口上的MAC地址数量，如下图所示：
- en: '![](img/00255.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00255.jpeg)'
- en: Media Access Control Security
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体访问控制安全
- en: 'To protect your network from data link layer attacks and provide total Ethernet
    links security, you can use **Media Access Control Security** (**MACsec**), which
    is based on an 802.1 AE standard. MACsec is like IPsec in the network layer, it
    provides integrity and confidentiality protection using a hop-by-hop encryption
    (GCM-AES-128) with the use of a **MACsec Key Agreement** (**MKA**) between the
    network nodes. Thus, it encrypts all the Ethernet packets but without touching
    the source and destination MAC addresses. MACsec in switch-to-switch mode is not
    the same with switch-to-host mode. The first is named downlink MACsec, where the
    host goes through the 802.1x authentication process. The second is named uplink
    MACsec. It is manually configured on switches, or configured dynamically with
    a remote RADIUS server. The following graph shows that the communication is encrypted:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护您的网络免受数据链路层攻击并提供总以太网链路安全，您可以使用**媒体访问控制安全**（**MACsec**），它基于802.1 AE标准。MACsec就像网络层的IPsec一样，它使用逐跳加密（GCM-AES-128）和网络节点之间的**MACsec密钥协商**（**MKA**）来提供完整性和保密性保护。因此，它加密了所有以太网数据包，但不会触及源和目的MAC地址。交换机到交换机模式下的MACsec与交换机到主机模式不同。第一个称为下行MACsec，其中主机经过802.1x认证过程。第二个称为上行MACsec。它可以在交换机上手动配置，也可以使用远程RADIUS服务器动态配置。以下图表显示了通信是加密的：
- en: '![](img/00256.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: DHCP attacks
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DHCP攻击
- en: 'DHCP is a network layer protocol based on RFC 2131 that enables assigning IP
    addresses dynamically to hosts. The following four required steps to assign an
    IP address to a specific host:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP是基于RFC 2131的网络层协议，它使得可以动态分配IP地址给主机。为了为特定主机分配IP地址，需要以下四个必需的步骤：
- en: DHCP discover
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP发现
- en: DHCP offer
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP提供
- en: DHCP request
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP请求
- en: DHCP acknowledgment
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP确认
- en: '![](img/00257.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpeg)'
- en: DHCP starvation
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DHCP饥饿
- en: In this chapter, we are discussing layer 2 attacks; I bet you are wondering
    why we talked about a network layer protocol (DHCP in our case). The answer is
    easy. Attackers can perform what we call DHCP starvation. An attacker broadcasts
    DHCP requests with spoofed MAC addresses; this attack exploits the DHCP servers 
    address space. This attack can be done using a simple tools, such as *the gobbler.*
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了第2层攻击；我打赌你想知道为什么我们谈论了一个网络层协议（在我们的例子中是DHCP）。答案很简单。攻击者可以执行我们所谓的DHCP饥饿攻击。攻击者使用伪造的MAC地址广播DHCP请求；这种攻击利用了DHCP服务器的地址空间。这种攻击可以使用简单的工具来完成，比如*gobbler*。
- en: Rogue DHCP server
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rogue DHCP服务器
- en: A rogue DHCP server (this can be a home router or a modem) is a server implemented
    by an attacker in a network to perform man-in-the-middle attacks, or sniffing
    the network traffic. This implementation of a rogue server lets the attacker gather
    a great deal of information, including DNS server information and the default
    gateway. To defend against DHCP attacks, you need to use DHCP snooping, which
    is a switch feature to identify ports that respond to DHCP requests.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Rogue DHCP服务器（可以是家用路由器或调制解调器）是攻击者在网络中实施的服务器，用于执行中间人攻击或嗅探网络流量。这种恶意服务器的实施让攻击者收集大量信息，包括DNS服务器信息和默认网关。为了防御DHCP攻击，您需要使用DHCP监听，这是一个用于识别响应DHCP请求端口的交换机功能。
- en: ARP attacks
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARP攻击
- en: '**Address Resolution Protocol** (**ARP**) is a protocol that maps the IP addresses
    with their associated MAC addresses, based on the RFC 826 standard. ARP is implemented
    in many operating systems, including Linux.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**地址解析协议**（**ARP**）是根据RFC 826标准将IP地址与其关联的MAC地址进行映射的协议。ARP在许多操作系统中实现，包括Linux。'
- en: 'You can check it using the `arp` command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`arp`命令进行检查：
- en: '![](img/00258.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Attackers can exploit its cache to perform man-in-the-middle attacks using
    a tool such as Ettercap:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用其缓存执行中间人攻击，使用诸如Ettercap之类的工具：
- en: '![](img/00259.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: 'If you are already using Kali Linux, you can also use the `dsniff` utility:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经使用Kali Linux，还可以使用`dsniff`实用程序：
- en: '![](img/00260.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: Attackers can use the IP/MAC matching capability of the ARP protocol to map
    their MAC addresses with legitimate IP addresses. If you are using Kali Linux,
    you can use it directly from the main menu.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用ARP协议的IP/MAC匹配能力将其MAC地址与合法IP地址进行映射。如果您使用Kali Linux，可以直接从主菜单中使用它。
- en: To defend against ARP attacks, it is better to use dynamic ARP inspection by
    checking whether the packets match the binding table entries, otherwise packets
    will be dropped; but first you need to configure DHCP snooping.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防御ARP攻击，最好使用动态ARP检查，检查数据包是否与绑定表条目匹配，否则数据包将被丢弃；但首先需要配置DHCP监听。
- en: 'This is the normal ARP operation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正常的ARP操作：
- en: '![](img/00261.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpeg)'
- en: 'This is an illustration of an ARP spoofing attack:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ARP欺骗攻击的示例：
- en: '![](img/00262.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00262.jpeg)'
- en: VLAN attacks
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN攻击
- en: 'VLAN is a logical grouping of networking devices in the same broadcast domain.
    This logical separation is very beneficial in many cases. For example, if we have
    different geological locations, using VLANS could be a great way to group networking
    devices, even if they are in different places, but they act like one broadcast
    domain. This diagram illustrates a classic switching architecture; there is a
    specific switch for every specific enterprise department:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: VLAN是在同一广播域中对网络设备进行逻辑分组。这种逻辑分离在许多情况下非常有益。例如，如果我们有不同的地理位置，使用VLAN可能是将网络设备分组的好方法，即使它们在不同的地方，但它们就像一个广播域一样。这张图解说明了经典的交换架构；每个特定的企业部门都有一个特定的交换机：
- en: '![](img/00263.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00263.jpeg)'
- en: 'The following diagram illustrates the beneficial results of implementing VLANs.
    We can configure a switch for many different departments:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了实施VLAN的有益结果。我们可以为许多不同的部门配置交换机：
- en: '![](img/00264.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00264.jpeg)'
- en: 'Switching operations occur in layer 2, but when we use VLANs, we need a router
    (layer 3) to make VLANs communicate with each other via an operation named **interVLAN
    routing**. VLAN trunking is needed to interconnect switches by tagging each frame
    with a VLAN ID, which is a number between 0 and 4095, to identify the VLAN. Here,
    the trunking negotiation is used, thanks to the **Dynamic Trunk Protocol** (**DTP**):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 交换操作发生在第2层，但当我们使用VLAN时，我们需要一个路由器（第3层）通过名为**VLAN间路由**的操作使VLAN相互通信。VLAN干线连接是需要的，通过为每个帧打上VLAN
    ID，这是一个在0到4095之间的数字，来识别VLAN。在这里，使用了干线协商，得益于**动态干线协议**（**DTP**）：
- en: '![](img/00265.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00265.jpeg)'
- en: VLAN implementation is possible when the switches and routers support VLANs.
    It means, they support trunking protocols such as **Inter-Switch Link** (**ISL**),
    which is a Cisco proprietary, and IEEE 802.1q. If a switch supports trunking,
    it is called a **managed switch**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当交换机和路由器支持VLAN时，可以实现VLAN。这意味着它们支持干线协议，如**交换机间链路**（**ISL**），这是Cisco专有的，以及IEEE
    802.1q。如果交换机支持干线，它被称为**受管交换机**。
- en: Types of VLANs
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN的类型
- en: 'There are many types of VLANs. Two of them are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种类型的VLAN。其中两种如下：
- en: '**Native VLAN or untagged VLAN**: If a host sends traffic to a switch port
    without a specified VLAN ID, then the traffic will be assigned the untagged VLAN'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地VLAN或未标记的VLAN**：如果主机向交换机端口发送流量而没有指定VLAN ID，则流量将被分配给未标记的VLAN'
- en: '**Tagged VLAN**: This is used when a packet is tagged with a VLAN ID'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记的VLAN**：当数据包被标记为VLAN ID时使用'
- en: VLAN configuration
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN配置
- en: 'To configure VLANs on a switch, you need to follow this configuration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在交换机上配置VLAN，您需要遵循这个配置：
- en: '![](img/00266.gif)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.gif)'
- en: 'First VLAN:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个VLAN：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second VLAN:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个VLAN：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Assign ports:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配端口：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: VLAN hopping attacks
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN跳跃攻击
- en: 'VLAN hopping attacks are based on DTP. The main role of DTP is automating an
    802.1q or ISL trunk configuration:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: VLAN跳跃攻击基于DTP。DTP的主要作用是自动配置802.1q或ISL干线：
- en: '![](img/00267.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00267.jpeg)'
- en: Switch spoofing
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交换机欺骗
- en: During this attack, an attacker mimics a switch by emulating ISL or 802.1q and
    signaling with DTP. Thus, it looks like a switch with a trunking port, so it will
    have access to all the VLANs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种攻击中，攻击者通过模拟ISL或802.1q并与DTP进行信令来模拟交换机。因此，它看起来像一个带干线端口的交换机，因此它将可以访问所有的VLAN。
- en: VLAN double tagging
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VLAN双标记
- en: 'This attack is sometimes called a double 802.1q encapsulation attack, which
    is done by sending 802.1q double encapsulated frames. In general, switches only
    perform one decapsulation operation at a time. Thus, they will strip off the first
    and send back out the second. This attack is possible, only if the attack and
    the target are on the same VLAN, even if trunk ports are off:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击有时被称为双802.1q封装攻击，它是通过发送802.1q双封装帧来完成的。一般来说，交换机一次只执行一次解封操作。因此，它们将剥离第一个并发送第二个。这种攻击只有在攻击和目标在同一个VLAN上时才可能发生，即使干线端口关闭：
- en: '![](img/00268.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: Private VLAN attacks
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有VLAN攻击
- en: We saw in the previous sections that a VLAN divides a LAN into broadcast domains.
    **Private VLANs** (**PVLAN**) are also subdomains of VLANs, and there are isolated
    subdomains, such as sub-VLANs.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的部分中看到，VLAN将LAN划分为广播域。**私有VLAN**（**PVLAN**）也是VLAN的子域，有隔离的子域，如子VLAN。
- en: 'VLANs require a layer 3 device, such as a router, to communicate with each
    other, PVLANs also require routers to communicate, but the hosts are still in
    the same IP subnet. We have three PVLAN ports:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: VLAN需要一个第3层设备，如路由器，来相互通信，PVLAN也需要路由器来通信，但主机仍然在同一个IP子网中。我们有三个PVLAN端口：
- en: '**Promiscuous (P)**: Connected to a router'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混杂（P）**：连接到路由器'
- en: '**Isolated (I)**: Connected to hosts'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离（I）**：连接到主机'
- en: '**Community (C)**: Connected to other community ports'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区（C）**：连接到其他社区端口'
- en: 'Attackers can attack PVLANs by sending frames with their IP and MAC addresses
    and the destination IP address:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过发送带有他们的IP和MAC地址以及目标IP地址的帧来攻击PVLANs：
- en: '![](img/00269.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: Spanning Tree Protocol attacks
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成树协议攻击
- en: 'The **Spanning Tree Protocol** (**STP**) was developed by Radia Perlman in
    1985 to solve the problem of Ethernet loops, but before diving into STPs, let''s
    go back to the root causes of this issue. If a broadcast storm occurs, you will
    lose your network availability. This happens when we have an Ethernet loop. As
    simple example, in the following diagram, we have three connected switches. If
    a switch sends a broadcast to the other two switches, they will receive and rebroadcast
    it by forwarding it through all ports because they couldn''t find the address.
    Also, they will go for a repeating loop called a **broadcast storm**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**生成树协议**（**STP**）是由Radia Perlman于1985年开发的，用于解决以太网环路的问题，但在深入研究STP之前，让我们回到这个问题的根本原因。如果广播风暴发生，您将失去网络可用性。当以太网环路发生时，就会发生这种情况。举个简单的例子，在下图中，我们有三个连接的交换机。如果一个交换机向其他两个交换机发送广播，它们将通过所有端口接收并转发它，因为它们找不到地址。此外，它们将进入一个重复的循环，称为**广播风暴**：'
- en: '![](img/00270.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: 'This way, the STP appeared to solve this networking issue by blocking the redundant
    paths, thanks to the **Spanning Tree Algorithm** (**STA**) based on the IEEE 802.1d
    standard, which makes sure that only one path is available between two stations:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，STP似乎解决了这个网络问题，通过阻塞冗余路径，得益于基于IEEE 802.1d标准的**生成树算法**（**STA**），它确保两个站点之间只有一条路径可用：
- en: '![](img/00271.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271.jpeg)'
- en: 'But which ports do you block when using STP? In STP, there are five types of ports:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在使用STP时要阻塞哪些端口呢？在STP中，有五种类型的端口：
- en: '**Learning port**: This port learns the MAC addresses but does not forward
    the frames'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习端口**：这个端口学习MAC地址但不转发帧'
- en: '**Listening port**: This port doesn''t learn MAC addresses or forward them'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听端口**：这个端口不学习MAC地址或转发它们'
- en: '**Discarding port**: This port doesn''t forward data'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丢弃端口**：这个端口不转发数据'
- en: '**Forwarding port**: This port learns MAC addresses and forwards data'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转发端口**：这个端口学习MAC地址并转发数据'
- en: '**Disabled port**: This port is self-explanatory'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用端口**：这个端口不需要解释'
- en: 'The following workflow describes the stages of ports in STP:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工作流描述了STP中端口的各个阶段：
- en: '![](img/00272.gif)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00272.gif)'
- en: 'STP performs the following three steps in order to achieve its goal:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: STP执行以下三个步骤以实现其目标：
- en: '**Root bridge election**: Switches are not very smart devices. So by default,
    each switch in the network claims to be the root bridge, which is the main switch
    that controls the topology. To select a root bridge, all switches send their **b****ridge
    ID** (**BID**), which is 8 bytes combined between a bridge priority and a MAC
    address; by default, it is 32,768\. The switch with the minimum BID gets selected
    as a root bridge.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根桥选举**：交换机并不是非常智能的设备。因此，默认情况下，网络中的每个交换机都声称自己是根桥，即控制拓扑的主要交换机。为了选择根桥，所有交换机发送它们的**桥ID**（**BID**），这是桥优先级和MAC地址之间的8个字节的组合；默认情况下，它是32,768。具有最小BID的交换机被选为根桥。'
- en: '**Selecting a root port**: This selection is based on a simple selection criteria,
    which is the lowest-cost **Bridge Protocol Data Units **(**BPDU**). So, the port
    that receives the lowest BPDU will be a root port.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择根端口：这个选择是基于一个简单的选择标准，即最低成本的**桥接协议数据单元**（**BPDU**）。因此，接收到最低BPDU的端口将成为根端口。
- en: '**Selecting designated ports**: Designated ports are the other switch ports
    (blocked).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择指定端口**：指定端口是其他交换机端口（已阻塞）。'
- en: Attacking STP
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击STP
- en: An attacker can exploit STP to attack a network. One of the hacking techniques
    is to implement a rogue switch at trunk ports, and manipulate the spanning tree
    priority by configuring this rogue switch and giving it the lowest ID to become
    a root bridge. As a consequence, all the traffic will be transferred through this
    switch and then it will sniff all the traffic or redirect the traffic.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用STP来攻击网络。其中一种黑客技术是在干线端口实施一个虚假交换机，并通过配置这个虚假交换机并赋予它最低的ID来操纵生成树优先级，从而成为根桥。因此，所有流量将通过这个交换机传输，然后它将嗅探所有流量或重定向流量。
- en: 'To defend against STP attacks, you need to enable the root guard on all switch
    ports that you don''t designate as root ports:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防御STP攻击，您需要在所有未指定为根端口的交换机端口上启用根守卫：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was a useful explanation of how to compromise networks by exploiting
    layer 2 weaknesses. The next chapter will be an in-depth learning experience that
    explains how to exploit Voice over IP systems.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于如何利用第2层漏洞来妥协网络的有用解释。下一章将是一个深入的学习体验，解释如何利用VoIP系统。
