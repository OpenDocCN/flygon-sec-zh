["```py\nimport os\nresponse = os.popen('ping -n 1 10.0.0.1')\nfor line in response.readlines():\n    print line,\n```", "```py\n  G:Project SnakeChapter 2ip>ips.py\n  Pinging 10.0.0.1 with 32 bytes of data:\n  Reply from 10.0.0.1: bytes=32 time=3ms TTL=64\n  Ping statistics for 10.0.0.1:\n      Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),\n  Approximate round trip times in milli-seconds:\n      Minimum = 3ms, Maximum = 3ms, Average = 3ms\n```", "```py\n  G:Project SnakeChapter 2ip>ips.py\n  Pinging 10.0.0.2 with 32 bytes of data:\n  Reply from 10.0.0.16: Destination host unreachable.\n  Ping statistics for 10.0.0.2:\n      Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),\n```", "```py\nimport os\nnet = raw_input(\"Enter the Network Address \")\nnet1= net.split('.')\nprint net1\na = '.'\nnet2 = net1[0]+a+net1[1]+a+net1[2]+a\nprint net2\nst1 = int(raw_input(\"Enter the Starting Number \"))\nen1 = int(raw_input(\"Enter the Last Number \"))\n```", "```py\nimport os\nimport platform\noper = platform.system()\nif (oper==\"Windows\"):\n  ping1 = \"ping -n 1 \"\nelif (oper== \"Linux\"):\n  ping1 = \"ping -c 1 \"\nelse :\n  ping1 = \"ping -c 1 \"  \n```", "```py\nimport os\nimport platform\nfrom datetime import datetime\nnet = raw_input(\"Enter the Network Address \")\nnet1= net.split('.')\na = '.'\nnet2 = net1[0]+a+net1[1]+a+net1[2]+a\nst1 = int(raw_input(\"Enter the Starting Number \"))\nen1 = int(raw_input(\"Enter the Last Number \"))\nen1=en1+1\noper = platform.system()\n\nif (oper==\"Windows\"):\n  ping1 = \"ping -n 1 \"\nelif (oper== \"Linux\"):\n  ping1 = \"ping -c 1 \"\nelse :\n  ping1 = \"ping -c 1 \"\nt1= datetime.now()\nprint \"Scanning in Progress\"\nfor ip in xrange(st1,en1):\n  addr = net2+str(ip)\n  comm = ping1+addr\n  response = os.popen(comm)\n  for line in response.readlines():\n    if 'ttl' in line.lower():\n      break\n    if 'ttl' in line.lower():\n      print addr, \"--> Live\"\n\nt2= datetime.now()\ntotal =t2-t1\nprint \"scanning complete in \" , total\n```", "```py\n  G:Project SnakeChapter 2ip>python ping_sweep.py\n  Enter the Network Address 10.0.0.1\n  Enter the Starting Number 1\n  Enter the Last Number 60\n  Scanning in Progress\n  10.0.0.1 --> Live\n  10.0.0.2 --> Live\n  10.0.0.5 --> Live\n  10.0.0.6 --> Live\n  10.0.0.7 --> Live\n  10.0.0.8 --> Live\n  10.0.0.9 --> Live\n  10.0.0.10 --> Live\n  10.0.0.11 --> Live\n  scanning complete in  0:02:35.230000\n```", "```py\nimport socket \nfrom datetime import datetime\nnet= raw_input(\"Enter the IP address \")\nnet1= net.split('.')\na = '.'\nnet2 = net1[0]+a+net1[1]+a+net1[2]+a\nst1 = int(raw_input(\"Enter the Starting Number \"))\nen1 = int(raw_input(\"Enter the Last Number \"))\nen1=en1+1\nt1= datetime.now()\ndef scan(addr):\n  sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n  socket.setdefaulttimeout(1)\n  result = sock.connect_ex((addr,135))\n  if result==0:\n    return 1\n  else :\n    return 0\n\ndef run1():\n  for ip in xrange(st1,en1):\n    addr = net2+str(ip)\n    if (scan(addr)):\n      print addr , \"is live\"\n\nrun1()\nt2= datetime.now()\ntotal =t2-t1\nprint \"scanning complete in \" , total\n```", "```py\n  G:Project SnakeChapter 2ip>python iptcpscan.py\n  Enter the IP address 10.0.0.1\n  Enter the Starting Number 1\n  Enter the Last Number 60\n  10.0.0.8 is live\n  10.0.0.11 is live\n  10.0.0.12 is live\n  10.0.0.15 is live\n  scanning complete in  0:00:57.415000\n  G:Project SnakeChapter 2ip>\n```", "```py\n  G:Project SnakeChapter 2ip>python iptcpscan.py\n  Enter the IP address 10.0.0.1\n  Enter the Starting Number 1\n  Enter the Last Number 60\n  scanning complete in  0:01:00.027000\n  G:Project SnakeChapter 2ip>\n```", "```py\n  G:Project SnakeChapter 2ip>python iptcpscan.py\n  Enter the IP address 10.0.0.1\n  Enter the Starting Number 1\n  Enter the Last Number 60\n  10.0.0.5 is live\n  10.0.0.13 is live\n  scanning complete in  0:00:58.369000\n  G:Project SnakeChapter 2ip>\n```", "```py\nimport os\nimport collections\nimport platform\nimport socket, subprocess,sys\nimport threading\nfrom datetime import datetime\n''' section 1 '''\n\nnet = raw_input(\"Enter the Network Address \")\nnet1= net.split('.')\na = '.'\nnet2 = net1[0]+a+net1[1]+a+net1[2]+a\nst1 = int(raw_input(\"Enter the Starting Number \"))\nen1 = int(raw_input(\"Enter the Last Number \"))\nen1 =en1+1\ndic = collections.OrderedDict()\noper = platform.system()\n\nif (oper==\"Windows\"):\n  ping1 = \"ping -n 1 \"\nelif (oper== \"Linux\"):\n  ping1 = \"ping -c 1 \"\nelse :\n  ping1 = \"ping -c 1 \"\nt1= datetime.now()\n'''section 2'''\nclass myThread (threading.Thread):\n  def __init__(self,st,en):\n    threading.Thread.__init__(self)\n    self.st = st\n    self.en = en\n  def run(self):\n    run1(self.st,self.en)\n'''section 3'''         \ndef run1(st1,en1):\n  #print \"Scanning in Progess\"\n  for ip in xrange(st1,en1):\n    #print \".\",\n    addr = net2+str(ip)\n    comm = ping1+addr\n    response = os.popen(comm)\n    for line in response.readlines():\n      if(line.count(\"TTL\")):\n        break\n    if (line.count(\"TTL\")):\n      #print addr, \"--> Live\"\n      dic[ip]= addr\n''' Section 4  '''\ntotal_ip =en1-st1\ntn =20  # number of ip handled by one thread\ntotal_thread = total_ip/tn\ntotal_thread=total_thread+1\nthreads= []\ntry:\n  for i in xrange(total_thread):\n    en = st1+tn\n    if(en >en1):\n      en =en1\n    thread = myThread(st1,en)\n    thread.start()\n    threads.append(thread)\n    st1 =en\nexcept:\n  print \"Error: unable to start thread\"\nprint \"t\nNumber of Threads active:\", threading.activeCount()\n\nfor t in threads:\n  t.join()\nprint \"Exiting Main Thread\"\ndict = collections.OrderedDict(sorted(dic.items()))\nfor key in dict:\n  print dict[key],\"-->\" \"Live\"\nt2= datetime.now()\ntotal =t2-t1\nprint \"scanning complete in \" , total\n```", "```py\nen = st1+tn\n  if(en >en1):\n    en =en1\n  thread = myThread(st1,en)\n  thread.start()\n  st1 =en\n```", "```py\nfor t in threads:\n  t.join()\n```", "```py\n  G:Project SnakeChapter 2ip>python ping_sweep_th.py\n  Enter the Network Address 10.0.0.1\n  Enter the Starting Number 1\n  Enter the Last Number 60\n          Number of Threads active: 4\n  Exiting Main Thread\n  10.0.0.1 -->Live\n  10.0.0.2 -->Live\n  10.0.0.5 -->Live\n  10.0.0.6 -->Live\n  10.0.0.10 -->Live\n  10.0.0.13 -->Live\n  scanning complete in  0:01:11.817000\n```", "```py\nimport threading\nimport time\nimport socket, subprocess,sys\nimport thread\nimport collections\nfrom datetime import datetime\n'''section 1''' \nnet = raw_input(\"Enter the Network Address \")\nst1 = int(raw_input(\"Enter the starting Number  \"))\nen1 = int(raw_input(\"Enter the last Number \"))\nen1=en1+1\ndic = collections.OrderedDict()\nnet1= net.split('.')\na = '.'\nnet2 = net1[0]+a+net1[1]+a+net1[2]+a\nt1= datetime.now()\n'''section 2'''\nclass myThread (threading.Thread):\n  def __init__(self,st,en):\n    threading.Thread.__init__(self)\n    self.st = st\n    self.en = en\n  def run(self):\n    run1(self.st,self.en)\n\n'''section 3'''\ndef scan(addr):\n  sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n  socket.setdefaulttimeout(1)\n  result = sock.connect_ex((addr,135))\n  if result==0:\n    sock.close()\n    return 1\n  else :\n    sock.close()\n\ndef run1(st1,en1):\n  for ip in xrange(st1,en1):\n    addr = net2+str(ip)\n    if scan(addr):\n      dic[ip]= addr\n'''section 4'''\ntotal_ip =en1-st1\ntn =20  # number of ip handled by one thread\ntotal_thread = total_ip/tn\ntotal_thread=total_thread+1\nthreads= []\ntry:\n  for i in xrange(total_thread):\n    #print \"i is \",i\n    en = st1+tn\n    if(en >en1):\n      en =en1\n    thread = myThread(st1,en)\n    thread.start()\n    threads.append(thread)\n    st1 =en\nexcept:\n  print \"Error: unable to start thread\"\nprint \"t Number of Threads active:\", threading.activeCount()\nfor t in threads:\n  t.join()\nprint \"Exiting Main Thread\"\ndict = collections.OrderedDict(sorted(dic.items()))\nfor key in dict:\n  print dict[key],\"-->\" \"Live\"\nt2= datetime.now()\ntotal =t2-t1\nprint \"scanning complete in \" , total\n```", "```py\n  G:Project SnakeChapter 2ip>python iptcpscan_t.py\n  Enter the Network Address 10.0.0.1\n  Enter the starting Number  1\n  Enter the last Number 60\n          Number of Threads active: 4\n  Exiting Main Thread\n  10.0.0.5 -->Live\n  10.0.0.13 -->Live\n  scanning complete in  0:00:20.018000\n```", "```py\npython setup.py install\n```", "```py\nimport socket\nfrom datetime import datetime\nimport ping\nimport struct\nimport binascii\nfrom threading import Thread\nimport time\n\ns = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))\n\nnet = raw_input(\"Enter the Network Address \")\nnet1= net.rsplit('.',1)\nnet2 = net1[0]+'.'\nstart1 = int(raw_input(\"Enter the Starting Number \"))\nend1 = int(raw_input(\"Enter the Last Number \"))\nend1 =end1+1\n\nseq_ip = []\ntotal_ip =end1-start1\ntn =10 # number of ip handled by one thread\ntotal_thread = total_ip/tn\ntotal_thread=total_thread+1\nthreads= []\nt1= datetime.now()\n\ndef send_ping(st1,en1):\n  for each in xrange(st1,en1):\n    try:\n      ip = net2+str(each)\n      ping.do_one(ip,1,32)\n    except Exception as e :\n      print \"Error in send_ping\", e\n\ndef icmp_sniff():\n  s = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, 8)\n\n  while True:\n    pkt = s.recvfrom(2048)\n    num = pkt[0][14].encode('hex')\n    ip_length = (int(num) % 10) * 4\n    ipheader = pkt[0][14:14+ip_length]\n    icmp_h =pkt[0][14+ip_length]\n    ip_hdr = struct.unpack(\"!8sBB2s4s4s\",ipheader[:20])\n    icmp_hdr = struct.unpack(\"!B\",icmp_h)\n    if(ip_hdr[2]==1) and (icmp_hdr[0]==0):\n      ip = socket.inet_ntoa(ip_hdr[4])\n      ip1= ip.rsplit('.',1)\n      list_temp = [ip1[1].zfill(3),ip]\n      seq_ip.append(list_temp)\n\nscan_thread = Thread(target=icmp_sniff)\nscan_thread.setDaemon(True)\nscan_thread.start()\nst1 = start1\n\ntry:\n    for i in xrange(total_thread):\n    en = st1+tn\n    if(en >end1):\n      en =end1\n    ping_thread = Thread(target=send_ping,args=(st1,en,) )\n    ping_thread.start()\n    threads.append(ping_thread)\n    st1 =en\n\nexcept Exception as e :\n     print \"Error in Thread\", e\n\nfor t in threads:\n    t.join()\ntime.sleep(1)\nseq_ip.sort(key=lambda x: int(x[0]))\nprint \"S.no\\t\",\"IP\"\nfor each in seq_ip:\n  print each[0],\" \", each[1]\n\nt2= datetime.now()\nprint \"Time taken \", t2-t1\n```", "```py\npip install python-nmap\n```", "```py\n>>>import nmap\n>>> dir(nmap)\n['ET', 'PortScanner', 'PortScannerAsync', 'PortScannerError', 'PortScannerHostDict', 'PortScannerYield', 'Process', '__author__', '__builtins__', '__doc__', '__file__', '__last_modification__', '__name__', '__package__', '__path__', '__version__', 'convert_nmap_output_to_encoding', 'csv', 'io', 'nmap', 'os', 're', 'shlex', 'subprocess', 'sys']\n```", "```py\nimport nmap, sys\nsyntax=\"OS_detection.py <hostname/IP address>\"\nif len(sys.argv) == 1:\n print (syntax)\n sys.exit()\nhost = sys.argv[1]\nnm=nmap.PortScanner()\nopen_ports_dict = nm.scan(host, arguments=\"-O\").get(\"scan\").get(host).get(\"tcp\")\nprint \"Open ports \", \" Description\"\nport_list = open_ports_dict.keys()\nport_list.sort()\nfor port in port_list:\n print port, \"---\\t-->\",open_ports_dict.get(port)['name']\nprint \"\\n--------------OS detail---------------------\\n\"\nprint \"Details about the scanned host are: \\t\", nm[host]['osmatch'][0]['osclass'][0]['cpe']\nprint \"Operating system family is: \\t\\t\", nm[host]['osmatch'][0]['osclass'][0]['osfamily']\nprint \"Type of OS is: \\t\\t\\t\\t\", nm[host]['osmatch'][0]['osclass'][0]['type']\nprint \"Generation of Operating System :\\t\", nm[host]['osmatch'][0]['osclass'][0]['osgen']\nprint \"Operating System Vendor is:\\t\\t\", nm[host]['osmatch'][0]['osclass'][0]['vendor']\nprint \"Accuracy of detection is:\\t\\t\", nm[host]['osmatch'][0]['osclass'][0]['accuracy']\n```", "```py\n 'scan': {'192.168.0.1': {'status': {'state': 'up', 'reason': 'localhost-response'}, 'uptime': {'seconds': '7191', 'lastboot': 'Mon Mar 19 20:43:41 2018'}, 'vendor': {}, 'addresses': {'ipv4': '192.168.0.1'}, 'tcp': {902: {'product': '', 'state': 'open', 'version': '', 'name': 'iss-realsecure', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}, 135: {'product': '', 'state': 'open', 'version': '', 'name': 'msrpc', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}, 139: {'product': '', 'state': 'open', 'version': '', 'name': 'netbios-ssn', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}, 5357: {'product': '', 'state': 'open', 'version': '', 'name': 'wsdapi', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}, 912: {'product': '', 'state': 'open', 'version': '', 'name': 'apex-mesh', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}, 445: {'product': '', 'state': 'open', 'version': '', 'name': 'microsoft-ds', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}}, 'hostnames': [{'type': '', 'name': ''}], 'osmatch': [{'osclass': [{'osfamily': 'Windows', 'vendor': 'Microsoft', 'cpe': ['cpe:/o:microsoft:windows_10'], 'type': 'general purpose', 'osgen': '10', 'accuracy': '100'}], 'line': '65478', 'name': 'Microsoft Windows 10 10586 - 14393', 'accuracy': '100'}], 'portused': [{'state': 'open', 'portid': '135', 'proto': 'tcp'}, {'state': 'closed', 'portid': '1', 'proto': 'tcp'}, {'state': 'closed', 'portid': '34487', 'proto': 'udp'}]}}}\n```", "```py\nimport socket, subprocess,sys\nfrom datetime import datetime\n\nsubprocess.call('clear',shell=True)\nrmip = raw_input(\"t Enter the remote host IP to scan:\")\nr1 = int(raw_input(\"t Enter the start port numbert\"))\nr2 = int (raw_input(\"t Enter the last port numbert\"))\nprint \"*\"*40\nprint \"n Mohit's Scanner is working on \",rmip\nprint \"*\"*40\n\nt1= datetime.now()\ntry:\n  for port in range(r1,r2):\n    sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    socket.setdefaulttimeout(1)\n\n    result = sock.connect_ex((rmip,port))\n    if result==0:\n      print \"Port Open:-->t\", port\n      # print desc[port]\n    sock.close()\n\nexcept KeyboardInterrupt:\n  print \"You stop this \"\n  sys.exit()\n\nexcept Exception as e :\n  print e\n  sys.exit()\n\nt2= datetime.now()\n\ntotal =t2-t1\nprint \"scanning complete in \" , total\n```", "```py\n  root@Mohit|Raj:/port#python portsc.py \n         Enter the remote host IP to scan:192.168.0.3\n         Enter the start port number    1\n         Enter the last port number     4000\n  ****************************************\n   Mohit's Scanner is working on  192.168.0.3\n  ****************************************\n  Port Open:-->      22\n  Port Open:-->      80\n  Port Open:-->      111\n  Port Open:-->      443\n  Port Open:-->      924\n  Port Open:-->      3306\n  scanning complete in  0:00:00.766535\n```", "```py\n    Enter the remote host IP to scan:10.0.0.1\n    Enter the start port number 1\n    Enter the last port number  4000\n  ****************************************\n  Mohit's Scanner is working on  10.0.0.1\n  ****************************************\n  Port Open:-->  23\n  Port Open:-->  53\n  Port Open:-->  80\n  Port Open:-->  1780\n  scanning complete in  1:06:43.272751\n```", "```py\nfrom threading import Thread\nimport time\nimport socket\nfrom datetime import datetime\nimport cPickle\n'''Section1'''\npickle_file = open(\"port_description.dat\",'r') \ndata=skill=cPickle.load(pickle_file) \n\ndef scantcp(r1,r2,):\n  try:\n    for port in range(r1,r2):\n      sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n      socket.setdefaulttimeout(c)\n      result = sock.connect_ex((rmip,port))\n      if result==0:\n        print \"Port Open:-->\\t\", port,\"--\", data.get(port, \"Not in Database\")\n      sock.close()\n\n  except Exception as e:\n    print e\n\n'''Section 2 '''\nprint \"*\"*60\nprint \" \\tWelcome, this is the Port scanner \\n \"\nd=raw_input(\"\\tPress D for Domain Name or Press I for IP Address\\t\") \n\nif (d=='D' or d=='d'):\n    rmserver = raw_input(\"\\t Enter the Domain Name to scan:\\t\")\n    rmip = socket.gethostbyname(rmserver)\nelif(d=='I' or d=='i'):\n    rmip = raw_input(\"\\t Enter the IP Address to scan: \")\n\nelse: \n    print \"Wrong input\"\n\nport_start1 = int(raw_input(\"\\t Enter the start port number\\t\"))\nport_last1 = int(raw_input(\"\\t Enter the last port number\\t\"))\nif port_last1>65535:\n  print \"Range not Ok\"\n  port_last1 = 65535\n  print \"Setting last port 65535\"\nconect=raw_input(\"For low connectivity press L and High connectivity Press H\\t\")\n\nif (conect=='L' or conect=='l'):\n    c =1.5\n\nelif(conect =='H' or conect=='h'):\n    c=0.5\n\nelse:\n    print \"\\twrong Input\"\n\n'''Section 3'''\nprint \"\\n Mohit's port Scanner is working on \",rmip\nprint \"*\"*60\nt1= datetime.now()\ntotal_ports=port_last1-port_start1\n\nports_by_one_thread =30\n                   # tn number of port handled by one thread\ntotal_threads=total_ports/ports_by_one_thread # tnum number of threads\nif (total_ports%ports_by_one_thread!= 0):\n    total_threads= total_threads+1\n\nif (total_threads > 300):\n  ports_by_one_thread= total_ports/300\n  if (total_ports%300 !=0):\n    ports_by_one_thread= ports_by_one_thread+1\n\n  total_threads = total_ports/ports_by_one_thread \n  if (total_ports%total_threads != 0):\n    total_threads= total_threads+1\n\nthreads= []\nstart1 = port_start1\ntry:\n  for i in range(total_threads):\n\n    last1=start1+ports_by_one_thread\n    # thread=str(i)\n    if last1>=port_last1:\n      last1 = port_last1\n    port_thread = Thread(target=scantcp,args=(start1,last1,) )\n    port_thread.start()\n    threads.append(port_thread)\n    start1=last1\n\nexcept Exception as e :\n     print e\n'''Section 4'''\nfor t in threads:\n    t.join()\nprint \"Exiting Main Thread\"\nt2= datetime.now()\ntotal =t2-t1\nprint \"scanning complete in \" , total\n\n```", "```py\n K:\\Book_projects\\Project Snake 2nd\\Chapter2_scanning>python port_scanner15.py\n************************************************************\n Welcome, this is the Port scanner\n\n Press D for Domain Name or Press I for IP Address i\n Enter the IP Address to scan: 10.0.0.1\n Enter the start port number 1\n Enter the last port number 4000\nFor low connectivity press L and High connectivity Press H l\n\n Mohit's port Scanner is working on 10.0.0.1\n************************************************************\nPort Open:--> 875 -- Not in Database\nPort Open:--> 3306 -- MySQL database system Official\nPort Open:--> 80 -- QUIC (from Chromium) for HTTP Unofficial\nPort Open:--> 111 -- ONC RPC (Sun RPC) Official\nPort Open:--> 443 -- QUIC (from Chromium) for HTTPS Unofficial\nPort Open:--> 22 -- , SCTP : Secure Shell (SSH)\u0393\u00c7\u00f6used for secure logins, file transfers (scp, sftp) and port forwarding Official\nPort Open:--> 53 -- Domain Name System (DNS) Official\nExiting Main Thread\nscanning complete in 0:00:31.778000\n\nK:\\Book_projects\\Project Snake 2nd\\Chapter2_scanning>\n```", "```py\n K:\\Book_projects\\Project Snake 2nd\\Chapter2_scanning>python port_scanner15.py\n************************************************************\n Welcome, this is the Port scanner\n\n Press D for Domain Name or Press I for IP Address i\n Enter the IP Address to scan: 192.168.0.3\n Enter the start port number 1\n Enter the last port number 50000\nFor low connectivity press L and High connectivity Press H l\n\n Mohit's port Scanner is working on 192.168.0.3\n************************************************************\nPort Open:--> 22 -- , SCTP : Secure Shell (SSH)\u0393\u00c7\u00f6used for secure logins, file transfers (scp, sftp) and port forwarding Official\nPort Open:--> 875 -- Not in Database\nPort Open:--> 53 -- Domain Name System (DNS) Official\nPort Open:--> 80 -- QUIC (from Chromium) for HTTP Unofficial\nPort Open:--> 8443 -- SW Soft Plesk Control Panel, Apache Tomcat SSL, Promise WebPAM SSL, McAfee ePolicy Orchestrator (ePO) Unofficial\nPort Open:--> 111 -- ONC RPC (Sun RPC) Official\nPort Open:--> 443 -- QUIC (from Chromium) for HTTPS Unofficial\nPort Open:--> 3306 -- MySQL database system Official\nExiting Main Thread\nscanning complete in 0:02:48.718000\n```", "```py\nimport cPickle \npickle_file = open(\"port_description.dat\",\"w\") \nfile_name = raw_input(\"Enter the file name \")\nf = open(file_name,\"r\")\ndict1 = {}\nfor line in f:\n  key, value = line.split(':', 1)\n\n  dict1[int(key.strip())] = value.strip()\n\nprint \"Dictionary is created\"\ncPickle.dump(dict1,pickle_file) \npickle_file.close()\nprint \"port_description.dat is created\"\n```"]