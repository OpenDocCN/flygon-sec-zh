["```py\nimport socket,sys,os \n```", "```py\nhost = 'example.com' \nopen_ports =[] \nstart_port = 1 \nend_port = 10 \n```", "```py\nip = socket.gethostbyname(host) \n```", "```py\ndef probe_port(host, port, result = 1): \n  try: \n    sockObj = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    sockObj.settimeout(0.5) \n    r = sockObj.connect_ex((host, port))   \n    if r == 0: \n      result = r \n    sock.close() \n  except Exception ase: \n    pass \n  return result \n```", "```py\nfor port in range(start_port, end_port+1): \n    sys.stdout.flush() \n    print (port) \n    response = probe_port(host, port) \n    if response == 0: \n        open_ports.append(port) \n    if not port == end_port: \n        sys.stdout.write('\\b' * len(str(port))) \n```", "```py\nif open_ports: \n  print (\"Open Ports\") \n  print (sorted(open_ports)) \nelse: \n  print (\"Sorry, No open ports found.!!\") \n```", "```py\ncommon_ports = { 21, 22, 23, 25, 53, 69, 80, 88, 109, 110,  \n                 123, 137, 138, 139, 143, 156, 161, 389, 443,  \n                 445, 500, 546, 547, 587, 660, 995, 993, 2086,  \n                 2087, 2082, 2083, 3306, 8443, 10000  \n                } \n```", "```py\nfor p in sorted(common_ports): \n  sys.stdout.flush() \n  print p \n  response = probe_port(host, p) \n  if response == 0: \n    open_ports.append(p) \n  if not p == end_port: \n    sys.stdout.write('\\b' * len(str(p))) \n```", "```py\npip3 install scapy-python3\npip3 install netifaces  \n```", "```py\nimport socket, re \nfrom scapy.all import * \n```", "```py\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \ns.connect(('8.8.8.8', 80)) \nip = s.getsockname()[0] \n```", "```py\nend = re.search('^[\\d]{1,3}.[\\d]{1,3}.[\\d]{1,3}.[\\d]{1,3}', ip) \ncreate_ip = re.search('^[\\d]{1,3}.[\\d]{1,3}.[\\d]{1,3}.', ip) \n```", "```py\ndef is_up(ip): \n    icmp = IP(dst=ip)/ICMP() \n    resp = sr1(icmp, timeout=10) \n    if resp == None: \n        return False \n    else: \n        return True  \n```", "```py\ndef CheckLoopBack(ip): \n    if (end.group(0) == '127.0.0.1'): \n        return True \n```", "```py\ntry: \n    if not CheckLoopBack(create_ip): \n        conf.verb = 0  \n        for i in range(1, 10): \n            test_ip = str(create_ip.group(0)) + str(i) \n            if is_up(test_ip): \n                print (test_ip + \" Is Up\") \nexcept KeyboardInterrupt: \n    print('interrupted!') \n```", "```py\nsudo python3 network-scanner.py  \n```", "```py\nfrom scapy.all import * \n```", "```py\nhost = 'www.dvwa.co.uk' \nip = socket.gethostbyname(host) \nopenp = [] \nfilterdp = [] \ncommon_ports = { 21, 22, 23, 25, 53, 69, 80, 88, 109, 110,  \n                123, 137, 138, 139, 143, 156, 161, 389,       443, 445, 500, 546, 547, 587, 660, 995,       993, 2086, 2087, 2082, 2083, 3306, 8443,       10000 } \n```", "```py\ndef is_up(ip): \n    icmp = IP(dst=ip)/ICMP() \n    resp = sr1(icmp, timeout=10) \n    if resp == None: \n        return False \n    else: \n        return True \n```", "```py\ndef probe_port(ip, port, result = 1): \n    src_port = RandShort() \n    try: \n        p = IP(dst=ip)/TCP(sport=src_port, dport=port, flags='F') \n        resp = sr1(p, timeout=2) # Sending packet \n        if str(type(resp)) == \"<type 'NoneType'>\": \n            result = 1 \n        elif resp.haslayer(TCP): \n            if resp.getlayer(TCP).flags == 0x14: \n                result = 0 \n            elif (int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]): \n                result = 2 \n    except Exception as e: \n        pass \n    return result \n```", "```py\n if is_up(ip): \n        for port in common_ports: \n            print (port) \n            response = probe_port(ip, port) \n            if response == 1: \n                openp.append(port) \n            elif response == 2: \n                filterdp.append(port) \n        if len(openp) != 0: \n            print (\"Possible Open or Filtered Ports:\") \n            print (openp) \n        if len(filterdp) != 0: \n            print (\"Possible Filtered Ports:\") \n            print (filterdp) \n        if (len(openp) == 0) and (len(filterdp) == 0): \n            print (\"Sorry, No open ports found.!!\") \n    else: \n        print (\"Host is Down\") \n```", "```py\nsudo python3 syn-scanner.py \n```", "```py\nfrom scapy.all import * \n```", "```py\nhost = 'www.dvwa.co.uk' \nip = socket.gethostbyname(host) \nopenp = [] \nfilterdp = [] \ncommon_ports = { 21, 22, 23, 25, 53, 69, 80, 88, 109, 110,  \n                 123, 137, 138, 139, 143, 156, 161, 389, 443,  \n                 445, 500, 546, 547, 587, 660, 995, 993, 2086,  \n                 2087, 2082, 2083, 3306, 8443, 10000  \n                } \ndef is_up(ip): \n    icmp = IP(dst=ip)/ICMP() \n    resp = sr1(icmp, timeout=10) \n    if resp == None: \n        return False \n    else: \n        return True  \n```", "```py\ndef probe_port(ip, port, result = 1): \n    src_port = RandShort() \n    try: \n        p = IP(dst=ip)/TCP(sport=src_port, dport=port, flags='F') \n        resp = sr1(p, timeout=2) # Sending packet \n        if str(type(resp)) == \"<type 'NoneType'>\": \n            result = 1 \n        elif resp.haslayer(TCP): \n            if resp.getlayer(TCP).flags == 0x14: \n                result = 0 \n            elif (int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]): \n                result = 2 \n    except Exception as e: \n        pass \n    return result \n```", "```py\n if is_up(ip): \n        for port in common_ports: \n            print (port) \n            response = probe_port(ip, port) \n            if response == 1: \n                openp.append(port) \n            elif response == 2: \n                filterdp.append(port) \n        if len(openp) != 0: \n            print (\"Possible Open or Filtered Ports:\") \n            print (openp) \n        if len(filterdp) != 0: \n            print (\"Possible Filtered Ports:\") \n            print (filterdp) \n        if (len(openp) == 0) and (len(filterdp) == 0): \n            print (\"Sorry, No open ports found.!!\") \n    else: \n        print (\"Host is Down\") \n```", "```py\np = IP(dst=ip)/TCP(sport=src_port, dport=port, flags='FPU') \n```", "```py\nfrom scapy.all import * \n# define the host, port \nhost = 'rejahrehim.com' \nip = socket.gethostbyname(host) \nport = 80 \n# define the method to check the status of host \ndef is_up(ip): \n    icmp = IP(dst=ip)/ICMP() \n    resp = sr1(icmp, timeout=10) \n    if resp == None: \n        return False \n    else: \n        return True \n```", "```py\ndef probe_port(ip, port, result = 1): \n    src_port = RandShort() \n    try: \n        p = IP(dst=ip)/TCP(sport=src_port, dport=port, flags='A', seq=12345) \n        resp = sr1(p, timeout=2) # Sending packet \n        if str(type(resp)) == \"<type 'NoneType'>\": \n            result = 1 \n        elif resp.haslayer(TCP): \n            if resp.getlayer(TCP).flags == 0x4: \n                result = 0 \n            elif (int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]): \n                result = 1 \n    except Exception as e: \n        pass \n    return result \n```", "```py\n if is_up(ip): \n            response = probe_port(ip, port) \n            if response == 1: \n                 print (\"Filtered | Stateful firewall present\") \n            elif response == 0: \n                 print (\"Unfiltered | Stateful firewall absent\") \n    else: \n        print (\"Host is Down\") \n```", "```py\npip3 install lanscan  \n```", "```py\nsudo lanscan interfaces  \n```", "```py\nsudo lanscan networks\n```", "```py\nsudo lanscan scan  \n```"]