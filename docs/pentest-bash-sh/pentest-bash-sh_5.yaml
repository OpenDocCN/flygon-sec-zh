- en: Chapter 5. Network Exploitation and Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。网络利用和监控
- en: In the previous chapter, we learned about host-and application-based exploitation
    and how to use the Metasploit Framework command-line interface and some of the
    other command line and shell environment-driven utilities to reverse engineer
    applications and autonomously launch tools based on Nmap output as well as other
    tools. The following chapter will focus on the network exploitation available
    in Kali Linux and how to take advantage of it in the modern bash shell environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了基于主机和应用程序的利用，以及如何使用Metasploit Framework命令行界面和其他命令行和shell环境驱动的实用程序来逆向工程应用程序，并根据Nmap输出自主启动工具。接下来的章节将重点介绍Kali
    Linux中可用的网络利用以及如何在现代bash shell环境中利用它。
- en: To start off with, we're going to talk about MAC spoofing and (**ARP)** **Address
    Resolution Protocol** abuse, something that commonly plagues off-the-shelf network
    solutions and could have, in most cases, a very high impact if left unchecked.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论MAC地址欺骗和（ARP）地址解析协议滥用，这是常见的困扰现成网络解决方案的问题，在大多数情况下，如果不加以检查，可能会产生非常大的影响。
- en: MAC and ARP abuse
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MAC和ARP滥用
- en: '**(MAC)** **Media Access Control** addresses are the addresses given to devices
    on a local network. These addresses are used by layer 2 protocols to pinpoint
    physical devices such as routers, laptops, DNS servers, and other devices adjacent
    to each other on a logical network. Inherently, unless other controls are enforced,
    nothing prevents one device from forging the origin of its packets by using another
    device''s MAC address. This is termed a MAC spoofing attack. Usually, you will
    want to forge or spoof your MAC if some resources on your target network are controlled
    by means of a MAC address, namely if the protection for a given resource uses
    a MAC address as an authentication credential or as identification material. This
    idea is inherently flawed, purely on the basis that if you''re trying to protect
    something that''s secret, you cannot do so without relying on something that''s
    secret. This is a way of paraphrasing an age-old principle of cryptography and
    information theory. Because MAC addresses are supposed to be broadcasted across
    the network in many common situations, due to the operation of some fundamental
    protocols such as ARP, everyone on the network has access to everyone else''s
    MAC addresses.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: （MAC）媒体访问控制地址是分配给本地网络设备的地址。这些地址由第2层协议用于定位物理设备，如路由器、笔记本电脑、DNS服务器和其他在逻辑网络上相邻的设备。从本质上讲，除非实施其他控制，否则没有什么可以阻止一个设备通过使用另一个设备的MAC地址来伪造其数据包的来源。这被称为MAC地址欺骗攻击。通常，如果目标网络上的某些资源是通过MAC地址控制的，那么您可能希望伪造或欺骗您的MAC地址，特别是如果给定资源的保护使用MAC地址作为身份验证凭据或识别材料。这个想法本质上是有缺陷的，纯粹是因为如果您试图保护一些秘密的东西，您不能这样做而不依赖于一些秘密的东西。这是对密码学和信息理论的一个古老原则的一种解释方式。因为MAC地址在许多常见情况下应该在网络上广播，由于一些基本协议的运行，比如ARP，因此网络上的每个人都可以访问其他人的MAC地址。
- en: MAC address spoofing (though probably the most simplistic network attack; all
    you are really doing is changing the MAC address field in a packet) is also quite
    fundamental to many exploitation techniques. Essentially, almost all hacking is
    about abusing trust; when there is a lot of trust focused, something as fallible
    as the MAC address in a packet, there's a lot you can pull off by abusing this
    situation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址欺骗（尽管可能是最简单的网络攻击；您实际上只是在数据包中更改MAC地址字段）对许多利用技术也非常基本。基本上，几乎所有的黑客行为都是在滥用信任；当有很多信任集中在数据包中如MAC地址这样容易受攻击的地方时，您可以通过滥用这种情况实现很多事情。
- en: Spoofing MAC addresses
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺骗MAC地址
- en: As stated earlier, spoofing your MAC address is relatively easy but it's also
    a fundamental ingredient to many exploitation techniques; be it ARP spoofing,
    port stealing, or route mangling, all of these wonderful tricks depend heavily
    on the originating MAC address.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，欺骗您的MAC地址相对容易，但它也是许多利用技术的基本要素；无论是ARP欺骗、端口窃取还是路由篡改，所有这些精彩的技巧都严重依赖于源MAC地址。
- en: 'To change your MAC address using Kali Linux, you can use a tool called `macchanger`,
    and use the following command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Kali Linux更改MAC地址，您可以使用一个名为`macchanger`的工具，并使用以下命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Essentially, `MAC_ADDRESS` will be the MAC address that you would like to change
    your current MAC address to and `INTERFACE` is the interface that should correspond
    to this new MAC address. The other options will not be discussed here for the
    sake of brevity; I suggest you check out the man file for more detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，`MAC_ADDRESS`将是您想要将当前MAC地址更改为的MAC地址，`INTERFACE`是应该对应于这个新MAC地址的接口。出于简洁起见，这里不讨论其他选项；建议您查看man文件以获取更多详细信息。
- en: 'Following is an example of `macchanger` in action:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`macchanger`的示例：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command produces the following output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令产生以下输出：
- en: '![Spoofing MAC addresses](img/5107OT_05_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![欺骗MAC地址](img/5107OT_05_01.jpg)'
- en: 'For a random MAC, you could use the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于随机MAC，您可以使用以下命令：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding screenshot, you will see that the MAC address configured for
    the host originally is changed to the one specified to macchanger. Additionally,
    you may need to make sure that the interface you are reconfiguring with a new
    MAC address is not in use, as we've done in the preceding screenshot. This was
    the purpose of the `ifconfig` commands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您将看到为主机配置的MAC地址已更改为macchanger指定的MAC地址。此外，您可能需要确保您重新配置新MAC地址的接口没有在使用中，就像我们在前面的屏幕截图中所做的那样。这就是`ifconfig`命令的目的。
- en: Abusing address resolution
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滥用地址解析
- en: The address resolution protocol exists as a service that translates IP addresses
    into MAC addresses. Hosts make ARP requests to obtain information about the MAC
    address associated with a given IP address. A host will broadcast a message across
    the entire local network segment, hoping to receive a response from the host associated
    with the requested IP address. The fundamental flaw in the address resolution
    protocol is that it inherently lacks any form of authentication and message integrity.
    This means that, when a response is received for a MAC address lookup, the receiving
    host has no way of determining its origin, and is left to blindly assume it comes
    from the correct host. To an attacker, what this means is that you can convince
    devices to forward you packets that are actually intended for another user by
    forging responses to ARP requests.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 地址解析协议作为一种服务存在，它将IP地址转换为MAC地址。主机发出ARP请求以获取与给定IP地址关联的MAC地址的信息。主机将在整个本地网络段广播一条消息，希望从与请求的IP地址关联的主机接收响应。地址解析协议的根本缺陷在于，它本质上缺乏任何形式的身份验证和消息完整性。这意味着，当接收到MAC地址查找的响应时，接收主机无法确定其来源，并且只能盲目地假定它来自正确的主机。对于攻击者来说，这意味着您可以通过伪造ARP请求的响应来说服设备将实际上是为另一个用户而不是自己的数据包转发给您。
- en: 'Kali Linux has a tool that helps facilitate ARP abuse; it''s called ArpSpoof
    and following is the usage specification for it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux有一个工具可以帮助促进ARP滥用；它被称为ArpSpoof，以下是其使用规范：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`-i`: This specifies the interface to send ARP replies from. You can find out
    which of your network interfaces is configured with an address and associated
    with a network by using the `ifconfig` command.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：这指定了发送ARP回复的接口。您可以使用`ifconfig`命令找出哪个网络接口配置了地址并与网络关联。'
- en: '`-c`: This specifies the MAC address to use when restoring the ARP resolution
    to its original form.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：这指定了在将ARP解析恢复为其原始形式时要使用的MAC地址。'
- en: '`-t`: This option specifies the target host, namely the one you would like
    to poison.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`：此选项指定目标主机，即您想要毒害的主机。'
- en: '`-r`: This tells `arpspoof` to poison both hosts; this means not only sending
    ARP replies to your target but also to the host you are impersonating when you
    reply. The effect of this is that both hosts involved have their ARP tables reflect
    that you are either host; `TARGET` will be convinced that you are `GATEWAY` and
    vice versa.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`：这告诉`arpspoof`毒害两个主机；这意味着不仅向目标发送ARP回复，而且在您回复时也向您冒充的主机发送ARP回复。这样做的效果是，涉及的两个主机的ARP表都会反映出您是其中一个主机；`TARGET`将相信您是`GATEWAY`，反之亦然。'
- en: '`GATEWAY`: This is the IP address of the host you want to impersonate when
    sending forged ARP replies.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GATEWAY`：这是您在发送伪造ARP回复时想要冒充的主机的IP地址。'
- en: 'Here''s an example: let''s say we would like to convince the host at address
    `192.168.10.107` that we are the host at address `192.168.10.1`, which is the
    default gateway for our target host. Here''s the command you will issue to ArpSpoof
    in this situation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：假设我们想说服地址为`192.168.10.107`的主机，我们是地址为`192.168.10.1`的主机，这是我们目标主机的默认网关。在这种情况下，您将向ArpSpoof发出的命令如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding command will produce the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将产生以下输出：
- en: '![Abusing address resolution](img/5107OT_05_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![滥用地址解析](img/5107OT_05_02.jpg)'
- en: 'The preceding screenshot shows the attacker''s MAC address in bold. Here, it''s
    configured to be `08:00:27:29:d2:29`. If the ARP spoof attack works in our example,
    this address will be associated with the `192.168.10.1` IP on the target host,
    as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了攻击者的MAC地址以粗体显示。在这里，它被配置为`08:00:27:29:d2:29`。如果ARP欺骗攻击在我们的示例中起作用，此地址将与目标主机上的`192.168.10.1`
    IP关联，如下图所示：
- en: '![Abusing address resolution](img/5107OT_05_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![滥用地址解析](img/5107OT_05_03.jpg)'
- en: Man-in-the-middle attacks
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: Using what we've learned in the ARP abuse subsection of this chapter, we can
    actually perform more elaborate **man-in-the-middle** (**MITM**)-style attacks
    building on the ability to abuse address resolution and host identification schemes.
    This section will focus on the methods you can use to do just that.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 利用本章ARP滥用子部分中学到的知识，我们实际上可以执行更复杂的**中间人**（**MITM**）风格的攻击，建立在滥用地址解析和主机识别方案的能力之上。本节将重点介绍您可以使用的方法。
- en: MITM attacks are aimed at fooling two entities on a given network into communicating
    by the proxy of an unauthorized third party, or allowing a third party to access
    information in transit, being communicated between two entities on a network.
    For instance, when a victim connects to a service on the local network or on a
    remote network, a man-in-the-middle attack will give you as an attacker the ability
    to eavesdrop on or even augment the communication happening between the victim
    and its service. By service, we could mean a web (HTTP), FTP, RDP service, or
    really anything that doesn't have the inherent means to defend itself against
    MITM attacks, which turns out to be quite a lot of the services we use today!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MITM攻击旨在愚弄给定网络上的两个实体，使它们通过未经授权的第三方代理进行通信，或允许第三方访问正在两个实体之间传输的信息。例如，当受害者连接到本地网络或远程网络上的服务时，中间人攻击将使您作为攻击者能够窃听或甚至增强受害者与其服务之间的通信。通过服务，我们可能指的是Web（HTTP）、FTP、RDP服务，或者今天使用的许多服务中的任何一种，它们都没有固有的手段来抵御MITM攻击！
- en: Ettercap DNS spoofing
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ettercap DNS欺骗
- en: Ettercap is a tool that facilitates a simple command line and graphical interface
    to perform MITM attacks using a variety of techniques. In this section, we will
    be focusing on applications of ARP spoofing attacks, namely DNS spoofing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap是一个工具，它提供了一个简单的命令行和图形界面，用于执行各种技术的MITM攻击。在本节中，我们将重点关注ARP欺骗攻击的应用，即DNS欺骗。
- en: 'You can set up a DNS spoofing attack with ettercap by performing the following
    steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下步骤使用ettercap设置DNS欺骗攻击：
- en: Before we get ettercap up and running, we need to modify the file that holds
    the DNS records for our soon-to-be-spoofed DNS server. This file is found under
    `/usr/share/ettercap/etter.dns`. What you need to do is either add DNS name and
    IP addresses or modify the ones currently in the file by replacing all the IPs
    with yours, if you'd like to act as the intercepting host.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们启动ettercap之前，我们需要修改保存我们即将欺骗的DNS服务器的DNS记录的文件。这个文件位于`/usr/share/ettercap/etter.dns`下。您需要做的是添加DNS名称和IP地址，或者通过用您自己的IP替换文件中当前的所有IP来修改文件中的IP。如果您想要充当拦截主机的话。
- en: 'Now that our DNS server records are set up, we can invoke ettercap. Invoking
    ettercap is pretty straightforward; here''s the usage specification:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的DNS服务器记录已经设置好，我们可以调用ettercap。调用ettercap非常简单；以下是用法规范：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To perform a MITM attack using ettercap, you need to supply the `–M` switch
    and pass it an argument indicating the MITM method you''d like to use. In addition,
    you will also need to specify that you''d like to use the DNS spoofing plugin.
    Here''s what the invocation will look like:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用ettercap执行MITM攻击，您需要提供`-M`开关，并传递一个指示您想要使用的MITM方法的参数。此外，您还需要指定您想要使用DNS欺骗插件。以下是调用的样子：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Where `TARGET1` and `TARGET2` is the host you want to intercept and either the
    default gateway or DNS server, interchangeably.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`TARGET1`和`TARGET2`是您想要拦截的主机和默认网关或DNS服务器，可以互换使用。
- en: 'To target the host at address `192.168.10.106` with a default gateway of `192.168.10.1`,
    you will invoke the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要针对地址为`192.168.10.106`的主机，使用默认网关为`192.168.10.1`，您将调用以下命令：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once launched, ettercap will begin poisoning the ARP tables of the specified
    hosts and listen for any DNS requests to the domains it's configured to resolve.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，ettercap将开始毒化指定主机的ARP表，并监听任何对其配置为解析的域的DNS请求。
- en: Interrogating servers
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 询问服务器
- en: For any network device to participate in communication, certain information
    needs to be accessible to it, no device will be able to look up a domain name
    or find an IP address without the participation of devices in charge of certain
    information. In this section, we will detail some techniques you can use to interrogate
    common network components for sensitive information about your target network
    and the hosts on it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网络设备要参与通信，都需要访问某些信息，没有设备能够查找域名或找到IP地址，而不需要负责某些信息的设备的参与。在本节中，我们将详细介绍一些技术，您可以使用这些技术来询问关于目标网络和其中的主机的敏感信息的常见网络组件。
- en: SNMP interrogation
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SNMP询问
- en: The **Simple Network Management Protocol** (**SNMP**) is used by routers and
    other network components in order to support remote monitoring of things such
    as bandwidth, CPU/Memory usage, hard disk space usage, logged on users, running
    processes, and a number of other incredibly sensitive collections of information.
    Naturally, any penetration tester with an exposed SNMP service on their target
    network will need to know how to proliferate any potentially useful information
    from it. This chapter discusses some tools you can use to do just that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单网络管理协议**（**SNMP**）被路由器和其他网络组件使用，以支持远程监视诸如带宽、CPU/内存使用情况、硬盘空间使用情况、已登录用户、运行进程等一系列非常敏感的信息。自然地，任何在目标网络上暴露了SNMP服务的渗透测试人员都需要知道如何从中传播任何潜在有用的信息。本章讨论了一些工具，您可以使用这些工具来做到这一点。'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**About SNMP Security**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于SNMP安全**'
- en: SNMP services before Version 3 are not designed with security in mind. Authentication
    to these services often comes in the form a simple string of characters called
    a community string. Another common implementation flaw that is inherent to SNMP
    Version 1 and 2 is the ability to brute-force and eavesdrop on communication.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 版本3之前的SNMP服务并不考虑安全性。对这些服务的身份验证通常以一串简单的字符形式出现，称为社区字符串。SNMP版本1和2固有的另一个常见实现缺陷是能够对通信进行暴力破解和窃听。
- en: 'To enumerate SNMP servers for information using the Kali Linux tools, you could
    resort to a number of techniques. The most obvious one will be `snmpwalk`, and
    you can use it by using the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Kali Linux工具枚举SNMP服务器的信息，您可以采用多种技术。最明显的方法将是使用`snmpwalk`，您可以通过以下命令使用它：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For example, let''s say we were targeting `192.168.10.103` with a community
    string of `public`, which is a common community string setting; you will then
    invoke the following command to get information from the SNMP service:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们以`public`作为社区字符串，针对`192.168.10.103`进行目标定位，这是一个常见的社区字符串设置；然后，您将调用以下命令从SNMP服务中获取信息：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we opted to use SNMP Version 1, hence the `–v 1` in the invocation for
    the preceding command. The output will look something like the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择使用SNMP版本1，因此在前面的命令调用中使用了`-v 1`。输出将看起来像以下的屏幕截图：
- en: '![SNMP interrogation](img/5107OT_05_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![SNMP询问](img/5107OT_05_04.jpg)'
- en: As you can see, this actually extracts some pretty detailed information about
    the targeted host. Whether this is a critical vulnerability or not will depend
    on which kind of information is exposed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这实际上提取了有关目标主机的一些非常详细的信息。这是否是一个关键的漏洞将取决于暴露了哪种类型的信息。
- en: On Microsoft Windows machines and some popular router operating systems, SNMP
    services could expose user credentials and even allow remote attackers to augment
    them maliciously, should they have write access to the SNMP database. Exploiting
    SNMP successfully is often strongly depended on the device implementing the service.
    You could imagine that for routers, your target will probably be the routing table
    or the user accounts on the device. For other host types, the attack surface may
    be quite different. Try to assess the risk of SNMP-based flaws and information
    leaks with respect to its host and possibly the wider network it's hosted on.
    Don't forget that SNMP is all about sharing information, information that other
    hosts on your network probably trust. Think about the kind of information accessible
    and what you will be able to do with it should you have the ability to influence
    it. If you can attack the host, attack the hosts that trust it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft Windows机器和一些流行的路由器操作系统上，SNMP服务可能会暴露用户凭据，甚至允许远程攻击者恶意增加它们，如果他们对SNMP数据库具有写访问权限。成功利用SNMP通常严重依赖于实施服务的设备。您可以想象，对于路由器，您的目标可能是路由表或设备上的用户帐户。对于其他主机类型，攻击面可能会有所不同。尝试评估与其主机以及可能托管在其上的更广泛网络相关的基于SNMP的缺陷和信息泄漏的风险。不要忘记，SNMP的全部内容都是关于共享信息，其他网络上的主机可能会信任这些信息。考虑可访问的信息类型以及如果您有能力影响它，您将能够做些什么。如果您可以攻击主机，请攻击信任它的主机。
- en: 'Another collection of tools is really great at collecting information from
    SNMP services: the `snmp_enum`, `snmp_login`, and similar scripts available in
    the Metasploit Framework. The `snmp_enum` script pretty much does exactly what
    `snmpwalk` does except it structures the extracted information in a friendlier
    format. This makes it easier to understand. Here''s an example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个收集来自SNMP服务的信息的工具集是Metasploit Framework中可用的`snmp_enum`、`snmp_login`和类似脚本。`snmp_enum`脚本基本上与`snmpwalk`做的事情一样，只是它以更友好的格式结构化提取的信息。这使得它更容易理解。以下是一个示例：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The options available for this module are shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块可用的选项显示在以下屏幕截图中：
- en: '![SNMP interrogation](img/5107OT_05_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![SNMP询问](img/5107OT_05_05.jpg)'
- en: 'Here''s an example invocation against the host in our running example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是针对我们正在运行的示例主机的示例调用：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command produces the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令产生以下输出：
- en: '![SNMP interrogation](img/5107OT_05_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![SNMP询问](img/5107OT_05_06.jpg)'
- en: You will notice that we didn't specify the community string in the invocation.
    This is because the module assumes a default of `public`. You can specify a different
    one using the `COMMUNITY` parameter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在调用中没有指定社区字符串。这是因为该模块假定默认为`public`。您可以使用`COMMUNITY`参数指定不同的社区字符串。
- en: 'In other situations, you may not always be lucky enough to preemptively know
    the community string being used. However, luckily SNMP Version 1, 2, 2*c*, and
    3*c* do not inherently have any protection against brute-force attacks, nor do
    any of them use any form of network based encryption. In the case of SNMP Version
    1 and 2*c*, you could use a nifty Metasploit module called `snmp-login` that will
    run through a list of possible community strings and determine the level of access
    the enumerated strings gives you. You can use it by running the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，您可能并不总是那么幸运，能够预先知道正在使用的社区字符串。然而，幸运的是，SNMP版本1、2、2*c*和3*c*并没有固有的防范暴力攻击的保护措施，也没有使用任何形式的基于网络的加密。对于SNMP版本1和2*c*，您可以使用一个巧妙的Metasploit模块，称为`snmp-login`，它将运行一个可能的社区字符串列表，并确定列举的字符串给您带来的访问级别。您可以通过运行以下命令来使用它：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command produces the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令产生以下输出：
- en: '![SNMP interrogation](img/5107OT_05_07.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![SNMP询问](img/5107OT_05_07.jpg)'
- en: As seen in the preceding screenshot, once the run is complete it will list the
    enumerated strings along with the level of access granted.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，一旦运行完成，它将列出列举的字符串以及授予的访问级别。
- en: 'The `snmp_login` module uses a static list of possible strings to do its enumeration
    by default, but you could also run this module on some of the password lists that
    ship with Kali Linux, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`snmp_login`模块默认使用一个可能的字符串的静态列表进行枚举，但您也可以在Kali Linux中的一些密码列表上运行此模块，如下所示：'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will use the `rockyou.txt` wordlist to look for strings to guess with.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用`rockyou.txt`单词列表来查找要猜测的字符串。
- en: 'Because all of these Metasploit modules are command line-driven, you can of
    course combine them. For instance, if you''d like to brute-force a host for the
    SNMP community strings and then run the enumeration module on the strings it finds,
    you can do this by crafting a bash script as shown in the following example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些Metasploit模块都是基于命令行的，您当然可以将它们组合在一起。例如，如果您想要对主机进行SNMP社区字符串的暴力破解，然后对找到的字符串运行枚举模块，您可以通过编写一个bash脚本来实现，如下例所示：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following command shows you how to use it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令向您展示如何使用它：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our running example, it is used as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正在运行的示例中，它的使用如下：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Other than guessing or brute-forcing SNMP community strings, you could also
    use TCPDump to filter out any packets that could contain unencrypted SNMP authentication
    information. Here''s a useful example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了猜测或暴力破解SNMP社区字符串，您还可以使用TCPDump来过滤出可能包含未加密SNMP认证信息的数据包。以下是一个有用的示例：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The specifics of these parameters are covered in later sections. The preceding
    command will produce the following output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数的具体内容将在后面的部分中介绍。上述命令将产生以下输出：
- en: '![SNMP interrogation](img/5107OT_05_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![SNMP询问](img/5107OT_05_08.jpg)'
- en: Without going too much into detail about the SNMP packet structure, looking
    through the printable strings captured, it's usually pretty easy to see the community
    string. For more information about how SNMP packets work, I suggest you to check
    out the links in the *Further reading* section. You may also want to look at building
    a more comprehensive packet-capturing tool using something such as Scapy, which
    is available in Kali Linux versions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不要过多地详细了解 SNMP 数据包结构，通过查看捕获的可打印字符串，通常很容易看到社区字符串。有关 SNMP 数据包工作原理的更多信息，建议您查看“进一步阅读”部分中的链接。您可能还希望考虑使用诸如
    Scapy 等工具构建更全面的数据包捕获工具，这些工具在 Kali Linux 版本中可用。
- en: For more about SNMP enumeration, please see the links in the *Further reading*
    section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 SNMP 枚举的更多信息，请参阅“进一步阅读”部分中的链接。
- en: SMTP server interrogation
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTP 服务器询问
- en: 'SMTP servers are used to forward e-mail, and they operate a simple text-based
    protocol. Because these machines exist on operating systems with users accounts
    defined on them and due to the way some of them are configured to handle falsified
    e-mail recipients, you can often abuse the way e-mail address verification or
    look ups work to enumerate the list of user accounts on the host operating system.
    Kali has a great command-line tool called `smtp-user-enum` to do this. Here''s
    how it works:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP 服务器用于转发电子邮件，它们使用简单的基于文本的协议。由于这些机器存在于定义了用户帐户的操作系统上，并且由于其中一些配置为处理伪造的电子邮件接收者的方式，您通常可以滥用电子邮件地址验证或查找工作的方式来枚举主机操作系统上的用户帐户列表。Kali
    有一个名为 `smtp-user-enum` 的出色命令行工具来执行此操作。它的工作原理如下：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The components of the previous command line are explained as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令行的组件解释如下：
- en: '`-M`: This is the enumeration method. This is the command that will be used
    to determine whether a user actually exists on the targeted server.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -M：这是枚举方法。这是用于确定用户是否实际存在于目标服务器上的命令。
- en: '`-u`: This is used to specify a single username to check for.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -u：用于指定要检查的单个用户名。
- en: '`-U`: This is used to specify a list of usernames to check for.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -U：用于指定要检查的用户名列表。
- en: '`-t`: This is used to specify a single host to target with the enumeration
    attack.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -t：用于指定要针对枚举攻击的单个主机。
- en: '`-T`: This allows you to specify a `HOST_FILE`, which is a list of hosts to
    target with the attack.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -T：这允许您指定 `HOST_FILE`，这是一个要针对攻击的主机列表。
- en: '`-h`: This specifies the `help` file of output.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -h：指定输出的 `help` 文件。
- en: '`–v`: This specifies the verbosity of output.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: –v：指定输出的详细程度。
- en: 'To use `smtp-user-enum` effectively, you need a pretty comprehensive username
    list. There are tons of them on the web; for our purposes, we will simply grab
    the `/etc/passwd`, pull it through `awk`, and use the list of users on our host
    system to guess with. This is also a great way to fingerprint operating systems
    similar to your own. It is done by performing the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效使用 `smtp-user-enum`，您需要一个相当全面的用户名列表。网上有很多这样的列表；对于我们的目的，我们将简单地获取 `/etc/passwd`，通过
    `awk` 进行处理，并使用主机系统上的用户列表进行猜测。这也是一种识别类似于您自己的操作系统的好方法。通过执行以下步骤完成：
- en: 'Strip out the usernames as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式剥离用户名：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Target the `smtp` server with the enum attack:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 针对 `smtp` 服务器进行枚举攻击：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`smtp-user-enum` will then use the `VRFY` command to determine whether the
    users exist on your target. You could also specify other methods for enumeration
    as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`smtp-user-enum` 将使用 `VRFY` 命令来确定用户是否存在于目标上。您还可以按以下方式指定其他枚举方法：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That's about it as far as SMTP enumeration goes; from here on out, you should
    record the usernames you enumerate and replay them the next time you need to run
    an SMTP username enumeration attack.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就 SMTP 枚举而言，大概就是这样；从现在开始，您应该记录您枚举的用户名，并在下次运行 SMTP 用户名枚举攻击时重放它们。
- en: Brute-forcing authentication
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解身份验证
- en: Many successes or failures in penetration tests come down to how well you can
    guess passwords. This may surprise you, but network engineers and developers do
    get it right sometimes and you will need to rely on the predictability of the
    users to find your way "in". Kali Linux offers a range of new, sophisticated,
    old, and well-trusted authentication cracking tools, and these tools will typically
    be your point of call when it comes to guessing passwords really quickly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中，许多成功或失败取决于您猜测密码的能力。这可能会让您感到惊讶，但网络工程师和开发人员有时确实会做对，您需要依赖用户的可预测性来找到您的方式“进入”。Kali
    Linux 提供了一系列新的、复杂的、老的和值得信赖的身份验证破解工具，当您需要快速猜测密码时，这些工具通常会是您的首选。
- en: Using Medusa
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Medusa
- en: Medusa is one of the better multipurpose cracker tools available with Kali Linux.
    It supports many different modes of authentication and also allows you to define
    your own plugins should you encounter anything it doesn't inherently support.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa 是 Kali Linux 中可用的更好的多用途破解工具之一。它支持许多不同的身份验证模式，并且还允许您定义自己的插件，以防遇到它本身不支持的任何内容。
- en: 'You can invoke medusa by using the following command line:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下命令调用 medusa：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Medusa supports a number of modules. You can find out which modules your version
    supports by executing the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa 支持许多模块。您可以通过执行以下命令来查找您的版本支持哪些模块：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The previous command will produce a list of the supported modules. If you''d
    like to use one of them, you can specify the name of the module using the `–M`
    switch, as in the preceding usage specification. Here''s an example, targeting
    the SSH service on `192.168.10.105`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将生成支持的模块列表。如果您想使用其中一个，可以使用 `–M` 开关指定模块的名称，就像前面的用法规范一样。以下是一个示例，针对 `192.168.10.105`
    上的 SSH 服务：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The previous command will produce the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将产生以下输出：
- en: '![Using Medusa](img/5107OT_05_09.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Medusa](img/5107OT_05_09.jpg)'
- en: 'Similarly, you could target other services, as shown in the following commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以针对其他服务，如以下命令所示：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Medusa also allows you to develop your own modules for brute-forcing and offers
    pretty useful ways of specifying password and username lists. For more about Medusa's
    other options, please refer to the *Further reading* section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa还允许你为暴力破解开发自己的模块，并提供了一些非常有用的方法来指定密码和用户名列表。有关Medusa的其他选项，请参考*进一步阅读*部分。
- en: Traffic filtering with TCPDump
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TCPDump进行流量过滤
- en: TCPDump is one of the most prolifically used network traffic inspection tools
    used to date. It supports a number of rich information-driven features and just
    like the rest of the tools discussed in this book, it offers a purely command-line-driven
    interface. TCPDump allows you to filter network traffic for useful information.
    Here, we will be covering some basic usage. Later, we will move on to how to use
    TCPDump to inspect just the traffic you are interested it, and all this will be
    straight from the comfort of your trusty bash shell.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: TCPDump是迄今为止最广泛使用的网络流量检查工具之一。它支持许多丰富的信息驱动功能，就像本书中讨论的其他工具一样，它提供了一个纯命令行驱动的界面。TCPDump允许你过滤网络流量以获取有用的信息。在这里，我们将介绍一些基本用法。稍后，我们将继续讨论如何使用TCPDump来检查你感兴趣的流量，所有这些都将直接来自你可靠的bash
    shell。
- en: Getting started with TCPDump
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用TCPDump
- en: 'To start off, let''s look at the usage specification for TCPDump:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下TCPDump的用法规范：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see, this little packet dumping tool is packed with features and
    can pretty much cater to your every packet analysis need. As a proverbial "hello
    world" example, let''s invoke TCPDump in its most basic form and see what it does.
    It can be invoked by using the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个小小的数据包转储工具功能丰富，几乎可以满足你的每一个数据包分析需求。作为一个谚语中的“hello world”例子，让我们以最基本的形式调用TCPDump并看看它的作用。可以通过以下命令调用它：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You need root access rights to run `tcpdump` but, since Kali runs as root by
    default, all you need to do is open a terminal and invoke the previous command.
    The preceding command should produce the following output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要root访问权限来运行`tcpdump`，但由于Kali默认以root身份运行，你只需要打开一个终端并调用前面的命令。前面的命令应该会产生以下输出：
- en: '![Getting started with TCPDump](img/5107OT_05_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用TCPDump](img/5107OT_05_10.jpg)'
- en: 'What you see in the preceding screenshot is that TCPDump first lets you know
    that there are other invocation options available, specifically those governing
    the verbosity of the output. The TCPDump developers thought it would be a good
    idea to let you know about the more verbose options, if invoked with no arguments.
    If you use the verbose switches, you will get the following output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到TCPDump首先让你知道还有其他可用的调用选项，特别是那些控制输出冗长度的选项。TCPDump的开发人员认为，如果没有参数调用，让你知道更冗长的选项将是一个好主意。如果你使用冗长开关，你将得到以下输出：
- en: '![Getting started with TCPDump](img/5107OT_05_11.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用TCPDump](img/5107OT_05_11.jpg)'
- en: 'TCPDump decodes the structure of the packet a little more as you can see in
    the previous example, and it provides a little more detail. For instance, the
    IP, TCP, and UDP flags are included in the packet dump. Besides controlling the
    verboseness of the output, you can also control how packet capturing works. These
    options include the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: TCPDump对数据包的结构进行了更详细的解码，正如你在前面的例子中所看到的，并提供了更多的细节。例如，IP、TCP和UDP标志都包含在数据包转储中。除了控制输出的冗长度，你还可以控制数据包捕获的工作方式。这些选项包括以下内容：
- en: '`-i`: This allows you to specify the interface to capture on. TCPDump autonomously
    polls the operating system for configured interfaces and starts capturing on the
    first one it finds. This option allows you to strictly specify the interface to
    be used. If you need help finding out which interfaces are available, try executing
    the `ifconfig –a` command. Alternatively, you could use the following command:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：这允许你指定要捕获的接口。TCPDump会自动轮询操作系统配置的接口，并开始在找到的第一个接口上进行捕获。这个选项允许你严格指定要使用的接口。如果你需要帮助找出可用的接口，可以尝试执行`ifconfig
    -a`命令。或者，你也可以使用以下命令：'
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will list the interfaces that `tcpdump` has identified as available for
    packet capture.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出`tcpdump`识别出的可用于数据包捕获的接口。
- en: '`-c`: This allows you to specify the number of packets to capture before exiting
    `tcpdump`. This is great if you don''t need to capture packets indefinitely or
    would like to sample a specified number of packets that meet the criteria of a
    given filter.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：这允许你指定在退出`tcpdump`之前捕获的数据包数量。如果你不需要无限期地捕获数据包，或者想要对满足给定过滤器条件的数据包进行抽样，这将非常有用。'
- en: '`-w`: This allows you to specify a file to save the packet capture to. This
    option works great for audit trailing on remote penetration tests, since you can
    clearly evidence what your machine sent and received from the host. There is also
    very little evidence that is more succinct than a packet capture for certain penetration
    test findings. In fact, if you can, give these files to your clients to replay
    on their vulnerable devices! Which makes for a pretty effective way of autonomously
    building proof of concepts for your findings as well.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-w`：这允许你指定要保存数据包捕获的文件。这个选项非常适合在远程渗透测试的审计跟踪中使用，因为你可以清楚地证明你的机器从主机发送和接收了什么。对于某些渗透测试结果来说，几乎没有比数据包捕获更简洁的证据了。事实上，如果可能的话，把这些文件交给你的客户在他们的易受攻击设备上重放！这是一个非常有效的方法，可以自主地为你的发现构建概念验证。'
- en: '`-r`: This reads packets from a file. This is the complement to the `–w` option
    detailed in the preceding bullet.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -r：这从文件中读取数据包。这是前面小节中`-w`选项的补充。
- en: '`-A`: When printing packets, this omits the link level header and prints them
    in ASCII as well.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-A`：在打印数据包时，这会省略链路层头，并以ASCII形式打印它们。'
- en: '`-x`: This prints packets in hex, without their link level headers. This is
    great if you need to stick the results of your capture in a fuzzing framework
    or C/C++ program to mangle in raw form later on. It''s also a way of printing
    the packet in the most honest and raw form, while still keeping it free from printable
    encoding shortcomings.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`：这以十六进制打印数据包，而不包括它们的链路级标头。如果您需要将捕获结果粘贴到模糊框架或C/C++程序中以后以原始形式操纵，这非常有用。这也是以最诚实和原始的方式打印数据包，同时保持它免受可打印编码的缺陷。'
- en: '`-I`: This puts interfaces in monitor mode. This only works for certain wireless
    interfaces; some drivers don''t properly support this function. This option allows
    your wireless interface to capture packets that are being broadcast to any and
    all devices on the network, without the requirement of being associated with an
    access point.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-I`：这将接口置于监视器模式。这仅适用于某些无线接口；一些驱动程序不正确地支持此功能。此选项允许您的无线接口捕获广播到网络上任何设备的数据包，而无需与访问点关联的要求。'
- en: '`-s`: This allows you to specify `snaplen` or capture length. This is the number
    of maximum bytes to capture per packet.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：这允许您指定`snaplen`或捕获长度。这是每个数据包捕获的最大字节数。'
- en: TCPDump has a number of other useful functions. Here, we've discussed the ones
    you will likely find most useful in your daily activities as a system administrator,
    developer, or penetration tester. For more about TCPDump's other functions, please
    refer to the *Further reading* section of this chapter.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: TCPDump有许多其他有用的功能。在这里，我们讨论了您作为系统管理员、开发人员或渗透测试人员在日常活动中可能会发现最有用的功能。有关TCPDump的其他功能，请参考本章的*进一步阅读*部分。
- en: The following section talks about a very powerful function in TCPDump, namely
    the ability to filter packets based on a description of their attributes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍TCPDump中一个非常强大的功能，即根据数据包属性描述过滤数据包的能力。
- en: Using the TCPDump packet filter
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用TCPDump数据包过滤器
- en: 'TCPDump has a powerful language you can use to describe and filter packets,
    ranging from matching semantic attributes of the packets, protocols, hosts, and
    ports being used right down to filtering attributes in the TCP and UDP headers.
    In this section, we''re going to go over how the packet filter language works
    and how you filter packets for certain attributes. You can specify some attributes
    for TCPDump to filter on by using the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: TCPDump有一个强大的语言，您可以使用它来描述和过滤数据包，从匹配数据包的语义属性、协议、主机和端口，一直到过滤TCP和UDP头中的属性。在本节中，我们将讨论数据包过滤语言的工作原理以及如何过滤特定属性的数据包。您可以使用以下命令指定TCPDump要过滤的一些属性：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the previous command, `[filter]` will be the description of the attributes
    you would like to filter on.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，`[filter]`将是您想要过滤的属性的描述。
- en: 'There is an easy to understand structure to the expressions; it works as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式有一个易于理解的结构；它的工作方式如下：
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'What this means is that each expression consists either of a collection of
    expressions glued together by logical operators, or of a qualifier and an ID.
    Each of these elements is broken down. If you put all this together, it means
    you can specify filters such as the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每个表达式都由逻辑运算符粘合在一起的一组表达式，或者由限定词和ID组成。这些元素中的每一个都被分解。如果将所有这些放在一起，这意味着您可以指定过滤器，例如以下命令：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding command matches all packets that have `192.168.10.102` set as
    either the source or destination. This filter is equivalent to the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令匹配所有将`192.168.10.102`设置为源或目的地的数据包。此过滤器等同于以下命令：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The preceding command produces the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将产生以下输出：
- en: '![Using the TCPDump packet filter](img/5107OT_05_12.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![使用TCPDump数据包过滤器](img/5107OT_05_12.jpg)'
- en: 'You could also match this against entire networks, for example, everything
    in the `192.168.10.0-255` subnet:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将其与整个网络匹配，例如，`192.168.10.0-255`子网中的所有内容：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can also agglutinate other qualifiers to this as in the previous examples:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将其他限定词聚集到前面的示例中：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding command will produce the following output:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将产生以下输出：
- en: '![Using the TCPDump packet filter](img/5107OT_05_13.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![使用TCPDump数据包过滤器](img/5107OT_05_13.jpg)'
- en: This will match all the TCP data coming from or going to any host on the `192.168.10.0/24`
    network using port 80.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配来自`192.168.10.0/24`网络上任何主机发送或接收的所有TCP数据，使用端口80。
- en: 'You can also use any of the qualifiers on their own, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以单独使用任何限定词，如下所示：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Besides specifying packets based on broad, semantic descriptions of their attributes
    (ports, protocols, and direction), you can also specify very fine-grained details
    about the packets themselves, down to describing any of the values for any of
    the fields in the filtered packets.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 除了根据宽泛的语义描述（端口、协议和方向）指定数据包外，您还可以指定有关数据包本身的非常细致的细节，直到描述被过滤数据包中任何字段的任何值。
- en: 'You can have `tcpdump` match packets against attributes in the `TCP`, `ICMP`,
    or `UDP` or any of the supported protocol header values. This is done by using
    the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以让`tcpdump`根据`TCP`、`ICMP`或`UDP`或任何受支持的协议头值中的属性匹配数据包。这是通过使用以下命令完成的：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The preceding command will produce the following output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将产生以下输出：
- en: '![Using the TCPDump packet filter](img/5107OT_05_14.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用TCPDump数据包过滤器](img/5107OT_05_14.jpg)'
- en: 'What this does is tell TCPDump to check that the TCP header at byte offset
    13 is set to `2`, which means this is a `SYN` packet. Here are a few other popular
    examples:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的作用是告诉TCPDump检查字节偏移13处的TCP头是否设置为`2`，这意味着这是一个`SYN`数据包。以下是一些其他常见的例子：
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'There are also some mnemonics available for the TCP and ICMP flags; you can
    use them as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: TCP和ICMP标志也有一些助记符可用；您可以按以下方式使用它们：
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Similarly, for ICMP packets you can use the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于ICMP数据包，您可以使用以下命令：
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You will need to know a little about the TCP header structure to take full advantage
    of this function. If you'd like to find out more about TCP protocol, packet structure,
    and operation, please see some of the links in the *Further reading* section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要了解一些关于TCP头结构的知识，以充分利用这个功能。如果您想了解更多关于TCP协议、数据包结构和操作的信息，请参阅*进一步阅读*部分中的一些链接。
- en: Assessing SSL implementation security
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估SSL实现安全性
- en: For decades, people have been using encryption, hashing, and key exchange mechanisms
    to securely communicate information over untrusted networks. They will use complex
    and convoluted combinations of hashing, encrypting, and exchanging of cryptographic
    primitives to establish a secure communication channel. The SSL and TLS family
    of protocols are a set of rules specifying how cryptographic primitives, communication
    data, and other attributes of communication are managed in order to ensure secure
    conversations from client to server and vice versa.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，人们一直在使用加密、哈希和密钥交换机制来在不受信任的网络上安全地传输信息。他们将使用复杂和错综复杂的哈希、加密和交换密码原语的组合来建立一个安全的通信渠道。SSL和TLS系列协议是一组规则，指定了如何管理加密原语、通信数据和通信的其他属性，以确保从客户端到服务器以及反之的安全对话。
- en: Unfortunately, many SSL/TLS versions have suffered a number of devastating vulnerabilities
    throughout their existence. Some of the attacks published have only surfaced quite
    recently and still impact many SSL/TLS implementations. Besides the flaws in the
    inherent implementation of TLS/SSL, there are also problems that commonly arise
    in configuration of these services—mistakes in how they are used, not how they
    work. Many out-of-the-box configurations support scandalously vulnerable and outdated
    cipher suites and others don't offer much robust protection at all; some even
    completely omit encryption or message authentication schemes!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，许多SSL/TLS版本在它们的存在期间遭受了许多毁灭性的漏洞。一些已发布的攻击最近才出现，仍然影响着许多SSL/TLS实现。除了TLS/SSL的固有实现缺陷外，这些服务的配置中也经常出现问题——它们的使用方式出现了错误，而不是它们的工作方式。许多开箱即用的配置支持令人震惊的脆弱和过时的密码套件，而其他一些根本没有提供强大的保护；有些甚至完全省略了加密或消息认证方案！
- en: The following section of this chapter will detail ways you can assess SSL/TLS
    implementations using a very popular tool called SSLyze. It will also show you
    some novel bash hacks you can use to automate risk analysis of SSL/TLS implementations.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的后续部分将详细介绍您可以使用一个名为SSLyze的非常流行的工具来评估SSL/TLS实现的方法。它还将向您展示一些新颖的bash黑客技巧，以便您可以自动化SSL/TLS实现的风险分析。
- en: Using SSLyze
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SSLyze
- en: SSLyze is another excellent tool developed by the folks at iSec partners and
    I can honestly say, in my experience not a penetration test or vulnerability assessment
    goes by where it hasn't come in handy.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze是iSec合作伙伴开发的另一个优秀工具，我可以诚实地说，在我的经验中，每次渗透测试或漏洞评估都会用到它。
- en: What SSLyze does is make connections to the SSL service implemented on a target
    server; it tries to detail the SSL/TLS cipher suites and other SSL/TLS configuration
    specifics.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze的作用是连接到目标服务器上实现的SSL服务；它试图详细说明SSL/TLS密码套件和其他SSL/TLS配置的具体情况。
- en: 'Here''s the usage specification for SSLyze:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是SSLyze的使用规范：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s look at what happens when we point SSLyze at a SSL/TLS-capable web server;
    you can do that by using the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们将SSLyze指向一个支持SSL/TLS的Web服务器时会发生什么；您可以使用以下命令来做到这一点：
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'For example, if you want to assess the SSL implementation `192.168.10.101`,
    specifically querying the TLS Version 1 configuration, you will execute the following
    command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想评估SSL实现`192.168.10.101`，特别是查询TLS版本1配置，您将执行以下命令：
- en: '[PRE42]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The preceding command produces the following output:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令产生了以下输出：
- en: '![Using SSLyze](img/5107OT_05_15.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![使用SSLyze](img/5107OT_05_15.jpg)'
- en: What we see in the preceding screenshot is the specifications for the configured
    cipher suites on offer. It specifically mentions the cipher suites supported by
    the server and the length of the symmetric keys in use for the given symmetric
    cipher.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们看到了所配置的密码套件的规格。它具体提到了服务器支持的密码套件以及用于给定对称密码的对称密钥的长度。
- en: Tip
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Each cipher suite is described according to the key exchange algorithm, symmetric
    encryption algorithm and message digest—or hashing—algorithm and pseudorandom
    function. Here''s an example of a cipher suite name:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 每个密码套件都根据密钥交换算法、对称加密算法和消息摘要（或哈希）算法以及伪随机函数进行描述。以下是一个密码套件名称的示例：
- en: '`TLS_RSA_WITH_AES_256_CBC_SHA`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`TLS_RSA_WITH_AES_256_CBC_SHA`'
- en: The first few letters before the underscore either mention the key exchange
    mechanism, or that the cipher suite is intended for use in the TLS protocol. Here,
    the key exchange mechanism is `RSA`. The next specification is for the symmetric
    encryption operation. Here, this is indicated as `AES_256`, which is the AES algorithm
    with a block length of 256 used in **Cipher Block Chaining** (**CBC**) mode. After
    the encryption algorithm is mentioned, the cipher suite mentions the hashing algorithm.
    Here, it's indicated as SHA.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线之前的前几个字母要么提到密钥交换机制，要么说明密码套件是用于TLS协议的。在这里，密钥交换机制是`RSA`。接下来的规格是对称加密操作。在这里，这被指定为`AES_256`，这是AES算法，块长度为256，用于**密码块链接**（**CBC**）模式。在提到加密算法之后，密码套件提到了哈希算法。在这里，它被指定为SHA。
- en: 'SSLyze has support for all of the SSL/TLS versions, and you can specify which
    to test for as a command line option. If you''d like to test all of them, you
    would specify the following command line option:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze支持所有的SSL/TLS版本，并且您可以指定要测试哪个版本作为命令行选项。如果您想测试所有版本，您将指定以下命令行选项：
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Besides TLS/SSL versions, you can also have it test for other attributes. Here''s
    how some of the other options work:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 除了TLS/SSL版本，您还可以让它测试其他属性。以下是一些其他选项的工作原理：
- en: '`--reneg`: This test is used for renegotiation support. Pay attention to the
    client-initiated renegotiation; in SSL versions, this could mean a DoS vulnerability.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reneg`：此测试用于重新协商支持。注意客户端发起的重新协商；在SSL版本中，这可能意味着DoS漏洞。'
- en: '`--compression`: This test is used for message compression support. In TLS
    Version 1.0, this presents as a critical information leakage vulnerability.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--compression`：此测试用于消息压缩支持。在TLS版本1.0中，这会导致关键信息泄漏漏洞。'
- en: '`--resum`: This test is used for resumption support using either session IDs
    or TLS session tickets.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--resum`：此测试用于使用会话ID或TLS会话票证进行恢复支持。'
- en: 'Another very useful option SSLyze offers is a shortcut for most of the commonly
    used options. Here''s how you use it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze提供的另一个非常有用的选项是大多数常用选项的快捷方式。以下是使用方法：
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The premise for whether a cipher is potentially dangerous or not depends on
    whether it harbors any practically exploitable flaws if the server supports such
    vulnerable cipher suites. The danger is that clients may be exposed to attacks
    that proliferate information about their communication with the affected server.
    For instance, if the server supports cipher suits that use symmetric ciphers of
    vulnerable key lengths, usually less than 128 bits, it's pretty easy to envision
    that attackers could brute-force the session keys being used during the SSL/TLS
    session. There are probably many assessment methodologies available online. I've
    included a pretty good one from Qualys Labs in the *Further reading* section.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 密码是否存在潜在危险取决于服务器是否支持此类易受攻击的密码套件。危险在于客户端可能会受到攻击，泄露与受影响服务器的通信相关的信息。例如，如果服务器支持使用易受攻击的密钥长度的对称密码套件，通常小于128位，很容易想象攻击者可以暴力破解SSL/TLS会话期间使用的会话密钥。可能有许多在线评估方法。我在*进一步阅读*部分中包含了Qualys
    Labs的一个非常好的方法。
- en: Bash hacks and SSLyze
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash黑客和SSLyze
- en: 'Once you''ve come to grips with which SSL suites, key lengths, and other TLS/SSL
    configuration auxiliaries are to be treated as vulnerable, you could filter the
    SSLyze output to highlight vulnerable configuration specifics. One way to do this—and
    avoid reading through all the input and manually looking for vulnerable instances—is
    to use a bash script. Here''s an example you can use and modify during your SSL
    assessments:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解了哪些SSL套件、密钥长度和其他TLS/SSL配置辅助功能应被视为易受攻击，您可以过滤SSLyze输出以突出显示易受攻击的配置细节。一种方法是使用bash脚本，避免阅读所有输入并手动查找易受攻击的实例。以下是您可以在SSL评估期间使用和修改的示例：
- en: '[PRE45]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The previous script takes the following arguments:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的脚本接受以下参数：
- en: '`HOST`: This is the IP address to assess'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST`：这是要评估的IP地址'
- en: '`SSL_PORT`: This is the port number being used for SSL/TLS service'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SSL_PORT`：这是用于SSL/TLS服务的端口号'
- en: '`KEY_LEN_LIMIT`: This is the lowest limit for a secure key, for example 128'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_LEN_LIMIT`：这是安全密钥的最低限制，例如128'
- en: '`VULN_SUIT_LIST`: This is a list of cipher suits considered vulnerable'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VULN_SUIT_LIST`：这是一个被认为易受攻击的密码套件列表'
- en: 'Here''s a quick example:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个快速示例：
- en: '[PRE46]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The preceding command will produce the following output:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将产生以下输出：
- en: '![Bash hacks and SSLyze](img/5107OT_05_16.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![Bash黑客和SSLyze](img/5107OT_05_16.jpg)'
- en: 'The `./vulnerable_cipher_list` is a file containing a cipher suite name on
    each line, following is an example of one. It mentions some of the cipher suites
    with the word `NULL` in them:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`./vulnerable_cipher_list`是一个包含每行一个密码套件名称的文件，以下是一个示例。它提到了一些带有“NULL”一词的密码套件：'
- en: '[PRE47]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: A more complete list of these cipher is available from the book's site.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这些密码的更完整列表可从该书的网站获得。
- en: Automated web application security assessment
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Web应用程序安全评估
- en: Web applications are incredibly complex pieces of technology, and they become
    more complex every day. It's not hard to imagine that penetration testing these
    big, heavy, and often very sneaky applications can be quite a cumbersome task.
    Luckily, a considerable portion of the work that goes into web application security
    assessment can be automated. I say "portion" because there are attack surfaces
    for web applications that have not seen much successful automation, that is, XSS
    requiring user interaction, customized encryption flaws, and business logic flaws.
    It is never safe to assume you have a good grip of web application security if
    all you've done is run a scanner! That being said, tasks such as crawling, fuzzing
    headers, picking up authentication forms, and other simple repetitive tasks have
    been automated in web application scanners very well. In this section, we will
    look at a small selection of the command line-driven tools available in Kali Linux
    to automate web application security assessment.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序是非常复杂的技术组件，而且它们每天都变得更加复杂。可以想象，对这些庞大、沉重且经常非常隐秘的应用程序进行渗透测试可能是一项相当繁重的任务。幸运的是，用于Web应用程序安全评估的工作中有相当大一部分可以自动化。我说“部分”，因为对于Web应用程序存在一些攻击面，目前还没有看到太多成功的自动化，即需要用户交互的XSS，定制加密缺陷和业务逻辑缺陷。如果你只是运行了一个扫描器，就认为你已经很好地掌握了Web应用程序安全，那是不安全的！也就是说，像爬行、模糊头部、拾取认证表单和其他简单重复的任务已经在Web应用程序扫描器中得到了很好的自动化。在本节中，我们将看一下Kali
    Linux中可用的一小部分命令行驱动工具，以自动化Web应用程序安全评估。
- en: Scanning with SkipFish
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SkipFish进行扫描
- en: SkipFish is a tool both used and created by some of the folks who work at Google.
    SkipFish as with most of the tools in its field simply crawls a web application
    and passes each page it picks up through a detection engine in an effort to analyze
    the page for common flaws and wrong configurations. SkipFish reports its output
    in the form of an interactive web page. Let's get a look at how one uses SkipFish
    and some of the functionalities it supports.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: SkipFish是一种由一些在谷歌工作的人使用和创建的工具。SkipFish与其领域中的大多数工具一样，简单地爬行Web应用程序，并通过检测引擎分析每个页面，以分析页面中的常见缺陷和错误配置。SkipFish以交互式网页的形式报告其输出。让我们看看如何使用SkipFish以及它支持的一些功能。
- en: 'To launch SkipFish, you will need two essential things: a word list and a directory
    to store its results. Perform the following steps to get it working:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动SkipFish，您需要两样必要的东西：一个词列表和一个目录来存储其结果。执行以下步骤使其正常工作：
- en: 'Prepare an output directory for SkipFish by using the following command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令为SkipFish准备一个输出目录：
- en: '[PRE48]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Grab a sample word list for SkipFish to work with by using the following command:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令获取SkipFish工作所需的样本词列表：
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, we are using the medium dictionary. This is merely a demonstration; feel
    free to try some of the other dictionaries in the mentioned folder.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用中等字典。这只是一个演示；请随意尝试提到的文件夹中的其他字典。
- en: 'Make sure the directory is not marked as read-only; you''ll need to remove
    the very first line of this file since it''s shipped with SkipFish as read only.
    You''ll need to remove the line that looks like the following:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保目录没有标记为只读；您需要删除此文件的第一行，因为它作为只读文件与SkipFish一起提供。您需要删除类似以下的行：
- en: '[PRE50]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can now launch SkipFish by executing the following command:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以通过执行以下命令来启动SkipFish：
- en: '[PRE51]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The whole process will look like the following screenshot when executed on
    the Kali Linux command line:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux命令行上执行时，整个过程将如下截屏所示：
- en: '![Scanning with SkipFish](img/5107OT_05_17.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![使用SkipFish进行扫描](img/5107OT_05_17.jpg)'
- en: 'When it''s done running, SkipFish will present you with the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当SkipFish运行完成时，它将向您呈现以下截图：
- en: '![Scanning with SkipFish](img/5107OT_05_18.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![使用SkipFish进行扫描](img/5107OT_05_18.jpg)'
- en: If this is the very first time you're running SkipFish, you could abort it preemptively,
    since it will automatically report all the results collected this far. You can
    do this by pressing *Ctrl* + *C*.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次运行SkipFish，您可以预先中止它，因为它将自动报告到目前为止收集的所有结果。您可以通过按*Ctrl* + *C*来做到这一点。
- en: 'When SkipFish is done running, it will present you with an `index.html` file
    in the directory you created for its output. This file contains the report. A
    SkipFish report looks like the following screenshot when opened in Iceweasel,
    the default browser for Kali Linux:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当SkipFish运行完成时，它将在为其输出创建的目录中呈现一个`index.html`文件。此文件包含报告。在Iceweasel中打开SkipFish报告时，报告看起来像以下截图：
- en: '![Scanning with SkipFish](img/5107OT_05_19.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![使用SkipFish进行扫描](img/5107OT_05_19.jpg)'
- en: SkipFish supports a number of other invocation options, some of which control
    how word lists are treated; others control how aggressive SkipFish is during testing.
    For more on these options, I suggest seeing some of the links in the *Further
    reading* section.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: SkipFish支持许多其他调用选项，其中一些控制如何处理词列表；其他控制SkipFish在测试期间的侵略性。有关这些选项的更多信息，请参阅*进一步阅读*部分中的一些链接。
- en: Scanning with Arachni
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Arachni进行扫描
- en: 'Arachni is another great command line-driven web application scanning tool
    available in Kali Linux. It comes with a range of modules and plugins allowing
    its users to assess a mosaic of web application security focus areas. To launch
    Arachni in its default mode, you have to invoke the following command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni是另一个在Kali Linux中可用的出色的命令行驱动的Web应用程序扫描工具。它配备了一系列模块和插件，允许用户评估各种Web应用程序安全重点领域。要以默认模式启动Arachni，您必须调用以下命令：
- en: '[PRE52]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'For instance, if you''d like to target [privatebankloans.com](http://privatebankloans.com)
    with an Arachni scan, you will issue the following command:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想对[privatebankloans.com](http://privatebankloans.com)进行Arachni扫描，您将发出以下命令：
- en: '[PRE53]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This will load all the scanning modules and have Arachni target all possible
    attack surfaces for the specified web application. You can also focus Arachni
    on a given type of scanning. For instance, to run detection for XSS vulnerabilities
    only, you will specify the following command:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载所有扫描模块，并使Arachni针对指定Web应用程序的所有可能攻击面。您还可以将Arachni专注于特定类型的扫描。例如，仅运行检测XSS漏洞，您将指定以下命令：
- en: '[PRE54]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To load all the audit modules, use the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载所有审计模块，请使用以下命令：
- en: '[PRE55]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can list the available modules by using the `–-lsmod` command line option.
    This option takes a regular expression as an argument and looks up all the modules
    whose names produce a match, Arachni then displays some basic information about
    them. Arachni also supports a reporting framework that allows you to generate
    neatly formatted reports about the issues it finds. You can use it by typing the
    following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`--lsmod`命令行选项列出可用的模块。此选项将接受正则表达式作为参数，并查找所有模块的名称产生匹配的模块，然后Arachni显示有关它们的一些基本信息。Arachni还支持一个报告框架，允许您生成关于它发现的问题的整洁格式的报告。您可以通过输入以下命令来使用它：
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Where `[FORMAT]` is the document format you'd like to report in and `FILENAME`
    is the filename the report is to be saved under. `FORMAT` could be either HTML,
    `.txt`, or many others.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`[FORMAT]`是您想要报告的文档格式，`FILENAME`是报告要保存的文件名。`FORMAT`可以是HTML、`.txt`或其他许多格式。
- en: 'Here''s an example that generates an HTML report:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个生成HTML报告的示例：
- en: '[PRE57]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As with many of the command-line arguments, you can specify more than one report
    format. This will cause multiple reports to be generated, as specified in the
    following commands:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多命令行参数一样，您可以指定多个报告格式。这将导致生成多个报告，如以下命令中指定的那样：
- en: '[PRE58]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Arachni supports a range arguments that control other aspects of its operation.
    Please see the *Further reading* section for more detail.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni支持一系列参数，控制其操作的其他方面。有关更多详细信息，请参阅*进一步阅读*部分。
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned to use various tools to assess different layers
    of the OSI protocol stack. We covered tools that attack layer 2 protocol implementations,
    namely ARP and other MAC-based authentication schemes.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用各种工具来评估OSI协议栈的不同层。我们涵盖了攻击第2层协议实现的工具，即ARP和其他基于MAC的身份验证方案。
- en: We also covered simple ARP poisoning attacks using ArpSpoof and saw how to forge
    MAC addresses. Building on this, we applied these techniques to perform full MITM
    attacks that allow us to intercept traffic and spoof DNS servers.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了使用ArpSpoof进行简单ARP欺骗攻击，并学习了如何伪造MAC地址。在此基础上，我们应用这些技术来执行完整的中间人攻击，从而使我们能够拦截流量并欺骗DNS服务器。
- en: The chapter also included sections dedicated to techniques that target SMTP
    and SNMP services on a local network. These sections detailed the usage of a tool
    called `snmpwalk` as well as the Metasploit modules `snmp-enum` and `snmp-login`,
    which were used to brute-force SNMP authentication. The information gathering
    section closed with a discussion of SMTP enumeration attacks, and we learned to
    use the `smtp-user-enum` tool to pull this off.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节还包括专门针对本地网络上的SMTP和SNMP服务的技术部分。这些部分详细介绍了一个名为`snmpwalk`的工具的用法，以及Metasploit模块`snmp-enum`和`snmp-login`的用法，这些模块用于暴力破解SNMP认证。信息收集部分以讨论SMTP枚举攻击结束，我们学会了使用`smtp-user-enum`工具来完成这项工作。
- en: Other than abusing the function of network protocols, the chapter also talked
    about abusing the implementation of security measures, specifically authentication
    credential—passwords, usernames, security tokens and so on. We covered a very
    powerful authentication brute-forcing tool called Medusa, which supports a variety
    of authentication mechanisms such as SSH, FTP, and even web HTML forms.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 除了滥用网络协议的功能外，本章还讨论了滥用安全措施的实施，特别是认证凭据——密码、用户名、安全令牌等。我们介绍了一个非常强大的认证暴力破解工具Medusa，它支持各种认证机制，如SSH、FTP，甚至Web
    HTML表单。
- en: After learning to attack, we took a step back for one section and covered a
    useful packet analysis and traffic monitoring tool called TCPDump. We learned
    to use TCPDump to filter packets based on hosts, ports, and even detailed filtering
    down to the very offsets in the transport layer packets.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在学会攻击之后，我们退后一步，介绍了一个称为TCPDump的有用的数据包分析和流量监控工具。我们学会了使用TCPDump根据主机、端口甚至详细的传输层数据包偏移来过滤数据包。
- en: Then, the chapter covered SSL security assessments and demonstrated how to use
    SSLyze to enumerate the implemented cipher suites and SSL/TLS versions on a targeted
    host. We also learned about a useful bash script that aids detection of flawed
    ciphers and allows us to change the definition of a vulnerable cipher suite dependent
    on our assessment needs.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，本章介绍了SSL安全评估，并演示了如何使用SSLyze来枚举目标主机上实现的密码套件和SSL/TLS版本。我们还了解了一个有用的bash脚本，可以帮助检测有缺陷的密码，并允许我们根据我们的评估需求更改易受攻击的密码套件的定义。
- en: We finished the chapter by learning to use two very powerful web application
    scanning tools, namely SkipFish and Arachni.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过学习使用两个非常强大的Web应用程序扫描工具SkipFish和Arachni来结束了本章。
- en: This chapter was meant to serve as an introduction to the very powerful and
    flexible tools discussed. I urge everyone who reads this chapter to study the
    tools we've discussed and get to know their strengths and weaknesses and combine
    them to create a powerful security assessment arsenal. When you're done mastering
    these tools, write some of your own!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在作为介绍所讨论的非常强大和灵活的工具。我敦促每个阅读本章的人都要研究我们讨论过的工具，了解它们的优势和劣势，并将它们结合起来创建一个强大的安全评估工具库。当你掌握了这些工具之后，写一些属于你自己的吧！
- en: Further reading
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: TCPDump filters at [http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt](http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt)
    (accessed 2014/03/30)
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt](http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt)上的TCPDump过滤器(accessed
    2014/03/30)'
- en: TCPDump manual at [http://www.tcpdump.org/manpages/tcpdump.1.html](http://www.tcpdump.org/manpages/tcpdump.1.html)
    (accessed 2014/03/30)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.tcpdump.org/manpages/tcpdump.1.html](http://www.tcpdump.org/manpages/tcpdump.1.html)上的TCPDump手册(accessed
    2014/03/30)'
- en: TCPDump filters at [http://www.cs.ucr.edu/~marios/ethereal-tcpdump.pdf](http://www.cs.ucr.edu/~marios/ethereal-tcpdump.pdf)
    (accessed 2014/03/30)
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.cs.ucr.edu/~marios/ethereal-tcpdump.pdf](http://www.cs.ucr.edu/~marios/ethereal-tcpdump.pdf)上的TCPDump过滤器(accessed
    2014/03/30)'
- en: TCPDump & libpacp at [http://www.tcpdump.org/](http://www.tcpdump.org/) (accessed
    2014/03/30)
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.tcpdump.org/](http://www.tcpdump.org/)上的TCPDump & libpacp(accessed
    2014/03/30)'
- en: An Ethernet Address Resolution Protocol at [http://tools.ietf.org/html/rfc826](http://tools.ietf.org/html/rfc826)
    (accessed 2014/04/03)
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网地址解析协议在[http://tools.ietf.org/html/rfc826](http://tools.ietf.org/html/rfc826)上(accessed
    2014/04/03)
- en: SSLyze Github page at [https://github.com/iSECPartners/sslyze](https://github.com/iSECPartners/sslyze)
    (accessed 2014/03/30)
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/iSECPartners/sslyze](https://github.com/iSECPartners/sslyze)上的SSLyze
    Github页面(accessed 2014/03/30)'
- en: SSL Deployment Best Practices at [https://www.ssllabs.com/downloads/SSL_TLS_Deployment_Best_Practices_1.3.pdf](https://www.ssllabs.com/downloads/SSL_TLS_Deployment_Best_Practices_1.3.pdf)
    September 2013, (accessed 2014/04/03)
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ssllabs.com/downloads/SSL_TLS_Deployment_Best_Practices_1.3.pdf](https://www.ssllabs.com/downloads/SSL_TLS_Deployment_Best_Practices_1.3.pdf)上的SSL部署最佳实践，2013年9月(accessed
    2014/04/03)'
- en: The Transport Layer Security (TLS) Protocol Version 1.2 at [http://tools.ietf.org/html/rfc5246](http://tools.ietf.org/html/rfc5246)
    (accessed 2014/03/30)
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输层安全性（TLS）协议版本1.2在[http://tools.ietf.org/html/rfc5246](http://tools.ietf.org/html/rfc5246)上(accessed
    2014/03/30)
- en: The Secure Socket Layer (SSL) Protocol Version 3.0 at [http://tools.ietf.org/html/rfc6101](http://tools.ietf.org/html/rfc6101)
    (accessed 2014/03/30)
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL协议版本3.0在[http://tools.ietf.org/html/rfc6101](http://tools.ietf.org/html/rfc6101)上(accessed
    2014/03/30)
- en: Analysis of the SSL 3.0 Protocol at [https://www.schneier.com/paper-ssl.pdf](https://www.schneier.com/paper-ssl.pdf)
    (accessed 2014/03/30)
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL 3.0协议分析在[https://www.schneier.com/paper-ssl.pdf](https://www.schneier.com/paper-ssl.pdf)上(accessed
    2014/03/30)
- en: Compression and Information Leakage of Plaintext at [http://www.iacr.org/cryptodb/archive/2002/FSE/3091/3091.pdf](http://www.iacr.org/cryptodb/archive/2002/FSE/3091/3091.pdf)
    (accessed 2014/03/30)
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明文的压缩和信息泄露在[http://www.iacr.org/cryptodb/archive/2002/FSE/3091/3091.pdf](http://www.iacr.org/cryptodb/archive/2002/FSE/3091/3091.pdf)上(accessed
    2014/03/30)
- en: TLS & SSLv3 Renegotiation Vulnerability at [http://www.g-sec.lu/practicaltls.pdf](http://www.g-sec.lu/practicaltls.pdf)
    (accessed 2014/03/30)
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS和SSLv3重新协商漏洞在[http://www.g-sec.lu/practicaltls.pdf](http://www.g-sec.lu/practicaltls.pdf)中
    (访问时间2014/03/30)
- en: Breach TLS HTTP Compression vulnerability at [http://breachattack.com/](http://breachattack.com/)
    (accessed 2014/03/30)
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breach TLS HTTP压缩漏洞在[http://breachattack.com/](http://breachattack.com/)中 (访问时间2014/03/30)
- en: TLS Cipher Suite Registry at [https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4)
    (accessed 2014/04/01)
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS密码套件注册表在[https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4)中
    (访问时间2014/04/01)
- en: On the security of RC4 in TLS and WPA at [http://www.isg.rhul.ac.uk/tls/](http://www.isg.rhul.ac.uk/tls/)
    (accessed 2014/04/01)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于TLS和WPA中RC4的安全性在[http://www.isg.rhul.ac.uk/tls/](http://www.isg.rhul.ac.uk/tls/)中
    (访问时间2014/04/01)
- en: Essential SNMP at [http://oreilly.com/catalog/esnmp/chapter/ch02.html](http://oreilly.com/catalog/esnmp/chapter/ch02.html)
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Essential SNMP》在[http://oreilly.com/catalog/esnmp/chapter/ch02.html](http://oreilly.com/catalog/esnmp/chapter/ch02.html)中
- en: Vulnerabilities in SNMPv3 at [https://smartech.gatech.edu/bitstream/handle/1853/44881/lawrence_nigel_r_201208_mast.pdf?sequence=2](https://smartech.gatech.edu/bitstream/handle/1853/44881/lawrence_nigel_r_201208_mast.pdf?sequence=2)
    (accessed 2014/04/06)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SNMPv3的漏洞在[https://smartech.gatech.edu/bitstream/handle/1853/44881/lawrence_nigel_r_201208_mast.pdf?sequence=2](https://smartech.gatech.edu/bitstream/handle/1853/44881/lawrence_nigel_r_201208_mast.pdf?sequence=2)中
    (访问时间2014/04/06)
- en: 'Cisco Security Advisory : SNMP Version 3 Authentication Vulnerabilities at
    [http://www.securityfocus.com/archive/1/493238](http://www.securityfocus.com/archive/1/493238)
    (accessed 2014/04/06)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思科安全公告：SNMP版本3认证漏洞在[http://www.securityfocus.com/archive/1/493238](http://www.securityfocus.com/archive/1/493238)中
    (访问时间2014/04/06)
- en: Multiple Vendor SNMPv3 HMAC Security bypass at [http://www.iss.net/security_center/reference/vuln/SNMP_V3_HMAC_Security_Bypass.htm](http://www.iss.net/security_center/reference/vuln/SNMP_V3_HMAC_Security_Bypass.htm)
    (accessed 2014/04/06)
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多供应商SNMPv3 HMAC安全绕过在[http://www.iss.net/security_center/reference/vuln/SNMP_V3_HMAC_Security_Bypass.htm](http://www.iss.net/security_center/reference/vuln/SNMP_V3_HMAC_Security_Bypass.htm)中
    (访问时间2014/04/06)
- en: SSL Good Practice Guide at [https://labs.portcullis.co.uk/whitepapers/ssl-good-practice-guide/](https://labs.portcullis.co.uk/whitepapers/ssl-good-practice-guide/)
    (accessed 2014/04/07)
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL最佳实践指南在[https://labs.portcullis.co.uk/whitepapers/ssl-good-practice-guide/](https://labs.portcullis.co.uk/whitepapers/ssl-good-practice-guide/)中
    (访问时间2014/04/07)
- en: Medusa Parallel Network Login Auditor at [http://foofus.net/goons/jmk/medusa/medusa.html](http://foofus.net/goons/jmk/medusa/medusa.html)
    (accessed 2014/04/07)
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Medusa并行网络登录审计器在[http://foofus.net/goons/jmk/medusa/medusa.html](http://foofus.net/goons/jmk/medusa/medusa.html)中
    (访问时间2014/04/07)
- en: Ncrack official Page at [http://nmap.org/ncrack/](http://nmap.org/ncrack/)
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ncrack官方页面在[http://nmap.org/ncrack/](http://nmap.org/ncrack/)中
- en: Arachni Command line User interface at [https://github.com/Arachni/arachni/wiki/Command-line-user-interface](https://github.com/Arachni/arachni/wiki/Command-line-user-interface)
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arachni命令行用户界面在[https://github.com/Arachni/arachni/wiki/Command-line-user-interface](https://github.com/Arachni/arachni/wiki/Command-line-user-interface)
