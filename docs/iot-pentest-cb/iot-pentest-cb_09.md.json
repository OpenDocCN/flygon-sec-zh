["```\npublic class SQLCipherExampleActivity extends Activity { \n    @Override \n    public void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.main); \n        InitSQLCipher(); \n    } \n\n    private void InitSQLCipher() { \n        SQLiteDatabase.loadLibs(this); \n        File databaseFile = getDatabasePath(\"EncStorage.db\"); \n        databaseFile.mkdirs(); \n        databaseFile.delete(); \n        SQLiteDatabase secureDatabase = SQLiteDatabase.openOrCreateDatabase(databaseFile, \"PacktDB\", null); \n        secureDatabase.execSQL(\"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR,Password VARCHAR);\"); \n        secureDatabase.execSQL(\"INSERT INTO Accounts VALUES('PacktUser','EncPassword');\"); \n         secureDatabase.close();    \n   } \n}\n```", "```\napply plugin: 'com.android.application' \n\nandroid { \n    compileSdkVersion 23 \n    buildToolsVersion '25.0.0' \n\n    defaultConfig { \n        applicationId \"jakhar.aseem.diva\" \n        minSdkVersion 15 \n        targetSdkVersion 23 \n        versionCode 1 \n        versionName \"1.0\" \n    } \n    buildTypes { \n        release { \n            minifyEnabled enabled \n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' \n        } \n    } \n    sourceSets { \n        main { \n            jni.srcDirs = [] \n        } \n    } \n} \n\ndependencies { \n    compile fileTree(dir: 'libs', include: ['*.jar']) \n    testCompile 'junit:junit:4.12' \n    compile 'com.android.support:appcompat-v7:23.1.0' \n    compile 'com.android.support:design:23.1.0' \n    compile 'com.google.android.gms:play-services-safetynet:11.4.2' \n}\n```", "```\npublic void onClick(View v) { \n    SafetyNet.getClient(this).verifyWithRecaptcha(YOUR_API_SITE_KEY) \n        .addOnSuccessListener((Executor) this, \n            new OnSuccessListener<SafetyNetApi.RecaptchaTokenResponse>() { \n                @Override \n                public void onSuccess(SafetyNetApi.RecaptchaTokenResponse response) { \n                    // Indicates communication with reCAPTCHA service was \n                    // successful. \n                    String userResponseToken = response.getTokenResult(); \n                    if (!userResponseToken.isEmpty()) { \n                        // Validate the user response token using the \n                        // reCAPTCHA siteverify API. \n                    } \n                } \n        }) \n        .addOnFailureListener((Executor) this, new OnFailureListener() { \n                @Override \n                public void onFailure(@NonNull Exception e) { \n                    if (e instanceof ApiException) { \n                        // An error occurred when communicating with the \n                        // reCAPTCHA service. Refer to the status code to \n                        // handle the error appropriately. \n                        ApiException apiException = (ApiException) e; \n                        int statusCode = apiException.getStatusCode(); \n                        Log.d(TAG, \"Error: \" + CommonStatusCodes \n                                .getStatusCodeString(statusCode)); \n                    } else { \n                        // A different, unknown type of error occurred. \n                        Log.d(TAG, \"Error: \" + e.getMessage()); \n                    } \n                } \n        }); \n} \n```", "```\n{ \n  \"success\": true|false, \n  \"challenge_ts\": timestamp,  // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ) \n  \"apk_package_name\": string, // the package name of the app where the reCAPTCHA was solved \n  \"error-codes\": [...]        // optional \n} \n```", "```\npublic class KeyPinStore { \n\n    private static KeyPinStore instance = null; \n    private SSLContext sslContext = SSLContext.getInstance(\"TLS\"); \n\n    public static synchronized KeyPinStore getInstance() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException{ \n        if (instance == null){ \n            instance = new KeyPinStore(); \n        } \n        return instance; \n    } \n```", "```\nprivate KeyPinStore() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException{ \n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\"); \n        // randomCA.crt should be in the Assets directory \n        InputStream caInput = new BufferedInputStream(MainActivity.context.getAssets().open(\"TrustedCompanyCA.crt\")); \n        Certificate ca; \n        try { \n            ca = cf.generateCertificate(caInput); \n            System.out.println(\"ca=\" + ((X509Certificate) ca).getSubjectDN()); \n        } finally { \n            caInput.close(); \n        }\n```", "```\nString keyStoreType = KeyStore.getDefaultType(); \nKeyStore keyStore = KeyStore.getInstance(keyStoreType); \nkeyStore.load(null, null); \nkeyStore.setCertificateEntry(\"ca\", ca); \n```", "```\nString tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm(); \nTrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm); \ntmf.init(keyStore); \n```", "```\nsslContext.init(null, tmf.getTrustManagers(), null); \n    } \n\n    public SSLContext getContext(){ \n        return sslContext; \n    } \n} \n```", "```\nURL url = new URL(\"https://example.com/rest/apiEndpoint\"); \nHttpsURLConnection urlConnection = \n    (HttpsURLConnection)url.openConnection(); \nurlConnection.setSSLSocketFactory(context.getSocketFactory()); \nInputStream in = urlConnection.getInputStream(); \ncopyInputStreamToOutputStream(in, System.out); \n```", "```\n$ nscurl --ats-diagnostics https://www.packtpub.com  \n```", "```\n<permission android:name=\"com.packtpub.cookbook.permission.IOT_COOKBOOK_ACTIVITY\" \n        android:label=\"Start main Activity in packtpub\" \n        android:description=\"Allow only apps signed with the same certificate to launch this Activity.\" \n        android:protectionLevel=\"signature\" /> \n\n<activity android:name=\"MAIN_ACTIVITY\" \n    android:permission=\"com.packtpub.cookbook.permission.IOT_COOKBOOK_ACTIVITY\"> \n    <intent-filter> \n        <action android:name=\"android.intent.action.MAIN\" /> \n        <category android:name=\"android.intent.category.LAUNCHER\"/> \n     </intent-filter> \n</activity> \n```", "```\n<uses-permission android:name=\"com.example.myapp.permission.IOT_COOKBOOK_ACTIVITY\"/> \n```", "```\n#import \"ViewController.h\" \n#import <WebKit/WebKit.h> \n@interface ViewController ()<WKNavigationDelegate,WKUIDelegate> \n@property(strong,nonatomic) WKWebView *webView; \n@end \n\n@implementation ViewController \n\n- (void)viewDidLoad { \n\n    NSURL *url = [NSURL URLWithString:@\"https://www.packtpub.com/\"]; \n    NSURLRequest *request = [NSURLRequest requestWithURL:url]; \n    WKPreferences *pref = [[WKPreferences alloc] init]; \n\n    [pref setJavaScriptEnabled:NO]; \n    [pref setJavaScriptCanOpenWindowsAutomatically:NO]; \n\n    WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init]; \n    [conf setPreferences:pref]; \n    _webView = [[WKWebView alloc]initWithFrame:CGRectMake(self.view.frame.origin.x,85, self.view.frame.size.width, self.view.frame.size.height-85) configuration:conf] ; \n    [_webView loadRequest:request]; \n    [self.view addSubview:_webView]; \n\n}\n```", "```\nWebView webview = new WebView(this); \nWebSettings webSettings = webview.getSettings(); \nwebSettings.setJavaScriptEnabled(false); \nwebView.getSettings().setPluginState(WebSettings.PluginState.OFF); \nwebView.getSettings().setAllowFileAccess(false); \nwebView.getSettings().setGeolocationEnabled(false); \nsetContentView(webview); \nwebview.loadUrl(\"https://www.packetpub.com/\"); \n```", "```\ncordova platform update ios\ncordova platform update android@<version number>\n\n```", "```\n/Applications/Cydia.app\n/Applications/FakeCarrier.app\n/Applications/Icy.app\n/Applications/IntelliScreen.app\n/Applications/MxTube.app\n/Applications/RockApp.app\n/Applications/SBSettings.app\n/Applications/WinterBoard.app\n/Applications/blackra1n.app\n/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist\n/Library/MobileSubstrate/DynamicLibraries/Veency.plist\n/Library/MobileSubstrate/MobileSubstrate.dylib\n/System/Library/LaunchDaemons/com.ikey.bbot.plist\n/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist\n/bin/bash\n/bin/sh\n/etc/apt\n/etc/ssh/sshd_config\n/private/var/lib/apt\n/private/var/lib/cydia\n/private/var/mobile/Library/SBSettings/Themes\n/private/var/stash\n/private/var/tmp/cydia.log\n/usr/bin/sshd\n/usr/libexec/sftp-server\n/usr/libexec/ssh-keysign\n/usr/sbin/sshd\n/var/cache/apt\n/var/lib/apt\n/var/lib/cydia  \n```", "```\n    /system/xbin/busybox\n    /sbin/su\n    /system/bin/su\n    /system/xbin/su\n    /data/local/su\n    /data/local/xbin/su\n    com.thirdparty.superuser\n    eu.chainfire.supersu\n    com.noshufou.android.su\n    com.koushikdutta.superuser\n    com.zachspong.temprootremovejb\n    com.ramdroid.appquarantine\n\n```"]