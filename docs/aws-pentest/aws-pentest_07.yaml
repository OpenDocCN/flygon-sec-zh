- en: '*Chapter 5*: Understanding Vulnerable RDS Services'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：了解易受攻击的RDS服务'
- en: Amazon **Relational Database Service** (**RDS**) provides scalable and easy
    to set up cloud-based databases that allow users to operate them just as they
    would a typical database. RDS enables users to interact with databases via services
    such as MySQL and Amazon Aurora, just as a user would in a standard physical database
    infrastructure. The downfall of RDS is the same as regular databases – injection
    and misconfigurations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊**关系数据库服务**（**RDS**）提供了可扩展且易于设置的基于云的数据库，允许用户像操作典型数据库一样操作它们。RDS使用户能够通过MySQL和Amazon
    Aurora等服务与数据库交互，就像用户在标准物理数据库基础设施中一样。RDS的缺点与常规数据库相同-注入和配置错误。
- en: In this chapter, we will go over what RDS is by discussing some key points and
    setting up an RDS database using MySQL. After setting up the database, we will
    scan it and then use it to apply syntax and learn necessary "movements" and commands
    that will allow us to navigate throughout a small MySQL database. Afterward, we
    will take a look at how severe weak passwords are by actually brute-forcing login
    credentials and finish up by understanding what **SQL Injection** (**SQLi**) is
    and what its impact is on databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论RDS的一些关键点，并使用MySQL设置RDS数据库。设置完数据库后，我们将对其进行扫描，然后使用它来应用语法，并学习必要的“动作”和命令，使我们能够在一个小的MySQL数据库中进行导航。之后，我们将看一下弱密码的严重性，通过暴力破解登录凭据，并最后了解**SQL注入**（**SQLi**）是什么，以及它对数据库的影响。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Understanding RDS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解RDS
- en: Setting up RDS (MySQL)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置RDS（MySQL）
- en: Understanding basic SQL syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解基本的SQL语法
- en: Database maneuvering and exploration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库操作和探索
- en: Understanding misconfigurations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解配置错误
- en: Learning about injection points
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解注入点
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本章的说明进行操作，您需要以下内容：
- en: '**Nmap**: [https://nmap.org/download.html](https://nmap.org/download.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nmap**：[https://nmap.org/download.html](https://nmap.org/download.html)'
- en: '**Hydra**: [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hydra**：[https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)'
- en: '**Medusa**: [https://github.com/jmk-foofus/medusa](https://github.com/jmk-foofus/medusa)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Medusa**：[https://github.com/jmk-foofus/medusa](https://github.com/jmk-foofus/medusa)'
- en: '**Vulnscan**: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vulnscan**：[https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/35Va2KH](https://bit.ly/35Va2KH)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[https://bit.ly/35Va2KH](https://bit.ly/35Va2KH)
- en: Understanding RDS
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解RDS
- en: RDS allows users to stand up, scale, and operate relational database services
    without all the headache that comes with standing up your very own database servers.
    Aside from not having to locally allocate hardware and resources, RDS aims to
    lower the cost of ownership, which in turn allows companies to focus more on their
    own business goals and worry less about technology needs. Self-hosting databases
    tend to take up lots of time, money, and manpower – RDS enables owners to only
    need to create and configure their cloud database setup.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: RDS允许用户架设、扩展和操作关系数据库服务，而无需处理架设自己的数据库服务器所带来的所有麻烦。除了不必在本地分配硬件和资源外，RDS旨在降低所有权成本，从而使公司能够更多地专注于自己的业务目标，减少对技术需求的担忧。自行托管数据库往往需要大量的时间、金钱和人力资源-
    RDS使所有者只需要创建和配置他们的云数据库设置。
- en: Let's take a quick look at some of the advantages of using RDS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下使用RDS的一些优势。
- en: Advantages of using RDS
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RDS的优势
- en: There are numerous benefits and plus points as to why RDS is a great way to
    stand up databases for an infrastructure. Besides some of the ones that we have
    briefly already mentioned, it's good to know how we can scale quickly and securely
    with AWS and its related services.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RDS是架设基础设施数据库的一个很好的方式，有许多好处和优点。除了我们已经简要提到的一些优点之外，了解如何使用AWS及其相关服务快速且安全地扩展是很重要的。
- en: 'Let''s look at some quick points as to why RDS has an impactful advantage over
    other database services:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下RDS相对于其他数据库服务具有影响力优势的一些要点：
- en: '**Fast**: Simply a few clicks, and you have your very own database! Don''t
    fret that we aren''t doing any hands-on currently, we will be working with RDS
    quite a bit throughout this chapter.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速**：只需点击几下，您就拥有了自己的数据库！不要担心我们目前没有进行任何实际操作，我们将在本章中大量使用RDS。'
- en: '**Secure**: Both **data at rest** and **data in use** are encrypted.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：**数据在静止**和**数据在使用**都是加密的。'
- en: --**Data in use** is data that is currently transmitting from one source to
    another. It's important that this data be secure because someone could perform
    **a man in the middle** attack (**MiTM**). A MiTM attack is where an attacker
    is able to access data while it's moving over the wire. The unencrypted data is
    then retrieved by the attacker and used for malicious purposes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: --**数据在使用**是当前从一个源传输到另一个源的数据。这些数据的安全性很重要，因为有人可能会进行**中间人**攻击（**MiTM**）。中间人攻击是指攻击者能够在数据在传输过程中访问数据。然后，攻击者会检索未加密的数据，并用于恶意目的。
- en: --**Data at rest** is data that is currently stored – this includes backups.
    An attacker should not be able to access or view this data. Unencrypted data at
    rest creates a large risk that can allow attackers to view data if stolen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: --**数据在静止**是当前存储的数据-包括备份。攻击者不应能够访问或查看这些数据。静止的未加密数据会产生很大的风险，可以允许攻击者在数据被窃取时查看数据。
- en: --Database instances will automatically be patched. Some options allow the manual
    administration of patching – as you can imagine, this can lead to security issues
    if patches are not applied.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: --数据库实例将自动进行补丁。一些选项允许手动管理补丁-可以想象，如果不应用补丁，这可能会导致安全问题。
- en: '**Easy to Administer**: Being able to control all your databases through the
    AWS web console centrally makes things pretty seamless. However, it is important
    that database administrators ensure that they keep up with the constant demand
    of updating and scaling.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于管理**：能够通过AWS Web控制台集中控制所有数据库使事情变得非常无缝。然而，重要的是数据库管理员确保他们跟上不断更新和扩展的需求。'
- en: '**Scalable**: With a few clicks, you can grow out your database to fit your
    needs. This allows you to expand your infrastructure with much less hassle due
    to not having to buy large abundances of hardware.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展的**：只需点击几下，您就可以扩展数据库以满足您的需求。这使您能够以更少的麻烦扩展基础架构，因为不必购买大量的硬件。'
- en: Another benefit that is separate from this list is the cost benefits RDS produces
    for clients that choose it over not having it hosted locally. Companies can expect
    to save quite a bit of money by moving to AWS. This is largely due to not having
    to set up a physical infrastructure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: RDS为选择它而不是在本地托管它的客户带来的另一个好处是成本效益。公司可以预期通过转移到AWS来节省相当多的钱。这在很大程度上是因为不必设置物理基础设施。
- en: From a security standpoint, not having databases stored locally means that you
    do not have to worry about physical access control and physical security – also
    savings. The AWS shared security model ensures that Amazon will take ownership
    of physical devices, which includes the physical security of those devices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全的角度来看，不将数据库存储在本地意味着您不必担心物理访问控制和物理安全 - 这也是节省成本。AWS共享安全模型确保亚马逊将承担物理设备的所有权，包括这些设备的物理安全。
- en: Now let's begin to look more exclusively at some services so that we can understand
    what type of services are hosted in RDS. The two services we will mention are
    MySQL and Aurora.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更专注地看一些服务，以便了解RDS中托管了哪些类型的服务。我们将提到的两种服务是MySQL和Aurora。
- en: MySQL
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL
- en: MySQL is a standard database that is based on and around the **S**tructured
    **Q**uery **L**anguage, also known as **SQL**. The comprehensive database has
    become somewhat commonplace to use as a web database that acts as the backend
    database for web applications. So, chances are, when you're shopping online, you're
    interacting with a MySQL database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL是一种基于和围绕**结构化查询语言**（SQL）的标准数据库。这种全面的数据库已经成为一种相当普遍的用作Web数据库的选择，作为Web应用程序的后端数据库。因此，有可能当您在线购物时，您正在与一个MySQL数据库进行交互。
- en: While it doesn't pertain to much in this section, it is important to know that
    we will be using MySQL throughout this book. We will be looking at various database
    systems and going over the syntax used with those systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这在本节中并不相关，但重要的是要知道我们将在整本书中都使用MySQL。我们将研究各种数据库系统，并了解这些系统使用的语法。
- en: Aurora
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Aurora
- en: 'Aurora is a MySQL- and PostgreSQL-compatible relational database built for
    durability and speed. It''s known to be much faster than other databases such
    as MySQL and PostgreSQL and provides the same advantages that we mentioned for
    RDS. It''s built with other AWS components in mind, such as the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Aurora是一个与MySQL和PostgreSQL兼容的关系数据库，专为耐久性和速度而构建。它被认为比其他数据库（如MySQL和PostgreSQL）快得多，并提供了我们提到的RDS的相同优势。它是根据其他AWS组件构建的，例如以下内容：
- en: S3
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3
- en: EC2
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2
- en: VPCs and more…
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC和更多...
- en: It's also managed by RDS, meaning that they use both the same management and
    admin functions that are dependent on AWS. We will take a deeper look at setting
    up Aurora and testing it in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*. Now that we know a little bit about
    what RDS is, let's take a look at actually setting up an RDS database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它也由RDS管理，这意味着它们使用了与AWS相关的相同管理和管理员功能。我们将深入研究设置Aurora并在[*第6章*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*，设置和渗透测试AWS
    Aurora RDS*中进行测试。现在我们已经了解了一些关于RDS的信息，让我们看看如何实际设置RDS数据库。
- en: Setting up RDS (MySQL)
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置RDS（MySQL）
- en: 'To set up an RDS database, we will be using an older version of MySQL. You''ll
    be moving back and forth around RDS in the AWS console, so make sure you pin the
    RDS icon in your AWS console:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置RDS数据库，我们将使用一个较旧版本的MySQL。您将在AWS控制台中来回移动，因此请确保将RDS图标固定在您的AWS控制台中：
- en: '![Figure 5.1 – Pinning RDS as a shortcut'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – 将RDS固定为快捷方式'
- en: '](img/Figure_5.01_B15630.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.01_B15630.jpg)'
- en: Figure 5.1 – Pinning RDS as a shortcut
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 将RDS固定为快捷方式
- en: After that, make sure you are in the region you've been working with in this
    book and continue to make a database. Remember, it is important that we select
    the region that we have been using for our environment throughout this entire
    book. This allows all our resources to remain geographically in the same place.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，确保您在本书中一直在使用的地区，并继续创建数据库。请记住，重要的是我们选择一直在本书中使用的地区。这样可以确保我们所有的资源都保持在同一个地方。
- en: 'Follow the next instructions to create your own RDS instance:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下面的说明创建您自己的RDS实例：
- en: Click on the **RDS** icon you created, and then select **Create database**:![Figure
    5.2 – Creating a new database
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您创建的**RDS**图标，然后选择**创建数据库**：![图5.2 – 创建新数据库
- en: '](img/Figure_5.02_B15630.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.02_B15630.jpg)'
- en: Figure 5.2 – Creating a new database
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 创建新数据库
- en: Next, you'll need to select a database – we will be using **MySQL**. Make sure
    you use an older version, if not the oldest version available:![Figure 5.3 – Selecting
    MySQL
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要选择一个数据库 - 我们将使用**MySQL**。确保使用较旧的版本，如果没有最旧版本的话：![图5.3 – 选择MySQL
- en: '](img/Figure_5.03_B15630.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.03_B15630.jpg)'
- en: Figure 5.3 – Selecting MySQL
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 选择MySQL
- en: After that, you'll be given a template to choose from. We want to avoid charges,
    so use the **Free tier** option:![Figure 5.4 – Selecting Free tier
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您将获得一个模板供选择。我们希望避免收费，因此请选择**免费层**选项：![图5.4 – 选择免费层
- en: '](img/Figure_5.04_B15630.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.04_B15630.jpg)'
- en: Figure 5.4 – Selecting Free tier
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 – 选择免费层
- en: Next, set the name, username, and password for the RDS instance:![ Figure 5.5
    – Creating a username and password
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置RDS实例的名称、用户名和密码：![图5.5 – 创建用户名和密码
- en: '](img/Figure_5.05_B15630.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.05_B15630.jpg)'
- en: Figure 5.5 – Creating a username and password
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - 创建用户名和密码
- en: 'Ensure that you have selected the option for the database to be public:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已选择了数据库公开的选项：
- en: '![Figure 5.6 – Making the RDS instance public'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6 - 使RDS实例公开'
- en: '](img/Figure_5.06_B15630.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.06_B15630.jpg)'
- en: Figure 5.6 – Making the RDS instance public
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 - 使RDS实例公开
- en: You now have an up-and-running RDS database! It will take some time for it to
    finish creating – once it's finished creating, you can access it via MySQL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有一个正在运行的RDS数据库！它需要一些时间来完成创建 - 一旦完成创建，您就可以通过MySQL访问它。
- en: With our instance up and running, let's go ahead and add a rule to our security
    group that will allow the default MySQL port, `3306`, to open and allow traffic
    to the instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实例已经启动运行，现在让我们添加一个规则到我们的安全组，允许默认的MySQL端口`3306`打开并允许流量到实例。
- en: Adding a rule to the security group
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向安全组添加规则
- en: Our instance is up, but not quite ready for us yet. Now you need to ensure there
    is inbound traffic allowed via port `3306` – this is the port we are going to
    be accessing our instance on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实例已经启动，但还没有准备好。现在您需要确保通过端口`3306`允许入站流量 - 这是我们将要访问实例的端口。
- en: 'To do so, follow these steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请按照以下步骤：
- en: Click on the security group within your database:![Figure 5.7 – Creating a security
    group
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击数据库中的安全组：![图5.7 - 创建安全组
- en: '](img/Figure_5.07_B15630.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.07_B15630.jpg)'
- en: Figure 5.7 – Creating a security group
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - 创建安全组
- en: Click on **VPC security groups**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**VPC安全组**。
- en: Click on the security group ID.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安全组ID。
- en: 'Create an inbound rule that allows `3306`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建允许`3306`的入站规则：
- en: '![Figure 5.8 – Editing rules'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 - 编辑规则'
- en: '](img/Figure_5.08_B15630.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.08_B15630.jpg)'
- en: Figure 5.8 – Editing rules
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 - 编辑规则
- en: Now you'll be allowed to connect to the database from your machine. Next, let's
    take a look at testing a connection to our newly set up database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将被允许从您的计算机连接到数据库。接下来，让我们看一下如何测试连接到我们新设置的数据库。
- en: Testing the connection
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试连接
- en: 'Once you have your database up and running, it''s always a good sanity check
    to make sure you can connect to it – even if you aren''t going to be using it
    right away. To test the connection to our new database, let''s open up a Terminal
    in Kali and use `mysql` to access our database:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的数据库启动并运行，确保您可以连接到它总是一个很好的健全检查 - 即使您暂时不打算使用它。为了测试连接到我们的新数据库，让我们在Kali中打开一个终端，并使用`mysql`来访问我们的数据库：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![Figure 5.9 – Connecting to RDS'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9 - 连接到RDS'
- en: '](img/Figure_5.09_B15630.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.09_B15630.jpg)'
- en: Figure 5.9 – Connecting to RDS
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 - 连接到RDS
- en: We now have a stable connection to our database! We will take a look at moving
    around in the database after we scan the server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在与数据库建立了稳定的连接！在扫描服务器之后，我们将看一下在数据库中移动。
- en: Now that we understand how we can connect to our database, let's take a look
    at how we would scan our database during a penetration test.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何连接到我们的数据库，让我们看一下在渗透测试中如何扫描我们的数据库。
- en: Scanning RDS
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扫描RDS
- en: Now that we have our RDS database up and running, let's take a look at how we
    would perform various scans on it. These techniques are exactly the techniques
    we would use in a pentest and can help us understand more about our *target* in
    our lab environment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的RDS数据库已经启动运行，让我们看一下如何对其执行各种扫描。这些技术正是我们在渗透测试中使用的技术，可以帮助我们了解更多关于我们在实验室环境中的*目标*。
- en: 'The following steps will help us achieve these results:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们实现这些结果：
- en: 'Let''s say this is a "real-life" pentest. The first thing we want to do is
    check our target and see what ports are open. In order to enumerate any information,
    we need to run a *basic scan* on the host:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设这是一个“现实生活”的渗透测试。我们想要做的第一件事是检查我们的目标并查看哪些端口是开放的。为了枚举任何信息，我们需要在主机上运行*基本扫描*：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will give the following output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 5.10 – Port 3306 is open on the instance'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10 - 实例上打开了端口3306'
- en: '](img/Figure_5.10_B15630.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B15630.jpg)'
- en: Figure 5.10 – Port 3306 is open on the instance
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 - 实例上打开了端口3306
- en: 'Next, we run a version scan to see what version of the software is running
    on the port:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们运行版本扫描，查看端口上运行的软件版本：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will give the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 5.11 – Port 3306'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 - 端口3306'
- en: '](img/Figure_5.11_B15630.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B15630.jpg)'
- en: Figure 5.11 – Port 3306
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 - 端口3306
- en: 'Next, we confirm the software version using Metasploit:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用Metasploit确认软件版本：
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will give the following output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 5.12 – Scanning for MySQL versions with Metasploit'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12 - 使用Metasploit扫描MySQL版本'
- en: '](img/Figure_5.12_B15630.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B15630.jpg)'
- en: Figure 5.12 – Scanning for MySQL versions with Metasploit
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 - 使用Metasploit扫描MySQL版本
- en: Great, now we know what version is running!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在我们知道正在运行的版本！
- en: The next part of the enumeration phase is to see what CVEs are associated with
    this version. We are going to look at some CVEs listed using a script built within
    Nmap.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举阶段的下一部分是查看与该版本相关的CVE。我们将使用Nmap内置的脚本查看一些列出的CVE。
- en: Important note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'CVEs provide a reference for various vulnerabilities and exploits you may find
    during an assessment. You can find more about CVEs here: https://cve.mitre.org/.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CVE提供了各种漏洞和利用的参考，您可能在评估过程中找到。您可以在这里找到更多关于CVE的信息：https://cve.mitre.org/。
- en: Next, let's pull a new CVE repo, and run an Nmap scan with the updated CVE repo.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们拉取一个新的CVE存储库，并使用更新的CVE存储库运行Nmap扫描。
- en: 'The following steps will guide us:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们：
- en: 'First, you''ll need to get the following from GitHub: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan).'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要从GitHub获取以下内容：[https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)。
- en: 'We can execute it by using the `git clone` command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`git clone`命令来执行它：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then run your scan:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后运行您的扫描：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will give you the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给您以下输出：
- en: '![Figure 5.13 – Information from Vulnscan'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13 - 来自Vulnscan的信息'
- en: '](img/Figure_5.13_B15630.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B15630.jpg)'
- en: Figure 5.13 – Information from Vulnscan
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 - 来自Vulnscan的信息
- en: 'We can see that the output of the scan is showing us various CVEs that we can
    look up. You can use the MITRE database to look up CVEs here: [https://cve.mitre.org/](https://cve.mitre.org/).
    CVEs are a fairly deep topic that would divert from this book a little bit, so
    it''s best to simply understand that CVEs are references for vulnerabilities and
    exploits that you may discover during your pentest.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到扫描的输出显示了我们可以查找的各种CVE。你可以在MITRE数据库中查找CVE：[https://cve.mitre.org/](https://cve.mitre.org/)。CVE是一个相当深入的话题，会偏离这本书的主题，所以最好简单理解CVE是你在渗透测试中可能发现的漏洞和利用的参考。
- en: As you can tell, there are various ways to scan – I mean skin – a cat! Scanning
    a host allows you to see any service and ports that are open that can be a possible
    foothold into a server. In pentesting, no port is left overlooked and no services
    are left in the dust. Enumeration is key, and scanning can be the biggest tactic
    in enumeration!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有各种各样的扫描方式 - 我的意思是皮毛 - 一只猫！扫描主机可以让你看到任何开放的服务和端口，这可能是对服务器的一个可能的立足点。在渗透测试中，没有一个端口被忽视，也没有一个服务被遗漏。枚举是关键，扫描可以是枚举中最重要的策略！
- en: Now let's look at some quick references for SQL syntax that will help us move
    through the rest of this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一些SQL语法的快速参考，这将帮助我们在本章的其余部分中移动。
- en: Understanding basic SQL syntax
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解基本的SQL语法
- en: It's important to understand SQL syntax – especially now that we will be interacting
    with a SQL "shell" via MySQL. Essentially, the syntax is the language of the system,
    applications, and devices you are interacting with, so it is extremely important
    that you know some basics and how to use the syntax.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 了解SQL语法非常重要，特别是现在我们将通过MySQL与SQL“shell”进行交互。基本上，语法是系统、应用程序和设备的语言，所以你非常重要知道一些基础知识以及如何使用语法。
- en: 'The following is a list of basic commands that fall within MySQL syntax:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是属于MySQL语法的基本命令列表：
- en: '`SELECT`: Extracts data from a database'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT`：从数据库中提取数据'
- en: '`UPDATE`: Updates information in a database'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATE`：更新数据库中的信息'
- en: '`DELETE`: Deletes data from a database'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：从数据库中删除数据'
- en: '`SHOW`: Displays data in a database or table'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`显示`：在数据库或表中显示数据'
- en: '`USE`: Switches to a database'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`使用`：切换到一个数据库'
- en: '`INSERT INTO`: Inserts new data into a database'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT INTO`：向数据库中插入新数据'
- en: '`CREATE DATABASE`: Creates a new database'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE DATABASE`：创建一个新数据库'
- en: '`ALTER DATABASE`: Modifies a database'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALTER DATABASE`：修改数据库'
- en: '`CREATE TABLE`: Creates a new table'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE TABLE`：创建一个新表'
- en: Now that you know some simple syntax, let's go ahead and apply it and start
    moving around in our new database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了一些简单的语法，让我们继续应用它，并开始在我们的新数据库中移动。
- en: Database maneuvering and exploration
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库操作和探索
- en: Knowing how to move around in a database isn't only important for pentesting;
    it's also very important to understand as a technologist. Databases are used by
    everything and you're going to come across databases more than your own fair share
    of times, so it is important that you understand the syntax for how to use them.
    Also, if you don't know where you're going, then how do you get there? What if
    you don't even know where to start? That's what it can be like moving in MySQL
    if you don't apply your knowledge to actual testing. Since we have mentioned syntax,
    let's actually use it in this next portion. To begin, make sure you are connected
    to your RDS database. Once connected, move forward in the section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何在数据库中移动不仅对渗透测试很重要，对于技术人员来说也非常重要。数据库被所有东西使用，你会遇到数据库的次数比你自己的份额还要多，所以重要的是你了解如何使用它们的语法。此外，如果你不知道你要去哪里，那么你怎么到达那里？如果你甚至不知道从哪里开始？如果你不将你的知识应用于实际测试，那在MySQL中移动就会变得像这样。既然我们提到了语法，让我们在下一部分中实际使用它。首先，确保你连接到你的RDS数据库。连接后，继续进行下一步。
- en: Let's say this was a real pentest, and you were granted access to the database,
    but need to find misconfigurations. The first thing you want to do when getting
    access to the server is to show all the databases on the server.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这是一个真正的渗透测试，你被授予对数据库的访问权限，但需要找到配置错误。当获得对服务器的访问权限时，你首先要做的事情是显示服务器上的所有数据库。
- en: 'Let''s use some commands that will help us maneuver in our database:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一些命令来帮助我们在数据库中操作：
- en: 'Let''s look at the databases in our instance:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看我们实例中的数据库：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will give us the following output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.14 – Listing out the databases in RDS'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14 - 列出RDS中的数据库'
- en: '](img/Figure_5.14_B15630.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.14_B15630.jpg)'
- en: Figure 5.14 – Listing out the databases in RDS
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 - 列出RDS中的数据库
- en: 'Great, we now know what databases are on the server. Next, let''s take a look
    at the MySQL database – this typically hosts usernames and passwords:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很好，现在我们知道服务器上有哪些数据库。接下来，让我们看看MySQL数据库 - 这通常存储用户名和密码：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s look at the tables within that database:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看看该数据库中的表：
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following tables are displayed:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 显示以下表：
- en: '![Figure 5.15 – Displaying tables'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15 - 显示表'
- en: '](img/Figure_5.15_B15630.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.15_B15630.jpg)'
- en: Figure 5.15 – Displaying tables
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 - 显示表
- en: 'You''ll see a table titled `user`. Go ahead and show the data within that table:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个名为`user`的表。继续显示该表中的数据：
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will give us the following output:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.16 – Listing out info from the user table'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.16 - 列出用户表中的信息'
- en: '](img/Figure_5.16_B15630.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.16_B15630.jpg)'
- en: Figure 5.16 – Listing out info from the user table
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 - 列出用户表中的信息
- en: You'll get some data back that looks like the mess of data illustrated in our
    screenshot. If you look at it, you can see each username and its hash. By default,
    MySQL uses SHA-1 hashes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一些数据，看起来像我们截图中所示的一团糟。如果你看一下，你可以看到每个用户名及其哈希值。默认情况下，MySQL使用SHA-1哈希。
- en: 'Now, let''s ensure we saw all the users by querying only the users:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保我们通过查询只看到了用户：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give us the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.17 – Users in human-readable text'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.17 - 以人类可读文本显示的用户'
- en: '](img/Figure_5.17_B15630.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.17_B15630.jpg)'
- en: Figure 5.17 – Users in human-readable text
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 - 以人类可读文本显示的用户
- en: 'As you can see, we have usernames and their hashes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们有用户名和他们的哈希：
- en: '`rdsadmin`:`*AAEED912FFD9F3EBB625FBE039BB2A88FB8C4187`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rdsadmin`:`*AAEED912FFD9F3EBB625FBE039BB2A88FB8C4187`'
- en: '`mysql.sys`:`*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql.sys`:`*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE`'
- en: '`admin`:`*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`:`*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19`'
- en: Moving forward, let's take a look and see whether there is a more natural way
    to look at the usernames and hashes from the Terminal. When pentesting, it's good
    practice to be able to effectively illustrate a technique in one screenshot. Doing
    so helps your client understand and looks more professional when putting it into
    a report.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，让我们看看是否有更自然的方式来查看终端中的用户名和哈希。在渗透测试中，能够有效地用一个截图说明一种技术是一个好的实践。这样做有助于让你的客户理解，并在放入报告时显得更专业。
- en: We can do this by dumping hashes using Metasploit. Let's move forward and look
    at how we can do this.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Metasploit来转储哈希。让我们继续看看我们如何做到这一点。
- en: Dumping hashes with Metasploit
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Metasploit转储哈希
- en: Dumping hashes is a great way to get passwords from users. While the hashes
    are not the passwords themselves, they can be either cracked or used in a "hash"
    passing attack – a technique that allows you to use a hashed password for authentication.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 转储哈希是从用户那里获取密码的好方法。虽然哈希本身不是密码，但它们可以被破解或用于“哈希”传递攻击 - 一种允许你使用哈希密码进行身份验证的技术。
- en: 'To execute our `hashdump`, we need to use `mysql_hashdump` and set the parameters
    to fit your target. Ensure that you use the database username and password:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行我们的`hashdump`，我们需要使用`mysql_hashdump`并设置参数以适应你的目标。确保你使用数据库的用户名和密码：
- en: '![Figure 5.18 – Dumping hashes'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.18 - 转储哈希'
- en: '](img/Figure_5.18_B15630.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.18_B15630.jpg)'
- en: Figure 5.18 – Dumping hashes
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 - 转储哈希
- en: As you can see, we have successfully dumped the database hashes and can provide
    a more concise screenshot that could be lodged into a pentest report.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经成功转储了数据库哈希，并可以提供一个更简洁的截图，可以被嵌入到渗透测试报告中。
- en: Now that we have figured out ways to move around and locate users and passwords,
    let's keep moving and see how we could create databases and use **crumbs** during
    a pentest.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到了在数据库中移动和定位用户和密码的方法，让我们继续前进，看看我们如何创建数据库并在渗透测试中使用**蛛丝马迹**。
- en: Creating RDS databases
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建RDS数据库
- en: It's common to leave **crumbs** behind when performing a pentest. These crumbs
    are often called **artifacts** and are internally left in order to let clients
    know they were actually in the system they said they were in. Additionally, when
    the pentesters revisit the system months later, they will know if the system was
    fixed by seeing whether the artifact has been removed or not. If the artifact
    is still there, it's a good indicator that the system's issues were not resolved
    – typically, because administrators would remove the artifact while fixing the
    problems.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行渗透测试时，留下**蛛丝马迹**是很常见的。这些蛛丝马迹通常被称为**遗物**，它们在内部留下，以便让客户知道他们确实进入了他们所说的系统。此外，当渗透测试人员在几个月后重新访问系统时，他们将通过遗物是否被移除来知道系统是否已修复。如果遗物仍然存在，这是一个很好的指示，表明系统的问题没有得到解决
    - 通常是因为管理员在解决问题时会移除遗物。
- en: 'For our MySQL server, we are going to create a database titled `pentest`. If
    this were a real engagement, it simply would be left behind as an *I was here*
    statement:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的MySQL服务器，我们将创建一个名为`pentest`的数据库。如果这是一个真实的任务，它只会被留下作为一个*我在这里*的声明：
- en: 'Connect to your database and enter the following command to create the database:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到你的数据库并输入以下命令来创建数据库：
- en: '[PRE11]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that you have a database created, it''s a good measure to double-check
    and make sure it was created correctly:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个数据库，最好再次检查并确保它被正确创建：
- en: '[PRE12]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot will show you the output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图将向你展示输出：
- en: '![Figure 5.19 – Displaying our new database'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.19 - 显示我们的新数据库'
- en: '](img/Figure_5.19_B15630.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.19_B15630.jpg)'
- en: Figure 5.19 – Displaying our new database
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 - 显示我们的新数据库
- en: Now that we have made a database, we understand quite a bit more about RDS,
    MySQL, and how we can move about databases. Now let's discuss some common misconfigurations
    and perform a hands-on brute-forcing exercise to get a real view of the issues
    stemming from misconfigurations.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了一个数据库，我们对RDS、MySQL有了更多的了解，以及我们如何操作数据库。现在让我们讨论一些常见的配置错误，并进行一个实际的暴力破解练习，以真正了解由配置错误引起的问题。
- en: Understanding misconfigurations
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解配置错误
- en: Misconfigurations can be the end of a database if not corrected quickly and
    effectively. More often than not, these issues arise from poor hygiene or a lack
    of knowledge on the part of administrators. The holes left in databases are treasure
    troves for nasty hackers, and lots of fun for pentesters, however, just because
    they are fun for pentesters does not mean that they should be there!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不及时有效地纠正，配置错误可能会导致数据库的终结。这些问题往往是由于管理员的不良操作或缺乏知识所引起的。数据库中留下的漏洞是恶意黑客的宝藏，也是渗透测试人员的乐趣，然而，仅仅因为它们对渗透测试人员有趣，并不意味着它们应该存在！
- en: Let's take a look at a few common issues that you may or may not find in your
    technology career.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你在技术生涯中可能会遇到的一些常见问题。
- en: Weak passwords
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弱密码
- en: 'Weak passwords tend to derive from either default passwords or from common
    passwords. Find out more about what weak passwords here: https://cwe.mitre.org/data/definitions/521.html.
    Weak passwords are passwords that typically can be easily guessed. The following
    is a list of passwords that would be considered weak:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 弱密码通常源自默认密码或常见密码。在这里了解更多关于弱密码的信息：https://cwe.mitre.org/data/definitions/521.html。弱密码通常很容易被猜到。以下是一些被认为是弱密码的密码列表：
- en: Admin
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员
- en: Password
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: 12345qwer
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12345qwer
- en: Password123
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Password123
- en: Root
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根
- en: To help illustrate just how dangerous weak passwords are, let's look at some
    tools that we could use to brute-force the weak password for our admin account
    on our recently created RDS database.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助说明弱密码有多危险，让我们看一些工具，我们可以用来暴力破解我们最近创建的RDS数据库上管理员帐户的弱密码。
- en: Hydra
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Hydra
- en: Hydra is a great tool to use when you need to crack login passwords – it's fast,
    easy, and flexible for various protocols. In our case, we are going to use it
    to brute-force our RDS database login.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是一个很棒的工具，当您需要破解登录密码时可以使用它-它对各种协议都很快速、简单且灵活。在我们的情况下，我们将使用它来暴力破解我们的RDS数据库登录。
- en: 'Before you begin, make sure you have a short password list to test out against
    the RDS login. I''d recommend using 10 passwords or so and storing them in a `.txt`
    file. Once you have the password file created, use the following command to brute-force
    the database using the known password, `admin`, and a password list:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您有一个短密码列表可用于针对RDS登录进行测试。我建议使用大约10个密码并将它们存储在`.txt`文件中。创建密码文件后，使用以下命令使用已知密码`admin`和密码列表来暴力破解数据库：
- en: '[PRE13]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will give us the following output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.20 – Brute-forcing with Hydra'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.20 - 使用Hydra暴力破解'
- en: '](img/Figure_5.20_B15630.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.20_B15630.jpg)'
- en: Figure 5.20 – Brute-forcing with Hydra
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 - 使用Hydra暴力破解
- en: As you can see, Hydra displays the found password and username in green – making
    it easier for us to read. Now let's look at another tool, Medusa.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Hydra以绿色显示找到的密码和用户名-这样我们更容易阅读。现在让我们看看另一个工具，Medusa。
- en: Medusa
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Medusa
- en: 'Medusa is the same as Hyrda – as in, it is a great and fast tool to brute-force
    login credentials. Just as before, let''s use our password list and known username
    to brute-force our RDS login:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa与Hyrda相同-它是一个用于暴力破解登录凭据的出色且快速的工具。就像以前一样，让我们使用我们的密码列表和已知用户名来暴力破解我们的RDS登录：
- en: '[PRE14]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will give us the following output:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.21 – Brute-forcing with Medusa'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.21 - 使用Medusa暴力破解'
- en: '](img/Figure_5.21_B15630.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.21_B15630.jpg)'
- en: Figure 5.21 – Brute-forcing with Medusa
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 - 使用Medusa暴力破解
- en: Notice the last line displaying `ACCOUNT FOUND`, showing that a username and
    password have been found.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一行显示`ACCOUNT FOUND`，表明已找到用户名和密码。
- en: Metasploit
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Metasploit
- en: 'Metasploit also has a great module built in to let us use brute force! Just
    like the other times, use your password list and known username to brute-force
    the login! To find the module, search for the `mysql_login` scanner and target
    your RDS instance:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还内置了一个很棒的模块，让我们使用暴力破解！就像以前一样，使用您的密码列表和已知用户名来暴力破解登录！要找到该模块，请搜索`mysql_login`扫描程序并针对您的RDS实例：
- en: '![Figure 5.22 – Brute forcing with Metasploit'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.22 - 使用Metasploit暴力破解'
- en: '](img/Figure_5.22_B15630.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.22_B15630.jpg)'
- en: Figure 5.22 – Brute forcing with Metasploit
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22 - 使用Metasploit暴力破解
- en: You now have had some time to look at various issues within databases, while
    also pentesting for weak passwords. If you inspect the output of the tool, you'll
    see the words `LOGIN FAILED`, which indicates we were not successful at gaining
    credentials. However, if you look at the output that says `SUCCESS`, you'll see
    that the credentials `admin:password` have been found.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有一些时间来查看数据库中的各种问题，同时也为弱密码进行渗透测试。如果您检查工具的输出，您将看到`LOGIN FAILED`这些词，这表明我们未能成功获取凭据。但是，如果您查看显示`SUCCESS`的输出，您将看到已找到凭据`admin:password`。
- en: Now let's discuss some more about some of the issues we see in databases, some
    of which you may discover during your pentest career.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更多地讨论一些我们在数据库中看到的问题，其中一些您可能在渗透测试职业中发现。
- en: Unpatched databases
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未打补丁的数据库
- en: Unpatched systems are a significant issue that – at times – can be easy for
    malicious hackers. So why don't companies patch their systems or have automated
    patching enabled? Unfortunately, it isn't that simple. Many companies face issues
    with patching due to specific patches having adverse effects on their systems
    and applications. Also, patching can take time and can cause downtime to servers.
    If a server isn't running, typically, that translates to a loss in revenue for
    organizations.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 未打补丁的系统是一个重大问题，有时对恶意黑客来说可能很容易。那么为什么公司不打补丁他们的系统或启用自动打补丁呢？不幸的是，情况并不那么简单。许多公司在打补丁时面临问题，因为特定的补丁对其系统和应用程序产生不利影响。此外，打补丁需要时间，可能会导致服务器停机。如果服务器停机，通常意味着组织的收入损失。
- en: This is why pentesting is now becoming such a big career field. Companies are
    having issues keeping up with the constant grind of having to update their security
    posture and it can seem virtually impossible to look at everything. Pentesting
    helps relieve that issue by continuously looking for unpatched systems and exploiting
    vulnerabilities. Doing so allows companies to assess the risk associated with
    unpatched systems and plan accordingly.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么渗透测试现在成为如此重要的职业领域。公司在不断更新其安全姿态方面遇到问题，似乎几乎不可能查看所有内容。渗透测试通过不断寻找未打补丁的系统并利用漏洞来帮助缓解这一问题。这样做可以让公司评估与未打补丁系统相关的风险并做出相应的计划。
- en: Now let's start to wrap up, but before we do, we are going to take a quick look
    at injection. Injection is one of the most impactful vulnerabilities found within
    web applications that allow access to the backend database.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始总结，但在此之前，我们将快速看一下注入。注入是在允许访问后端数据库的Web应用程序中发现的最具影响力的漏洞之一。
- en: Learning about injection points
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习注入点
- en: While we aren't going to do any "hands-on" with injection in this chapter, it's
    essential to understand what injection is, how it works, and why it's an issue
    that remains one of the top issues within web applications. We will look at a
    more hands-on implementation of injection in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*, when we set up a vulnerable environment
    for SQL injection exercises.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在本章中我们不会进行任何关于注入的“实践”，但了解注入是什么，它是如何工作的，以及为什么它仍然是Web应用程序中的顶级问题之一是至关重要的。在[*第6章*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*，设置和渗透测试AWS
    Aurora RDS*中，我们将看到注入的更多实际实现，当我们设置一个易受SQL注入攻击的环境时。
- en: What is an injection?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是注入？
- en: An injection is a flaw within an application that allows malicious statements
    to be executed. While it may not seem "too evil," these statements can be statements
    that actually control databases – ultimately giving unauthorized users control
    of a system. This means that if not corrected, the flaw could allow malicious
    users to access sensitive data or even completely take over the database.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注入是应用程序中的一个缺陷，允许执行恶意语句。虽然它可能看起来“不那么邪恶”，但这些语句可以是实际控制数据库的语句 - 最终使未经授权的用户控制系统。这意味着如果不加以纠正，该缺陷可能允许恶意用户访问敏感数据，甚至完全接管数据库。
- en: How does it work?
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: To start, a point of entry needs to be found; this is typically a vulnerable
    input section within a web page or web application. The vulnerable point of entry
    usually has direct access to the SQL database and allows users to make queries
    that directly query from the database. Once discovered, a malicious payload is
    sent to the database and is executed server-side. Let's take a look at a **proof-of-concept**
    (**POC**) that illustrates a very basic injection sting that will allow an unauthorized
    query of a username and password.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要找到一个入口点；这通常是Web页面或Web应用程序中的一个易受攻击的输入部分。易受攻击的入口点通常直接访问SQL数据库，并允许用户进行直接从数据库查询的查询。一旦发现，恶意有效载荷将被发送到数据库并在服务器端执行。让我们看一个**概念验证**（**POC**），它说明了一个非常基本的注入字符串，将允许未经授权的查询用户名和密码。
- en: Pseudocode
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪代码
- en: 'In this example, we are going to use pseudocode – which is not really coding;
    it''s code that is easy to read and helps the reader understand what actions are
    being performed. The following string is pseudocode, meaning it may or may not
    actually work in a real scenario:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用伪代码 - 这不是真正的编码；它是易于阅读的代码，帮助读者理解正在执行的操作。以下字符串是伪代码，这意味着它在实际情况下可能有效，也可能无效。
- en: '[PRE15]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following query will attempt to retrieve the administrator username and
    password but will fail because the database will see that the user does not have
    the right to access the server. Think of this as a **FALSE** statement. A **FALSE**
    statement simply means that the server will not execute the command because the
    query is not legitimate (there are multiple ways it could be illegitimate).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将尝试检索管理员用户名和密码，但将失败，因为数据库将看到用户没有权利访问服务器。将其视为一个**FALSE**语句。**FALSE**语句简单地意味着服务器不会执行命令，因为查询不合法（有多种方式它可能是不合法的）。
- en: 'So, if the database doesn''t execute false commands, that means it should run
    a **TRUE** statement. Let''s change our query to make it **TRUE**:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果数据库不执行错误命令，这意味着它应该运行一个**TRUE**语句。让我们更改我们的查询使其为**TRUE**：
- en: '[PRE16]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By adding `OR 1=1'` to the end of the query, we have made it a `1` does equal
    `1` – making it true. Doing so allows the retrieval of the administrator's username
    and password.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在查询的末尾添加`OR 1=1'`，我们使`1`等于`1` - 使其为真。这样做允许检索管理员的用户名和密码。
- en: Important note
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Remember that pseudocode is not real code. The purpose of pseudocode is to lay
    out a "roadmap" of possibilities.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，伪代码不是真正的代码。伪代码的目的是为可能性制定一个“路线图”。
- en: Why is it an issue?
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这是一个问题？
- en: As mentioned, injection impacts both business employees and clients. Injection
    points can allow anything from the total control of a database to leaking sensitive
    information. It's exceptionally critical when standing up a new database, that
    the frontend website sanitizes input to help prevent these types of attacks.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，注入影响企业员工和客户。注入点可以允许从完全控制数据库到泄露敏感信息的任何事情。在建立新数据库时，前端网站对输入进行消毒以帮助防止这类攻击是非常重要的。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned quite a bit about databases – such as RDS, MySQL,
    and Aurora. We also took a quick dive into MySQL syntax to help us better understand
    what commands are and what they are doing when we are in an interactive MySQL
    shell. We learned how to set up a database using RDS, and also learned how to
    create a database within the RDS database. We then learned how to brute-force
    databases, while also learning the severity of the effect weak passwords have
    on databases.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学到了关于数据库的很多知识 - 例如RDS、MySQL和Aurora。我们还快速深入了解了MySQL语法，以帮助我们更好地理解在交互式MySQL
    shell中执行命令时正在执行的操作。我们学会了如何使用RDS设置数据库，并学会了如何在RDS数据库中创建数据库。然后，我们学会了如何暴力破解数据库，同时也了解了弱密码对数据库的影响程度。
- en: In the next chapter, you will begin using knowledge gained from this chapter
    and implementing it in more hands-on practice, while also building out environments
    in AWS.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将开始使用从本章获得的知识，并在更多的实践中实施它，同时在AWS中构建环境。
- en: Further reading
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'SQL injection: [https://portswigger.net/web-security/sql-injection](https://portswigger.net/web-security/sql-injection)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入：[https://portswigger.net/web-security/sql-injection](https://portswigger.net/web-security/sql-injection)
- en: 'Database vulnerabilities: [https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676](https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库漏洞：[https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676](https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676)
