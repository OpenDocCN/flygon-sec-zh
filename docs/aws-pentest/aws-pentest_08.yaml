- en: '*Chapter 6*: Setting Up and Pentesting AWS Aurora RDS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：设置和渗透测试AWS Aurora RDS'
- en: AWS Aurora provides SQL-like database functionality to AWS accounts with simplicity.
    Focused around using PostgreSQL and MySQL, such as querying, Aurora makes interacting
    with high-performance storage systems easy for the user. The side effects can
    have a deadly cost, however, and can lead to data leaks if not adequately secured.
    This chapter is going to discuss the ins and outs of what Aurora has to offer,
    and also take a look at the dangers of **SQL injection** (**SQLi**) – a malicious
    attack against websites that host services such as MySQL. We will also discuss
    mitigation and preventions of **denial of service** (**DoS**) and **distributed
    denial of service** (**DDoS**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Aurora为AWS账户提供了类似SQL的数据库功能。以使用PostgreSQL和MySQL为中心，例如查询，Aurora使用户可以轻松地与高性能存储系统进行交互。然而，副作用可能会带来致命的代价，如果不充分保护，可能会导致数据泄漏。本章将讨论Aurora所提供的内容，以及**SQL注入**（**SQLi**）的危险
    - 这是针对托管MySQL等服务的网站的恶意攻击。我们还将讨论**拒绝服务**（**DoS**）和**分布式拒绝服务**（**DDoS**）的缓解和预防。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding and setting up the Aurora RDS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和设置Aurora RDS
- en: White box/functional pentesting Aurora
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白盒/功能性渗透测试Aurora
- en: Setting up a lab for SQLi
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置SQLi实验室
- en: Fun with SQLi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与SQLi有趣
- en: Avoiding DDoS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免DDoS
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本章的说明进行操作，您将需要以下内容：
- en: 'Juice Shop will be used to create our lab for SQli. More information can be
    found here: [https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Juice Shop将用于创建我们的SQli实验室。更多信息可以在这里找到：[https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/)。
- en: 'The code used in this chapter is available at the following links:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可在以下链接找到：
- en: '[https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)'
- en: '[https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt](https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt](https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt)'
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2TIx2qz](https://bit.ly/2TIx2qz)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[https://bit.ly/2TIx2qz](https://bit.ly/2TIx2qz)
- en: Understanding and setting up the Aurora RDS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和设置Aurora RDS
- en: In [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227), *Understanding
    Vulnerable RDS Services*, we took a look at relational databases and set up our
    own RDS database, as well as implemented MySQL as the underlying service running
    on the RDS instance. As you saw, it's relatively straightforward to set up a database,
    so now we are going to start looking at Aurora.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227)中，*理解易受攻击的RDS服务*，我们研究了关系数据库并设置了自己的RDS数据库，并实现了MySQL作为运行在RDS实例上的基础服务。正如你所看到的，设置数据库相对简单，所以现在我们将开始研究Aurora。
- en: One benefit of Aurora is simplicity, something that we are going to take a look
    at when we set up an Aurora cluster. Because Aurora runs on top of RDS, it does
    most of the *heavy lifting* and allows you to interface with everything the same
    as you would before. Another great benefit to Aurora is security. Aurora uses
    encryption of both data at rest and data in transit. Encryption at both levels
    ensures the confidentiality of the data that is either being stored or used. When
    pentesting, data such as **personal identifiable information** (**PII**) is extremely
    sensitive and should be disclosed if found unencrypted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Aurora的一个好处是简单性，我们将在设置Aurora集群时进行研究。因为Aurora运行在RDS之上，它完成了大部分的*繁重工作*，并允许你与以前一样进行接口。Aurora的另一个巨大优势是安全性。Aurora对静态数据和传输数据进行加密。在两个级别进行加密可以确保数据的机密性，无论是存储还是使用。在渗透测试中，诸如**个人可识别信息**（**PII**）之类的数据非常敏感，如果发现未加密，应该立即披露。
- en: Important note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If PII is found unprotected during a pentest, the pentest should cease to resume
    and managers should immediately be notified.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在渗透测试期间发现PII未受保护，则渗透测试应该停止并恢复，并立即通知管理人员。
- en: Aurora is MySQL- and PostgreSQL-compatible. One of the great things about Aurora
    is that tools that require services such as MySQL and PostgreSQL can also run
    within Aurora. Aurora is built with database engines that have the same or similar
    database engines as both MySQL and PostgreSQL
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Aurora兼容MySQL和PostgreSQL。Aurora的一个伟大之处在于需要MySQL和PostgreSQL等服务的工具也可以在Aurora中运行。Aurora是使用与MySQL和PostgreSQL相同或相似的数据库引擎构建的。
- en: Next, let's set up a database with Aurora and MySQL using some of the knowledge
    that we have.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用一些我们已经掌握的知识来设置Aurora和MySQL数据库。
- en: Setting up Aurora
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Aurora
- en: Setting up Aurora should be relatively less complicated now that we have set
    up databases with RDS. If you haven't already, go to [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227),
    *Understanding Vulnerable RDS Services*, and set up a database so that you understand
    the steps in setting up a database with AWS. Having a database is required to
    move forward.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置Aurora应该相对不那么复杂，因为我们已经在RDS上设置了数据库。如果还没有，请转到[*第5章*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227)，*理解易受攻击的RDS服务*，并设置一个数据库，以便了解在AWS中设置数据库的步骤。拥有数据库是继续前进所必需的。
- en: 'Just as before, go to the Amazon RDS console and click **Create Database**
    to begin. Next, follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，转到Amazon RDS控制台，然后单击**创建数据库**开始。接下来，按照以下步骤：
- en: Select **Standard Create**:![Figure 6.1 – Selecting Standard Create
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**标准创建**：![图6.1 - 选择标准创建
- en: '](img/Figure_6.01_B15630.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.01_B15630.jpg)'
- en: Figure 6.1 – Selecting Standard Create
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 选择标准创建
- en: Select **Amazon Aurora with MySQL compatibility**:![Figure 6.2 – Aurora selection
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**具有MySQL兼容性的Amazon Aurora**：![图6.2 – Aurora选择
- en: '](img/Figure_6.02_B15630.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.02_B15630.jpg)'
- en: Figure 6.2 – Aurora selection
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – Aurora选择
- en: Select the **Regional Database** location to fit your location.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**区域数据库**位置以适应您的位置。
- en: 'On the **Database features** screen, select **One writer and multiple readers
    - Parallel query**. This is a great approach because it allows a hybrid workload
    that is much more redundant:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在**数据库特性**屏幕上，选择**一个写入者和多个读取者 - 并行查询**。这是一个很好的方法，因为它允许一个更加冗余的混合工作负载：
- en: '![Figure 6.3 – One writer and multiple readers - Parallel query'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 一个写入者和多个读取者 - 并行查询'
- en: '](img/Figure_6.03_B15630.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.03_B15630.jpg)'
- en: Figure 6.3 – One writer and multiple readers - Parallel query
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 一个写入者和多个读取者 - 并行查询
- en: On the **Settings** page, give your cluster a name. Make sure that you remember
    the name.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置**页面上，为您的集群命名。确保您记住这个名字。
- en: Set the username and password:![Figure 6.4 – Creating a username and password
    for your new instance
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置用户名和密码：![图6.4 – 为您的新实例创建用户名和密码
- en: '](img/Figure_6.04_B15630.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.04_B15630.jpg)'
- en: Figure 6.4 – Creating a username and password for your new instance
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 为您的新实例创建用户名和密码
- en: Select **Password Authentication**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**密码验证**。
- en: 'Click **Create Database**:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建数据库**：
- en: '![Figure 6.5 – New Aurora cluster'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 新的Aurora集群'
- en: '](img/Figure_6.05_B15630.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.05_B15630.jpg)'
- en: Figure 6.5 – New Aurora cluster
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 新的Aurora集群
- en: And there you have it – we have set up an Aurora database cluster that we can
    use. Try connecting to it and testing out some of the functionality the same way
    you did with testing MySQL in the previous chapter, [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227),
    *Understanding Vulnerable RDS Services*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样 – 我们已经设置了一个可以使用的Aurora数据库集群。尝试连接并测试一些功能，就像您在上一章中测试MySQL时所做的那样，[*第5章*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227)，*理解易受攻击的RDS服务*。
- en: Now that we have our Aurora instance running, let's dive into a pentesting exercise
    that will demonstrate how an actual pentester would look at some *low-hanging
    fruit* associated with an Aurora pentest.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Aurora实例正在运行，让我们进行一项渗透测试练习，演示一个实际的渗透测试人员如何查看与Aurora渗透测试相关的一些*易于攻击*的内容。
- en: Important note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '*Low-hanging fruit* are easy-to-exploit vulnerabilities found within systems,
    networks, and applications.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*易于攻击*是在系统、网络和应用程序中发现的易于利用的漏洞。'
- en: White box/functional pentesting Aurora
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 白盒/功能性渗透测试Aurora
- en: Just as we did before with RDS, we are going to look and see what we can find
    out about Aurora from a pentesting point of view. We know the environment since
    we set it up, but for the sake of the next exercise, let's say we are pentesting
    an Aurora instance. This test involves looking at whether the instance is accessible
    by the public, how strong the password field is, and anything else we may be able
    to do while looking at the instance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们之前对RDS所做的那样，我们将从渗透测试的角度来看看我们可以从Aurora中找到什么。我们知道环境，因为我们设置了它，但是为了下一个练习的缘故，让我们假设我们正在对Aurora实例进行渗透测试。这个测试涉及查看实例是否可以被公开访问，密码字段的强度如何，以及在查看实例时我们可能能做的其他任何事情。
- en: The reason we want to do this is to expose the white box pentesting methodology
    in as many cases as possible. White box pentesting is the most common pentesting
    methodology because it allows pentesters to fully pentest everything for both
    functional purposes and compliance purposes. We are going to apply this to our
    Aurora instance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要这样做的原因是尽可能多地暴露白盒渗透测试方法。白盒渗透测试是最常见的渗透测试方法，因为它允许渗透测试人员完全测试所有功能目的和合规目的。我们将把这个方法应用到我们的Aurora实例上。
- en: Our engagement starts off with scanning the Aurora instance. Remember, we don't
    know anything except the address of the instance!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的参与始于扫描Aurora实例。请记住，除了实例的地址，我们一无所知！
- en: Recon – scanning for public access
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 侦察 – 扫描公共访问
- en: 'As always, we need to check and see whether the instance is public or not.
    We can do this by running a `no ping` scan using NMAP:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们需要检查实例是否是公共的。我们可以通过使用NMAP运行`no ping`扫描来做到这一点：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will give us the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 6.6 – Scanning Aurora and discovering port 3306'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 扫描Aurora并发现端口3306'
- en: '](img/Figure_6.06_B15630.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.06_B15630.jpg)'
- en: Figure 6.6 – Scanning Aurora and discovering port 3306
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 扫描Aurora并发现端口3306
- en: 'From the preceding screenshot, it looks like the instance is in fact publicly
    accessible on port `3306`, a port that the MySQL service uses. Now we know the
    following about the target host:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，看起来实例实际上是在端口`3306`上公开访问的，这是MySQL服务使用的端口。现在我们知道目标主机的以下信息：
- en: MySQL is being used.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在使用MySQL。
- en: Port `3306` is open to the public.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口`3306`对公众开放。
- en: This information is extremely important because we know that the system is running
    on the default port for MySQL, and we know what database type is being used. Because
    it is using a default port, that could mean that fewer security controls have
    been put in place.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息非常重要，因为我们知道系统正在使用MySQL的默认端口，并且我们知道正在使用的数据库类型。由于它使用默认端口，这可能意味着安全控制措施较少。
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Changing ports to different services adds a bit of security through obscurity.
    However, it can be a sign that more security may be implemented on the target.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将端口更改为不同的服务可以通过混淆增加一些安全性。然而，这可能表明目标上可能实施了更多的安全性。
- en: Now, we can move on to taking a deeper look at getting access to the Aurora
    instance. This will call for some brute-forcing using a username and password
    list.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续深入研究如何访问Aurora实例。这将需要使用用户名和密码列表进行一些暴力破解。
- en: Enumerating the username and password
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举用户名和密码
- en: Now that we have some more information on what services are running, we need
    to go ahead and start attacking the services. For this next step in our white
    box pentest methodology, we will start looking to see whether we can find some
    weak passwords. If we discover usernames and passwords, we can get direct access
    to the target.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对正在运行的服务有了更多的信息，我们需要继续并开始攻击这些服务。在我们的白盒渗透测试方法论的下一步中，我们将开始寻找一些弱密码。如果我们发现了用户名和密码，我们就可以直接访问目标。
- en: 'A good and quick way to discover usernames and passwords is to try using default
    names against services and appliances. In our case, we know that MySQL uses a
    default username of `admin`. Since we know this, we are going to brute-force using
    the `admin` username and use a password list that can be found on GitHub by following
    these steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 发现用户名和密码的一个好而快速的方法是尝试使用默认名称来对服务和设备进行攻击。在我们的情况下，我们知道MySQL使用默认用户名`admin`。因为我们知道这一点，我们将使用`admin`用户名进行暴力破解，并使用可以在GitHub上找到的密码列表，方法如下：
- en: 'To get the password list, run the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取密码列表，请运行以下命令：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you open the file, you''ll notice that the list has both usernames and passwords
    – we only want the passwords. We can use the `awk` command to slice and print
    only the passwords and store them in a new file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打开文件，您会注意到列表中既有用户名又有密码 – 我们只需要密码。我们可以使用`awk`命令来切片和打印出密码，并将其存储在一个新文件中：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have our list of passwords generated, it''s time to take a look
    and see whether we can get the username and password to Aurora. We will use Metasploit
    to execute this. First, you''ll need to start up Metasploit:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经生成了密码列表，是时候来看一看是否可以获取到Aurora的用户名和密码了。我们将使用Metasploit来执行这个任务。首先，您需要启动Metasploit：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will load the `mysql` login scanner:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将加载`mysql`登录扫描器：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you have your module loaded, you''ll need to set a few parameters. Just
    as before in [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227), *Understanding
    Vulnerable RDS Services*, set the following parameters:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您加载了您的模块，您需要设置一些参数。就像在[*第5章*]（B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227）中一样，*了解易受攻击的RDS服务*，设置以下参数：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once you have all your parameters set, use the `run` command to execute the
    scan against the Aurora host:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您设置好所有参数，使用`run`命令来执行针对Aurora主机的扫描：
- en: '![Figure 6.7 – Brute-forcing for passwords'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 密码暴力破解'
- en: '](img/Figure_6.07_B15630.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.07_B15630.jpg)'
- en: Figure 6.7 – Brute-forcing for passwords
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 密码暴力破解
- en: 'We have successfully enumerated the username and password:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功枚举了用户名和密码：
- en: '`admin`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`'
- en: '`password`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`'
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using default passwords is extremely dangerous! Ensure default usernames and
    passwords are reported when discovered. Proper remediation is to change the password
    and username to something that falls within the guidelines of **strong** usernames
    and passwords.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认密码非常危险！确保在发现时报告默认用户名和密码。适当的纠正措施是将密码和用户名更改为符合**强**用户名和密码准则的内容。
- en: From here, we have the credentials that give us access and rights to everything.
    This would allow us to delete databases and tables, as well as add our own backdoors.
    It's extremely important to highlight the issues involved with weak credentials
    when they are discovered because as you can see, we were able to take over the
    database!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们有了可以让我们访问和拥有所有权限的凭据。这将允许我们删除数据库和表，以及添加我们自己的后门。强调发现弱凭据所涉及的问题非常重要，因为正如您所看到的，我们能够接管数据库！
- en: Now that we have a better understanding of how the backend works, let's take
    a look at how we can hack (ethically) the frontend by setting up our very own
    vulnerable website.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对后端的工作原理有了更好的理解，让我们来看看如何通过建立我们自己的易受攻击的网站来（合法地）攻击前端。
- en: Setting up a lab for SQLi
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为SQLi设置实验室
- en: The next exercise we are going to go over involves setting up an EC2 instance,
    installing a vulnerable web program, and installing the Docker service on your
    EC2 instance. Once everything is up and running, we'll start looking into some
    actual SQLi and testing vulnerable areas of the web application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要做的练习涉及设置一个EC2实例，安装一个易受攻击的Web程序，并在您的EC2实例上安装Docker服务。一旦一切就绪，我们将开始研究一些实际的SQLi，并测试Web应用程序的易受攻击区域。
- en: The vulnerable application we are installing, **Juice Shop**, is a very popular
    web application full of hacking challenges that range from different levels of
    difficulty – it even comes with a hacker dashboard that you can use to track your
    progress. To discover more about this application, OWASP has a page full of useful
    information about the project ([https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装的易受攻击的应用程序**Juice Shop**是一个非常受欢迎的Web应用程序，充满了不同难度级别的黑客挑战 – 它甚至配备了一个黑客仪表板，您可以用来跟踪您的进度。要了解更多关于这个应用程序的信息，OWASP有一个页面，上面有关于该项目的有用信息（[https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/)）。
- en: Important note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This exercise does not involve Aurora – it involves SQLi and pentesting parameters
    that you may see used with websites using Aurora. The purpose of the exercise
    is to get more familiar with SQLi and how dangerous it can be.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习不涉及Aurora – 它涉及SQLi和渗透测试参数，您可能会在使用Aurora的网站上看到。这个练习的目的是更加熟悉SQLi以及它的危险性。
- en: To begin, you will need to set up an EC2 instance. By now, you should be comfortable
    with setting up your instances; however, please reference [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025),
    *Building Your AWS Environment*, if you need a refresher!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要设置一个EC2实例。到目前为止，您应该已经熟悉了如何设置实例；但是，如果您需要复习，请参考[*第1章*]（B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025），*构建您的AWS环境*！
- en: 'Once you''re on the EC2 dashboard, please take the following steps to get your
    instance up and running:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在EC2仪表板上，请按照以下步骤启动和运行您的实例：
- en: Click **Launch Instance**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**启动实例**。
- en: Select an **Amazon Machine Image** (**AMI**). The AMI we are using is **Amazon
    ECS-Optimized Amazon Linux 2 AMI**:![Figure 6.8 – Selecting the correct image
    for the SQLi lab
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个**Amazon机器映像**（**AMI**）。我们使用的AMI是**Amazon ECS-优化的Amazon Linux 2 AMI**：![图6.8-选择SQLi实验的正确镜像
- en: '](img/Figure_6.08_B15630.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.08_B15630.jpg)'
- en: Figure 6.8 – Selecting the correct image for the SQLi lab
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8-选择SQLi实验的正确镜像
- en: 'Configure **Instance Details**, unfold **Advanced Details**, and copy the following
    script into **User Data**:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**实例详细信息**，展开**高级详细信息**，并将以下脚本复制到**用户数据**中：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you get to the security groups, ensure that port `80` is open to all for
    both incoming and outgoing traffic.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您到达安全组时，请确保端口`80`对所有传入和传出流量都是开放的。
- en: Launch your instance.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的实例。
- en: Open a browser and search for the public DNS name of your EC2 instance. The
    easiest way to do that is to right-click on the instance and select `.sh` script
    that contains the script in *step 3*.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，搜索您的EC2实例的公共DNS名称。这样做的最简单方法是右键单击实例，然后选择包含*步骤3*中脚本的`.sh`脚本。
- en: 'You may not be able to connect over HTTP. A common issue is misconfiguring
    security groups while setting up EC2\. If you cannot connect over HTTP, ensure
    that your security group allows you to connect. Refer to the following screenshot
    and ensure that your security groups are set up correctly:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能无法通过HTTP连接。常见问题是在设置EC2时错误配置安全组。如果无法通过HTTP连接，请确保您的安全组允许连接。请参考以下截图，并确保您的安全组设置正确：
- en: '![Figure 6.9 – Security group dashboard'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9-安全组仪表板'
- en: '](img/Figure_6.09_B15630.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.09_B15630.jpg)'
- en: Figure 6.9 – Security group dashboard
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9-安全组仪表板
- en: 'Once you''re finished setting up, you should see the main dashboard for Juice
    Shop once you connect to your public DNS in your web browser. To view the application,
    put the public DNS name for the EC2 instance into your browser and hit *Enter*:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，连接到您的网络浏览器中的公共DNS，您应该看到果汁店的主仪表板。要查看应用程序，请将EC2实例的公共DNS名称放入浏览器中，然后点击*Enter*：
- en: '![Figure 6.10 – The Juice Shop dashboard'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10-果汁店仪表板'
- en: '](img/Figure_6.10_B15630.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.10_B15630.jpg)'
- en: Figure 6.10 – The Juice Shop dashboard
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10-果汁店仪表板
- en: Great job, we have successfully stood up our own vulnerable lab in AWS. Before
    we get moving further, let's take a look at some quick clean-up items we can do
    before we start pentesting.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好，我们已经成功在AWS中建立了我们自己的易受攻击的实验室。在我们继续之前，让我们看看在我们开始渗透测试之前可以做的一些快速清理工作。
- en: Configuring Juice Shop autostart
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置果汁店自动启动
- en: Before we continue, we want to do a quick **housekeeping** step that will automate
    starting Juice Shop for us anytime our EC2 instance is started up. Having to manually
    start up the service every time we bring the instance up can be a pain, and this
    helps preserve some of our time so that we don't always have to start up the service
    manually whenever we bring the instance online.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们想做一个快速的**清理**步骤，这将自动为我们启动果汁店，每当我们的EC2实例启动时。每次启动实例时手动启动服务可能会很麻烦，这有助于节省我们的一些时间，这样我们就不必总是手动启动服务每当我们上线实例时。
- en: 'Let''s break it down into the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其分解为以下步骤：
- en: 'You''ll need to make a one-liner script that will initiate on startup. There
    are two different ways we can do this. First, navigate to the `init.d` directory:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要制作一个一行脚本，可以在启动时启动。我们可以通过两种不同的方式来做到这一点。首先，转到`init.d`目录：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you''re in the directory, make a script that `init` can call at startup.
    In this case, we will call it `juiceShop.sh`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您进入目录，制作一个脚本，`init`可以在启动时调用。在这种情况下，我们将称之为`juiceShop.sh`：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Place the following script in the file and save it:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本放入文件中并保存：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another method is by adding it to the instances'' **cron jobs**. A cron job
    is a time-based job that users can schedule on Unix operating systems. The **job**
    is a task set to run at whatever interval the user sets. In our case, we want
    Juice Shop to run when the instance is started up. To do this, type the following
    command in your EC2 terminal:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将其添加到实例的**cron作业**中。cron作业是用户可以在Unix操作系统上安排的基于时间的作业。**作业**是用户设置为以任何间隔运行的任务。在我们的情况下，我们希望果汁店在实例启动时运行。要做到这一点，请在您的EC2终端中键入以下命令：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we have an instance with a working version of Juice Shop to start testing
    SQLi! Before moving forward, ensure that your instance automatically starts Juice
    Shop on startup by restarting the instance.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个带有可用版本的果汁店的实例，可以开始测试SQLi！在继续之前，请确保您的实例在启动时自动启动果汁店，方法是重新启动实例。
- en: Now, let's start to perform SQLi and pentest our vulnerable instance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始执行SQLi并对我们的易受攻击实例进行渗透测试。
- en: Fun with SQLi
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLi的乐趣
- en: Now that we have everything set up, let's move forward and do some pentesting
    on the vulnerable web application, Juice Shop. If you need a refresher on what
    SQLi is and how it works, please review [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227),
    *Understanding Vulnerable RDS Services*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，让我们继续对易受攻击的Web应用程序果汁店进行一些渗透测试。如果您需要了解SQLi是什么以及它是如何工作的，请查看[*第5章*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227)，*了解易受攻击的RDS服务*。
- en: 'Before we can begin, we need to make sure of a couple of things:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要确保一些事情：
- en: Our EC2 instance with Juice Shop is started and accessible via a web browser.
    This will ensure that we can access it for the following exercises.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的带有果汁店的EC2实例已经启动，并且可以通过Web浏览器访问。这将确保我们可以在接下来的练习中访问它。
- en: Our *local* Kali Linux virtual machine is started up in a virtual box.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的*本地* Kali Linux虚拟机在虚拟盒中启动。
- en: Once you have completed both of those steps, proceed to the public DNS of your
    Juice Shop EC2 instance. Next, let's move to the *scoreboard* to see what challenges
    are on the web application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这两个步骤后，继续前往果汁店EC2实例的公共DNS。接下来，让我们转到*记分牌*，看看Web应用程序上有哪些挑战。
- en: 'Move to the directory in your web browser: http://<<public dns>>/#/score-board/:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中转到目录：http://<<public dns>>/#/score-board/：
- en: '![Figure 6.11 – The Juice Shop scoreboard'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11-果汁店记分牌'
- en: '](img/Figure_6.11_B15630.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.11_B15630.jpg)'
- en: Figure 6.11 – The Juice Shop scoreboard
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 - Juice Shop记分牌
- en: Important note
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Finding `/score-board` is a challenge within the web application. If you would
    like to try various ways to find it, I recommend using a directory search tool,
    such as `gobuster`, `dirb`, or `dirbuster`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中找到`/score-board`是一个挑战。如果您想尝试各种方法来找到它，我建议使用目录搜索工具，如`gobuster`，`dirb`或`dirbuster`。
- en: 'As you can see, we have quite a few challenges to select from. We are only
    going to focus on the injection challenges; however, feel free to look at the
    other challenges too. Since we only want to do the injection tasks, click **Hide
    all** to remove all the tasks – this should make all the challenges disappear.
    Once all the tasks are gone, click **Injection** – this will make all the injection
    challenges appear:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有很多挑战可供选择。我们只会专注于注入挑战；但是，也可以随意查看其他挑战。由于我们只想执行注入任务，因此单击**隐藏所有**以删除所有任务
    - 这应该会使所有挑战消失。一旦所有任务都消失了，单击**注入** - 这将使所有注入挑战出现：
- en: '![Figure 6.12 – The Juice Shop scoreboard with injection only'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.12 - 仅带注入的Juice Shop记分牌'
- en: '](img/Figure_6.12_B15630.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.12_B15630.jpg)'
- en: Figure 6.12 – The Juice Shop scoreboard with injection only
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 - 仅带注入的Juice Shop记分牌
- en: As you can see, we have an extensive list of challenges to choose from. Each
    challenge has a number of stars next to it – these stars indicate the difficulty
    that each challenge is. The more stars, the more difficult a challenge is. Let's
    use each of these challenges as a task that we would get on an actual pentest.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有一个广泛的挑战列表可供选择。每个挑战旁边都有一些星星 - 这些星星表示每个挑战的难度。星星越多，挑战就越困难。让我们将每个挑战都作为我们在实际渗透测试中会遇到的任务。
- en: Our first challenge will be bypassing the admin login prompt and getting admin
    access to the web app.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个挑战将是绕过管理员登录提示并获得对Web应用程序的管理员访问权限。
- en: Bypassing the admin login
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过管理员登录
- en: Alright, let's begin with a simple challenge that is quite often an actual "in-scope"
    task during a pentest. An in-scope task is something that is allowed (in-scope)
    and is required during the pentest (task). This means that a client will want
    you to give feedback on a specific task, such as the outcome, manual assessment,
    and areas of concern. In our case, we would need to give feedback on the web application
    and how we tested it, as well as how it can be remediated.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们从一个简单的挑战开始，这在渗透测试中通常是一个实际的“在范围内”任务。在范围内的任务是允许的（在范围内）并且在渗透测试期间是必需的（任务）。这意味着客户希望您就特定任务（如结果、手动评估和关注的领域）提供反馈。在我们的情况下，我们需要就Web应用程序以及我们如何测试它以及如何进行修复提供反馈。
- en: So, let's assume Juice Shop brought up a new store that runs within AWS. They
    want us to test the functionality of the login page and see whether it is vulnerable
    to any injection. Doing so helps give Juice Shop an idea of how secure their web
    application is and what they need to fix. This is a proactive approach because
    they want us to assess for security, not compliance.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们假设Juice Shop开设了一个在AWS内运行的新商店。他们希望我们测试登录页面的功能，并查看它是否容易受到任何注入的攻击。这样做有助于让Juice
    Shop了解他们的Web应用程序有多安全，以及他们需要修复什么。这是一种积极的方法，因为他们希望我们评估安全性，而不是合规性。
- en: Important note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Testing for compliance does not mean that you are testing for security. Testing
    for compliance entails following a checklist of items to test what may or may
    not be "secure" in the grand scheme of things.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 测试合规性并不意味着您正在测试安全性。测试合规性意味着遵循一份检查清单，以测试在整体方案中可能或可能不是“安全”的项目。
- en: Let's get started with pentesting!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始渗透测试吧！
- en: 'To start off, we need to go to the login page. The login page can be found
    at the following:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要进入登录页面。登录页面可以在以下位置找到：
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will see the following screen:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下屏幕：
- en: '![Figure 6.13 – Login page for Juice Shop'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13 - Juice Shop的登录页面'
- en: '](img/Figure_6.13_B15630.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.13_B15630.jpg)'
- en: Figure 6.13 – Login page for Juice Shop
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 - Juice Shop的登录页面
- en: Great, now we have the login page.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们有了登录页面。
- en: 'Next, let''s test with some odd parameters to see whether the login page handles
    input correctly or not. To test the login input functionality, put `''` into the
    username field. The password can be anything you want it to be:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们测试一些奇怪的参数，看看登录页面是否正确处理输入。为了测试登录输入功能，请在用户名字段中输入`'`。密码可以是任何您想要的东西：
- en: '![Figure 6.14 – Checking for an error'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14 - 检查错误'
- en: '](img/Figure_6.14_B15630.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.14_B15630.jpg)'
- en: Figure 6.14 – Checking for an error
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 - 检查错误
- en: Then, we get an error, as follows.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们得到了一个错误，如下所示。
- en: '![Figure 6.15 – Error from input'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15 - 输入错误'
- en: '](img/Figure_6.15_B15630.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.15_B15630.jpg)'
- en: Figure 6.15 – Error from input
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 - 输入错误
- en: You can see that it gives us an error stating an object. This is telling us
    that it isn't handling input validation – however, it isn't really telling us
    what type of syntax error it is. From here, we need to make some educated guesses
    on what type of syntax we need to use to execute injection.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到它给了我们一个关于对象的错误。这告诉我们它没有处理输入验证 - 但它并没有真正告诉我们它是什么类型的语法错误。从这里开始，我们需要对我们需要使用的语法类型进行一些猜测来执行注入。
- en: 'We are going to try and use a simple `TRUE` statement that may allow us administrator
    access to the website. Just as before, the password, in this case, doesn''t matter.
    What we are focusing on is the input of the email field. In the email field, input
    the following true statement: `''OR ''1''=''1''--`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试使用一个简单的`TRUE`语句，这可能会让我们以管理员身份访问网站。就像以前一样，在这种情况下，密码并不重要。我们关注的是电子邮件字段的输入。在电子邮件字段中，输入以下真实语句：`'OR
    '1'='1'--`：
- en: '![Figure 6.16 – Testing SQLi'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.16 - 测试SQLi'
- en: '](img/Figure_6.16_B15630.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.16_B15630.jpg)'
- en: Figure 6.16 – Testing SQLi
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 - 测试SQLi
- en: As you can see in the previous screenshot, we have administrator access! That's
    because the input fields do not sanitize input and will execute any input as long
    as the statement is true. In our case, `1=1` is true, so the command was processed.
    Again, if you need a refresher on SQLi, go back to [*Chapter 5*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227),
    *Understanding Vulnerable RDS Services*, for a refresher.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，您可以看到我们有管理员访问权限！这是因为输入字段不会对输入进行消毒，并且只要语句为真，就会执行任何输入。在我们的情况下，`1=1`为真，因此命令被处理。如果您需要回顾SQLi，请返回[*第5章*](B15630_05_Final_ASB_ePub.xhtml#_idTextAnchor227)，*了解易受攻击的RDS服务*，进行复习。
- en: Now that we see we can log in as an admin, let's see how this affects a non-admin
    user. Next, we will see what type of users we can log in as.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们看到我们可以作为管理员登录，让我们看看这对非管理员用户有何影响。接下来，我们将看到我们可以以何种类型的用户身份登录。
- en: Logging in as another user
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以另一个用户身份登录
- en: Now that we have administrator access, let's see whether we can pivot and log
    in as another user. Being able to show internal movement after post-compromise
    is essential to pentesting and reports. If you're able to pivot throughout the
    network and take ownership of other accounts unnoticed, this tells clients how
    good their detection processes are.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经获得了管理员访问权限，让我们看看是否可以转变并以其他用户身份登录。在后期妥协后能够展示内部移动对于渗透测试和报告至关重要。如果您能够在网络中进行转变并在不被注意的情况下占有其他帐户，这将告诉客户他们的检测流程有多好。
- en: Important note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Reporting a lack of detection and alerts is a large part of pentesting. If targets
    don't flag you and send out an alert, then that means they wouldn't see an attacker
    inside their network.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 报告缺乏检测和警报是渗透测试的重要部分。如果目标没有标记您并发送警报，那么这意味着他们不会看到网络内部的攻击者。
- en: 'There is a user named `bender` that may have valuable information on their
    account. For intensive purposes, we will see that we were assigned to find a user
    and found him during recon, using a tool such as `theHarvester`. It''s been requested
    that we see whether we can get a hold of this account. To test for this, we will
    first need to see what the nomenclature is for emails on Juice Shop:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`bender`的用户可能在其帐户上有有价值的信息。出于密集的目的，我们将看到我们被指定找到一个用户，并在侦察期间找到了他，使用诸如`theHarvester`之类的工具。有人要求我们看看是否能够控制这个帐户。为了测试这一点，我们首先需要看看Juice
    Shop的电子邮件命名规则是什么：
- en: '![Figure 6.17 – Getting the email scheme'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.17 – 获取电子邮件方案'
- en: '](img/Figure_6.17_B15630.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.17_B15630.jpg)'
- en: Figure 6.17 – Getting the email scheme
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 获取电子邮件方案
- en: 'After successful recon, we see that the email address domain is `@juice-sh.op`.
    Now, we can move forward back to the login page and test using the same method
    as before:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的侦察后，我们看到电子邮件地址域为`@juice-sh.op`。现在，我们可以回到登录页面，并使用与之前相同的方法进行测试：
- en: '![Figure 6.18 – Testing SQLi with benders account'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.18 – 使用benders帐户测试SQLi'
- en: '](img/Figure_6.18_B15630.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.18_B15630.jpg)'
- en: Figure 6.18 – Testing SQLi with benders account
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 使用benders帐户测试SQLi
- en: 'You''ll be prompted with a banner like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似于这样的横幅：
- en: '*You successfully solved the challenge: Login Bender*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*您成功解决了挑战：登录Bender*'
- en: We have now successfully completed the task assigned to us and will be able
    to deliver a report on how we were able to successfully obtain both the administrator
    account and the `bender` user's account.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功完成分配给我们的任务，并将能够提交关于我们如何成功获取管理员帐户和`bender`用户帐户的报告。
- en: Now that we have performed some SQLi and executed it, let's start understanding
    how we can prevent it and how we would tell clients and businesses how they can
    help mitigate any potential issues within their organization.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经执行了一些SQLi并执行了它，让我们开始了解如何防止它以及我们如何告诉客户和企业他们如何帮助减轻其组织内的潜在问题。
- en: Preventing SQLi
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止SQLi
- en: Let's have a quick discussion based on how we can prevent SQLi. As we saw before,
    SQLi can be a simple tactic that can give attackers the *keys to the kingdom*
    if not mitigated correctly. Now that we have done this first-hand, let's take
    a look at a way to prevent it!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们就如何防止SQLi进行快速讨论。正如我们之前所看到的，如果没有正确地减轻，SQLi可能是一种简单的策略，可以给攻击者带来*王国的钥匙*。既然我们已经亲身经历了这一点，让我们看看如何防止它！
- en: 'When assessing Juice Shop, we were able to exploit the application by putting
    true statements into the **Email** field. SQLi was successful due to the input
    field in the **Email** section not being **parameterized**. The next examples
    illustrate bad querying and good querying statements. These statements are within
    the actual database:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估Juice Shop时，我们能够通过在**电子邮件**字段中输入真实语句来利用该应用程序。由于**电子邮件**部分的输入字段未被**参数化**，SQLi是成功的。下面的示例说明了糟糕的查询和良好的查询语句。这些语句在实际数据库中：
- en: '[PRE12]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Both of these queries would be executed; however, only the **second** query
    uses just the email query, as opposed to the first query, which looks at the whole
    parameter that is being passed and interprets the command as a whole SQL query.
    This is how we were able to get a hold of the administrator account on Juice Shop.
    Instead of the whole string being processed, a statement is constructed using
    the SQL statement, plus the email.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '这两个查询都将被执行；但是，**第二个**查询只使用了电子邮件查询，而不是第一个查询，它查看了正在传递的整个参数，并将命令解释为整个SQL查询。这就是我们能够控制Juice
    Shop管理员帐户的方式。与其处理整个字符串，不如使用SQL语句加上电子邮件构造语句。 '
- en: 'Now that we have taken a look at how SQLi works and a way to mitigate it, let''s
    take a look at how we can mitigate one of the most dangerous attacks that can
    happen to your AWS enterprise: **DoS**!'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了SQLi的工作原理和减轻方法，让我们看看如何减轻可能发生在您的AWS企业中的最危险的攻击之一：**DoS**！
- en: Avoiding DoS
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免DoS
- en: '**DoS** is a serious web application vulnerability that has the ability to
    disrupt the availability of services and applications. The goal of DoS is to shut
    down the target network, service, or application and make it inaccessible to users
    and administrators – however, ultimately, users are the primary target audience.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**DoS**是一个严重的网络应用程序漏洞，它有能力破坏服务和应用程序的可用性。DoS的目标是关闭目标网络、服务或应用程序，并使其对用户和管理员不可访问
    - 然而，最终，用户是主要的目标受众。'
- en: A much more sophisticated and disruptive version of a DoS attack is **DDoS**
    attack – using multiple attacker machines to attack a target host. DDoS attacks
    are often highly skilled and planned attacks that use botnets to unleash large
    volumes of unwanted traffic towards a target.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更复杂和破坏性更强的DoS攻击版本是**DDoS**攻击 - 使用多个攻击者机器攻击目标主机。DDoS攻击通常是高技能和计划周密的攻击，利用僵尸网络向目标释放大量不需要的流量。
- en: Important note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A botnet is a large cluster of compromised machines used to carry out malicious
    attacks unknown to the owners of those machines.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 僵尸网络是一大批被攻击者控制的受损计算机，用于进行对计算机所有者不知情的恶意攻击。
- en: 'DDoS attacks have two very distinct classifications:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS攻击有两个非常明显的分类：
- en: Infrastructure-layer attacks
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施层攻击
- en: Application-layer attacks
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用层攻击
- en: Let's take a quick look at what both of these classifications detail. While
    we won't be able to actually DoS anything in AWS, it's still good to take a dive
    into the classifications and look at how we can minimize the chances of an AWS
    environment becoming a victim to DoS or DDoS.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这两个分类的细节。虽然我们在AWS中无法实际进行DoS攻击，但了解这些分类并看看如何最大程度地减少AWS环境成为DoS或DDoS受害者的机会仍然是很好的。
- en: Infrastructure-layer attacks
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施层攻击
- en: Attacks at this layer are typically attacks such as SYN floods and other attacks
    that exhaust resources on the victim host. They work by sending an overwhelming
    amount of traffic at a target, rendering it unavailable. These types of attacks
    typically aren't used during a pentest, since if successful, they would completely
    shut a client's infrastructure down. However, it is still good practice to look
    for indicators that may indicate that a client's infrastructure is not prepared
    to handle a DoS attack, such as a lack of detected malformed packets from multiple
    hosts or not detecting certain signatures used by DDoS attacks.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层的攻击通常是SYN洪水等攻击，以及耗尽受害主机资源的其他攻击。它们通过向目标发送大量的流量来使其不可用。这些类型的攻击通常不会在渗透测试期间使用，因为如果成功，它们将完全关闭客户的基础设施。然而，查找可能表明客户基础设施没有准备好处理DoS攻击的指标仍然是一个好的做法，比如没有检测到来自多个主机的格式错误数据包，或者没有检测到DDoS攻击使用的某些特定签名。
- en: Application-layer attacks
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用层攻击
- en: This type of attack is a less common attack vector that you will see; however,
    it is something you may actually do during a pentest. Attacks at the application
    layer involve looking at an application, rather than a whole company, and look
    to "break" the application if possible. In pentesting, a DoS attack on an application
    could be fuzzing the application until the application errors out and is not able
    to function anymore. This is an extremely common technique in **buffer overflows**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的攻击是您可能会看到的较少的攻击向量；然而，在渗透测试中，这是您可能真正要做的事情。应用层的攻击涉及查看一个应用程序，而不是整个公司，并且试图在可能的情况下“破坏”应用程序。在渗透测试中，对应用程序进行DoS攻击可能是对应用程序进行模糊测试，直到应用程序出错并且无法再运行。这在**缓冲区溢出**中是一种极为常见的技术。
- en: While we won't dive into buffer overflows in this book, I highly encourage you
    to look at some beginner-friendly exercises that will help you get familiar with
    the concept ([https://github.com/stephenbradshaw/vulnserver](https://github.com/stephenbradshaw/vulnserver)).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会在本书中深入研究缓冲区溢出，但我强烈建议您查看一些适合初学者的练习，这些练习将帮助您熟悉这个概念（[https://github.com/stephenbradshaw/vulnserver](https://github.com/stephenbradshaw/vulnserver)）。
- en: Protection against DDoS in AWS
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在AWS中防范DDoS攻击
- en: Now that we understand the issues that DDoS can bring to a business, it's crucial
    that we understand a few concepts of how we can protect against a disruption-style
    attack. It's important to ensure that you have safeguards around your infrastructure
    that don't allow unsolicited traffic, and that rules are in place that only allow
    needed traffic. Your client business will need to understand what normal traffic
    is and what isn't normal traffic.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了DDoS可能给企业带来的问题，至关重要的是我们了解一些如何保护免受破坏式攻击的概念。确保您的基础设施周围有防范不受欢迎的流量的保护措施，并且有规则限制只允许必要的流量是很重要的。您的客户业务需要了解什么是正常流量，什么不是正常流量。
- en: Backups and scaling are vital to ensure you are being protected from DDoS. If
    proper scaling has been implemented, another system can pick up the slack if another
    system goes down due to an error or an attack. AWS has an application called **AWS
    Shield** – a fantastic DDoS-managing application ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 备份和扩展对于确保您免受DDoS攻击的保护至关重要。如果已经实施了适当的扩展，另一个系统可以在另一个系统由于错误或攻击而崩溃时接管工作。AWS有一个名为**AWS
    Shield**的应用程序 - 一个出色的DDoS管理应用程序（[https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)）。
- en: Using **web application firewalls** (**WAFs**) is a great way to protect any
    public web-facing applications you have, especially if they are used for employees
    and customers. AWS WAF provides customizable web security that allows administrators
    to identify and remove targets before they even hit the web application.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Web应用程序防火墙**（**WAFs**）是保护您拥有的任何公共面向Web的应用程序的绝佳方式，特别是如果它们用于员工和客户。AWS WAF提供可定制的Web安全，允许管理员在它们甚至到达Web应用程序之前识别和消除目标。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about Aurora and its uses within AWS. We set up
    our own Aurora instance and learned how to look for misconfigurations by using
    common pentesting techniques. Moving on, we learned how to set up a SQLi lab in
    an EC2 instance and practiced some common injection methods that you would see
    in a real-life pentest. We finished up the chapter by talking about DoS attacks
    and their impact on businesses.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于Aurora及其在AWS中的用途。我们设置了自己的Aurora实例，并学习了如何使用常见的渗透测试技术来寻找配置错误。接下来，我们学习了如何在EC2实例中设置SQLi实验室，并练习了一些在实际渗透测试中会遇到的常见注入方法。最后，我们讨论了DoS攻击及其对业务的影响。
- en: Now that you have completed this chapter, you're able to set up your own labs
    within AWS that allow you to test SQLi attacks in a safe and authorized environment,
    as well as understand the basics of pentesting Amazon Aurora.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章，您可以在AWS中设置自己的实验室，以便在安全和授权的环境中测试SQLi攻击，并了解渗透测试Amazon Aurora的基础知识。
- en: In the next chapter, we are going to take a look at Lambda services and learning
    how to look for misconfigurations within Lambda.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Lambda服务，并学习如何在Lambda中寻找配置错误。
- en: Further reading
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Queries with Aurora: [https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Aurora查询：[https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html)
- en: 'Setting up WordPress in AWS: [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/php-hawordpress-tutorial.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/php-hawordpress-tutorial.html)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS中设置WordPress：[https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/php-hawordpress-tutorial.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/php-hawordpress-tutorial.html)
