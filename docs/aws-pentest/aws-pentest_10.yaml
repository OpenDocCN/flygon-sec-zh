- en: '*Chapter 8*: Assessing AWS API Gateway'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：评估AWS API Gateway'
- en: AWS API Gateway acts as a gateway to applications that can host various types
    of data. The data they host varies; however, what does not is the fact the some
    of the data may be considered attractive to unauthorized personnel – such as the
    locations of S3 buckets or an overly permissive header. This chapter will discuss
    what AWS API Gateway is, and how you can learn to inspect API calls and manipulate
    API calls with open source tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API Gateway充当了可以托管各种类型数据的应用程序的门户。它们托管的数据各不相同；然而，有一点是一样的，即一些数据可能被未经授权的人员视为有吸引力
    - 例如S3存储桶的位置或过于宽松的标头。本章将讨论AWS API Gateway是什么，以及您如何学习使用开源工具检查API调用和操纵API调用。
- en: Understanding how AWS APIs work will allow us to grow our mindset outside of
    the Linux Terminal and into the browser and understand the basics of web services
    and how to interact with them. While going through this chapter, remember that
    quite a few of the techniques in it can also assess all web applications within
    AWS. This chapter aims to have you obtain a thorough understanding of AWS APIs
    and how to evaluate web applications by manipulating API calls.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解AWS API的工作原理将使我们的思维模式从Linux终端扩展到浏览器，并了解Web服务的基础知识以及如何与其交互。在阅读本章的过程中，请记住，其中的许多技术也可以评估AWS中的所有Web应用程序。本章旨在让您全面了解AWS
    API以及如何通过操纵API调用来评估Web应用程序。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring and configuring AWS APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索和配置AWS API
- en: Creating our first API with AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS创建我们的第一个API
- en: Getting started with Burp Suite
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Suite入门
- en: Inspecting traffic with Burp Suite
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Suite检查流量
- en: Manipulating API calls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵API调用
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Burp Suite: [https://portswigger.net/burp/communitydownload](https://portswigger.net/burp/communitydownload)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Burp Suite: [https://portswigger.net/burp/communitydownload](https://portswigger.net/burp/communitydownload)'
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kPr2sb](https://bit.ly/3kPr2sb)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[https://bit.ly/3kPr2sb](https://bit.ly/3kPr2sb)
- en: Exploring and configuring AWS APIs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索和配置AWS API
- en: Have you ever wondered how information goes from your computer to a website
    or the backend server of that website? Well, typically, your request is sent from
    your browser and then goes through something called an **application programming
    interface** (**API**). An API is an interface implemented to allow other applications
    or hosts to interact with one central point. In this case, the API is the central
    point and the applications will be services that we interact with within AWS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾经想过信息是如何从您的计算机发送到网站或该网站的后端服务器的？通常情况下，您的请求是从浏览器发送的，然后通过称为**应用程序编程接口**（**API**）的东西进行。API是一个接口，用于允许其他应用程序或主机与一个中心点进行交互。在这种情况下，API是中心点，而应用程序将是我们在AWS中与之交互的服务。
- en: So, what does this mean with AWS and how are we going to be using it through
    this book? Well, first we need to understand the basic terms of what an Amazon
    API is and how the Amazon API gateway manages services. We will get an understanding
    of this by looking at some high-level views of APIs in an AWS environment, and
    then later learn how to intercept and manipulate an API request the same way we
    would in a real-life pentest.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这对于AWS意味着什么，我们将如何通过本书来使用它？首先，我们需要了解亚马逊API的基本术语以及亚马逊API网关如何管理服务。我们将通过查看AWS环境中API的高级视图来了解这一点，然后学习如何拦截和操纵API请求，就像在现实的渗透测试中一样。
- en: AWS API Gateway is a managed service that gives a **front door** that allows
    you to access applications and access data on various AWS services. The gateway
    handles all the tasks that involve accepting and processing requests to and from
    the API. APIs also play a crucial role in authentication and authorization control,
    which play a crucial role in security. If someone were able to bypass authentication
    and authorization mechanisms, they would be able to get direct access to the service
    or resource that is being targeted.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API Gateway是一个托管服务，提供了一个**前门**，允许您访问各种AWS服务上的应用程序和数据。网关处理涉及接受和处理API请求的所有任务。API还在身份验证和授权控制中发挥关键作用，这在安全方面起着至关重要的作用。如果有人能够绕过身份验证和授权机制，他们将能够直接访问被攻击的服务或资源。
- en: Before we start looking at high-level maps of APIs and how they work with our
    AWS environments, we need to understand the two API types that are mentioned by
    AWS. The two APIs that we will discuss are **RESTful APIs** and **WebSocket APIs**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看API的高级地图以及它们如何与我们的AWS环境配合工作之前，我们需要了解AWS提到的两种API类型。我们将讨论的两种API是**RESTful
    APIs**和**WebSocket APIs**。
- en: RESTful APIs
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful APIs
- en: REST is actually an acronym for **REpresentational State Transfer**. RESTful
    API design enables us to make what is called a stateless call or stateless request.
    This stateless request allows calls to be redeployed if something fails, and can
    also scale when needed. This function makes RESTful APIs reasonably sought after
    in cloud applications, such as AWS, because the scaling of the stateless API can
    easily integrate with agile scaling cloud environments. Due to their agile nature,
    RESTful APIs can make calls and changes based on traffic load fairly quickly without
    becoming overwhelmed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: REST实际上是**REpresentational State Transfer**的首字母缩写。RESTful API设计使我们能够进行所谓的无状态调用或无状态请求。这种无状态请求允许在发生故障时重新部署调用，并且在需要时也可以进行扩展。这个功能使得RESTful
    API在云应用中相当受欢迎，比如AWS，因为无状态API的扩展可以很容易地与敏捷扩展的云环境集成。由于它们的敏捷性，RESTful API可以根据流量负载快速进行调用和更改，而不会变得不堪重负。
- en: Important note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'There is quite a bit of information about APIs that goes way above the material
    in this book. If you want to learn more about RESTful APIs, check out the AWS
    documentation here: [https://docs.aws.amazon.com/apigateway/api-reference/](https://docs.aws.amazon.com/apigateway/api-reference/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关于API的信息远远超出了本书中的材料。如果您想了解更多关于RESTful API的信息，请查看AWS文档：[https://docs.aws.amazon.com/apigateway/api-reference/](https://docs.aws.amazon.com/apigateway/api-reference/)。
- en: 'Now that we understand a little more about RESTful APIs, let''s briefly mention
    the other type of API: WebSocket APIs.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对RESTful API有了更多的了解，让我们简要提一下另一种类型的API：WebSocket API。
- en: WebSocket APIs
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebSocket API
- en: The WebSocket API gateway is a collection of various routes integrated with
    various services such as Lambda functions and HTTP endpoints. WebSocket APIs are
    bidirectional and ensure that an end client can send traffic to and from services
    and that services can also send communication back to the client.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket API网关是集成了各种路由和各种服务（如Lambda函数和HTTP端点）的集合。WebSocket API是双向的，并确保终端客户端可以将流量发送到服务并从服务发送通信回客户端。
- en: Important note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Bidirectional essentially means traffic can function in two different directions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 双向基本上意味着流量可以在两个不同的方向上运行。
- en: Due to their versatility and bidirectional functionality, WebSocket APIs are
    commonly used in applications that run real-time streaming channels, such as games,
    financial trading platforms used on Wall Street, and chat applications – some
    of which you may use to talk with your friends and family!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们的多功能性和双向功能，WebSocket API通常用于运行实时流媒体频道的应用程序，例如游戏、华尔街使用的金融交易平台和聊天应用程序 - 其中一些您可能用来与朋友和家人交谈！
- en: Now that we have been briefed on what APIs are and how they work, I want us
    to start moving more toward applying some hands-on practical knowledge to help
    bring everything full circle. However, before we do that, let's take a quick look
    at a high-level overview of how an API will work in AWS and interact with a service
    such as Lambda in a **virtual private cloud** (**VPC**) and also an EC2 instance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了API是什么以及它们是如何工作的，我希望我们开始更多地应用一些实际的知识来帮助将所有内容完整地连接起来。然而，在我们开始之前，让我们快速地看一下API在AWS中如何工作，并与虚拟私有云（VPC）和EC2实例进行交互的高级概述。
- en: An overview of API maps
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API地图概述
- en: This section will briefly illustrate a high-level view of how APIs can work
    with a Lambda function within a VPC and an EC2 instance. The advantage of running
    an API and integrating it with various services is that you can scale multiple
    services through a web traffic portal, in this case, the API, and log everything
    centrally from the API. As mentioned, APIs allow scaling to occur quickly and
    efficiently – so having them as the main portal to access multiple services will
    enable you to build more services that are queried from one central API.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将简要说明API如何与VPC中的Lambda函数和EC2实例配合工作的高级视图。运行API并将其与各种服务集成的优势在于可以通过Web流量门户（在本例中为API）扩展多个服务，并从API中集中记录所有内容。正如前面提到的，API允许快速高效地进行扩展
    - 因此将它们作为访问多个服务的主要门户将使您能够构建更多从一个中央API查询的服务。
- en: Now let's take a look at a simple solution for creating an API that allows you
    to access a Lambda function and an EC2 instance. For this example, we are not
    worried about what the services are doing. We are more concerned with understanding
    how traffic flows from the Amazon API gateway to the services, and back from the
    services to the API.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个简单的解决方案，创建一个允许您访问Lambda函数和EC2实例的API。在这个例子中，我们不担心服务在做什么。我们更关心的是理解流量如何从Amazon
    API网关流向服务，以及从服务返回到API。
- en: 'Look at the following illustration to help you understand the API process with
    AWS services:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下插图，以帮助您了解与AWS服务一起使用API的过程：
- en: '![Figure 8.1 – AWS API Gateway diagram'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 - AWS API网关图'
- en: '](img/Figure_8.01_B15630.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.01_B15630.jpg)'
- en: Figure 8.1 – AWS API Gateway diagram
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 - AWS API网关图
- en: Looking at the diagram, we can see that the **External User** is attempting
    to access services through the API. Remember that the API uses web request calls
    to post and retrieve information. The **Amazon API Gateway** makes a call to the
    **Lambda function** or the **EC2 instance** based on what the user is requesting.
    The service then sends data back to the external user. This completes the traffic
    flow between the user and the services.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从图表中可以看出，外部用户正在尝试通过API访问服务。请记住，API使用Web请求调用来发布和检索信息。 **Amazon API Gateway**
    根据用户的请求向 **Lambda函数** 或 **EC2实例** 发出调用。然后服务将数据发送回外部用户。这完成了用户和服务之间的流量流动。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We will learn more about web requests later in this chapter when manipulating
    calls on APIs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面的部分中，我们将更多地了解Web请求在操作API调用时的情况。
- en: Now that we have a good understanding of what an API is and how it works with
    AWS services, let's move forward with making our own API.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对API是什么以及它如何与AWS服务配合工作有了很好的理解，让我们继续制作我们自己的API。
- en: Creating our first API with AWS
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS创建我们的第一个API
- en: This section will be a simple but concise walk-through of setting up your own
    API within AWS. We aren't going to worry about connecting any services to it –
    we will do that in later exercises when inspecting traffic and manipulating calls
    on to the API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将简要但简洁地介绍如何在AWS中设置自己的API。我们不会担心将任何服务连接到它 - 我们将在以后的练习中检查流量并将调用传递到API时再进行连接。
- en: 'The following are instructions that will help guide you through creating an
    API that you can use throughout this chapter. To get started, log in to the AWS
    console and follow these steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指导您创建一个可以在本章中使用的API的说明。要开始，请登录AWS控制台并按照以下步骤操作：
- en: Search for the `api` service in the search bar at the main menu of the AWS console:![Figure
    8.2 – Searching for api
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台的主菜单中的搜索栏中搜索`api`服务：![图8.2 - 搜索api
- en: '](img/Figure_8.02_B15630.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.02_B15630.jpg)'
- en: Figure 8.2 – Searching for api
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 - 搜索api
- en: Next, you'll be given a list of APIs to choose from. Select **REST API** and
    click **Build**:![Figure 8.3 – Building an API
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将获得一个API列表可供选择。选择**REST API**并点击**构建**：![图8.3 – 构建API
- en: '](img/Figure_8.03_B15630.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.03_B15630.jpg)'
- en: Figure 8.3 – Building an API
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 构建API
- en: Now you'll need to configure the API. Make sure that you choose `PentestPacktAWS`.
    You may call your API whatever you like, but ensure that you remember the name.
    Giving a description is optional, but is good practice, especially when you start
    building out more APIs – it will help you remember the purpose of each API:![Figure
    8.4 – Naming the API
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您需要配置API。确保选择“PentestPacktAWS”。您可以随意命名您的API，但请确保记住名称。提供描述是可选的，但是是一个好习惯，特别是当您开始构建更多的API时
    - 它将帮助您记住每个API的目的：![图8.4 – 命名API
- en: '](img/Figure_8.04_B15630.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.04_B15630.jpg)'
- en: Figure 8.4 – Naming the API
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 命名API
- en: Once you have input all your information, click **Create API** to finish.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入完所有信息后，点击**创建API**完成。
- en: After you click **Create API**, you'll be introduced to the main dashboard of
    your API. This is where we'll configure our API later in this chapter. For now,
    feel free to get familiar with the panel.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建API**后，您将进入API的主要仪表板。这是我们将在本章后面配置API的地方。现在，可以随意熟悉面板。
- en: Now that we have learned how to create an API, the next logical step is to understand
    the tool we are going to use to assess the API. The next section of this chapter
    focuses on a popular web tool called Burp Suite.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何创建API，下一个合乎逻辑的步骤是了解我们将用来评估API的工具。本章的下一部分将重点介绍一种名为Burp Suite的流行网络工具。
- en: Getting started with Burp Suite
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Burp Suite
- en: This section of the chapter will discuss a tool that we have yet to use in this
    book. The tool that we will be using is a proxy tool that allows us to perform
    security testing on web applications, and in our case, it will enable us to intercept
    requests being sent to and from our AWS API targets. This means that Burp Suite
    will give us full control over requests sent via our web browser, making us able
    to manipulate calls to and from APIs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的这一部分将讨论本书尚未使用的工具。我们将使用的工具是一种代理工具，它允许我们对Web应用程序进行安全测试，在我们的情况下，它将使我们能够拦截发送到和从我们的AWS
    API目标的请求。这意味着Burp Suite将使我们完全控制通过我们的Web浏览器发送的请求，使我们能够操纵对API的调用。
- en: Important note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A proxy is a server or a service that inspects and analyzes traffic before it
    is sent to our target.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是在发送到目标之前检查和分析流量的服务器或服务。
- en: Intercepting calls to and from APIs allows us to see parameters such as tokens,
    sessions, and other attributes that may be able to be altered to make the API
    accept calls that it shouldn't. This is a fairly common technique that is used
    by bug bounty hunters and web application penetration testers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截API的调用允许我们查看诸如令牌、会话和其他可能能够被更改以使API接受不应该接受的调用的参数。这是漏洞赏金猎人和网络应用程序渗透测试人员常用的技术。
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'A bug bounty hunter is a freelance penetration tester who works with companies
    and tests their applications for bugs on the website. These bugs are reported
    through a third-party service known as a bug bounty program. Find out more about
    bug bounty programs here: [https://whatis.techtarget.com/definition/bug-bounty-program](https://whatis.techtarget.com/definition/bug-bounty-program).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞赏金猎人是一名自由渗透测试人员，与公司合作测试其网站上的漏洞。这些漏洞是通过第三方服务报告的，称为漏洞赏金计划。在这里了解更多关于漏洞赏金计划：[https://whatis.techtarget.com/definition/bug-bounty-program](https://whatis.techtarget.com/definition/bug-bounty-program)。
- en: In this next section, we will log into our local Kali Linux machine and start
    up Burp Suite and configure it to our web browser. Once we have that set up, we
    will intercept a few different requests and inspect various web requests to understand
    more about how to use the tool.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将登录到本地的Kali Linux机器，并启动Burp Suite并将其配置到我们的Web浏览器。一旦设置好，我们将拦截一些不同的请求并检查各种Web请求，以更多地了解如何使用该工具。
- en: Configuring Burp Suite
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Burp Suite
- en: Now that we understand more about what Burp Suite is, let's move forward with
    actually getting our hands dirty and start using the application. Before we can
    begin, you'll need to have your local Kali Linux machine started in VirtualBox.
    Once you have the machine up and running, log into the Kali Linux machine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更了解Burp Suite是什么，让我们继续实际动手并开始使用该应用程序。在开始之前，您需要在VirtualBox中启动本地的Kali Linux机器。一旦机器启动并运行，登录到Kali
    Linux机器。
- en: 'Once logged in, use the following steps to get Burp Suite up and running:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，使用以下步骤启动Burp Suite：
- en: Start a Terminal and type `burpsuite`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动终端并输入`burpsuite`。
- en: Once Burp Suite is open, you'll need to select **Temporary Project**:![Figure
    8.5 – New Burp project
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦打开Burp Suite，您需要选择**临时项目**：![图8.5 – 新的Burp项目
- en: '](img/Figure_8.05_B15630.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.05_B15630.jpg)'
- en: Figure 8.5 – New Burp project
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 新的Burp项目
- en: Select **Use Burp defaults**:![Figure 8.6 – Use Burp defaults
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用Burp默认值**：![图8.6 – 使用Burp默认值
- en: '](img/Figure_8.06_B15630.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.06_B15630.jpg)'
- en: Figure 8.6 – Use Burp defaults
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 使用Burp默认值
- en: Next, go to the **Proxy** tab and find the **Options** section:![Figure 8.7
    – Configuring the interface
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到**代理**选项卡，并找到**选项**部分：![图8.7 – 配置接口
- en: '](img/Figure_8.07_B15630.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.07_B15630.jpg)'
- en: Figure 8.7 – Configuring the interface
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 配置接口
- en: You'll want to ensure that your interface is configured to your local address
    of `127.0.0.1` and that the port is set to `8080`. Burp Suite has this configured
    by default, however, in the case that it may not be like that – you can configure
    Burp Suite to meet the specifications of the previous screenshot.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要确保将接口配置为本地地址`127.0.0.1`，并将端口设置为`8080`。Burp Suite默认已配置好，但是如果不是这样 - 您可以配置Burp
    Suite以满足上一个截图的规格。
- en: Great, now we have set up Burp Suite to bind to our localhost on port `8080`.
    What this means is that any traffic being sent to and from port `8080` through
    our localhost will get caught by Burp Suite.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们已经设置好了Burp Suite绑定到我们的本地主机的`8080`端口。这意味着通过我们的本地主机发送到`8080`端口的任何流量都将被Burp
    Suite捕获。
- en: We aren't done yet, now we need to configure our browser to also push traffic
    through our localhost on the designated port that we have assigned it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成，现在我们需要配置我们的浏览器，以便将流量通过我们分配的本地主机上的指定端口。
- en: 'To get started, open up Firefox within your Kali Linux machine:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请在您的Kali Linux机器中打开Firefox：
- en: Open a Terminal and type `firefox` and hit **Enter**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，输入`firefox`并按下**Enter**。
- en: Next, click the options in the top right of the browser and select **Preferences**:![Figure
    8.8 – Browser configuration
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击浏览器右上角的选项，选择**首选项**：![图8.8 - 浏览器配置
- en: '](img/Figure_8.08_B15630.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.08_B15630.jpg)'
- en: Figure 8.8 – Browser configuration
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 - 浏览器配置
- en: Next, type `proxy` in the search bar of the **Preferences** section. Click **Settings…**
    to continue:![Figure 8.9 – Configuring the web proxy
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**首选项**部分的搜索栏中键入`代理`。点击**设置...**继续：![图8.9 - 配置web代理
- en: '](img/Figure_8.09_B15630.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.09_B15630.jpg)'
- en: Figure 8.9 – Configuring the web proxy
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 - 配置web代理
- en: 'Ensure that `8080`. Ensure that **Use this proxy server for all protocols**
    is selected. That will allow encrypted traffic to also be passed through. Click
    **OK** when you''re finished:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`8080`。确保选择**为所有协议使用此代理服务器**。这将允许加密流量通过。完成后点击**确定**：
- en: '![Figure 8.10 – Setting parameters for your proxy'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10 - 设置代理参数'
- en: '](img/Figure_8.10_B15630.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.10_B15630.jpg)'
- en: Figure 8.10 – Setting parameters for your proxy
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 - 设置代理参数
- en: Great job, you have successfully configured your browser to work with Burp Suite.
    From here, we will start to use Burp Suite to intercept web requests for the rest
    of this chapter. However, before we can get started, we need to install the Burp
    Suite certificate on our browser. It's important that we have the ability to intercept
    traffic so that we can see unencrypted and encrypted traffic going through web
    service protocols via our browser.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好，您已成功配置浏览器以与Burp Suite配合使用。从现在开始，我们将开始使用Burp Suite拦截本章剩余部分的web请求。但是，在开始之前，我们需要在浏览器上安装Burp
    Suite证书。重要的是，我们有能力拦截流量，以便我们可以看到通过我们的浏览器传输的未加密和加密流量。
- en: 'To install the Burp Suite certificate, follow these next steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Burp Suite证书，请按照以下步骤进行：
- en: 'With Burp Suite running and configured, type the following web address in your
    browser:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置好并运行Burp Suite后，在浏览器中输入以下网址：
- en: '[http://burp](http://burp)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://burp](http://burp)'
- en: You'll see in the top-right corner a banner that says **CA Certificate**. Click
    on it:![Figure 8.11 – Burp certificate
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在右上角看到一个横幅，上面写着**CA证书**。点击它：![图8.11 - Burp证书
- en: '](img/Figure_8.11_B15630.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.11_B15630.jpg)'
- en: Figure 8.11 – Burp certificate
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 - Burp证书
- en: Save the file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Go back to the `certificates`. Click **View Certificates…**:![Figure 8.12 –
    Viewing certificates
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`证书`。点击**查看证书...**：![图8.12 - 查看证书
- en: '](img/Figure_8.12_B15630.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.12_B15630.jpg)'
- en: Figure 8.12 – Viewing certificates
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 - 查看证书
- en: Next, you'll be prompted with the **Certificate Manager**. Here, you'll need
    to import the certificate we just downloaded from Burp Suite. To do this, click
    **Import…**:![Figure 8.13 – Importing certificates
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到**证书管理器**。在这里，您需要导入我们刚刚从Burp Suite下载的证书。要做到这一点，点击**导入...**：![图8.13 -
    导入证书
- en: '](img/Figure_8.13_B15630.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.13_B15630.jpg)'
- en: Figure 8.13 – Importing certificates
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 - 导入证书
- en: Import the `cacert.der` file we just downloaded.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们刚刚下载的`cacert.der`文件。
- en: 'Check **Trust this CA to identify websites** and **Trust this CA to identify
    email users**. Click **OK** when done:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**信任CA以识别网站**和**信任CA以识别电子邮件用户**。完成后点击**确定**：
- en: '![Figure 8.14 – Importing certificates continued'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14 - 导入证书继续'
- en: '](img/Figure_8.14_B15630.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.14_B15630.jpg)'
- en: Figure 8.14 – Importing certificates continued
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 - 导入证书继续
- en: And that's it! Now we are officially ready to intercept some web requests! Moving
    forward, when using Burp Suite for anything in this book, or in real life, please
    ensure that you turn the proxy on before use, and turn it off after using it!
    If you don't turn off the proxy, then you may experience some issues using your
    web browser.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们正式准备拦截一些web请求！在本书中或现实生活中使用Burp Suite时，请确保在使用前打开代理，在使用后关闭代理！如果不关闭代理，可能会在使用web浏览器时遇到一些问题。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If you''re still having trouble with your Burp Suite application, check the
    help guide for resolutions to common issues: [https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting](https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然在使用Burp Suite应用程序时遇到问题，请查看帮助指南以解决常见问题：[https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting](https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting)。
- en: Inspecting traffic with Burp Suite
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite检查流量
- en: This next section is going to go over how we can inspect our traffic to and
    from the REST API we just created. Inspecting traffic with Burp Suite is crucial
    to network pentesting and web application penetration testing because it allows
    us to see all the communications over a particular connection. While we won't
    worry about network intercepting, we will be using many of the same techniques
    used in web application penetration testing.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将介绍如何检查我们刚刚创建的REST API的流量。使用Burp Suite检查流量对于网络渗透测试和web应用程序渗透测试至关重要，因为它允许我们查看特定连接上的所有通信。虽然我们不会担心网络拦截，但我们将使用许多在web应用程序渗透测试中使用的相同技术。
- en: Before we begin moving forward with inspecting traffic, we need to ensure that
    we do some quick housekeeping before we get started. We will need to ensure that
    we have deployed our AWS API gateway too so that we can learn how to intercept
    traffic coming to and from the REST API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始检查流量之前，我们需要确保在开始之前进行一些快速的清理工作。我们需要确保我们也部署了我们的AWS API网关，这样我们才能学习如何拦截来自REST
    API的流量。
- en: Deploying the API gateway
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署API网关
- en: 'To get started, log back into the AWS console and go to the API that we created
    at the beginning of this chapter:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请重新登录AWS控制台并转到本章开头创建的API：
- en: '![Figure 8.15 – Selecting our API'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15 – 选择我们的API'
- en: '](img/Figure_8.15_B15630.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.15_B15630.jpg)'
- en: Figure 8.15 – Selecting our API
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – 选择我们的API
- en: Click on the API to access the gateway to get started.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 点击API以访问网关开始。
- en: 'Once you have entered the main configuration screen for your AWS API, you''ll
    need to select **Actions**. This will drop down a menu that has options for creating
    methods, deleting the API, and most of all, creating a method and deploying the
    API. The following steps will help guide you through deploying the API:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入AWS API的主配置屏幕，您需要选择**操作**。这将弹出一个菜单，其中有创建方法、删除API的选项，最重要的是创建方法和部署API的选项。以下步骤将帮助您完成部署API的指导：
- en: Click **Actions**:![Figure 8.16 – Selecting Actions
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**操作**：![图8.16 – 选择操作
- en: '](img/Figure_8.16_B15630.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.16_B15630.jpg)'
- en: Figure 8.16 – Selecting Actions
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 选择操作
- en: Select **Create Method**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建方法**。
- en: Select **ANY** as the action.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**ANY**作为操作。
- en: Select **Mock** as the integration type:![Figure 8.17 – Creating Mock methods
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**模拟**作为集成类型：![图8.17 – 创建模拟方法
- en: '](img/Figure_8.17_B15630.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.17_B15630.jpg)'
- en: Figure 8.17 – Creating Mock methods
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 创建模拟方法
- en: Click **Save**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: 'Great, we now have a method that can be used to call the API. Now that we have
    a method, we can move forward with deploying our API and making it accessible.
    The next steps will help us with deploying the API:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们有一个可以用来调用API的方法。既然我们有了一个方法，我们可以继续部署我们的API并使其可访问。接下来的步骤将帮助我们部署API：
- en: Click **Actions**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**操作**。
- en: Next, select **Deploy API**:![Figure 8.18 – Deploy API
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**部署API**：![图8.18 – 部署API
- en: '](img/Figure_8.18_B15630.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.18_B15630.jpg)'
- en: Figure 8.18 – Deploy API
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – 部署API
- en: Select **[New Stage]** for **Deployment stage**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**[新阶段]**作为**部署阶段**。
- en: For the stage name, use **prod**:![Figure 8.19 – Configuring Stage name
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于阶段名称，使用**prod**：![图8.19 – 配置阶段名称
- en: '](img/Figure_8.19_B15630.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.19_B15630.jpg)'
- en: Figure 8.19 – Configuring Stage name
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 – 配置阶段名称
- en: To finish, click **Deploy**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**部署**。
- en: 'After you click **Deploy**, you will notice that there will be a banner at
    the top of your AWS API dashboard. The banner will say **Invoke URL**. You should
    see a web address that looks something as in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**部署**后，您会注意到在您的AWS API仪表板顶部会有一个横幅。横幅上会显示**调用URL**。您应该看到一个网址，看起来像以下截图中的样子：
- en: '![Figure 8.20 – API banner'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20 – API横幅'
- en: '](img/Figure_8.20_B15630.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.20_B15630.jpg)'
- en: Figure 8.20 – API banner
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – API横幅
- en: That web address is the web address to your newly deployed AWS API and will
    be what we use to test intercepting traffic in the next section. Know that your
    API address will be different than the web address in this example.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该网址是您新部署的AWS API的网址，将用于测试下一节中拦截流量。请注意，您的API地址将与此示例中的网址不同。
- en: Next, let's move forward with intercepting some traffic on our newly deployed
    AWS API.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续拦截我们新部署的AWS API上的一些流量。
- en: Getting practical with intercepting API calls
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际操作拦截API调用
- en: Now for some fun, hands-on stuff. Now we are going to pivot away from the housekeeping
    portion, to perform some hands-on exercises to help to get you to use Burp Suite.
    Before continuing, ensure that you have Burp Suite and your browser configured
    to intercept web traffic. Please refer to the *Configuring Burp Suite* section
    if you need a refresher.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一些有趣的、实际操作的内容。现在我们将从清理部分转移到一些实际操作的练习，以帮助您使用Burp Suite。在继续之前，请确保您已经配置了Burp
    Suite和您的浏览器以拦截Web流量。如果需要复习，请参考*配置Burp Suite*部分。
- en: 'With Burp Suite and your web browser configured correctly, let''s go ahead
    and get started:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正确配置的Burp Suite和您的Web浏览器，让我们开始吧：
- en: Open your browser and put your API URL into the address bar and hit *Enter*.
    Check *step 5* in the previous section for a reminder on how to **Invoke URL**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，将API网址放入地址栏并点击*Enter*。查看前一节的*步骤5*，以了解如何**调用URL**的提醒。
- en: Your Burp Suite application should come up with an **Intercept** window:![Figure
    8.21 – GET request
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Burp Suite应用程序应该弹出一个**拦截**窗口：![图8.21 – GET请求
- en: '](img/Figure_8.21_B15630.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.21_B15630.jpg)'
- en: Figure 8.21 – GET request
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 – GET请求
- en: What's happening here is we are intercepting the call between our host and the
    server. Notice the `GET` parameter followed by `/prod`. This means we are attempting
    to retrieve the `prod` directory.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里发生的是我们正在拦截主机和服务器之间的通话。注意`GET`参数后面跟着`/prod`。这意味着我们正在尝试检索`prod`目录。
- en: To continue, click **Forward** to push the request to the server:![Figure 8.22
    – Web browser after a forwarding request
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续，点击**转发**将请求发送到服务器：![图8.22 – 转发请求后的Web浏览器
- en: '](img/Figure_8.22_B15630.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.22_B15630.jpg)'
- en: Figure 8.22 – Web browser after a forwarding request
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – 转发请求后的Web浏览器
- en: As you can see, we have a blank screen – this is totally fine. Because the page
    rendered blank and there is not a **Not Found** banner, we know the URL works.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个空白屏幕 – 这完全没问题。因为页面呈现为空白，没有**未找到**横幅，我们知道URL有效。
- en: We have now successfully intercepted a packet between our host machine and the
    AWS API. While this may seem basic, it's paramount that we understand the basics
    of Burp Suite intercepting web traffic before we begin to manipulate the calls
    between the API and our host. If we skipped understanding how to set up our environment
    and understand basic intercepting, we have failed to really understand what exact
    processes are occurring.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在成功地拦截了主机机器和AWS API之间的数据包。虽然这可能看起来很基础，但在我们开始操作API调用之前，我们必须了解Burp Suite拦截Web流量的基础知识。如果我们跳过了解如何设置我们的环境并理解基本的拦截，我们就无法真正理解正在发生的确切过程。
- en: Next, we are going to move forward with the final section of this chapter. We
    will learn a little more about HTTP methods and learn about manipulating API calls
    by building on everything we have learned this far.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续进行本章的最后一部分。我们将学习更多关于HTTP方法的知识，并通过构建我们迄今所学的一切来学习如何操作API调用。
- en: Manipulating API calls
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作API调用
- en: Before we get started, we need to understand the basic HTTP methods that we
    can use to manipulate API calls. HTTP request methods are essentially an action
    that you would like to execute on the target API. Commonly known as HTTP verbs,
    these methods can allow us to put data and retrieve data or information from the
    target resources. The next section will briefly talk about those methods.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要了解可以用来操作API调用的基本HTTP方法。HTTP请求方法本质上是您想要在目标API上执行的操作。通常称为HTTP动词，这些方法可以允许我们向目标资源放置数据和检索数据或信息。下一部分将简要介绍这些方法。
- en: The `GET` method requests resources from a specific address. Requests using
    `GET` should only retrieve data. The `HEAD` method asks for an acknowledgment
    equal to a `GET` request, only without the acknowledgment body. The `DELETE` method
    is used to delete a specified resource. The `POST` method is used to submit data
    to the target resource – typically, you see `POST` methods used to post data and
    cause issues. The `PUT` method is used to PUT data on the target server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`方法从特定地址请求资源。使用`GET`的请求应该只检索数据。`HEAD`方法要求一个等同于`GET`请求的确认，只是没有确认主体。`DELETE`方法用于删除指定的资源。`POST`方法用于向目标资源提交数据
    - 通常，您会看到`POST`方法用于发布数据并引起问题。`PUT`方法用于在目标服务器上放置数据。'
- en: Now that we understand what HTTP methods are and how they work, let's see them
    in action. For this next example, we are going to run through an exercise where
    we manipulate calls to a vulnerable S3 API. If you need a refresher on creating
    S3 buckets, please refer to [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)*,
    Exploiting S3 Buckets*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了HTTP方法是什么以及它们是如何工作的，让我们看看它们的实际应用。对于下一个示例，我们将运行一个练习，通过操作调用一个易受攻击的S3 API。如果您需要复习如何创建S3存储桶，请参考[*第4章*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)*，利用S3存储桶*。
- en: Important note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'To learn more about creating APIs for S3, please refer to this resource: [https://aws.amazon.com/s3/features/access-points/](https://aws.amazon.com/s3/features/access-points/).
    You will need to create a bucket with your own test folder in it to perform the
    next exercise.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关为S3创建API的更多信息，请参考此资源：[https://aws.amazon.com/s3/features/access-points/](https://aws.amazon.com/s3/features/access-points/)。您需要在其中创建一个自己的测试文件夹的存储桶，以执行下一个练习。
- en: Fun with altering HTTP methods
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩转修改HTTP方法
- en: 'For this next section, we are going to be targeting an S3 bucket through an
    AWS API. The bucket is located at [https://awspublicpackt.s3.amazonaws.com/](https://awspublicpackt.s3.amazonaws.com/).
    Let''s move forward with intercepting it in Burp Suite:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一部分，我们将通过AWS API来定位一个S3存储桶。存储桶位于[https://awspublicpackt.s3.amazonaws.com/](https://awspublicpackt.s3.amazonaws.com/)。让我们继续在Burp
    Suite中拦截它：
- en: With Burp Suite and your browser configured to intercept web traffic, input
    the address in your URL bar:![Figure 8.23 – Burp request
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Burp Suite和已配置为拦截Web流量的浏览器，在URL栏中输入地址：![图8.23 - Burp请求
- en: '](img/Figure_8.23_B15630.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.23_B15630.jpg)'
- en: Figure 8.23 – Burp request
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23 - Burp请求
- en: As you can see, we are intercepting the API call based on the `host` parameter.
    We are using the `GET` method, meaning we are retrieving the resources. Click
    **Forward** to continue:![Figure 8.24 – Viewing bucket objects and keys
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，我们正在基于`host`参数拦截API调用。我们正在使用`GET`方法，这意味着我们正在检索资源。点击**前进**继续：![图8.24 - 查看存储桶对象和密钥
- en: '](img/Figure_8.24_B15630.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.24_B15630.jpg)'
- en: Figure 8.24 – Viewing bucket objects and keys
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24 - 查看存储桶对象和密钥
- en: As you can see, there is a directory called `TestAPI.txt`. Next, let's move
    forward and intercept the `test` directory and see whether we can view the text
    file:![Figure 8.25 – Retrieving TestAPI.txt
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，有一个名为`TestAPI.txt`的目录。接下来，让我们继续拦截`test`目录，并查看是否可以查看文本文件：![图8.25 - 检索TestAPI.txt
- en: '](img/Figure_8.25_B15630.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.25_B15630.jpg)'
- en: Figure 8.25 – Retrieving TestAPI.txt
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25 - 检索TestAPI.txt
- en: Click **Forward**:![Figure 8.26 – Output of TestAPI.txt
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**前进**：![图8.26 - TestAPI.txt的输出
- en: '](img/Figure_8.26_B15630.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.26_B15630.jpg)'
- en: Figure 8.26 – Output of TestAPI.txt
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26 - TestAPI.txt的输出
- en: Notice that the contents of the text file are being displayed. This means we
    have read access. Next, let's see whether we can place an object in the bucket
    by manipulating the API. Let's use the `PUT` method to place the `HackedAPI.txt`
    test file into the `i love pentesting` data into the text file:![Figure 8.27 –
    Placing data by manipulating API calls
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，文本文件的内容正在显示。这意味着我们有读取权限。接下来，让我们看看是否可以通过操作API在存储桶中放置一个对象。让我们使用`PUT`方法将`HackedAPI.txt`测试文件放入`i
    love pentesting`数据到文本文件中：![图8.27 - 通过操作API调用放置数据
- en: '](img/Figure_8.27_B15630.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.27_B15630.jpg)'
- en: Figure 8.27 – Placing data by manipulating API calls
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 - 通过操作API调用放置数据
- en: 'Now, to confirm we have placed data on the target, we can use the `curl` command
    in our Terminal to check and see whether the data was stored. We use the following
    command to validate that the data was put in the S3 bucket:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了确认我们已经将数据放在目标上，我们可以在终端中使用`curl`命令来检查并查看数据是否已存储。我们使用以下命令来验证数据是否已放入S3存储桶：
- en: '[PRE0]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We see the following output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到以下输出：
- en: '![Figure 8.28 – Successful data upload'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.28 – 成功的数据上传'
- en: '](img/Figure_8.28_B15630.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.28_B15630.jpg)'
- en: Figure 8.28 – Successful data upload
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28 – 成功的数据上传
- en: As we can see, we have successfully put data in the S3 bucket by manipulating
    calls within the API. Next, let's see whether we can delete the `/test` legitimate
    resource.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，通过操纵API中的调用，我们已成功将数据放入了S3存储桶。接下来，让我们看看是否可以删除`/test`合法资源。
- en: As you can see, we were able to manipulate calls between our host and the resource
    by manipulating methods within the HTTP request. Based on the exercise we just
    did, we were able to read and write data to the resource by manipulating the HTTP
    calls. This is extremely dangerous because an attacker could leave behind malware
    or steal sensitive information if discovered. It's crucial that proper access
    controls are put in place to ensure that resources aren't left unsecured.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们能够通过操纵HTTP请求中的方法来操纵我们的主机和资源之间的调用。根据我们刚刚进行的练习，我们能够通过操纵HTTP调用来读取和写入资源的数据。这是非常危险的，因为如果被发现，攻击者可能会留下恶意软件或窃取敏感信息。非常重要的是要建立适当的访问控制，以确保资源不会被留下不安全。
- en: Now let's move forward, wrap up the chapter, and start looking at heading toward
    the next part of this book, [*Chapter 9*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381)*,
    Real-Life Pentesting with Metasploit and More!*
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续，结束本章，并开始着手下一部分的内容，[*第9章*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381)*，使用Metasploit和更多进行真实的渗透测试！*
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned a bit about web traffic and web requests as they
    pertain to APIs and gateways in AWS. We learned how to deploy a simple API gateway,
    and also learned how to use a vital tool for assessing APIs and gateways – Burp
    Suite. We ran through a fun exercise that illustrated using Burp Suite to manipulate
    HTTP requests and mentioned the dangers of leaving APIs vulnerable. With this
    knowledge, you can now perform attacks and assessments on web-based applications
    and services using the methods learned in this chapter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了与AWS中的API和网关相关的Web流量和Web请求。我们学会了部署简单的API网关，还学会了使用评估API和网关的重要工具–Burp
    Suite。我们进行了一个有趣的练习，演示了如何使用Burp Suite来操纵HTTP请求，并提到了留下API易受攻击的危险。有了这些知识，您现在可以使用本章学到的方法对基于Web的应用程序和服务进行攻击和评估。
- en: We are going to further our knowledge of AWS by applying more hands-on experience
    in the next chapter. It is the longest chapter in the book and will have you setting
    up new environments and exploiting them based on scenarios – ultimately, teaching
    you the technical portion of AWS pentesting and the processes that come with it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过更多的实践经验来进一步了解AWS。这是本书中最长的一章，将让您建立新的环境并根据场景进行利用，最终教会您AWS渗透测试的技术部分和相关流程。
- en: Further reading
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'List of bug bounty programs: [https://www.bugcrowd.com/bug-bounty-list/](https://www.bugcrowd.com/bug-bounty-list/)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞赏金计划列表：[https://www.bugcrowd.com/bug-bounty-list/](https://www.bugcrowd.com/bug-bounty-list/)
- en: 'WebSocket API: [https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WebSocket API: [https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html)'
- en: 'From Poll to Push: Transform APIs using Amazon API Gateway REST APIs and WebSockets:
    [https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/](https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从轮询到推送：使用Amazon API Gateway REST API和WebSockets转换API：[https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/](https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/)
