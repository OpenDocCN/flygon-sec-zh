["```py\nimport socket #Imported sockets module \nimport sys \ntry: \n   #Create an AF_INET (IPv4), STREAM socket (TCP) \n   tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \nexcept socket.error, e: \n   print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n   sys.exit(); \nprint 'Success!' \n\n```", "```py\nimport socket #Imported sockets module  \nimport sys  \n\nTCP_IP = '127.0.0.1'  \nTCP_PORT = 8090 #Reserve a port  \nBUFFER_SIZE = 1024  \nMESSAGE_TO_SERVER = \"Hello, World!\"  \n\ntry:  \n    #Create an AF_INET (IPv4), STREAM socket (TCP)  \n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  \nexcept socket.error, e:  \n    print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n    sys.exit();  \n\ntcp_socket.connect((TCP_IP, TCP_PORT))  \n\ntry :  \n    #Sending message  \n    tcp_socket.send(MESSAGE_TO_SERVER)  \nexcept socket.error, e: \n    print 'Error occurred while sending data to server. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n    sys.exit()  \n\nprint 'Message to the server send successfully' \n\n```", "```py\nimport socket #Imported sockets module \n\nTCP_IP = '127.0.0.1' \nTCP_PORT = 8090 \nBUFFER_SIZE = 1024 #Normally use 1024, to get fast response from the server use small size \n\ntry: \n   #Create an AF_INET (IPv4), STREAM socket (TCP) \n   tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \nexcept socket.error, e: \n   print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n   sys.exit(); \n\ntcp_socket.bind((TCP_IP, TCP_PORT)) \n# Listen for incoming connections  (max queued connections: 2) \ntcp_socket.listen(2) \nprint 'Listening..' \n\n#Waits for incoming connection (blocking call) \nconnection, address = tcp_socket.accept() \nprint 'Connected with:', address \n\n```", "```py\ndata = connection.recv(BUFFER_SIZE) \nprint \"Message from client:\", data \n\nconnection.sendall(\"Thanks for connecting\")  # response for the message from client \nconnection.close() \n\n```", "```py\n#keep server alive  \nwhile True:  \n   connection, address = tcp_socket.accept()  \n   print 'Client connected:', address  \n\n   data = connection.recv(BUFFER_SIZE)  \n   print \"Message from client:\", data  \n\n   connection.sendall(\"Thanks for connecting\")  #Echo the message from client  \n\n```", "```py\n $ python  server.py\n\n```", "```py\nimport socket #Imported sockets module  \nimport sys  \n\nTCP_IP = '127.0.0.1'  \nTCP_PORT = 8090 # Reserve a port  \nBUFFER_SIZE = 1024  \nMESSAGE_TO_SERVER = \"Hello, World!\"  \n\ntry:  \n    #Create an AF_INET (IPv4), STREAM socket (TCP)  \n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  \nexcept socket.error,  e:  \n    print 'Error occured while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n    sys.exit();  \n\ntcp_socket.connect((TCP_IP, TCP_PORT))  \n\ntry :  \n    #Sending message  \n    tcp_socket.send(MESSAGE_TO_SERVER)  \nexcept socket.error, e: \n    print 'Error occurred while sending data to server. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n    sys.exit() \n\nprint 'Message to the server send successfully'  \ndata = tcp_socket.recv(BUFFER_SIZE)  \ntcp_socket.close() #Close the socket when done  \nprint \"Response from server:\", data \n\n```", "```py\nimport socket #Imported sockets module  \nimport sys  \nfrom thread import *  \n\nTCP_IP = '127.0.0.1'  \nTCP_PORT = 8090 # Reserve a port  \n\ntry:  \n    #create an AF_INET (IPv4), STREAM socket (TCP)  \n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  \nexcept socket.error, e:  \n    print 'Error occured while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n    sys.exit();  \n\n#Bind socket to host and port  \ntcp_socket.bind((TCP_IP, TCP_PORT))  \ntcp_socket.listen(10)  \nprint 'Listening..'  \n\n#Function for handling connections. Used to create threads  \ndef ClientConnectionHandler(connection):  \n    BUFFER_SIZE = 1024  \n    #Sending message to client  \n    connection.send('Welcome to the server')  \n\n    #infinite loop to keep the thread alive.  \n    while True:  \n        #Receiving data from client  \n        data = connection.recv(BUFFER_SIZE)  \n        reply = 'Data received:' + data  \n        if not data:  \n            break  \n        connection.sendall(reply)  \n\n    #Exiting loop  \n    connection.close()  \n\n#keep server alive always (infinite loop)  \nwhile True:  \n    connection, address = tcp_socket.accept()  \n    print 'Client connected:', address  \n    start_new_thread(ClientConnectionHandler ,(connection,))  \n\ntcp_socket.close() \n\n```", "```py\nimport SocketServer #Imported SocketServer module  \n\n#The RequestHandler class for our server.  \nclass TCPRequestHandler( SocketServer.StreamRequestHandler ):  \n  def handle( self ):  \n   self.data = self.request.recv(1024).strip()  \n   print \"{} wrote:\".format(self.client_address[0])  \n   print self.data  \n   #Sending the same data  \n   self.request.sendall(self.data)  \n\n#Create the server, binding to localhost on port 8090  \nserver = SocketServer.TCPServer( (\"\", 8090), TCPRequestHandler ) \n#Activate the server; this will keep running untile we interrupt \nserver.serve_forever() \n\n```", "```py\nimport SocketServer \n\n```", "```py\nclass TCPRequestHandler( SocketServer.StreamRequestHandler ):  \n  def handle( self ):  \n   self.data = self.request.recv(1024).strip()  \n   print \"{} wrote:\".format(self.client_address[0])  \n   print self.data  \n   # sending the same data  \n   self.request.sendall(self.data) \n\n```", "```py\ntcp_server = SocketServer.TCPServer( (\"\", 8090), TCPRequestHandler )  \ntcp_server.serve_forever() \n\n```", "```py\nimport socket #Imported sockets module  \n\ntry: \n  #create an INET, raw socket  \n  raw_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)  \nexcept socket.error as e:  \n  print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n  sys.exit() \n\n```", "```py\nimport socket #Imported sockets module  \n\ntry:  \n  #create an raw socket  \n  raw_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))  \nexcept socket.error, e:  \n  print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n  sys.exit();  \n\nwhile True:  \n  packet = raw_socket.recvfrom(2048)  \n  print packet \n\n```", "```py\nraw_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))\n```", "```py\nwhile True:  \n  packet = raw_socket.recvfrom(2048)  \n  print packet \n\n```", "```py\nethernet_header = packet[0][0:14] \n\n```", "```py\neth_header = struct.unpack(\"!6s6s2s\", ethernet_header) \n\n```", "```py\nprint \"destination:\" + binascii.hexlify(eth_header[0]) + \" Source:\" + binascii.hexlify(eth_header[1]) +  \" Type:\" + binascii.hexlify(eth_header[2] \n\n```", "```py\nip_header = packet[0][14:34] \nip_hdr = struct.unpack(\"!12s4s4s\", ip_header) \nprint \"Source IP:\" + socket.inet_ntoa(ip_hdr[1]) + \" Destination IP:\" + socket.inet_ntoa(ip_hdr[2])) \n\n```", "```py\nimport socket #Imported sockets module  \nimport struct  \nimport binascii  \n\ntry:  \n  #Create an raw socket  \n  raw_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))  \nexcept socket.error, e:  \n  print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n  sys.exit();  \n\nwhile True:  \n  packet = raw_socket.recvfrom(2048)  \n  ethernet_header = packet[0][0:14]  \n  eth_header = struct.unpack(\"!6s6s2s\", ethernet_header)  \n  print \"destination:\" + binascii.hexlify(eth_header[0]) + \" Source:\" + binascii.hexlify(eth_header[1]) +  \" Type:\" + binascii.hexlify(eth_header[2])  \n  ip_header = packet[0][14:34]  \n  ip_hdr = struct.unpack(\"!12s4s4s\", ip_header)  \n  print \"Source IP:\" + socket.inet_ntoa(ip_hdr[1]) + \" Destination IP:\" + socket.inet_ntoa(ip_hdr[2]) \n\n```", "```py\nimport socket #Imported sockets module  \n\ntry:  \n  #create an INET, raw socket  \n  raw_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))  \nexcept socket.error, e:  \n  print ('Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1])  \n  sys.exit() \n\n```", "```py\nraw_socket.bind((\"wlan0\", socket.htons(0x0800))) \n\n```", "```py\npacket =  struct.pack(\"!6s6s2s\", '\\xb8v?\\x8b\\xf5\\xfe', 'l\\x19\\x8f\\xe1J\\x8c', '\\x08\\x00') \nraw_socket.send(packet + \"Hello\") \n\n```", "```py\nimport socket #Imported sockets module  \nimport struct  \n\ntry:  \n  #Create an raw socket  \n  raw_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))  \nexcept socket.error as e:  \n  print 'Error occurred while creating socket. Error code: ' + str(e[0]) + ' , Error message : ' + e[1] \n  sys.exit();  \n\nraw_socket.bind((\"wlan0\", socket.htons(0x0800)))  \npacket =  struct.pack(\"!6s6s2s\", '\\xb8v?\\x8b\\xf5\\xfe', 'l\\x19\\x8f\\xe1J\\x8c', '\\x08\\x00')  \nraw_socket.send(packet + \"Hello\")  \n\n```", "```py\n $ sudo scapy\n\n```", "```py\n>>> packet=IP(dst='google.com')\n>>> packet.ttl=10\n\n```", "```py\n>>> packet.show()\n\n```", "```py\n>>> packet[0].summary()\n'Ether / IP / UDP 192.168.1.35:20084 > 117.206.55.151:43108 / Raw'\n\n```", "```py\n>>> packet[0]\n<Ether  dst=6c:19:8f:e1:4a:8c src=b8:76:3f:8b:f5:fe type=0x800 |<IP  version=4L ihl=5L tos=0x0 len=140 id=30417 flags=DF frag=0L ttl=64 proto=udp chksum=0x545f src=192.168.1.35 dst=117.206.55.151 options=[] |<UDP  sport=20084 dport=43108 len=120 chksum=0xd750 |<Raw  load='\\x90\\x87]{\\xa1\\x9c\\xe7$4\\x07\\r\\x7f\\x10\\x83\\x84\\xb5\\x1d\\xae\\xa1\\x9eWgX@\\xf1\\xab~?\\x7f\\x84x3\\xee\\x98\\xca\\xf1\\xbdtu\\x93P\\x8f\\xc9\\xdf\\xb70-D\\x82\\xf6I\\xe0\\x84\\x0e\\xcaH\\xd0\\xbd\\xf7\\xed\\xf3y\\x8e>\\x11}\\x84T\\x05\\x98\\x02h|\\xed\\t\\xb1\\x85\\x9f\\x8a\\xbc\\xdd\\x98\\x07\\x14\\x10\\no\\x00\\xda\\xbf9\\xd9\\x8d\\xecZ\\x9a2\\x93\\x04CyG\\x0c\\xbd\\xf2V\\xc6<\"\\x82\\x1e\\xeb' |>>>>\n\n```", "```py\n>>> packet[0]\n.[UDP].summary()\n\n```", "```py\n>>> packet[0]\n.[2].summary()\n\n```", "```py\n >>> packet[0]\n    [Ether].src\n\n```", "```py\n>>>packet = sniff(iface=\"eth0\", count=3)\n\n```", "```py\n>>>packet[1].show()\n\n```", "```py\n >>>\u00a0packet=sniff(filter=\"icmp\", iface=\"eth0\u2033, count=3, prn=lambda x:x.summary())\n\n```", "```py\n >>>wrpcap(\"pkt-output.cap\" packets)\n\n```", "```py\n >>> packets = rdpcap(\"pkt-output.cap\")\n\n```", "```py\n >>>\u00a0packet = IP (dst=\"packtpub.com\")\n\n```", "```py\n >>>\u00a0packet = IP (dst=\"packtpub.com\")/ICMP()/\"Hello Packt\"\n\n```", "```py\n>>> packet.show()\n###[ IP ]###\n version= 4\n ihl= None\n tos= 0x0\n len= None\n id= 1\n flags= \n frag= 0\n ttl= 64\n proto= icmp\n chksum= None\n src= 192.168.1.35\n dst= Net('packtpub.com')\n \\options\\\n###[ ICMP ]###\n type= echo-request\n code= 0\n chksum= None\n id= 0x0\n seq= 0x0\n###[ Raw ]###\n load= 'Hello world'\n\n```", "```py\n>>>\u00a0send(packet)\n\n```", "```py\n >>>\u00a0sendp(Ether()/IP(dst=\"packtpub.com\")/ICMP()/\"Layer 2 packet\", iface=\"eth0\")\n\n```", "```py\n>>> packet = IP (dst=\"packtpub.com\")/ICMP()/\"Hello Packt\"\n>>> sr(packet)\nBegin emission:\n.Finished to send 1 packets.\n.*\nReceived 3 packets, got 1 answers, remaining 0 packets\n(<Results: TCP:0 UDP:0 ICMP:1 Other:0>, <Unanswered: TCP:0 UDP:0 ICMP:0 Other:0>)\n\n```", "```py\nfrom scapy.all import* \n\n```", "```py\nfrom scapy.all Ether, IP, TCP, sr1 \n\n```", "```py\nfrom scapy.all import * #Import Scapy \n# Create a DNS request Packet to 8.8.8.8  \ndns_packet = IP(dst=\"8.8.8.8\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=\"packtpub.com\")) \n\n# Send packet and get the response \ndns_request = sr1(dns_packet,verbose=1) \n# Print the response \nprint dns_request[DNS].summary() \n\n```", "```py\n$ sudo python dns_scapy.py \n WARNING: No route found for IPv6 destination :: (no default route?)\n Begin emission:\n Finished to send 1 packets\n Received 18 packets, got 1 answers, remaining 0 packets\n DNS Ans \"83.166.169.231\"\n\n```", "```py\nfrom scapy.all import * #Import Scapy \nfrom datetime import datetime \ninterface = 'eth0' #Interface to sniff \nfilter_bpf = 'udp and port 53' #BPF filter to filter udp packets in port 53 \n\n#Runs this for each packet \ndef select_DNS(packet): \n    packet_time = packet.sprintf('%sent.time%') \n    try: \n        if DNSQR in packet and packet.dport == 53: \n        #Print queries \n           print 'DNS queries Message from '+ packet[IP].src + '\n           to ' + packet[IP].dst +' at ' + packet_time \n\n        elif DNSRR in packet and packet.sport == 53: \n        #Print responses \n           print 'DNS responses Message from '+ packet[IP].src + '\n           to ' + packet[IP].dst +' at ' + packet_time \n    except: \n        pass \n#Sniff the packets  \nsniff(iface=interface, filter=filter_bpf, store=0, prn=select_DNS) \n\n```", "```py\nfrom scapy.all import * #Import Scapy \nfrom datetime import datetime \n\ninterface = 'eth0' #Interface to sniff \nfilter_bpf = 'udp and port 53' #BPF filter to filter udp packets in port 53 \n\n```", "```py\ndef select_DNS(packet): \n    packet_time = packet.sprintf('%sent.time%') \n    try: \n        if DNSQR in packet and packet.dport == 53: \n        #Print queries \n           print 'DNS queries Message from '+ packet[IP].src + '\n           to ' + packet[IP].dst +' at ' + packet_time \n\n        elif DNSRR in packet and packet.sport == 53: \n        #Print responses \n           print 'DNS responses Message from '+ packet[IP].src + '\n           to ' + packet[IP].dst +' at ' + packet_time \n    except: \n        pass \n\n```", "```py\nsniff(iface=interface, filter=filter_bpf, store=0, prn=select_DNS) \n\n```", "```py\nload_module(\"nmap\") \n\n```", "```py\nnmap_fp(\"192.168.1.1\",oport=443,cport=1) \n\n```", "```py\nsniff(prn=prnp0f) \n\n```"]