["```py\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \n\n```", "```py\nstdin, stdout, stderr = sshObj.exec_command('uptime') \nfor line in stdout.readlines():\n\n        print line.strip()\n\nssh.close()\n\n```", "```py\nstdin, stdout, stderr = ssh.exec_command(\"sudo ls\") \nstdin.write('password\\n') \nstdin.flush() \nfor line in stdout.readlines(): \n        print line.strip()\n\n```", "```py\nremotepath = '/etc/passwd' \nlocalpath = '/home/remote-passwd' \nsftp.get(remotepath, localpath)\n\n```", "```py\nremotepath = '/home/some-image.jpg' \nlocalpath = '/home/some-image.jpg' \nsftp.put(localpath, remotepath) \n\n```", "```py\nimport nmap\n\n```", "```py\nnmap = nmap.PortScanner() \nhost = '127.0.0.1' \n\n```", "```py\nnmap.scan(host, '1-1024') \n\n```", "```py\nprint nmap.command_line()\n\n```", "```py\nprint nmap.scaninfo()\n\n```", "```py\nfor host in nmap.all_hosts(): \n    print('Host : %s (%s)' % (host, nmap[host].hostname())) \n    print('State : %s' % nmap[host].state()) \n\n```", "```py\nfor proto in nmap[host].all_protocols(): \n    print('Protocol : %s' % proto) \n\nlistport = nmap[host]['tcp'].keys() \nlistport.sort() \n\nfor port in listport: \n    print('port : %s\\tstate : %s' % (port, nmap[host][proto][port]['state']))\n```", "```py\n $ ./w3af_api\n\n```", "```py\nfrom w3af_api_client import Connection, Scan\n\n```", "```py\nconnection = Connection('http://127.0.0.1:5000/')\n\n```", "```py\nprint connection.get_version() \n\n```", "```py\nprofile = file('w3af/profiles/OWASP_TOP10.pw3af').read() \ntarget = ['http://localhost'] \n\n```", "```py\nscan = Scan(connection) \n\n```", "```py\nscan.start(profile, target) \n\n```", "```py\nscan.get_urls() \nscan.get_log() \nscan.get_findings() \n\n```", "```py\nscan.get_fuzzable_requests()\n\n```", "```py\n $ sudo python setup.py install\n\n```", "```py\nimport w3af \n\n```", "```py\nfrom w3af.core.data.kb.shell import Shell\n```", "```py\n$ ./msfrpcd\n\n```", "```py\n$ ./msfrpcd -P 123456 -n -f \n\n```", "```py\n$ git clone https://github.com/allfro/pymetasploit.git\n\n```", "```py\n$ cd pymetasploit\n\n```", "```py\n$ python setup.py install\n\n```", "```py\nfrom metasploit.msfrpc import MsfRpcClient\n\n```", "```py\nclient = MsfRpcClient('123456') \n\n```", "```py\ndir(client) \n\n```", "```py\nauxilary = client.modules.auxiliary \nfor i in auxilary: \n   print \"\\t%s\" % I\n\n```", "```py\nscan = client.modules.use('auxiliary', 'scanner/ssh/ssh_version') \n\n```", "```py\nscan['VERBOSE'] = True \nscan['RHOSTS'] = '192.168.1.119'\n\n```", "```py\nPrint scan.execute() \n\n```", "```py\n{'job_id': 17, 'uuid': 'oxutdiys'}\n\n```", "```py\nclient.sessions.list\n\n```", "```py\nshell = client.sessions.session(1) \nshell.write('whoami\\n') \nprint shell.read() \n\n```", "```py\nfrom metasploit.msfrpc import MsfRpcClient \nfrom metasploit.msfconsole import MsfRpcConsole \n\n```", "```py\nclient = MsfRpcClient('123456', user='msf') \n\n```", "```py\nconsole = MsfRpcConsole(client) \n\n```", "```py\nconsole.execute('use scanner/ssh/ssh_version') \nconsole.execute('set RHOSTS 192.168.1.119') \nconsole.execute('set VERBOSE True') \nconsole.execute('run')\n\n```", "```py\nDatabaseMirror database.clamav.net\n\n```", "```py\n$ freshclam -v\n\n```", "```py\nLocalSocket /tmp/clamd.sock \n\n```", "```py\nimport pyclamd\n\n```", "```py\ntry: \n   clamd = pyclamd.ClamdUnixSocket() \n   # test if clamd unix socket is reachable \n   clamd.ping() \nexcept pyclamd.ConnectionError: \n   # if failed,  test for network socket \n   clamd = pyclamd.ClamdNetworkSocket() \n   try: \n         clamd.ping() \n   except pyclamd.ConnectionError: \n         raise ValueError('could not connect to clamd server either by unix\n         or network socket')\n\n```", "```py\nprint(clamd.version()) \n\n```", "```py\nprint(clamd.scan_file('path-to-file-or-folder-to-scan')) \n\n```", "```py\nfrom zapv2 import ZAPv2 \nfrom pprint import pprint \nimport time \n\n```", "```py\ntarget = 'http://127.0.0.1'\n\n```", "```py\nzap = zapv2()\n```", "```py\nzap = ZAPv2(proxies={'http': 'http://127.0.0.1:8090', 'https': 'http://127.0.0.1:8090'}) \n\n```", "```py\nzap.urlopen(target) \n\n```", "```py\ntime.sleep(2)\n\n```", "```py\nzap.spider.scan(target) \n\n```", "```py\nzap.ascan.scan(target)\n\n```", "```py\npprint (zap.core.alerts())\n\n```", "```py\nimport pytesseract \nfrom urllib import urlretrieve \nfrom PIL import Image \n\n```", "```py\nlink = 'http://www.cs.sfu.ca/~mori/research/gimpy/ez/96.jpg' \nurlretrieve(link,'temp.png') \n\n```", "```py\nprint pytesseract.image_to_string(Image.open('temp.png'))  \n\n```", "```py\nimg = Image.open('temp.png') \nimg = img.convert(\"RGBA\") \npix = img.load() \n\nfor y in xrange(img.size[1]): \n   for x in xrange(img.size[0]): \n         if pix[x, y][0] < 90: \n               pix[x, y] = (0, 0, 0, 255) \n\nfor y in xrange(img.size[1]): \n   for x in xrange(img.size[0]): \n         if pix[x, y][1] < 136: \n               pix[x, y] = (0, 0, 0, 255) \n\nfor y in xrange(img.size[1]): \n   for x in xrange(img.size[0]): \n         if pix[x, y][2] > 0: \n               pix[x, y] = (255, 255, 255, 255) \n\nimg.save(\"temp.png\", \"png\")\n```", "```py\n$ git clone https://github.com/beefproject/beef.git beef-lastest \n\n```", "```py\n$ sudo gem install bundler\n\n```", "```py\n$ cd beef-lastest \n$ bundle install\n\n```", "```py\n$ ./beef\n\n```", "```py\nmetasploit:\nenable: false\n```", "```py\nmetasploit:\nenable: true\n```", "```py\nfrom beefapi import BeefAPI\nBeef =\u00a0 BeefAPI ({})\nBeef.login ( 'beef' , 'beef' )\n```", "```py\nfor module in beef.modules:\u00a0\n\u00a0\u00a0 print module.id, module.name\n```", "```py\nfor module in beef.modules.findbyname('firefox'):\n\u00a0\u00a0 print module.id, module.name\n```", "```py\nfor hook in\u00a0 beef.hooked_browsers.online:\n\u00a0\u00a0 commandID=\u00a0 hook.run(231)['command_id']\n\u00a0\u00a0 print\u00a0 beef.modules.findbyid(231).results(hook.session, commandID)\n```", "```py\n$ pip install nessrest\n\n```", "```py\nfrom nessrest import ness6rest\n```", "```py\nscan = ness6rest.Scanner(url=\"https://localhost:8834\", login=\"user\", password=\"password\", insecure=True)\n```", "```py\nscan.scan_add(targets=\"192.168.1.107\")\nscan.scan_run()\n```", "```py\nscan.scan_results()\n```"]