- en: Chapter 8. Keylogging and Screen Grabbing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。键盘记录和屏幕截取
- en: With Python, we can programmatically do tasks such as catch all keystrokes,
    capture the screen, log the programs being run, close them, monitor clipboard
    content, and much more. Hackers may use these techniques to maliciously gain access
    to a victim's private information, while employers might use them to monitor employee
    activities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python，我们可以以编程方式执行诸如捕获所有按键、捕获屏幕、记录正在运行的程序、关闭它们、监视剪贴板内容等任务。黑客可能使用这些技术恶意获取受害者的私人信息，而雇主可能使用它们来监视员工的活动。
- en: 'Topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Keylogging with Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python进行键盘记录
- en: Screen grabbing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕截取
- en: Keyloggers
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘记录器
- en: A **keylogger** is a software or hardware device that logs or records keystrokes
    in real time. They are used to troubleshoot technical problems with computers
    and networks. They could also be used to monitor the network and computer usage
    of people without their direct knowledge. So, this can also be misused on public
    computers to steal passwords or credit card information.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**键盘记录器**是一种实时记录按键的软件或硬件设备。它们用于解决计算机和网络的技术问题。它们也可以用于在没有直接知识的情况下监视人们的网络和计算机使用情况。因此，这也可以在公共计算机上被滥用来窃取密码或信用卡信息。'
- en: Hardware keyloggers
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件键盘记录器
- en: Hardware-based keyloggers can monitor victims' activities without any software
    being installed. They can be easily detected since, is a physical device that
    may be connected somewhere between the computer keyboard and the USB/PS2 port.
    There are more advanced hardware keyloggers that are not externally visible and
    are not dependent on any software. So, they cannot be detected by any software.
    But, a hardware keylogger requires physical access to the victim.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 基于硬件的键盘记录器可以在没有安装任何软件的情况下监视受害者的活动。它们可以很容易地被检测到，因为它是一个物理设备，可能连接在计算机键盘和USB/PS2端口之间的某个地方。还有更先进的硬件键盘记录器，它们在外部不可见，也不依赖于任何软件。因此，它们无法被任何软件检测到。但是，硬件键盘记录器需要对受害者进行物理访问。
- en: In the case of wireless keyboards, it is possible to intercept the signals sent
    from the keyboard to its receiver with a wireless sniffer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无线键盘，可以拦截从键盘发送到其接收器的信号，使用无线嗅探器。
- en: Software keyloggers
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件键盘记录器
- en: With a software keylogger, we can provide access to the locally recorded keystrokes
    from a remote system. This can be done by uploading the recorded keystrokes to
    a database or FTP server. We can also send this as an email attachment periodically.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用软件键盘记录器，我们可以从远程系统提供对本地记录的按键的访问。这可以通过将记录的按键上传到数据库或FTP服务器来实现。我们还可以定期将其作为电子邮件附件发送。
- en: Keyloggers with pyhook
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pyhook的键盘记录器
- en: To create a simple keylogger script to record keystroke activities on a computer
    and to store it in a text file, we could use the `pyhook` module. This will provide
    callback for global mouse and keyboard events in Windows systems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的键盘记录器脚本来记录计算机上的按键活动并将其存储在文本文件中，我们可以使用`pyhook`模块。这将为Windows系统提供全局鼠标和键盘事件的回调。
- en: 'Import the required modules. Here, we are importing the `pyhook` and pythoncom
    modules from ActivePython Package. The `pythoncom` module is used in this script
    to pump all messages for the current thread:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的模块。在这里，我们从ActivePython Package导入`pyhook`和pythoncom模块。`pythoncom`模块在此脚本中用于为当前线程传递所有消息：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Define the file where to save the logging data. (Windows filenames use a backslash
    as a separator. But, in Python, backslash is an escape character, so we have to
    put a double slash "`\\`" in path. Otherwise, we can use rawstring to define the
    file name.):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 定义保存日志数据的文件。 （Windows文件名使用反斜杠作为分隔符。但是，在Python中，反斜杠是一个转义字符，所以我们必须在路径中放置双斜杠“\\”。否则，我们可以使用原始字符串来定义文件名。）：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can define the function that handles each keyboard event. Here, we can
    make use of logging modules to log each character:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义处理每个键盘事件的函数。在这里，我们可以利用日志模块来记录每个字符：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we instantiate the `pyhook` manager:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们实例化`pyhook`管理器：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Call a keyboard event function on each keystroke:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次按键时调用键盘事件函数：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will work in a Windows system. To work with Linux we have to depend on
    another module: `pyxhook`. You can get this module from [https://github.com/JeffHoogland/pyxhook](https://github.com/JeffHoogland/pyxhook).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Windows系统中工作。要在Linux中使用，我们必顈依赖另一个模块：`pyxhook`。您可以从[https://github.com/JeffHoogland/pyxhook](https://github.com/JeffHoogland/pyxhook)获取此模块。
- en: 'With `pyxhook`, you can rewrite the preceding script to work with Linux:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pyxhook`，您可以重写前面的脚本以在Linux中使用：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can improve the script to log the keystrokes to a remote server or to handle
    specific keystrokes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改进脚本以将按键记录到远程服务器或处理特定的按键。
- en: 'To send the logged keystrokes to an e-mail, we can use the `smtplib` module.
    We need to import the required modules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要将记录的按键发送到电子邮件，我们可以使用`smtplib`模块。我们需要导入所需的模块：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then we can define the method to send an e-mail by connecting to our SMTP server:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以定义通过连接到我们的SMTP服务器发送电子邮件的方法：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can pass the data and address to this method. This will send the keystrokes
    to the specified address. Now we can rewrite the `OnKeyboardEvent` method to send
    the keystrokes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将数据和地址传递给这个方法。这将把按键发送到指定的地址。现在我们可以重写`OnKeyboardEvent`方法来发送按键：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now this will send the keystrokes to the specified e-mail ID when the log file
    has 1000 characters in it. Likewise, we can add a method to upload the file to
    an FTP server. Here, we have to import the `ftplib` module and the `os` module:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当日志文件中有1000个字符时，这将把按键发送到指定的电子邮件ID。同样，我们可以添加一个方法将文件上传到FTP服务器。在这里，我们必须导入`ftplib`模块和`os`模块：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, define the method to upload the file to  an FTP server
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，定义将文件上传到FTP服务器的方法
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we can use this method in the `OnKeyboardEvent` function to upload keystrokes
    to the FTP server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`OnKeyboardEvent`函数中使用此方法将按键上传到FTP服务器。
- en: The output from the keylogger will be a huge file, with megabytes of text in
    which the data is hidden. We can use regular expressions to scan this file to
    get the required data. For instance, two regexes that would match the usernames
    and passwords from a pile of text.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘记录器的输出将是一个巨大的文件，其中包含隐藏的数据的数兆字节文本。我们可以使用正则表达式扫描此文件以获取所需的数据。例如，两个正则表达式可以匹配一堆文本中的用户名和密码。
- en: 'To identify e-mail IDs the following regex can be used:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别电子邮件ID，可以使用以下正则表达式：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To identify password like patterns that are longer than six letters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别超过六个字母的类似密码的模式：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With regex we can search for any data that has a pattern and can be built into
    a regex expression. Some examples of such data are social security numbers, credit
    card numbers, bank accounts, phone numbers, names, passwords, and more.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式，我们可以搜索具有模式并且可以构建为正则表达式表达式的任何数据。此类数据的一些示例包括社会安全号码、信用卡号码、银行账户、电话号码、姓名、密码等。
- en: Screen grabbing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕截取
- en: Screen grabber captures the victim's desktop and sends the images to a remote
    server. There are many Python modules that can be used to grab a raster image
    of the screen programmatically. We could make use of the **Python Image Library**
    (**PIL**) for Windows and OSX. The PIL package contains the `ImageGrab` module
    that can be used to grab screenshots.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕抓取程序捕获受害者的桌面并将图像发送到远程服务器。有许多Python模块可用于以编程方式抓取屏幕的光栅图像。我们可以利用**Python图像库**（**PIL**）用于Windows和OSX。
    PIL包含`ImageGrab`模块，可用于抓取屏幕截图。
- en: 'Import the modules, here we also import the time module to sleep the execution
    for three seconds—allowing the user to switch the screen display before the grab:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块，这里我们还导入时间模块以使执行休眠三秒，允许用户在抓取之前切换屏幕显示：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Sleep three seconds and take a screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 休眠三秒并拍摄屏幕截图：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also take a screenshot of a specific area on screen by providing the
    area as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过提供以下区域来在屏幕上拍摄特定区域的屏幕截图：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot illustrates the example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了示例：
- en: '![Screen grabbing](img/image_08_001.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕截图](img/image_08_001.jpg)'
- en: To grab a screenshot on a Linux system, we have to use the `wxPython` library,
    which has cross-platform compatibility. We can download wxPython from [http://wxpython.org/download.php](http://wxpython.org/download.php)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux系统上抓取屏幕截图，我们必须使用具有跨平台兼容性的`wxPython`库。我们可以从[http://wxpython.org/download.php](http://wxpython.org/download.php)下载wxPython
- en: 'Import the wx module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 导入wx模块：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'First, create the app instance:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建应用程序实例：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `wx.ScreenDC` method provides access to the entire desktop, which also
    includes any extended desktop monitor screens:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`wx.ScreenDC`方法提供对整个桌面的访问，其中还包括任何扩展的桌面监视器屏幕：'
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new empty bitmap with the size of the screen as destination:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有屏幕大小的新空位图作为目的地：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Copy the screen bitmap into the returned capture bitmap:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将屏幕位图复制到返回的捕获位图中：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save the bitmap as an image:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将位图保存为图像：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also, we could send this screenshot to a remote location, with minimal changes
    to the script. For instance, we can use the `scp` protocol to send it to another
    server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以将此屏幕截图发送到远程位置，只需对脚本进行最小更改。例如，我们可以使用`scp`协议将其发送到另一台服务器：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, we could use `ftplib` to upload the file with the FTP protocol:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`ftplib`使用FTP协议上传文件：
- en: 'Import the module `ftplib`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块`ftplib`：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Start a new session with the remote server credentials:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用远程服务器凭据开始新会话：
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the file using the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码打开文件：
- en: '[PRE25]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Send the file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 发送文件：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Close the file and FTP session:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件和FTP会话：
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have discussed the basic modules which you could use for keylogging and screen
    grabbing with Python. Now you can create customized versions of these scripts
    to log keys and grab screenshots. We will look at some attack automation techniques
    in the next chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了您可以使用Python进行按键记录和屏幕截图的基本模块。现在，您可以创建这些脚本的定制版本来记录按键并抓取屏幕截图。我们将在下一章中讨论一些攻击自动化技术。
