["```py\nimport hmac \n\nhmac_md5 = hmac.new('secret-key') \n\nf = open('sample-file.txt', 'rb') \ntry: \n    while True: \n        block = f.read(1024) \n        if not block: \n            break \n        hmac_md5.update(block) \nfinally: \n    f.close() \n\ndigest = hmac_md5.hexdigest() \nprint digest \n\n```", "```py\nimport hmac \nimport hashlib \n\ndigest_maker = hmac.new('secret-key', '', hashlib.sha256) \n\nf = open('sample-file.txt', 'rb') \ntry: \n    while True: \n        block = f.read(1024) \n        if not block: \n            break \n        digest_maker.update(block) \nfinally: \n    f.close() \n\ndigest = digest_maker.hexdigest() \nprint digest \n\n```", "```py\ntry: \n    hash_name = sys.argv[1] \nexcept IndexError: \n    print 'Specify the hash name as the first argument.' \nelse: \n    try: \n        data = sys.argv[2] \n    except IndexError:     \n        print 'Specify the data to hash as the second argument.' \nh = hashlib.new(hash_name) \n\n```", "```py\nimport argon2 \nhashed = argon2.argon2_hash(\"password\", \"some_salt\", ) \n\n```", "```py\nimport bcrypt \nhashed = bcrypt.hashpw(password, bcrypt.gensalt()) \n\n```", "```py\nimport pbkdf2 \nsalted_password = pbkdf2.pbkdf2_hex(password, some_random_salt, \n                                  iterations=1000, keylen=24)\n\n```", "```py\nfrom Crypto.Cipher import AES \nencrypt_AES = AES.new('secret-key-12345', AES.MODE_CBC, 'This is an IV456') \nmessage = \"This is message \" \nciphertext = encrypt_AES.encrypt(message) \nprint ciphertext \n\n```", "```py\ndecrypt_AES = AES.new('secret-key-12345', AES.MODE_CBC, 'This is an IV456') \nmessage_decrypted =  decrypt_AES.decrypt(ciphertext) \nprint message_decrypted \n\n```", "```py\nfrom Crypto.Cipher import AES \nimport os, random, struct \n\n```", "```py\ndef encrypt_file(key, filename, chunk_size=64*1024): \n\n    output_filename = filename + '.encrypted' \n\n```", "```py\niv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))\n# Initialization vector  \n\n```", "```py\n    encryptor = AES.new(key, AES.MODE_CBC, iv) \n    filesize = os.path.getsize(filename)  \n\n```", "```py\n     with open(filename, 'rb') as inputfile: \n        with open(output_filename, 'wb') as outputfile: \n            outputfile.write(struct.pack('<Q', filesize)) \n            outputfile.write(iv) \n\n            while True: \n                chunk = inputfile.read(chunk_size) \n                if len(chunk) == 0: \n                    break \n                elif len(chunk) % 16 != 0: \n                    chunk += ' ' * (16 - len(chunk) % 16) \n\n                outputfile.write(encryptor.encrypt(chunk)) \n\n```", "```py\nencrypt_file('abcdefghji123456', 'sample-file.txt');\n\n```", "```py\ndef decrypt_file(key, filename, chunk_size=24*1024): \n\n    output_filename = os.path.splitext(filename)[0] \n\n```", "```py\n    with open(filename, 'rb') as infile: \n        origsize = struct.unpack('<Q', infile.read(struct.calcsize('Q')))[0] \n        iv = infile.read(16)\n\n```", "```py\n        decryptor = AES.new(key, AES.MODE_CBC, iv) \n\n        with open(output_filename, 'wb') as outfile: \n            while True: \n                chunk = infile.read(chunk_size) \n                if len(chunk) == 0: \n                    break \n                outfile.write(decryptor.decrypt(chunk)) \n\n            outfile.truncate(origsize) \n\n```", "```py\ndecrypt_file('abcdefghji123456', 'sample-file.txt.encrypted'); \n\n```"]