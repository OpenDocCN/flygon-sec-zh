["```py\nImport pefile\n```", "```py\npe = pefile.PE('path/to/file')\n```", "```py\n>>>import pefile \n>>>pe = pefile.PE('md5sum.exe') \n>>> dir(pe)\n\n```", "```py\n>>> pprint.pprint(dir(pe))\n\n```", "```py\n>>> pprint.pprint(dir(pe.OPTIONAL_HEADER))\n\n```", "```py\n>>>hex( pe.OPTIONAL_HEADER.ImageBase)\n\n```", "```py\n>>>for section in pe.sections:\n print (section.Name,\n\u00a0\u00a0\u00a0\u00a0\u00a0 hex(section.VirtualAddress),\n\u00a0\u00a0\u00a0\u00a0\u00a0 hex(section.Misc_VirtualSize),\n\u00a0\u00a0\u00a0\u00a0\u00a0 section.SizeOfRawData)\n\n```", "```py\nImport peutils\nsignatures = peutils.SignatureDatabase('/path/to/signature.txt')\n```", "```py\nsignatures = peutils.SignatureDatabase('handlers.sans.org/jclausing/userdb.txt')\n```", "```py\nmatches = signatures.match(pe, ep_only = True)\nprint matches\n```", "```py\nfor entry in pe.DIRECTORY_ENTRY_IMPORT:\n\u00a0 print entry.dll\n\u00a0 for imp in entry.imports:\n\u00a0\u00a0\u00a0 print '\\t', hex(imp.address), imp.name\n```", "```py\nfor exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:\n\u00a0 print hex(pe.OPTIONAL_HEADER.ImageBase + exp.address), exp.name, exp.ordinal\n```", "```py\nfrom capstone import *\ncs = Cs(CS_ARCH_X86, CS_MODE_64)\nfor i in cs.disasm('\\x85\\xC0', 0x1000)\n\u00a0\u00a0 print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n```", "```py\n0x1000:\u00a0\u00a0\u00a0\u00a0 test\u00a0 eax, eax\n\n```", "```py\nfrom capstone import *\nimport pefile\npe = pefile.PE('md5sum.exe')\nentryPoint = pe.OPTIONAL_HEADER.AddressOfEntryPoint\ndata = pe.get_memory_mapped_image()[entryPoint:]\ncs = Cs(CS_ARCH_X86, CS_MODE_32)\nfor i in cs.disasm(data, 0x1000):\n\u00a0\u00a0\u00a0 print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n```", "```py\nfrom pydbg import *\nimport sys\n```", "```py\ndefine breakpoint_handler(dbg):\n\u00a0\u00a0 print dbg.dump_context()\n\u00a0\u00a0 return DBG_CONTINUE\n```", "```py\ndbg = pydbg()\ndbg.set_callback(EXEPTION_BREAKPOINT, breakpoint_handler)\n```", "```py\ndbg.attach(int(sys.argv[1]))\n```", "```py\ndbg.bp_set(int(sys.argv[1], 16), \"\", 1)\n```", "```py\ndbg.debug_event_loop()\n```", "```py\n$ python debug.py 1234 0x00001fa6\n\n```"]