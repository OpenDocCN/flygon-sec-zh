["```py\nimport urllib2, argparse, sys, threading, logging, Queue, time\nqueue = Queue.Queue()\nlock = threading.Lock()\n```", "```py\nclass Agent(threading.Thread):\n    def __init__(self, queue, logger, verbose):\n        threading.Thread.__init__(self)\n        self.queue = queue\n        self.logger = logger\n        self.verbose = verbose\n```", "```py\n    def run(self):\n        while True:\n            host = self.queue.get()\n            print(\"[*] Testing %s\") % (str(host))\n            target = \"http://\" + host\n            target_secure = \"https://\" + host\n```", "```py\n            try:\n                request = urllib2.Request(target)\n                request.get_method = lambda : 'HEAD'\n                response = urllib2.urlopen(request)\n            except:\n                with lock:\n                    self.logger.debug(\"[-] No web server at %s \n                        reported by thread %s\" % (str(target), str\n                            (threading.current_thread().name)))\n                    print(\"[-] No web server at %s reported by thread %s\") % \n                        (str(target), str(threading.current_thread().name))\n                response = None\n            if response != None:\n                with lock:\n                    self.logger.debug(\"[+] Response from %s reported by \n                        thread %s\" % (str(target), str(threading.current_thread().\n                          name)))\n                    print(\"[*] Response from insecure service on %s reported by \n                        thread %s\") % (str(target), str(threading.current_thread().name))\n                self.logger.debug(response.info())\n```", "```py\n            try:\n                target_secure = urllib2.urlopen(target_secure)\n                request_secure.get_method = lambda : 'HEAD'\n                response_secure = urllib2.urlopen(request_secure)\n            except:\n                with lock:\n                    self.logger.debug(\"[-] No secure web server at %s reported by \n                        thread %s\" % (str(target_secure), str(threading.current_thread().name)))\n                    print(\"[-] No secure web server at %s reported by \n                        thread %s\") % (str(target_secure), str(threading.current_thread().name))\n                response_secure = None\n            if response_secure != None:\n                with lock:\n                    self.logger.debug(\"[+] Secure web server at %s reported by \n                        thread %s\" % (str(target_secure), str(threading.current_thread().name)))\n                    print(\"[*] Response from secure service on %s reported by thread %s\") \n                        % (str(target_secure), str(threading.current_thread().name))\n                self.logger.debug(response_secure.info())\n```", "```py\n            self.queue.task_done()\n```", "```py\n    log = args.log                                                                                    # Configure the log output file\n    if \".log\" not in log:\n        log = log + \".log\"\n    level = logging.DEBUG                                                                             # Logging level\n    format = logging.Formatter(\"%(asctime)s [%(threadName)-12.12s] \n      [%(levelname)-5.5s]  %(message)s\") \n    logger_obj = logging.getLogger()                                                                  # Getter for logging agent\n    file_handler = logging.FileHandler(args.log)                                                                                                         \n    targets_list = []\n    # Configure logger formats for STDERR and output file\n    file_handler.setFormatter(format)\n    # Configure logger object\n    logger_obj.addHandler(file_handler)\n    logger_obj.setLevel(level)\n```", "```py\n    # Load the targets into a list and remove trailing \"\\n\"\n    with open(targets) as f:\n        targets_list = [line.rstrip() for line in f.readlines()]\n    # Spawn workers to access site\n    for thread in range(0, threads):\n        worker = Agent(queue, logger_obj, verbose)\n        worker.setDaemon(True)\n        worker.start()\n    # Build queue of work\n    for target in targets_list:\n        queue.put(target)\n    # Wait for the queue to finish processing\n    queue.join()\nif __name__ == '__main__':\n    main()\n```", "```py\nimport multiprocessing, urllib2, argparse, sys, logging, datetime, time\ndef host_request(host):\n    print(\"[*] Testing %s\") % (str(host))\n    target = \"http://\" + host\n    target_secure = \"https://\" + host\n    timenow = time.time()\n    record = datetime.datetime.fromtimestamp(timenow).strftime\n      ('%Y-%m-%d %H:%M:%S')\n    logger = logging.getLogger(record)\n    try:\n        request = urllib2.Request(target)\n        request.get_method = lambda : 'HEAD'\n        response = urllib2.urlopen(request)\n        response_data = str(response.info())\n        logger.debug(\"[*] %s\" % response_data)\n        response.close()\n    except:\n        response = None\n        response_data = None\n```", "```py\n    try:\n        request_secure = urllib2.urlopen(target_secure)\n        request_secure.get_method = lambda : 'HEAD'\n        response_secure = str(urllib2.urlopen(request_secure).read())\n        response_secure_data = str(response.info())\n        logger.debug(\"[*] %s\" % response_secure_data)\n        response_secure.close()\n    except:\n        response_secure = None\n        response_secure_data = None\n```", "```py\n    if response_data != None and response_secure_data != None:\n        r = \"[+] Insecure webserver detected at %s reported by %s\" % \n          (target, str(multiprocessing.Process().name))\n        rs = \"[+] Secure webserver detected at %s reported by %s\" % \n          (target_secure, str(multiprocessing.Process().name))\n        logger.debug(\"[+] Insecure web server detected at %s and reported \n          by process %s\" % (str(target), str(multiprocessing.Process().name)))\n        logger.debug(\"[+] Secure web server detected at %s and reported by process \n          %s\" % (str(target_secure), str(multiprocessing.Process().name)))\n        return(r, rs)\n    elif response_data == None and response_secure_data == None:\n        r = \"[-] No insecure webserver at %s reported by %s\" % (target, \n          str(multiprocessing.Process().name))\n        rs = \"[-] No secure webserver at %s reported by %s\" % (target_secure, \n          str(multiprocessing.Process().name))\n        logger.debug(\"[-] Insecure web server was not detected at %s and reported \n          by process %s\" % (str(target), str(multiprocessing.Process().name)))\n        logger.debug(\"[-] Secure web server was not detected at %s and reported \n          by process %s\" % (str(target_secure), str(multiprocessing.Process().name)))\n        return(r, rs)\n    elif response_data != None and response_secure_data == None:\n        r = \"[+] Insecure webserver detected at %s reported by %s\" % \n          (target, str(multiprocessing.Process().name))\n        rs = \"[-] No secure webserver at %s reported by %s\" % (target_secure, \n          str(multiprocessing.Process().name))\n        logger.debug(\"[+] Insecure web server detected at %s and reported by \n          process %s\" % (str(target), str(multiprocessing.Process().name)))\n        logger.debug(\"[-] Secure web server was not detected at %s and reported \n          by process %s\" % (str(target_secure), str(multiprocessing.Process().name)))\n        return(r, rs)\n    elif response_secure_data != None and response_data == None:\n        response = \"[-] No insecure webserver at %s reported by %s\" % \n          (target, str(multiprocessing.Process().name))\n        rs = \"[+] Secure webserver detected at %s reported by %s\" % (target_secure, \n          str(multiprocessing.Process().name))\n        logger.debug(\"[-] Insecure web server was not detected at %s and reported by \n          process %s\" % (str(target), str(multiprocessing.Process().name)))\n        logger.debug(\"[+] Secure web server detected at %s and reported by process %s\" \n          % (str(target_secure), str(multiprocessing.Process().name)))\n        return(r, rs)\n    else:\n        logger.debug(\"[-] No results were recorded for %s or %s\" % (str(target), str(target_secure)))\n```", "```py\ndef log_init(log):\n    level = logging.DEBUG                                                                            \n    format = logging.Formatter(\"%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s\") # Log format\n    logger_obj = logging.getLogger()                                                                 \n    file_handler = logging.FileHandler(log)                                                                                                           \n    targets_list = []\n    # Configure logger formats for STDERR and output file\n    file_handler.setFormatter(format)\n    # Configure logger object\n    logger_obj.addHandler(file_handler)\n    logger_obj.setLevel(level)\n```", "```py\n    # Set Constructors\n    targets = args.targets                                                                            \n    verbose = args.verbose                                                                            \n    processes = args.multiprocess                                                                            \n    log = args.log                                                                                    \n    if \".log\" not in log:\n        log = log + \".log\"\n    # Load the targets into a list and remove trailing \"\\n\"\n    with open(targets) as f:\n        targets_list = [line.rstrip() for line in f.readlines()]\n```", "```py\n    # Establish pool list\n    pool = multiprocessing.Pool(processes=threads, \n      initializer=log_init(log))\n    # Queue up the targets to assess\n    results = pool.map(host_request, targets_list)\n    for result in results:\n        for value in result:\n            print(value)\nif __name__ == '__main__':\n    main()\n```"]