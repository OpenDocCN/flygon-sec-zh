["```py\nclass Nmap_parser:\n    def __init__(self, nmap_xml, verbose=0):\n        self.nmap_xml = nmap_xml\n        self.verbose = verbose\n        self.hosts = {}\n        try:\n            self.run()\n        except Exception, e:\n            print(\"[!] There was an error %s\") % (str(e))\n            sys.exit(1)\n```", "```py\ndef run(self):\n    if not self.nmap_xml:\n        sys.exit(\"[!] Cannot open Nmap XML file: %s \\n[-] Ensure that your are passing the correct file and format\" % (self.nmap_xml))\n    try:\n        tree = etree.parse(self.nmap_xml)\n    except:\n        sys.exit(\"[!] Cannot open Nmap XML file: %s \\n[-] Ensure that your are passing the correct file and format\" % (self.nmap_xml))\n    hosts={}\n    services=[]\n    hostname_list=[]\n    root = tree.getroot()\n    hostname_node = None\n    if self.verbose> 0:\n        print (\"[*] Parsing the Nmap XML file: %s\") % (self.nmap_xml)\n```", "```py\nfor host in root.iter('host'):\n    hostname = \"Unknown hostname\"\n    for addresses in host.iter('address'):\n        hwaddress = \"No MAC Address ID'd\"\n        ipv4 = \"No IPv4 Address ID'd\"\n        addressv6 = \"No IPv6 Address ID'd\"\n        temp = addresses.get('addrtype')\n        if \"mac\" in temp:\n            hwaddress = addresses.get('addr')\n            if self.verbose> 2:\n                print(\"[*] The host was on the same broadcast domain\")\n        if \"ipv4\" in temp:\n            address = addresses.get('addr')\n            if self.verbose> 2:\n                print(\"[*] The host had an IPv4 address\")\n        if \"ipv6\" in temp:\n            addressv6 = addresses.get('addr')\n            if self.verbose> 2:\n                print(\"[*] The host had an IPv6 address\")\n```", "```py\n            try:\n                hostname_node = host.find('hostnames').find('hostname')\n            except:\n                if self.verbose > 1:\n                    print (\"[!] No hostname found\")\n            if hostname_node is not None:\n                hostname = hostname_node.get('name')\n            else:\n                hostname = \"Unknown hostname\"\n                if self.verbose > 1:\n                    print(\"[*] The hosts hostname is %s\") % (str(hostname_node))\n            hostname_list.append(hostname)+--\n```", "```py\n            for item in host.iter('port'):\n                state = item.find('state').get('state')\n                #if state.lower() == 'open':\n                service = item.find('service').get('name')\n                protocol = item.get('protocol')\n                port = item.get('portid')\n                services.append([hostname_list, address, protocol, port, service, hwaddress, state])\n```", "```py\n        hostname_list=[]\n        for i in range(0, len(services)):\n            service = services[i]\n            index = len(service) - 1\n            hostname = str1 = ''.join(service[0])\n            address = service[1]\n            protocol = service[2]\n            port = service[3]\n            serv_name = service[4]\n            hwaddress = service[5]\n            state = service[6]\n            self.hosts[i] = [hostname, address, protocol, port, serv_name, hwaddress, state]\n            if self.verbose > 2:\n                print (\"[+] Adding %s with an IP of %s:%s with the service %s\")%(hostname,address,port,serv_name)\n```", "```py\n        if self.hosts:\n            if self.verbose > 4:\n                print (\"[*] Results from NMAP XML import: \")\n                for key, entry in self.hosts.iteritems():\n                    print(\"[*] %s\") % (str(entry))\n            if self.verbose > 0:\n                print (\"[+] Parsed and imported unique ports %s\") % (str(i+1))\n        else:\n            if self.verbose > 0:\n                print (\"[-] No ports were discovered in the NMAP XML file\")\n```", "```py\n    def hosts_return(self):\n        # A controlled return method\n        # Input: None\n        # Returned: The processed hosts\n        try:\n             return self.hosts\n        except Exception as e:\n            print(\"[!] There was an error returning the data %s\") % (e)\n```", "```py\n    if \",\" in xml:\n        xml_list = xml.split(',')\n    else:\n        xml_list.append(xml)\n    for x in xml_list:\n        try:\n            tree_temp = etree.parse(x)\n        except:\n            sys.exit(\"[!] Cannot open XML file: %s \\n[-] Ensure that your are passing the correct file and format\" % (x))\n        try:\n            root = tree_temp.getroot()\n            name = root.get(\"scanner\")\n            if name is not None and \"nmap\" in name:\n                if verbose > 1:\n                    print (\"[*] File being processed is an NMAP XML\")\n                hosts.append(Nmap_parser(x, verbose))\n            else:\n                print(\"[!] File % is not an NMAP XML\") % (str(x))\n                sys.exit(1)\n        except Exception, e:\n            print(\"[!] Processing of file %s failed %s\") % (str(x), str(e))\n            sys.exit(1)\n```", "```py\n    if not hosts:\n        sys.exit(\"[!] There was an issue processing the data\")\n    for inst in hosts:\n        hosts_temp = inst.hosts_return()\n        if hosts_temp is not None:\n            for k, v in hosts_temp.iteritems():\n                hosts_dict[count] = v\n                count+=1\n            hosts_temp.clear()\n```", "```py\n    if verbose > 3:\n        for key, value in hosts_dict.iteritems():\n            print(\"[*] Key: %s Value: %s\") % (key,value)\n    temp = [(k, hosts_dict[k]) for k in hosts_dict]\n    temp.sort()\n    key = 0\n    for k, v in temp:\n        compare = lambda x, y: collections.Counter(x) == collections.Counter(y)\n        if str(v) in str(processed_hosts.values()):\n            continue\n        else:\n            key+=1\n            processed_hosts[key] = v\n```", "```py\n    if verbose > 0:\n        for key, target in processed_hosts.iteritems():\n            print(\"[*] Hostname: %s IP: %s Protocol: %s Port: %s Service: %s State: %s MAC address: %s\" % (target[0],target[1],target[2],target[3],target[4],target[6],target[5]))\n```", "```py\ntry:\n    import nmap_doc_generator as gen\nexcept Exception as e:\n    print(e)\n    sys.exit(\"[!] Please download the nmap_doc_generator.py script\")\n```", "```py\ngen.Nmap_doc_generator(verbose, processed_hosts, filename, simple)\n```", "```py\nimport sys\ntry:\n    import xlsxwriter\nexcept:\n    sys.exit(\"[!] Install the xlsx writer library as root or through sudo: pip install xlsxwriter\")\n```", "```py\nclass Nmap_doc_generator():\n    def __init__(self, verbose, hosts_dict, filename, simple):\n        self.hosts_dict = hosts_dict\n        self.filename = filename\n        self.verbose = verbose\n        self.simple = simple\n        try:\n            self.run()\n        except Exception as e:\n            print(e)\n```", "```py\n    def run(self):\n        # Run the appropriate module\n        if self.verbose > 0:\n            print (\"[*] Building %s.xlsx\") % (self.filename)\n            self.generate_xlsx()\n```", "```py\n    def generate_xlsx(self):\n        if \"xls\" or \"xlsx\" not in self.filename:\n            self.filename = self.filename + \".xlsx\"\n        workbook = xlsxwriter.Workbook(self.filename)\n```", "```py\n        # Row one formatting\n        format1 = workbook.add_format({'bold': True})\n    # Header color\n    # Find colors: http://www.w3schools.com/tags/ref_colorpicker.asp\n  if self.simple:\n            format1.set_bg_color('#538DD5')\n  else:\n      format1.set_bg_color('#33CC33') # Report Format\n```", "```py\n        # Even row formatting\n        format2 = workbook.add_format({'text_wrap': True})\n        format2.set_align('left')\n        format2.set_align('top')\n        format2.set_border(1)\n        # Odd row formatting\n        format3 = workbook.add_format({'text_wrap': True})\n        format3.set_align('left')\n        format3.set_align('top')\n    # Row color\n  if self.simple:\n      format3.set_bg_color('#C5D9F1') \n  else:\n      format3.set_bg_color('#99FF33') # Report Format \n        format3.set_border(1)\n```", "```py\n        if self.verbose > 0:\n            print (\"[*] Creating Workbook: %s\") % (self.filename)\n        # Generate Worksheet 1\n        worksheet = workbook.add_worksheet(\"All Ports\")\n        # Column width for worksheet 1\n        worksheet.set_column(0, 0, 20)\n        worksheet.set_column(1, 1, 17)\n        worksheet.set_column(2, 2, 22)\n        worksheet.set_column(3, 3, 8)\n        worksheet.set_column(4, 4, 26)\n        worksheet.set_column(5, 5, 13)\n        worksheet.set_column(6, 6, 12)\n```", "```py\n        # Define starting location for Worksheet one\n        row = 1\n        col = 0\n        # Generate Row 1 for worksheet one\n        worksheet.write('A1', \"Hostname\", format1)\n        worksheet.write('B1', \"Address\", format1)\n        worksheet.write('C1', \"Hardware Address\", format1)\n        worksheet.write('D1', \"Port\", format1)\n        worksheet.write('E1', \"Service Name\", format1)\n        worksheet.write('F1', \"Protocol\", format1)\n        worksheet.write('G1', \"Port State\", format1)\n        worksheet.autofilter('A1:G1')\n```", "```py\n        # Populate Worksheet 1\n        for key, value in self.hosts_dict.items():\n            try:\n                hostname = value[0]\n                address = value[1]\n                protocol = value[2]\n                port = value[3]\n                service_name = value[4]\n                hwaddress = value[5]\n                state = value[6]\n            except:\n                if self.verbose > 3:\n                    print(\"[!] An error occurred parsing host ID: %s for Worksheet 1\") % (key)\n```", "```py\n                    print(\"[!] An error occurred parsing host ID: %s for Worksheet 1\") % (key)\n            try:\n                if row % 2 != 0:\n                    temp_format = format2\n                else:\n                    temp_format = format3\n```", "```py\n                worksheet.write(row, col,     hostname, temp_format)\n                worksheet.write(row, col + 1, address, temp_format)\n                worksheet.write(row, col + 2, hwaddress, temp_format)\n                worksheet.write(row, col + 3, port, temp_format)\n                worksheet.write(row, col + 4, service_name, temp_format)\n                worksheet.write(row, col + 5, protocol, temp_format)\n                worksheet.write(row, col + 6, state, temp_format)\n                row += 1\n            except:\n                if self.verbose > 3:\n                    print(\"[!] An error occurred writing data for Worksheet 1\")\n```", "```py\n        try:\n            workbook.close()\n        except:\n            sys.exit(\"[!] Permission to write to the file or location provided was denied\")\n```"]