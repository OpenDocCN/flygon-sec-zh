- en: Malware Detection with API Calls and PE Headers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API调用和PE头部进行恶意软件检测
- en: Some of the most annoying threats in information security are malicious programs.
    Every day, we hear news about data breaches and cyber attacks with malware. Attackers
    are enhancing their development skills and building new malware that are able
    to bypass company safeguards and AV-products. This chapter will introduce some
    new techniques and solutions for defeating malware, using cutting-edge data science,
    Python libraries, and machine learning algorithms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全中最烦人的威胁之一是恶意程序。每天，我们都会听到关于数据泄露和恶意软件的网络攻击的新闻。攻击者正在提高他们的开发技能，并构建新的恶意软件，能够绕过公司的安全防护和杀毒产品。本章将介绍一些新的技术和解决方案，使用尖端的数据科学、Python库和机器学习算法来打败恶意软件。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Malware analysis approaches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件分析方法
- en: Machine learning aided malware analysis techniques, with practical, real-world
    Python projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习辅助的恶意软件分析技术，带有实际的、真实世界的Python项目
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will use the same Python libraries that we already installed.
    We are going to use those libraries during most of the chapters in this book.
    That is why we used the first chapter to teach you how to install all of the required
    libraries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用已经安装的相同Python库。我们将在本书的大部分章节中使用这些库。这就是为什么我们在第一章中教你如何安装所有所需的库。
- en: You will find all of the codes discussed, in addition to some other useful scripts,
    in the repository at [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter03](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter03).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现所有讨论过的代码，以及一些其他有用的脚本，都在存储库中[https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter03](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter03)。
- en: Malware overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意软件概述
- en: 'Malware are malicious pieces of software that are designed to infiltrate and
    damage information systems without the users'' consent. The term *malware* covers
    a lot of categories. There are many different types of malware:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件是设计用来在用户不知情的情况下渗透和破坏信息系统的恶意软件。术语*恶意软件*涵盖了许多类别。有许多不同类型的恶意软件：
- en: Viruses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 病毒
- en: Ransomware
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勒索软件
- en: Worms
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蠕虫
- en: Trojans
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特洛伊木马
- en: Backdoor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后门
- en: Spyware
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间谍软件
- en: Keyloggers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘记录器
- en: Adware, bots, and rootkits
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广告软件、机器人和rootkits
- en: Malware analysis
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意软件分析
- en: 'Your job, as a malware analyst, is to discover exactly what happened to a system,
    and to make sure that the machines damaged by malicious software are isolated
    from the organization''s network. In order to perform malware analysis, we need
    to follow specific operations and approaches. When it comes to malware analysis,
    we have to perform three techniques: static malware analysis, dynamic malware
    analysis, and memory malware analysis. We are going to look at them one by one.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为恶意软件分析员，你的工作是发现系统发生了什么，并确保受恶意软件损害的机器与组织的网络隔离。为了进行恶意软件分析，我们需要遵循特定的操作和方法。在进行恶意软件分析时，我们必须执行三种技术：静态恶意软件分析、动态恶意软件分析和内存恶意软件分析。我们将逐一看看它们。
- en: Static malware analysis
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态恶意软件分析
- en: 'The first step in malware analysis is gathering all of the information about
    the malware. Static analysis is the art of collecting all of the available information
    about the malicious binary, using different techniques and utilities. In this
    phase, the analyst examines the malware without really executing it. Some common
    static malware analysis methods are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析的第一步是收集有关恶意软件的所有信息。静态分析是使用不同的技术和实用程序收集有关恶意二进制文件的所有可用信息的艺术。在这个阶段，分析人员在不真正执行它的情况下检查恶意软件。一些常见的静态恶意软件分析方法如下：
- en: '**Online antivirus scanning**: Scanning the suspicious file using an online
    scanner is a good way to check the file, thanks to online environments that give
    you the ability to scan the file using many antivirus products. The most well
    known online scanner is VirusTotal. If you want to scan a file, just visit [https://www.virustotal.com/#/home/upload](https://www.virustotal.com/#/home/upload)
    and upload the file:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在线杀毒扫描**：使用在线扫描器扫描可疑文件是检查文件的好方法，这要归功于在线环境，让你能够使用许多杀毒产品扫描文件。最著名的在线扫描器是VirusTotal。如果你想扫描一个文件，只需访问[https://www.virustotal.com/#/home/upload](https://www.virustotal.com/#/home/upload)并上传文件：'
- en: '![](img/00072.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: 'To automate the tasks, VirusTotal delivers some useful APIs. Thus, you can
    build your own Python script with a few lines:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化任务，VirusTotal提供了一些有用的API。因此，你可以用几行代码构建自己的Python脚本：
- en: '![](img/00073.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: 'To scan `file.exe`, you could use the following code snippet from VirusTotal:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要扫描`file.exe`，你可以使用来自VirusTotal的以下代码片段：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To obtain a key, just create a VirusTotal community account.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取密钥，只需创建一个VirusTotal社区帐户。
- en: '**Hashing**: This is a technique to identify files. Each hashed file has a
    unique hash. The most commonly used hash functions are MD5 and SHA256.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希**：这是一种识别文件的技术。每个哈希文件都有一个唯一的哈希。最常用的哈希函数是MD5和SHA256。'
- en: '**Strings**: These are also great sources of information. Extracting strings
    from the malicious program will give us juicy information about the malware. Some
    strings include URIs, URLs, error messages, and comments.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：这些也是信息的重要来源。从恶意程序中提取字符串将为我们提供有关恶意软件的重要信息。一些字符串包括URI、URL、错误消息和注释。'
- en: Dynamic malware analysis
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态恶意软件分析
- en: 'After collecting information about malware, you should run it in an isolated
    and secure environment. Generally, these environments are called **malware analysis
    sandboxes**. Sandboxes are loaded with analysis and monitoring tools to gather
    information about the malware while it is running. Malware analysts can collect
    the following information, and more:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 收集有关恶意软件的信息后，你应该在一个隔离和安全的环境中运行它。一般来说，这些环境被称为**恶意软件分析沙盒**。沙盒加载了分析和监控工具，以在恶意软件运行时收集有关恶意软件的信息。恶意软件分析人员可以收集以下信息，以及更多：
- en: TCP connections
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP连接
- en: DNS summaries
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS摘要
- en: Malware behaviors
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件行为
- en: System calls
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用
- en: Memory malware analysis
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存恶意软件分析
- en: Years ago, using the two previous techniques was enough to analyze malware,
    but attackers are now using new, more complicated techniques to avoid detection.
    I bet that you have heard about fileless malware. Memory malware analysis is needed
    to detect the new wave of malware. Memory malware analysis occurs by analyzing
    memory dumps collected from infected machines. In order to perform memory analysis,
    the analyst first needs to acquire memory (dumping memory), and can analyze it
    later by using many utilities and techniques.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，使用前两种技术就足以分析恶意软件，但攻击者现在正在使用新的、更复杂的技术来避免检测。我敢打赌你已经听说过无文件恶意软件。需要内存恶意软件分析来检测新一波的恶意软件。内存恶意软件分析是通过分析从感染的机器收集的内存转储来进行的。为了进行内存分析，分析师首先需要获取内存（转储内存），然后可以使用许多实用程序和技术来进行后续分析。
- en: 'One of the most used frameworks is the volatility framework. If you have installed
    a Kali Linux distribution, you can use volatility directly on your machine without
    installing it. The following screenshot was taken from a Kali Linux built-in volatility
    framework:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的框架之一是volatility框架。如果你安装了Kali Linux发行版，你可以在机器上直接使用volatility而不需要安装它。以下截图是从Kali
    Linux内置的volatility框架中获取的：
- en: '![](img/00074.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: 'Volatility helps analysts to collect information from memory dumps, including
    the following, and more:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility帮助分析师从内存转储中收集信息，包括以下内容等等：
- en: Bash history
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash历史
- en: API hooks
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API钩子
- en: Network information
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络信息
- en: Kernel-loaded modules
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核加载模块
- en: Evasion techniques
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规避技术
- en: 'Attackers and malware developers are continuously coming up with new techniques
    and methods to avoid detection. Some of the most common techniques are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者和恶意软件开发者不断想出新的技术和方法来避免检测。一些最常见的技术包括：
- en: '**Obfuscation**: This is the practice of making the malware more difficult
    to detect or analyze. Dead-code insertion, register reassignment, and crypting
    are three obfuscation techniques.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混淆**：这是使恶意软件更难以检测或分析的做法。死代码插入、寄存器重新分配和加密是三种混淆技术。'
- en: '**Binding**: This is the practice of binding a malware with a legitimate file,
    resulting in a single executable.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定**：这是将恶意软件与合法文件绑定在一起的做法，导致形成一个可执行文件。'
- en: '**Packing**: A packer, sometimes called a **self-extracting archive**, is a
    software that unpacks itself in memory when the *packed file* is executed.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包：打包器，有时被称为**自解压缩存档**，是一种软件，当执行*打包文件*时，在内存中解压缩自身。
- en: Portable Executable format files
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可移植可执行文件格式文件
- en: '**Portable Executable** (**PE**) files are file formats for executables, DDLs,
    and object codes  used in 32-bit and 64-bit versions of Windows. They contain
    many useful pieces of information for malware analysts, including imports, exports,
    time-date stamps, subsystems, sections, and resources. The following is the basic
    structure of a PE file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**可移植可执行文件**（**PE**）文件是用于32位和64位Windows版本的可执行文件、DDL和目标代码的文件格式。它们包含了许多对恶意软件分析师有用的信息，包括导入、导出、时间戳、子系统、部分和资源。以下是PE文件的基本结构：'
- en: '![](img/00075.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: 'Some of the components of a PE file are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PE文件的一些组件如下：
- en: '**DOS Header**: This starts with the first 64 bytes of every PE file, so DOS
    can validate the executable and can run it in the DOS stub mode.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOS头部：这从每个PE文件的前64个字节开始，因此DOS可以验证可执行文件，并在DOS stub模式下运行它。
- en: '**PE Header**: This contains information, including the location and size of
    the code.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PE头部：这包含了信息，包括代码的位置和大小。
- en: '**PE Sections**: They contain the main contents of the file.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE部分**：它们包含文件的主要内容。'
- en: To explore the PE header's information, you can use many tools, such as PE EXPLORER,
    PEview, and PEstudio.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索PE头部的信息，可以使用许多工具，如PE EXPLORER、PEview和PEstudio。
- en: Machine learning malware detection using PE headers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PE头部进行机器学习恶意软件检测
- en: 'To train our machine learning models to find malware datasets, there are a
    lot of publicly available sources for data scientists and malware analysts. For
    example, the following websites give security researchers and machine learning
    enthusiasts the ability to download many different malware samples:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了训练我们的机器学习模型来查找恶意软件数据集，有许多公开可用的数据源供数据科学家和恶意软件分析师使用。例如，以下网站为安全研究人员和机器学习爱好者提供了下载许多不同恶意软件样本的能力：
- en: '**Malware-Traffic-Analysis**: [https://www.malware-traffic-analysis.net/](https://www.malware-traffic-analysis.net/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件流量分析**：[https://www.malware-traffic-analysis.net/](https://www.malware-traffic-analysis.net/)'
- en: '**Kaggle Malware Families**: [https://www.kaggle.com/c/malware-classification](https://www.kaggle.com/c/malware-classification)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kaggle恶意软件家族：[https://www.kaggle.com/c/malware-classification](https://www.kaggle.com/c/malware-classification)
- en: '**VX Heaven**: [http://83.133.184.251/virensimulation.org/index.html](http://83.133.184.251/virensimulation.org/index.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VX天堂**：[http://83.133.184.251/virensimulation.org/index.html](http://83.133.184.251/virensimulation.org/index.html)'
- en: '**VirusTotal**: [https://www.virustotal.com](https://www.virustotal.com)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VirusTotal**：[https://www.virustotal.com](https://www.virustotal.com)'
- en: '**VirusShare**: [https://virusshare.com](https://virusshare.com)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VirusShare**：[https://virusshare.com](https://virusshare.com)'
- en: To work with PE files, I highly recommend using an amazing Python library called `pefile`.
    `pefile` gives you the ability to inspect headers, analyze sections, and retrieve
    data, in addition to other capabilities, like packer detection and PEiD signature
    generation. You can check out the GitHub project at [https://github.com/erocarrera/pefile](https://github.com/erocarrera/pefile).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理PE文件，我强烈推荐使用一个名为`pefile`的惊人Python库。`pefile`让你能够检查头部、分析部分、检索数据，以及其他功能，如打包器检测和PEiD签名生成。你可以在GitHub项目中查看[https://github.com/erocarrera/pefile](https://github.com/erocarrera/pefile)。
- en: 'You can also install it with PIP, like we did with the other machine learning
    libraries:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以像我们使用其他机器学习库一样使用PIP安装它：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we installed `pefile` successfully:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们成功安装了`pefile`：
- en: '![](img/00076.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'Let''s start to build our first malware classifier. For this model, we are
    going to use three different techniques:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建我们的第一个恶意软件分类器。对于这个模型，我们将使用三种不同的技术：
- en: Random forests
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机森林
- en: Gradient-boosting classification
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 梯度提升分类
- en: AdaBoost classification
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AdaBoost分类
- en: As you may have noticed from the classification algorithms in this book, we
    are trying to use many different techniques. In some cases, you can use one of
    the previously discussed algorithms, but I am trying to use different techniques
    in every chapter, so that you can acquire a clear understanding of how to use
    each machine learning technique.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从本书中的分类算法中注意到的那样，我们正在尝试使用许多不同的技术。在某些情况下，您可以使用先前讨论过的算法之一，但我正在尝试在每一章中使用不同的技术，以便您可以清楚地了解如何使用每种机器学习技术。
- en: 'By now, you are aware that the first step to building a machine learning model
    (after studying the project needs and requirements, of course) is downloading
    a dataset. In this section, we are going to download a malware dataset delivered
    by a security blogger, Prateek Lalwani. The malware dataset contains features
    extracted from the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经意识到构建机器学习模型的第一步（在研究项目需求和要求之后，当然）是下载数据集。在本节中，我们将下载由安全博主Prateek Lalwani提供的恶意软件数据集。恶意软件数据集包含从以下提取的特征：
- en: 41,323 Windows binaries (executables `.exe` and `.dlls`), as legitimate files.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 41,323个Windows二进制文件（可执行文件`.exe`和`.dlls`），作为合法文件。
- en: 96,724 malware files downloaded from the VirusShare website. So, the dataset
    contains 138,048 lines, in total.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从VirusShare网站下载的96,724个恶意软件文件。因此，数据集总共包含138,048行。
- en: 'The dataset is divided as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集分为如下：
- en: '![](img/00077.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: 'Let''s start by loading the malware dataset using the `pandas` Python library:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`pandas` Python库中加载恶意软件数据集开始：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/00078.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: 'To make sure that the dataset has loaded properly, let''s print the number
    of important features:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保数据集已正确加载，请打印重要特征的数量：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`The Number of important features is 56` will be the resulting line:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`重要特征的数量为56`将是结果行：'
- en: '![](img/00079.gif)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.gif)'
- en: To improve the estimators' accuracy scores, we are going to use the `sklearn.feature_selection`
    module. This module is used in feature selection or dimensionality reduction in
    the dataset.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高估计器的准确度分数，我们将使用`sklearn.feature_selection`模块。该模块用于特征选择或数据集的降维。
- en: 'To compute the features'' importance, in our case, we are going to use tree-based
    feature selection. Load the `sklearn.feature_selection` module:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算特征的重要性，在我们的情况下，我们将使用基于树的特征选择。加载`sklearn.feature_selection`模块：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/00080.gif)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.gif)'
- en: 'So, the algorithms has selected nine important features for us. To print them
    out, use the following commands:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，算法已为我们选择了九个重要特征。要打印它们，请使用以下命令：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The most important features are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的特征如下：
- en: '![](img/00081.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: 'Now, it is time to train our model with a random forest classifier. Don''t
    forget to split the dataset, like we learned previously:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候用随机森林分类器训练我们的模型了。不要忘记像我们之前学到的那样分割数据集：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/00082.gif)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.gif)'
- en: 'Let''s look at the final result:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终结果：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/00083.gif)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.gif)'
- en: 'The score seems very promising. This model detected malware with a 99% success
    rate, which is a great result. To obtain more information about the `False positive`
    and `False negative` rates of our malware classifier, import the scikit-learn
    `confusion_matrix` module:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 得分看起来非常有希望。该模型以99%的成功率检测到了恶意软件，这是一个很好的结果。要获取有关我们的恶意软件分类器的`假阳性`和`假阴性`率的更多信息，请导入scikit-learn`confusion_matrix`模块：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following lines:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下行：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/00084.gif)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.gif)'
- en: The `False positive rate` is 0.6%, and the `False negative rate` is 1.4%.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`假阳性率`为0.6%，`假阴性率`为1.4%。'
- en: 'To train the model with another classifier, redo the previous steps, but instead
    of choosing the random forest classifier, select a machine learning algorithm.
    For example, I am going to select gradient-boosting:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用另一个分类器训练模型，请重复上述步骤，但是选择随机森林分类器的代替，选择一种机器学习算法。例如，我将选择梯度提升：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/00085.gif)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.gif)'
- en: 'Let''s check the second score:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查第二个分数：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/00086.gif)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.gif)'
- en: 'This has a 98.8% detection rate. The following is the score using the AdaBoost
    classifier:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这有98.8%的检测率。使用AdaBoost分类器的得分如下：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/00087.gif)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.gif)'
- en: Machine learning malware detection using API calls
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API调用的机器学习恶意软件检测
- en: Analyzing malware with API calls plays a huge role in malware analysis. Thus,
    APIs can give malware analysts an idea about malware behavior, especially when
    basic, static analysis wasn't successful due to obfuscation techniques (like packers,
    crypters, and protectors). Malware analysts can gain an understanding of how a
    malicious file works by studying API calls. There are many online tools that will
    give you the ability to analyze malware in a secure environment. Those utilities
    and environments are called sandboxes. Malware that is detected is identified
    by a hash function (MD5 or SHA256). Malware analysts use hashing to sign a file.
    For example, the following APIs were taken from the report of an online malware
    scan with [https://www.hybrid-analysis.com](https://www.hybrid-analysis.com).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API调用分析恶意软件在恶意软件分析中起着重要作用。因此，API可以让恶意软件分析人员了解恶意软件行为，特别是在基本的静态分析由于混淆技术（如打包程序、加密程序和保护程序）而失败时。通过研究API调用，恶意软件分析人员可以了解恶意文件的工作原理。有许多在线工具可以让您在安全环境中分析恶意软件。这些实用程序和环境被称为沙箱。检测到的恶意软件由哈希函数（MD5或SHA256）标识。恶意软件分析人员使用哈希对文件进行签名。例如，以下API是从[https://www.hybrid-analysis.com](https://www.hybrid-analysis.com)的在线恶意软件扫描报告中获取的。
- en: 'These are some details about  the malware "PE32 executable (GUI) Intel 80386,
    for MS Windows". Its hash is: 4c510779ab6a58a3bdbbe8d5f3ec568fcf33df81b0f1a5bdacabf78a9c62f492'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于恶意软件“PE32可执行文件（GUI）Intel 80386，用于MS Windows”的一些细节。它的哈希是：4c510779ab6a58a3bdbbe8d5f3ec568fcf33df81b0f1a5bdacabf78a9c62f492
- en: '![](img/00088.gif)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.gif)'
- en: 'According to the Microsoft website, [https://msdn.microsoft.com/](https://msdn.microsoft.com/),
    `GetProcAddress` retrieves the address of an exported function or variable from
    the specified **dynamic-link library** (**DLL**). So, if you want to learn more
    about the other calls, just go to the Microsoft developer network and search for
    the API call functions:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据微软网站，[https://msdn.microsoft.com/](https://msdn.microsoft.com/)，`GetProcAddress`从指定的**动态链接库**（**DLL**）中检索导出函数或变量的地址。因此，如果您想了解更多关于其他调用的信息，只需访问微软开发者网络并搜索API调用函数：
- en: '![](img/00089.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'The report includes a full summary of the findings, not only the API calls.
    It includes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 报告包括对发现的完整总结，不仅包括API调用。它包括：
- en: General information
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般信息
- en: Malicious indicators
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意指标
- en: Unusual characteristics
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常特征
- en: Anti-detection/stealthiness
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反检测/隐蔽性
- en: Anti-reverse engineering
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向工程
- en: Network-related information
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络相关信息
- en: 'The following are pieces of information about the scanned malware. We discussed
    most of the required findings (static analysis artifacts: size, type and so on)
    previously:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关扫描的恶意软件的信息。我们之前讨论了大部分所需的发现（静态分析工件：大小、类型等）：
- en: '![](img/00090.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: 'For our second malware classifier, we are going to use API calls to build a
    machine learning malware detector. To extract APIs from malware binaries, the
    malware analyst needs to go through well-defined steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第二个恶意软件分类器，我们将使用API调用来构建一个机器学习恶意软件检测器。为了从恶意软件二进制文件中提取API，恶意软件分析师需要按照明确定的步骤进行：
- en: Malware unpacking
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恶意软件解包
- en: Assembly program retrieving
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 汇编程序检索
- en: API call extraction
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API调用提取
- en: Analyzing the API calls, using the official Microsoft website
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方微软网站分析API调用
- en: 'You can categorize malware behaviors into groups. For example, the University
    of Ballarat categorized API calls into six categories in the article, *Towards
    Understanding Malware Behavior by the Extraction of API Calls*. You can use it
    to analyze your findings:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将恶意软件行为分为不同组。例如，巴拉瑞特大学在文章《通过提取API调用来理解恶意软件行为》中将API调用分为六类。您可以使用它来分析您的发现：
- en: '![](img/00091.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'As a demonstration, let''s build an Android malware detection project using
    a support vector machine learning algorithm fed by API calls dataset. This chapter''s
    GitHub folder contains a prepared dataset to build our model:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作为演示，让我们使用支持向量机学习算法和API调用数据集构建一个Android恶意软件检测项目。本章的GitHub文件夹包含一个准备好的数据集来构建我们的模型：
- en: '![](img/00092.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'Before building the model, we need to import some useful modules:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建模型之前，我们需要导入一些有用的模块：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/00093.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: 'First, let''s pre-process our CSV file (`Android_Feats.csv`):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们预处理我们的CSV文件（`Android_Feats.csv`）：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/00094.gif)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.gif)'
- en: 'Identify the data and the labels in the file using NumPy:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NumPy标识文件中的数据和标签：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/00095.gif)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.gif)'
- en: 'By now, the processing phase is done. As seen previously, we need to extract
    the most important features, because computing all of the available features would
    be a heavy task:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，处理阶段已经完成。如前所述，我们需要提取最重要的特征，因为计算所有可用的特征将是一项繁重的任务：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00096.gif)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.gif)'
- en: 'Now, divide the dataset (data and labels) into training and testing sets:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将数据集（数据和标签）分成训练集和测试集：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/00097.gif)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.gif)'
- en: 'The feature selection has been successfully completed. To train the model,
    we are going to use the support vector machine classifier:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 特征选择已成功完成。为了训练模型，我们将使用支持向量机分类器：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/00098.gif)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.gif)'
- en: Voila! The accuracy of our new model is 98%, which is a great detection rate.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们新模型的准确率为98%，这是一个很高的检测率。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Malware is one of the most prevalent cyber threats haunting the security of
    modern organizations. Black hat hackers are constantly improving; hence, classic
    detection techniques are obsolete, and AV products are often unable to detect
    advanced persistent threats. That is why machine learning techniques can help
    us to detect malware.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件是困扰现代组织安全的最普遍的网络威胁之一。黑客不断改进，因此传统的检测技术已经过时，杀毒产品通常无法检测到高级持久性威胁。这就是为什么机器学习技术可以帮助我们检测恶意软件。
- en: In this chapter, we learned how to build malware classifiers, using many machine
    learning algorithms and open source Python libraries. The next chapter will teach
    us how to build more robust systems to detect malware, using the same algorithm
    used by the human mind. We are going to learn how to use deep learning to detect
    malware  , using the same Python libraries used throughout this book.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用许多机器学习算法和开源Python库构建恶意软件分类器。下一章将教我们如何使用与人类思维相同的算法构建更加健壮的系统来检测恶意软件。我们将学习如何使用深度学习来检测恶意软件，使用本书中一直使用的Python库。
- en: Questions
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: You are now able to build a machine learning model. Let's practice, putting
    our new skills to the test. In this chapter's GitHub repository, you will find
    a dataset that contains information about Android malware samples. Now you need
    to build your own model, following these instructions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以构建一个机器学习模型。让我们练习一下，将我们的新技能付诸实践。在本章的GitHub存储库中，您将找到一个包含有关Android恶意软件样本信息的数据集。现在您需要按照这些说明构建自己的模型。
- en: 'In the `Chapter3-Practice` GitHub repository, you will find a dataset that
    contains the feature vectors of more than 11,000 benign and malicious Android
    applications:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter3-Practice` GitHub存储库中，您将找到一个包含超过11,000个良性和恶意Android应用程序特征向量的数据集：
- en: Load the dataset using the `pandas` python library, and this time, add the `low_memory=False`
    parameter. Search for what that parameter does.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pandas` python库加载数据集，并且这次添加`low_memory=False`参数。搜索该参数的作用。
- en: Prepare the data that will be used for training.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备用于训练的数据。
- en: Split the data with the `test_size=0.33`  parameter.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`test_size=0.33`参数拆分数据。
- en: Create a set of classifiers that contains `DecisionTreeClassifier()`, `RandomForestClassifier(n_estimators=100)`,
    and `AdaBoostClassifier()`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`DecisionTreeClassifier()`、`RandomForestClassifier(n_estimators=100)`和`AdaBoostClassifier()`的分类器集合。
- en: What is an `AdaBoostClassifier()`?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AdaBoostClassifier()`是什么？'
- en: Train the model using the three classifiers and print out the metrics of every
    classifier.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这三个分类器训练模型，并打印出每个分类器的指标。
- en: Further reading
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, check out the following log posts and documents:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查看以下日志帖子和文档：
- en: PE Format (Windows): [https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PE格式（Windows）：[https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx)
- en: '*Malware Analysis: An Introduction*:[https://www.sans.org/reading-room/whitepapers/malicious/malware-analysis-introduction-2103](https://www.sans.org/reading-room/whitepapers/malicious/malware-analysis-introduction-2103)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*恶意软件分析：介绍*：[https://www.sans.org/reading-room/whitepapers/malicious/malware-analysis-introduction-2103](https://www.sans.org/reading-room/whitepapers/malicious/malware-analysis-introduction-2103)'
- en: VirusTotal documentation: [https://www.virustotal.com/en/documentation/](https://www.virustotal.com/en/documentation/)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirusTotal文档：[https://www.virustotal.com/en/documentation/](https://www.virustotal.com/en/documentation/)
