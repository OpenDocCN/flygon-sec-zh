["```py\n# git clone https://github.com/defcom17/NSL_KDD\n```", "```py\n>>> import pandas as pd\n>>> Data = pd.read_csv(\"KDDTrain+.csv\", header=None)\n```", "```py\nColumns = [\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\n \"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\"num_failed_logins\",\n \"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\n \"num_file_creations\",\"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n \"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"label\",\"difficulty\"]\n```", "```py\nData = pd.read_csv(\"KDDTrain+.csv\", header=None, names = Columns)\nData.columns\n```", "```py\nData.describe()\n```", "```py\nfrom sklearn import preprocessing \nData.protocol_type = preprocessing.LabelEncoder().fit_transform(Data[\"protocol_type\"])\n Data.service = preprocessing.LabelEncoder().fit_transform(Data[\"service\"])\n Data.flag = preprocessing.LabelEncoder().fit_transform(Data[\"flag\"])\n Data.label = preprocessing.LabelEncoder().fit_transform(Data[\"label\"])\n```", "```py\nX = Data[Columns].as_matrix()\ny = Data.label.as_matrix()\n```", "```py\npip install yellowbrick\n```", "```py\nvisualizer = Rank1D(features=Columns, algorithm='shapiro')\nvisualizer.fit(X, y) \nvisualizer.transform(X) \nvisualizer.poof()\n```", "```py\nvisualizer.poof(outpath=\"Figure1.png\") \n```", "```py\nvisualizer = Rank2D(features=Columns, algorithm='covariance')\n```", "```py\nvisualizer.fit(X, y)\nvisualizer.transform(X)\nvisualizer.poof()\n```", "```py\nvisualizer = PCADecomposition(scale=True, center=False, col=y)\nvisualizer.fit_transform(X,y)\nvisualizer.poof()\n```", "```py\nvisualizer = PCADecomposition(scale=True, center=False, color=y, proj_dim=3)\n visualizer.fit_transform(X,y)\n visualizer.poof()\n```", "```py\nclf = RandomForestClassifier(max_depth=2, random_state=0)\nclf.fit(X, y)\nScore = clf.score(X_test,y_test)\nprint(Score*100)\n```"]