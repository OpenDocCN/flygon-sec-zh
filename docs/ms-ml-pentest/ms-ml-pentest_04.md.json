["```py\n# pip install keras\n```", "```py\n# pip install tensorflow\n```", "```py\n# pip install np_utils\n```", "```py\n>>> from keras.models import Sequential\n>>> from keras.layers import Dense\n>>> from keras.layers import Dropout\n>>> from keras.utils import np_utils\n```", "```py\n>>> seed = 7\n>>> numpy.random.seed(seed)\n>>> (X_train, y_train), (X_test, y_test) = mnist.load_data()\n```", "```py\n>>> num_pixels = X_train.shape[1] * X_train.shape[2]\n>>> X_train = X_train.reshape(X_train.shape[0], num_pixels).astype('float32')\n>>> X_test = X_test.reshape(X_test.shape[0], num_pixels).astype('float32')\n>>> X_train = X_train / 255\n>>> X_test = X_test / 255\n\n>>> y_train = np_utils.to_categorical(y_train)\n>>> y_test = np_utils.to_categorical(y_test)\n>>> num_classes = y_test.shape[1]\n>>> model = Sequential()\n>>>model.add(Dense(num_pixels, input_dim=num_pixels, activation='relu'))\n>>>model.add(Dense(num_classes,activation='softmax'))\n>>>model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n```", "```py\n# wget https://wildfire.paloaltonetworks.com/publicapi/test/pe  \n```", "```py\n>>> import os\n>>> import pefile\n```", "```py\n>>> PEfile = pefile.PE(\"pe\", fast_load=True)\n```", "```py\nDebugSize = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[6].Size\nprint (DebugSize)\nDebugRVA = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[6].VirtualAddress\nprint (DebugRVA)\n ImageVersion = PEfile.OPTIONAL_HEADER.MajorImageVersion\n print (ImageVersion)\nOSVersion = PEfile.OPTIONAL_HEADER.MajorOperatingSystemVersion\nprint (OSVersion)\nExportRVA = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[0].VirtualAddress\n print (ExportRVA)\nExportSize = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[0].Size\nprint (ExportSize)\nIATRVA = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[12].VirtualAddress\n print (IATRVA)\nResSize = PEfile.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size\n print (ResSize)\nLinkerVersion = PEfile.OPTIONAL_HEADER.MajorLinkerVersion\n print (LinkerVersion)\nNumberOfSections = PEfile.FILE_HEADER.NumberOfSections\n print (NumberOfSections)\nStackReserveSize = PEfile.OPTIONAL_HEADER.SizeOfStackReserve\n print (StackReserveSize)\nDll = PEfile.OPTIONAL_HEADER.DllCharacteristics\nprint (Dll)\n```", "```py\nMalware  = pd.read_csv(\"Malware.csv\")\nClean_Files = pd.read_csv(\"Clean_Files.csv\")\n```", "```py\n>>> import numpy as np\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.metrics import confusion_matrix\n>>> from sklearn.neural_network import MLPClassifier\n>>> from sklearn.preprocessing import StandardScaler\n```", "```py\ny = dataset['Clean_Files']\nX = dataset.drop('Clean_Files',axis = 1)\nX = np.asarray(X)\ny = np.asarray(y)\n```", "```py\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state=0)\n```", "```py\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n```", "```py\nMLP = MLPClassifier(hidden_layer_sizes=(12,12,12,12,12,12))\n```", "```py\nMLP.fit(X_train,y_train)\nPredictions = MLP.predict(X_test)\n```", "```py\nTN, FP, FN TP = confusion_matrix(y_test,predictions).ravel()\n```", "```py\nprint (\"True Positive:\" , TP)\nprint (\"True Negative:\" , TN)\nprint (\"False Positive:\" , FP)\nprint (\"False Negative:\" , FN)\n```", "```py\nimport numpy\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras import backend \nbackend.set_image_dim_ordering('th')\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(1, 28, 28), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n```", "```py\nimport os\nimport scipy\nimport array\n filename = '<Malware_File_Name_Here>';\n f = open(filename,'rb');\n ln = os.path.getsize(filename);\nwidth = 256;\n rem = ln%width;\n a = array.array(\"B\");\n a.fromfile(f,ln-rem);\n f.close();\n g = numpy.reshape(a,(len(a)/width,width));\n g = numpy.uint8(g);\n scipy.misc.imsave('<Malware_File_Name_Here>.png',g);\n```", "```py\n# pip install pyleargist==1.0.1\n```", "```py\nimport Image\nImport leargist\n image = Image.open('<Image_Name_Here>.png');\n New_im = image.resize((64,64));\ndes = leargist.color_gist(New_im);\nFeature_Vector = des[0:320];\n```", "```py\nimport keras\n from keras.models import Sequential,Input,Model\n from keras.layers import Dense, Dropout, Flatten\n from keras.layers import Conv2D, MaxPooling2D\n from keras.layers.normalization import BatchNormalization\n from keras.layers.advanced_activations import LeakyReLU\n```", "```py\ntrain_X = train_X.reshape(-1, 32,32, 1)\ntest_X = test_X.reshape(-1, 32,32, 1)\n```", "```py\nbatch_size = 64\nepochs = 20\nnum_classes = 25\n```", "```py\nMalware_Model = Sequential()\nMalware_Model.add(Conv2D(32, kernel_size=(3,3),activation='linear',input_shape=(32,32,1),padding='same'))\nMalware_Model.add(LeakyReLU(alpha=0.1))\nMalware_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nMalware_Model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))\nMalware_Model.add(LeakyReLU(alpha=0.1))\nMalware_Model.add(Dense(1024, activation='linear'))\nMalware_Model.add(LeakyReLU(alpha=0.1))\nMalware_Model.add(Dropout(0.4))\nMalware_Model.add(Dense(num_classes, activation='softmax'))\n```", "```py\nMalware_Model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n```", "```py\nMalware_Model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))\n```", "```py\nMalware_Model.evaluate(test_X, test_Y_one_hot, verbose=0)\nprint('The accuracy of the Test is:', test_eval[1])\n```"]