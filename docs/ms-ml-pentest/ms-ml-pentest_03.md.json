["```py\nimport requests\n url = 'https://www.virustotal.com/vtapi/v2/file/scan'\n params = {'apikey': '<apikey>'}\n files = {'file': ('myfile.exe', open('myfile.exe', 'rb'))}\n response = requests.post(url, files=files, params=params)\n print(response.json())\n```", "```py\n# pip install pefile\n```", "```py\nimport pandas as pd\nMalwareDataset = pd.read_csv('MalwareData.csv', sep='|')\nLegit = MalwareDataset[0:41323].drop(['legitimate'], axis=1)\nMalware = MalwareDataset[41323::].drop(['legitimate'], axis=1)\n```", "```py\nprint('The Number of important features is  %i \\n' % Legit.shape[1])\n```", "```py\nimport sklearn\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import cross_validation \nData = MalwareDataset.drop(['Name', 'md5', 'legitimate'], axis=1).values\nTarget = MalwareDataset['legitimate'].values\nFeatSelect =  sklearn.ensemble.ExtraTreesClassifier().fit(Data, Target)\nModel = SelectFromModel(FeatSelect, prefit=True)\nData_new = Model.transform(Data)\nprint (Data.shape)\nprint (Data_new.shape)\n```", "```py\nFeatures = Data_new.shape[1]\nIndex = np.argsort(ske.ExtraTreesClassifier().fit(Data,Target).feature_importances_)[::-1][:Features]\nfor feat  in range(Features):\nprint(MalwareDataset.columns[2+index[feat]])\n```", "```py\nLegit_Train, Legit_Test, Malware_Train, Malware_Test = cross_validation.train_test_split(Data_new, Target ,test_size=0.2) \nclf =  sklearn.ensemble.RandomForestClassifier(n_estimators=50)\nclf.fit(Legit_Train, Malware_Train)\nscore = clf.score(Legit_Test, Malware_Test)\n```", "```py\nprint(\"The score of Random Forest Algorithm is,\" score*100))\n```", "```py\nfrom sklearn.metrics import confusion_matrix\n```", "```py\nResult = clf.predict(Legit_Test)\nCM = confusion_matrix(Malware_Test, Result)\nprint(\"False positive rate : %f %%\" % ((CM[0][1] / float(sum(CM[0])))*100)) print('False negative rate : %f %%' % ( (CM[1][0] / float(sum(CM[1]))*100)))\n```", "```py\nClf = sklearn.ensemble.GradientBoostingClassifier(n_estimators=50)\nClf.fit(Legit_Train, Malware_Train)\nScore = Clf.score(Legit_Test, Malware_Test)\n```", "```py\nprint (\"The Model score using Gradient Boosting is\", Score * 100)\n```", "```py\nClassifiers =\n{ \"RandomForest\": ske.RandomForestClassifier(n_estimators=50), \"GradientBoosting\": ske.GradientBoostingClassifier(n_estimators=50), \"AdaBoost\": ske.AdaBoostClassifier(n_estimators=100),}\n\nfor Classif in Classifiers:\nclf = Classifiers[Classif]\nclf.fit(Legit_Train,Malware_Train)\nscore = clf.score(Legit_test, Malware_test)\nprint(\"%s : %f %%\" % (Classif, score*100))\n```", "```py\n>>> from sklearn.feature_selection import mutual_info_classif\n>>> from sklearn import preprocessing\n>>> import numpy as np\n>>> from sklearn.svm import SVC, LinearSVC\n>>> from sklearn import svm\n>>> import csv\n>>> import random\n```", "```py\n>>> PRatio = 0.7\n>>> Dataset =  open('Android_Feats.csv')\n>>> Reader = csv.reader(Dataset)\n>>> Data = list(Reader)\n>>> Data = random.sample(Data, len(Data))\n>>> Data = np.array(Data)\n> Dataset.close()\n```", "```py\n>>> cols = np.shape(Data)[1]\n>>> Y = Data[:,cols-1]\n>>> Y = np.array(Y)\n>>> Y = np.ravel(Y,order='C')\n>>> X = Data[:,:cols-1]\n>>> X = X.astype(np.float)\n>>> X = preprocessing.scale(X)\n```", "```py\nFeatures = [i.strip() for i in open(\"Android_Feats.csv\").readlines()]\nFeatures = np.array(Features)\nMI= mutual_info_classif(X,Y)\nFeatureind = sorted(range(len(MI)), key=lambda i: MI[i], reverse=True)[:50]\nSelectFeats = Features[Featureind]\n```", "```py\nPRows = int(PRatio*len(Data))\nTrainD = X[:PRows,Featureind]\nTrainL = Y[:PRows]\nTestD = X[PRows:,Featureind]\nTestL = Y[PRows:]\n```", "```py\n>>> clf = svm.SVC()\n>>> clf.fit(TrainD,TrainL)\n>>> score = clf.score(TestD,TestL)\n>>> print (score * 100)\n```"]