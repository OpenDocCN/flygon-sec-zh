["```py\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n```", "```py\nsklearn_lda = LDA(n_components=2)\n X_lda_sklearn = sklearn_lda.fit_transform(X, y)\n```", "```py\nimport pandas\nimport numpy\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n# load data\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = pandas.read_csv(url, names=names)\narray = dataframe.values\nX = array[:,0:8]\nY = array[:,8]\n# feature extraction\ntest = SelectKBest(score_func=chi2, k=4)\nfit = test.fit(X, Y)\n# summarize scores\nnumpy.set_printoptions(precision=3)\nprint(fit.scores_)\nfeatures = fit.transform(X)\n# summarize selected features\nprint(features[0:5,:]) \n```", "```py\nfrom pandas import read_csv\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n# load data\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = read_csv(url, names=names)\narray = dataframe.values\nX = array[:,0:8]\nY = array[:,8]\n# feature extraction\nmodel = LogisticRegression()\nrfe = RFE(model, 3)\nfit = rfe.fit(X, Y)\nprint(\"Num Features: %d\") % fit.n_features_print(\"Selected Features: %s\") % fit.support_\nprint(\"Feature Ranking: %s\") % fit.ranking_\n```", "```py\n>>> from sklearn.svm import LinearSVC\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.feature_selection import SelectFromModel\n>>> iris = load_iris()\n>>> X, y = iris.data, iris.target\n>>> X.shape\n>>> lsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\n>>> model = SelectFromModel(lsvc, prefit=True)\n>>> X_new = model.transform(X)\n>>> X_new.shape\n```", "```py\n>>> from sklearn.ensemble import ExtraTreesClassifier\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.feature_selection import SelectFromModel\n>>> iris = load_iris()\n>>> X, y = iris.data, iris.target\n>>> X.shape\n>>> clf = ExtraTreesClassifier()\n>>> clf = clf.fit(X, y)\n>>> clf.feature_importances_ \n>>> model = SelectFromModel(clf, prefit=True)\n>>> X_new = model.transform(X)\n>>> X_new.shape         \n```", "```py\nClassifier = Pipeline([\n  ('feature_selection', SelectFromModel(<SelectionTechniqueHere>))),\n  ('classification', <ClassificationAlgorithmHere>)\n ])\n Classifier.fit(X, y)\n```", "```py\npython -m pip install --upgrade pip\npython -m pip install jupyter\n```", "```py\n\"/device:GPU:0\" : Your device GPU\n\"/device:GPU:1\" : 2nd GPU device on your Machine\n```", "```py\nwith tf.device('/device:GPU:0'):\n    <What to Do Here>\n```", "```py\nWget \"http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_8.0.44-1_amd64.deb\"\n\nsudo dpkg -i cuda-repo-ubuntu1604_8.0.44-1_amd64.deb\n\nsudo apt-get update\n\nsudo apt-get install cuda\n```", "```py\nsudo tar -xvf cudnn-8.0-linux-x64-v5.1.tgz -C /usr/local\n\nexport PATH=/usr/local/cuda/bin:$PATH\n\nexport LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\"\nexport CUDA_HOME=/usr/local/cuda\n```", "```py\nfrom sklearn.grid_search import GridSearchCV\n```", "```py\nfrom sklearn.learning_curve import learning_curve\n```"]