["```py\n#pip install numpy\n```", "```py\nsudo apt-get install python-pip python-dev python-virtualenv\n```", "```py\n#mkdir TF-project\n```", "```py\n virtualenv --system-site-packages TF-project\n```", "```py\nsource  <Directory_Here>/bin/activate\n```", "```py\n>>> import tensorflow as tf\n>>> Message = tf.constant(\"Hello, world!\")\n>>> sess = tf.Session()\n>>> print(sess.run(Message))\n```", "```py\n >>>print numpy.__version__\n```", "```py\n$ pip install keras\n```", "```py\n>>> print keras.__version__\n```", "```py\nfrom keras import [what_to_use]\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n```", "```py\ndataset = numpy.loadtxt(\"DATASET_HERE\", delimiter=\",\")\nI = dataset[:,0:8]\nO = dataset[:,8]  \n#the data is splitted into Inputs (I) and Outputs (O)\n```", "```py\nmodel = Sequential()\n# N = number of neurons\n# V = number of variable\nmodel.add(Dense(N, input_dim=V, activation='relu'))\n# S = number of neurons in the 2nd layer\nmodel.add(Dense(S, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid')) # 1 output\n```", "```py\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n```", "```py\nmodel.fit(I, O, epochs=E, batch_size=B)\n```", "```py\nscores = model.evaluate(I, O)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n```", "```py\npredictions = model.predict(Some_Input_Here)\n```", "```py\nsudo apt-get install python-pandas\n```", "```py\n>> import pandas as pd\n>>>import numpy as np\n data = np.array(['p','a','c','k',\u2019t\u2019])\n SR = pd.Series(data)\n print SR\n```", "```py\nsudo apt-get install python3-matplotlib\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```py\nx = np.linspace(0, 20, 50)\n```", "```py\nplt.plot(x, x, label='linear')\n```", "```py\nplt.legend()\n```", "```py\nplt.show()\n```", "```py\npip install -U scikit-learn \n```", "```py\npip install -U nltk\n```", "```py\n>>> import nltk\n```", "```py\n> nltk.download()\n```", "```py\n pip install theano\n```", "```py\n>>> from theano import *\n```", "```py\n>>> import theano.tensor as T\n```", "```py\n>>> from theano import function\n>>> a = T.dscalar('a')\n>>> b = T.dscalar('b')\n>>> c = a + b\n>>> f = function([a, b], c)\n```"]