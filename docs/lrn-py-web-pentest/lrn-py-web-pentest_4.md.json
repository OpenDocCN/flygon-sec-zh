["```py\ndef start(argv):\n    banner()\n    if len(sys.argv) < 5:\n           usage()\n           sys.exit()\n    try :\n        opts, args = getopt.getopt(argv,\"w:f:t:\")\n    except getopt.GetoptError:\n               print \"Error en arguments\"\n               sys.exit()\n\n    for opt,arg in opts :\n           if opt == '-w' :\n                   url=arg\n           elif opt == '-f':\n                   dict= arg\n           elif opt == '-t':\n                   threads=arg\n    try:\n           f = open(dict, \"r\")\n           words = f.readlines()\n    except:\n           print\"Failed opening file: \"+ dict+\"\\n\"\n           sys.exit()\n    launcher_thread(words,threads,url)\n```", "```py\ndef launcher_thread(names,th,url):\n    global i\n    i=[]\n    resultlist=[]\n    i.append(0)\n    while len(names):\n        try:\n            if i[0]<th:\n                n = names.pop(0)\n                i[0]=i[0]+1\n                thread=request_performer(n,url)\n                thread.start()\n\n        except KeyboardInterrupt:\n            print \"ForzaBruta interrupted by user. Finishing attack..\"\n            sys.exit()\n        thread.join()\n    return\n\nif __name__ == \"__main__\":\n    try:\n        start(sys.argv[1:])\n    except KeyboardInterrupt:\n        print \"ForzaBruta interrupted by user, killing all threads..!!\"\n```", "```py\nclass request_performer(Thread):\n    def __init__( self,word,url):\n        Thread.__init__(self)\n        try:\n            self.word = word.split(\"\\n\")[0]\n            self.urly = url.replace('FUZZ',self.word)\n            self.url = self.urly\n        except Exception, e:\n            print e\n\n    def run(self):\n        try:\n            r = requests.get(self.url)\n            print self.url + \" - \" + str(r.status_code)\n            i[0]=i[0]-1 #Here we remove one thread from the counter\n        except Exception, e:\n                print e\n```", "```py\nimport requests\nfrom threading import Thread\nimport sys\nimport time\nimport getopt\nimport re\nfrom termcolor import colored\n```", "```py\nclass request_performer(Thread):\n    def __init__(self, word, url,hidecode):\n        Thread.__init__(self)\n        try:\n            self.word = word.split(\"\\n\")[0]\n            self.urly = url.replace('FUZZ', self.word)\n            self.url = self.urly\n            self.hidecode = hidecode\n        except Exception, e:\n            print e\n\n    def run(self):\n        try:\n            r = requests.get(self.url)\n            lines = str(r.content.count(\"\\n\"))\n            chars = str(len(r._content))\n            words = str(len(re.findall(\"\\S+\", r.content)))\n            code = str(r.status_code)\n```", "```py\n            if self.hidecode != code:\n                if '200' <= code < '300':\n                    print colored(code,'green') + \" \\t\\t\" + chars + \" \\t\\t\" + words + \" \\t\\t \" + lines +\"\\t\" + self.url + \"\\t\\t \"\n                elif '400' <= code < '500':\n                    print colored(code,'red') + \" \\t\\t\" + chars + \" \\t\\t\" + words + \" \\t\\t \" + lines +\"\\t\" + self.url + \"\\t\\t \"\n                elif '300' <= code < '400':\n                    print colored(code,'blue') + \" \\t\\t\" + chars + \" \\t\\t\" + words + \" \\t\\t \" + lines +\"\\t\" + self.url + \"\\t\\t \"\n                else:\n                    print colored(code,'yellow') + \" \\t\\t\" + chars + \" \\t\\t\" + words + \" \\t\\t \" + lines +\"\\t\" + self.url + \"\\t\\t \"\n```", "```py\ndef start(argv):\n    banner()\n    if len(sys.argv) < 5:\n        usage()\n        sys.exit()\n    try:\n        opts, args = getopt.getopt(argv, \"w:f:t:c:\")\n    except getopt.GetoptError:\n        print \"Error en arguments\"\n        sys.exit()\n    hidecode = 000\n    for opt, arg in opts:\n        if opt == '-w':\n            url = arg\n        elif opt == '-f':\n            dict = arg\n        elif opt == '-t':\n            threads = arg\n        elif opt == '-c':\n hidecode = arg\n    try:\n        f = open(dict, \"r\")\n        words = f.readlines()\n    except:\n        print\"Failed opening file: \" + dict + \"\\n\"\n        sys.exit()\n    launcher_thread(words, threads, url,hidecode)\n```", "```py\npython forzabruta-2.py -w http://scruffybank.com/FUZZ -t 5 -f common.txt -c 404\n```", "```py\n            if r.history != []:\n                first = r.history[0]\n                code = str(first.status_code)\n```", "```py\nimport requests\nfrom threading import Thread\nimport sys\nimport time\nimport getopt\nimport re\n\nimport md5\nfrom termcolor import colored\n```", "```py\n            start = time.time()\n```", "```py\n            r = requests.get(self.url)\n            elaptime = time.time()\n            totaltime = str(elaptime - start)\n            lines = str(r.content.count(\"\\n\"))\n            chars = str(len(r._content))\n            words = str(len(re.findall(\"\\S+\", r.content)))\n            code = str(r.status_code)\n            hash = md5.new(r.content).hexdigest()\n```", "```py\nimport requests\nfrom threading import Thread\nimport sys\nimport time\nimport getopt\nimport re\nimport md5\nfrom termcolor import colored\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n```", "```py\n                    dcap = dict(DesiredCapabilities.PHANTOMJS)\n```", "```py\n                    driver = webdriver.PhantomJS(desired_capabilities=dcap)\n                    time.sleep(2)\n```", "```py\n                    driver.set_window_size(1024, 768)\n                    driver.get(self.url)\n                    driver.save_screenshot(self.word+\".png\")\n```"]