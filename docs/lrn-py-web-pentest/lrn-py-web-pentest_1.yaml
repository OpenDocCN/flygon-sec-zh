- en: Introduction to Web Application Penetration Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用渗透测试简介
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Understanding the web application penetration testing process
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Web应用渗透测试的过程
- en: Typical web application toolkit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的Web应用工具包
- en: Training environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 培训环境
- en: Let's get started!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Understanding the web application penetration testing process
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Web应用渗透测试的过程
- en: In this section, we will understand what web application penetration testing
    is and the process behind it. We will start by learning what web application penetration
    testing is, the importance of performing these tests, what professional methodologies
    look like, and we'll briefly explain why it is important to have skills to use
    Python to write our own tools.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将了解什么是Web应用渗透测试以及其背后的过程。我们将从了解什么是Web应用渗透测试，执行这些测试的重要性，专业方法的外观，以及我们将简要解释为什么有必要掌握使用Python编写自己的工具的技能开始。
- en: Penetration testing is a type of security testing that evaluates the security
    of an application from the perspective of an attacker. It is an offensive exercise
    where you have to think like an attacker and understand the developers as well
    as the technology involved in order to unveil all the flaws.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试是一种安全测试，从攻击者的角度评估应用程序的安全性。这是一种进攻性的练习，你必须像攻击者一样思考，并了解开发人员以及涉及的技术，以揭示所有的缺陷。
- en: The goal is to identify all the flaws and demonstrate how they can be exploited
    by an attacker, and what the impact will be on our company. Finally, the report
    will provide solutions to fix the issues that have been detected. It's a manual
    and dynamic test. Manual means that it heavily depends on the knowledge of the
    person doing the test, and that is why learning how to write your own penetration
    testing tools is important, and will give you an edge in your career. Dynamic
    testing is where we test the running application. It is not a static analysis
    of the source code. The security test is useful to validate and verify the effect
    of the application security controls to us and to identify the lax of these security
    controls.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是识别所有的缺陷，并展示它们如何被攻击者利用，以及对我们公司的影响。最后，报告将提供解决方案来修复已经检测到的问题。这是一个手动和动态测试。手动意味着它严重依赖于进行测试的人的知识，这就是为什么学习如何编写自己的渗透测试工具是重要的，它将在你的职业生涯中给你一个优势。动态测试是我们测试正在运行的应用程序的地方。这不是对源代码的静态分析。安全测试对我们来说是有用的，可以验证和验证应用程序安全控制的效果，并识别这些安全控制的松懈。
- en: So, why should we perform penetration testing? Nowadays, IT has taken the world
    by storm. Most of the company processes and data are handled by computers. This
    is the reason why companies need to invest in security testing, in order to validate
    the effectiveness of security controls, and many a times the lack of them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们要进行渗透测试呢？如今，IT已经席卷了整个世界。大部分公司的流程和数据都是由计算机处理的。这就是为什么公司需要投资于安全测试，以验证安全控制的有效性，以及很多时候它们的缺乏。
- en: 'One report by EMC ([https://www.scmagazine.com/study-it-leaders-count-the-cost-of-breaches-data-loss-and-downtime/article/542793/](https://www.scmagazine.com/study-it-leaders-count-the-cost-of-breaches-data-loss-and-downtime/article/542793/))
    states that the average report regarding annual financial loss per company is
    497,037 USD for down time, 860,273 USD for security breaches, and 585,892 USD
    for data loss. Plus, all the time, the company resources are put into incident
    response and fixing, testing, and deploying the issue:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: EMC的一份报告（[https://www.scmagazine.com/study-it-leaders-count-the-cost-of-breaches-data-loss-and-downtime/article/542793/](https://www.scmagazine.com/study-it-leaders-count-the-cost-of-breaches-data-loss-and-downtime/article/542793/)）指出，每家公司的年度财务损失报告平均为停机497,037美元，安全漏洞860,273美元，数据丢失585,892美元。此外，公司资源都投入到事件响应和修复、测试和部署问题中：
- en: '![](img/00005.gif)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.gif)'
- en: 'That is why performing penetration testing will help companies to protect their
    customer''s data, intellectual property, and services. Penetration testing is
    a simple methodology formed by four main sections, which are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么进行渗透测试将帮助公司保护他们客户的数据、知识产权和服务。渗透测试是由四个主要部分组成的简单方法，如下所示：
- en: '**Reconnaissance**: In this phase, we''ll gather information to identify the
    technologies used, the infrastructure supporting the application, software configuration,
    load balances, and so on. This phase is also known as fingerprinting.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侦察：在这个阶段，我们将收集信息，以识别所使用的技术、支持应用程序的基础设施、软件配置、负载平衡等。这个阶段也被称为指纹识别。
- en: '**Mapping**: We then move into the mapping phase, where we build a map or diagram
    of the application pages and functionalities. We aim to identify the components
    and their relationships. One of the techniques to support mapping is spidering
    or crawling. Also, in this phase, we''ll discover nonlinked resources by performing
    brute force attacks.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射：然后我们进入映射阶段，在这个阶段，我们建立应用程序页面和功能的地图或图表。我们的目标是识别组件及其关系。支持映射的技术之一是蜘蛛或爬行。此外，在这个阶段，我们将通过进行暴力攻击来发现非链接资源。
- en: '**Vulnerability**: Once we have all the components, parameters, forms, and
    functionalities mapped out, we move to phase three, where we''ll start vulnerability
    discovery.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞：一旦我们将所有组件、参数、表单和功能映射出来，我们就会进入第三阶段，开始发现漏洞。
- en: '**Exploitation**: After identifying all the vulnerabilities, we can move to
    the last phase, which is the exploitation of the vulnerabilities. Depending on
    the scope of the pen test, once you exploit vulnerability, you can start the process
    all over again from your new vantage point. Usually, this the target DMZ, which
    you would try to get into their internal network segment.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用：在识别所有漏洞后，我们可以进入最后一个阶段，即利用漏洞。根据渗透测试的范围，一旦你利用了漏洞，你可以从新的优势点重新开始整个过程。通常，这是目标DMZ，你会尝试进入他们的内部网络段。
- en: One step that is not represented here is the reporting phase, where you document
    all the findings so that you can present them to your customer, company.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有代表的一步是报告阶段，您需要记录所有发现，以便向客户或公司呈现。
- en: Finally, there are two types of penetration tests, which are the black box and
    the white box. Black box test takes place when you don't have any information
    about the target, which is basically the same situation as an attacker, and white
    box test takes place when the customer provides us with documentation, source
    code, and configurations to accelerate the process, and we only focus on interesting
    areas.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有两种渗透测试，即黑盒和白盒。黑盒测试发生在您没有关于目标的任何信息时，这基本上与攻击者的情况相同，而白盒测试发生在客户提供文档、源代码和配置以加速过程时，我们只关注有趣的领域。
- en: 'You maybe wondering, what areas should you test during this process? These
    are some of the most important ones to cover:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道，在此过程中应该测试哪些领域？以下是一些最重要的要覆盖的领域：
- en: Configuration and deployment management testing
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和部署管理测试
- en: Identity management testing
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份管理测试
- en: Authentication testing
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证测试
- en: Authorization testing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权测试
- en: Session management testing
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话管理测试
- en: Input validation
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入验证
- en: Testing error handling
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试错误处理
- en: Cryptography
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码学
- en: Business logic testing
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务逻辑测试
- en: Client-side testing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端测试
- en: We'll cover some of these areas in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖其中一些领域。
- en: 'You can expand your knowledge on these areas by reading the OWASP testing guide:
    [https://www.owasp.org/index.php/OWASP_Testing_Project](https://www.owasp.org/index.php/OWASP_Testing_Project).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过阅读OWASP测试指南来扩展对这些领域的了解：[https://www.owasp.org/index.php/OWASP_Testing_Project](https://www.owasp.org/index.php/OWASP_Testing_Project)。
- en: So, why build your own tools? Web applications are very different since they're
    developed using multiple technologies, combinations, flows, and implementations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么要构建自己的工具？Web应用程序非常不同，因为它们使用多种技术、组合、流程和实现。
- en: This is the reason why there is not a single tool that will cover all the scenarios
    that you will find during your career. Many times, we'll write scripts to test
    specific issues or to make certain tasks, and to exploit a vulnerability. During
    the course of this book, we'll see how to write tools and test different areas
    such as authentication, input validation, and discovery, and we'll end up writing
    a simple **Hypertext Transfer Protocol** (**HTTP**) proxy that could be the foundation
    of our own security scanner. Writing your own tools is a valuable skill that will
    put you ahead of many penetration testers that do not have the capability to adapt
    tools, or write their own. In certain penetration test engagements, this could
    make all the difference.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么没有一个单一的工具可以覆盖您在职业生涯中遇到的所有情况。很多时候，我们会编写脚本来测试特定问题或执行某些任务，并利用漏洞。在本书的过程中，我们将看到如何编写工具并测试不同领域，如身份验证、输入验证和发现，并最终编写一个简单的HTTP代理，它可能成为我们自己安全扫描仪的基础。编写自己的工具是一项宝贵的技能，将使您超越许多无法适应工具或编写自己工具的渗透测试人员。在某些渗透测试任务中，这可能产生重大影响。
- en: Typical web application toolkit
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 典型的Web应用工具包
- en: In this section, we'll take a look at the different tools used by security professionals
    to perform web application penetration tests.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看安全专业人员用于执行Web应用程序渗透测试的不同工具。
- en: HTTP Proxy
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP代理
- en: The most important tool for testing web applications is the HTTP Proxy. This
    tool allows you to intercept all the communication between the browser and the
    server in both directions. These proxies are called man-in-the-middle proxies.
    These tools will let us understand how an application works, and most importantly,
    it will allow us to intercept the requests, responses, and modify them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 测试Web应用程序最重要的工具是HTTP代理。这个工具允许您拦截浏览器和服务器之间的所有通信，双向都可以。这些代理被称为中间人代理。这些工具将让我们了解应用程序的工作方式，最重要的是，它将允许我们拦截请求、响应并修改它们。
- en: Usually, the proxy will run in the same machine as the browser you're using
    for testing the application. The most used HTTP proxies by security professionals
    are Burp Suite from PortSwigger security ([https://portswigger.net/burp/proxy.html](https://portswigger.net/burp/proxy.html))
    and **Zed Attack Proxy** (**ZAP**) ([https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)).
    We also have the MITM proxy. It is a newer alternative developed in Python and
    is good to build tools or automate certain scenarios. The downside is that it's
    the only console, and there is no GUI, which for our purposes, is a benefit.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，代理将在与您用于测试应用程序的浏览器相同的计算机上运行。安全专业人员最常用的HTTP代理是PortSwigger安全的Burp Suite（[https://portswigger.net/burp/proxy.html](https://portswigger.net/burp/proxy.html)）和OWASP的Zed
    Attack Proxy（ZAP）（[https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)）。我们还有MITM代理。这是一个在Python中开发的较新的替代方案，适合构建工具或自动化某些场景。缺点是它只有控制台，没有图形用户界面，对于我们的目的来说，这是一个好处。
- en: Crawlers and spiders
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬虫和蜘蛛
- en: Crawlers and spiders are used for mapping web applications, automating the task
    of cataloging all the content and functionality. The tool automatically crawls
    the application by following all the links it finds, submitting forms, analyzing
    the responses for new content, and repeating this process until it covers the
    whole application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 爬虫和蜘蛛用于映射Web应用程序，自动完成目录化所有内容和功能的任务。该工具通过跟踪找到的所有链接、提交表单、分析新内容的响应并重复此过程直到覆盖整个应用程序来自动爬行应用程序。
- en: There are standalone crawlers and spiders such as Scrapy ([http://scrapy.org](http://scrapy.org)),
    which are written in Python or command-line tools such as HT track ([http://www.httrack.com](http://www.httrack.com)).
    We have crawlers and spiders integrated with the proxies such as Burp and ZAP
    that will benefit from the content that has passed through the proxy to enrich
    knowledge about the app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有独立的爬虫和蜘蛛，如Scrapy（http://scrapy.org），它们是用Python编写的，或者命令行工具，如HT track（http://www.httrack.com）。我们有与Burp和ZAP等代理集成的爬虫和蜘蛛，它们将受益于通过代理传递的内容，以丰富对应用程序的了解。
- en: One good example on why this is valuable is when the application is heavy on
    JavaScript. Traditional crawlers won't interpret JS, but the browsers will. So,
    the proxy will see it and add it to the crawler catalog. We'll see Scrapy in more
    detail later.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有价值的一个很好的例子，当应用程序使用大量JavaScript时。传统的爬虫无法解释JS，但浏览器可以。因此，代理会看到它并将其添加到爬虫目录中。我们稍后会更详细地了解Scrapy。
- en: Vulnerability scanners
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞扫描器
- en: 'Now, let''s step into more complex tools: the vulnerability scanners.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入更复杂的工具：漏洞扫描器。
- en: These tools are considered more complex as they have to automate most of the
    security testing methodology in one tool. They will do the crawling, discovery,
    vulnerability detection, and some of the exploitation. The two most used open
    source web application security scanners are w3af ([http://w3af.org/](http://w3af.org/)),
    which is written in Python, and Arachni ([http://www.arachni-scanner.com/](http://www.arachni-scanner.com/)),
    which is written in Ruby.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具被认为更复杂，因为它们必须在一个工具中自动化大部分安全测试方法。它们将进行爬行、发现、漏洞检测和一些利用。最常用的两个开源Web应用程序安全扫描器是w3af（http://w3af.org/）（用Python编写）和Arachni（http://www.arachni-scanner.com/）（用Ruby编写）。
- en: There are multiple commercial alternatives such as Acunetix ([http://www.acunetix.com/](http://www.acunetix.com/)),
    which is one of the cheapest and provides good value for money.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种商业替代方案，比如Acunetix（http://www.acunetix.com/），这是最便宜的之一，性价比很高。
- en: Brute forces/predictable resource locators
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解/可预测的资源定位器
- en: Web brute forces or discovery tools are used to find content such as files,
    directories, servlets, or parameters through dictionary attacks. These tools use
    word lists which have been put together by security professionals during the last
    10 years, which contain known filename directories or just words found in different
    products or web applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Web暴力破解或发现工具用于通过字典攻击查找文件、目录、servlet或参数等内容。这些工具使用了安全专业人员在过去10年中收集的词汇表，其中包含已知的文件名目录或仅在不同产品或Web应用程序中找到的单词。
- en: The precursor for these types of tools was DIRB ([http://dirb.sourceforge.net/](http://dirb.sourceforge.net/)),
    which is still available and maintained by Dark Raver. Another great alternative
    is Wfuzz ([http://www.edge-security.com/wfuzz.php](http://www.edge-security.com/wfuzz.php)),
    which I developed in the past and is now maintained and developed by Xavier Mendez.
    You can find this tool in Kali, the most used penetration testing distribution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型工具的前身是DIRB（http://dirb.sourceforge.net/），它仍然可用，并由Dark Raver维护。另一个很好的选择是Wfuzz（http://www.edge-security.com/wfuzz.php），我过去开发过，现在由Xavier
    Mendez维护和开发。您可以在Kali中找到这个工具，这是最常用的渗透测试发行版。
- en: Tools such as Burp and ZAP provide these capabilities. All these tools benefit
    from word lists such as the ones provided by FUZZDB ([https://github.com/fuzzdb-project](https://github.com/fuzzdb-project)),
    a database of wordlists for web application testing. We'll see how to build a
    tool for this purpose similar to Wfuzz.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如Burp和ZAP之类的工具提供了这些功能。所有这些工具都受益于FUZZDB提供的词汇表，FUZZDB是用于Web应用程序测试的词汇表数据库。我们将看到如何构建一个类似于Wfuzz的工具来实现这个目的。
- en: Specific task tools
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定任务工具
- en: We have a vast array of tools that are focused to specific tasks such as encoders
    and hashers, Base 64, MD5, SHA1, and Unicode.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有大量专注于特定任务的工具，如编码器和哈希器，Base 64、MD5、SHA1和Unicode。
- en: Tools that are created to exploit a specific type of vulnerability are, for
    example, SQL injectors such as SQL map, XSS consoles such as Beef to demonstrate
    the impact of a XSS and DOM XSS, scanners such as Dominator, and many more. Also,
    an important type of tool in the tool kit is the post exploitation tool.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 专门用于利用特定类型漏洞的工具，例如SQL注入器（如SQL map）、XSS控制台（如Beef，用于演示XSS和DOM XSS的影响）、扫描器（如Dominator）等。此外，工具包中的一个重要类型是后渗透工具。
- en: These tools are needed once you manage to exploit a vulnerability and help you
    to control the server, upload files, Shells, proxy content to the internal network,
    and expand your attack internally. There are many other tools to overcome the
    infinite challenges we find while testing new applications and technologies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功利用了漏洞，并帮助您控制服务器、上传文件、Shells、代理内容到内部网络，并在内部扩展攻击，这些工具就会派上用场。在测试新应用程序和技术时，有许多其他工具可以克服无限的挑战。
- en: Testing environment
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试环境
- en: In this section, we'll take a look at our testing lab environment. We will start
    by installing the VirtualBox software to run our lab VM. We'll access the vulnerable
    web application, get familiar with the text editor, and finally, I will give you
    an important warning.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下我们的测试实验室环境。我们将首先安装VirtualBox软件来运行我们的实验室虚拟机。我们将访问易受攻击的Web应用程序，熟悉文本编辑器，最后，我会给你一个重要的警告。
- en: The first tool that we need is VirtualBox. This will allow you to run the lab
    environment virtual machine created for this training. You can download VirtualBox
    from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
    Choose your host OS and download the installer. After downloading VirtualBox,
    we can download the virtual machine created for this course from [https://drive.google.com/open?id=0ByatLxAqtgoqckVEeGZ4TE1faVE.](https://drive.google.com/open?id=0ByatLxAqtgoqckVEeGZ4TE1faVE)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一个工具是VirtualBox。这将允许您运行为本培训创建的实验室环境虚拟机。您可以从[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载VirtualBox。选择您的主机操作系统并下载安装程序。下载VirtualBox后，我们可以从[https://drive.google.com/open?id=0ByatLxAqtgoqckVEeGZ4TE1faVE](https://drive.google.com/open?id=0ByatLxAqtgoqckVEeGZ4TE1faVE)下载为本课程创建的虚拟机。
- en: Once the file is downloaded, we can proceed with the installation of VirtualBox.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 文件下载完成后，我们可以继续安装VirtualBox。
- en: Install VirtualBox, which in my case I have to do by double-clicking on the
    `.dmg` file. Follow the installation instructions. And once you're finished, decompress
    the lab virtual machine. In my case, I use an archive in OS X. You can use 7 ZIP
    in other platforms.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装VirtualBox，在我的情况下，我必须双击`.dmg`文件进行安装。按照安装说明进行操作。完成后，解压实验室虚拟机。在我的情况下，我在OS X中使用存档。您可以在其他平台上使用7
    ZIP。
- en: Once decompressed, we will start VirtualBox.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 解压后，我们将启动VirtualBox。
- en: Open the VM. Once the VM is loaded in VirtualBox, we'll start the machine and
    wait for it to boot until we get the login prompt. We'll log in with the user
    `Packt` and the password `secret`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开虚拟机。一旦虚拟机在VirtualBox中加载，我们将启动该机器，并等待它引导，直到我们收到登录提示符。我们将使用用户名`Packt`和密码`secret`登录。
- en: The root user password is `packt2016`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: root用户密码是`packt2016`。
- en: Now, we have our lab ready for action. For the purpose of this book, we have
    created a vulnerable web application that will allow us to test for different
    types of vulnerabilities using our own developed tools. The application simulates
    a very simple banking application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的实验室已经准备好了。为了本书的目的，我们创建了一个易受攻击的Web应用程序，它将允许我们使用我们自己开发的工具来测试不同类型的漏洞。该应用程序模拟了一个非常简单的银行应用程序。
- en: It is developed in PHP with MySQL and it is served by Apache. Now, we'll open
    the browser in our VM. Load the URL `www.scruffybank.com`. I created an `/ETC/hosts`
    entry to redirect that hostname to local host. This application is running in
    an Apache server in the VM.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它是用PHP和MySQL开发的，并由Apache提供。现在，我们将在我们的虚拟机中打开浏览器。加载URL`www.scruffybank.com`。我创建了一个`/ETC/hosts`条目，将该主机名重定向到本地主机。该应用程序在虚拟机中的Apache服务器上运行。
- en: 'You should see the index page. If you click on Learn More, you will see the
    following information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到索引页面。如果单击“了解更多”，您将看到以下信息：
- en: '![](img/00006.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: On the top right-hand side, you can access the login page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角，您可以访问登录页面。
- en: Our last tool in the lab is the text editor, where we'll write the scripts.
    One possible choice would be Atom, a multi-platform open source and free editor
    developed by the GitHub folks. Feel free to install or use the editor you prefer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实验室中的最后一个工具是文本编辑器，我们将在其中编写脚本。一个可能的选择是Atom，这是一个由GitHub开发的跨平台开源免费编辑器。请随意安装或使用您喜欢的编辑器。
- en: In order to start Atom, go to the desktop item named Atom and the editor will
    start with a blank file. You can start typing the code, but until you save the
    file and add an extension, it won't do syntax highlighting.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Atom，转到名为Atom的桌面项目，编辑器将以空白文件启动。您可以开始输入代码，但在保存文件并添加扩展名之前，它不会进行语法高亮显示。
- en: 'I will open an example in my home directory called `Video-3.py`. This is what
    a Python script looks like in Atom:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在我的主目录中打开一个名为`Video-3.py`的示例。这就是Atom中Python脚本的样子：
- en: '![](img/00007.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: I want to highlight that many of the penetration testing activities, if not
    all of them, are not allowed to be performed without the target company's permission.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的是，许多渗透测试活动，如果不是全部，都不允许在没有目标公司许可的情况下进行。
- en: In many countries, these activities are illegal, again without proper permissions.
    Always use a testing environment whenever you want to try a new tool or technique.
    Again, whenever you'll perform a penetration test for a customer, get written
    authorization.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多国家，这些活动是非法的，没有适当的许可。每当你想尝试新的工具或技术时，都要使用测试环境。同样，每当你为客户执行渗透测试时，都要获得书面授权。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen what web application penetration testing is, why
    it is important to perform the test, what the methodology to follow is when performing
    a penetration test, the different domains that need to be covered, and why it
    is important to know how to write your own tools with Python.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了什么是Web应用程序渗透测试，为什么执行测试很重要，执行渗透测试时要遵循的方法论，需要涵盖的不同领域，以及为什么重要要学会用Python编写自己的工具。
- en: We have also seen the tools that make the web application pen tested tool kit.
    This helped us understand how the tools align with the methodology and will also
    serve as inspiration when we need to create our own tools, learn from them, and
    understand how they work.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了使Web应用程序渗透测试工具包的工具。这有助于我们了解这些工具如何与方法论对齐，并在需要创建自己的工具时提供灵感，从中学习，并了解它们的工作原理。
- en: We also saw the lab environment that we'll be using throughout this book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了在整本书中将要使用的实验室环境。
- en: We have installed VirtualBox, run the lab virtual machine, and accessed the
    testing web app, scruffy bank. We saw a quick example of the text editor, and
    finally, we saw an important warning about the consequences of doing penetration
    testing without permission from the customer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了VirtualBox，运行了实验室虚拟机，并访问了测试Web应用程序scruffy bank。我们看到了文本编辑器的一个快速示例，最后，我们看到了一个关于未经客户许可进行渗透测试后果的重要警告。
- en: In [Chapter 2](part0029.html#RL0A0-5a228e2885234f4ba832bb786a6d0c80), *Interacting
    with Web Applications*, we'll learn how to interact with a web application using
    Python, understand the anatomy of an HTTP request, URL, headers, message body,
    and we'll create a script to perform a request and interpret the response and
    its headers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0029.html#RL0A0-5a228e2885234f4ba832bb786a6d0c80)中，*与Web应用程序交互*，我们将学习如何使用Python与Web应用程序进行交互，了解HTTP请求、URL、标头、消息正文的结构，并创建一个脚本来执行请求并解释响应及其标头。
