- en: Chapter 6. Creating an External Attack Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。创建外部攻击架构
- en: 'In this chapter, we will build an external architecture that we will use as
    we progress through the different phases of attack. We will discuss the following
    topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个外部架构，我们将在攻击的不同阶段中使用它。我们将在本章讨论以下主题：
- en: Establishing layered architectures
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立分层架构
- en: Configuring firewall architectures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置防火墙架构
- en: Deploying IDS/IPS and load balancers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署IDS/IPS和负载均衡器
- en: Integrating web application firewalls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Web应用防火墙
- en: This chapter will provide us with an external attack architecture that will
    provide the capability to emulate a number of different testing environments.
    In the chapter, we will work through the process of configuring the range core
    devices that are the connecting devices for the architectures such as the router,
    switches, and the firewall machine. Consequently, we can easily build a target
    machine or device and plug it into our architecture and begin testing it immediately.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供一个外部攻击架构，该架构将提供模拟多种不同测试环境的能力。在本章中，我们将通过配置作为架构连接设备的范围核心设备的过程，如路由器、交换机和防火墙机器来工作。因此，我们可以轻松地构建目标机器或设备，并将其插入我们的架构中，立即开始测试。
- en: Establishing layered architectures
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立分层架构
- en: Our intentions here are to provide a number of layers that we, as an externally
    located attacker, may have to penetrate to get to the target. This is the reality
    of external testing; many of the targets will have multiple protections in place
    between the attacker and the target. Fortunately, as these machines are required
    to allow access to services from the outside, they will also provide access to
    us as we conduct our testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的意图是提供多个层次，作为一个外部攻击者，我们可能需要穿越这些层次才能到达目标。这是外部测试的现实；许多目标将在攻击者和目标之间设置多重保护。幸运的是，由于这些机器需要允许外部访问服务，它们也将允许我们进行测试时的访问。
- en: 'We will build our network architecture to provide the layers that are shown
    in the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建我们的网络架构，以提供以下图表中显示的层次：
- en: '![Establishing layered architectures](img/477-1_06_1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: 建立分层架构
- en: As we review the architecture, we see that we have added a web server and a
    Bastion Host machine to our original design and a router is connected to the VMnet8
    and VMnet 2 switches. As discussed in [Chapter 4](ch04.html "Chapter 4. Identifying
    Range Architecture"), *Identifying Range Architecture*, this is the power of our
    planned architecture; we just plug in machines wherever we want to test them.
    In the architecture shown in the previous diagram, we have the router device that
    we will use for our testing. As we mentioned in [Chapter 3](ch03.html "Chapter 3. Planning
    a Range"), *Planning a Range*, we are using the Dynamips Cisco software emulator
    for the book, and we need to configure this to allow our services. If you are
    using the **iptables** option, then you will have to configure that device to
    support the services of your architecture.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们审查架构时，我们看到我们已经在原始设计中添加了一个Web服务器和一个堡垒主机，并且路由器连接到VMnet8和VMnet 2交换机。正如在[第4章](ch04.html
    "第4章。识别范围架构")中所讨论的，*识别范围架构*，这就是我们计划架构的强大之处；我们只需在想要测试的地方插入机器。在前面的图表中显示的架构中，我们有一个路由器设备，我们将用于测试。正如我们在[第3章](ch03.html
    "第3章。规划范围")中提到的，*规划范围*，我们正在使用Dynamips Cisco软件仿真器进行本书的工作，并且需要配置它以允许我们的服务。如果您使用**iptables**选项，那么您将需要配置该设备以支持您的架构的服务。
- en: The first step is to boot up the router device in VMware Workstation. Once the
    machine has finished booting, log in with the username and password that you created
    during the installation of the software. Enter `dynamips –H 7200` to start the
    router. Once it has started, you need to load the configuration file by opening
    another terminal window and entering `dynagen config.net`. Once the configuration
    loads, enter the R1console and access the running router. At the router prompt,
    enter `en` to enter the privileged mode on the router.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在VMware Workstation中启动路由器设备。一旦机器启动完成，使用您在安装软件时创建的用户名和密码登录。输入`dynamips –H
    7200`来启动路由器。一旦它启动，您需要通过打开另一个终端窗口并输入`dynagen config.net`来加载配置文件。配置加载完成后，输入R1console并访问正在运行的路由器。在路由器提示符下，输入`en`进入路由器的特权模式。
- en: 'At this point, we next enter `show ip int brief` to show the configuration
    of the router interfaces; your output should be similar to that shown in the following
    screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们接下来输入`show ip int brief`来显示路由器接口的配置；您的输出应该类似于以下屏幕截图中显示的内容：
- en: '![Establishing layered architectures](img/477-1_06_2.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: 建立分层架构
- en: 'As the previous screenshot shows, we have our two interfaces in the router
    showing **Status** as **up** and **Protocol** also as **up** and this is what
    we want. If your router screen does not show this, you will have to go back through
    the process we used in [Chapter 4](ch04.html "Chapter 4. Identifying Range Architecture"),
    *Identifying Range Architecture*, to see what went wrong. Hopefully, you will
    at least see the IP address information as correct. If this is the case, then
    it is probably just a matter of bringing up the interface which is accomplished
    by entering `no shut` in the interface configuration menu. To bring up the interface,
    enter the following commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们的路由器上有两个接口，显示**状态**为**up**，**协议**也为**up**，这正是我们想要的。如果您的路由器屏幕没有显示这些内容，您将不得不回到我们在[第4章](ch04.html
    "第4章。识别范围架构")中使用的过程，*识别范围架构*，看看出了什么问题。希望您至少能看到IP地址信息是正确的。如果是这种情况，那么可能只是需要激活接口，这可以通过在接口配置菜单中输入`no
    shut`来完成。要激活接口，请输入以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you do not have the correct address information, then you might not have
    saved the configuration we created in [Chapter 4](ch04.html "Chapter 4. Identifying
    Range Architecture"), *Identifying Range Architecture*, and so you will have to
    return to that chapter and proceed through the steps to get the results shown
    in the previous screenshot.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有正确的地址信息，那么您可能没有保存我们在[第4章](ch04.html "第4章。识别范围架构")*识别范围架构*中创建的配置，因此您将不得不返回到该章节并按照步骤进行，以获得前面截图中显示的结果。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We now have a router in our architecture, and while we might encounter a router
    without filtering on it, more than likely we will not get that lucky; therefore,
    we will need to set up filtering on our router device. This is definitely something
    we want to add, but for now, we will build the network and make sure it works
    before we apply filtering. This is so we can troubleshoot as required and not
    have to deal with the filtering.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的架构中有一个路由器，虽然我们可能会遇到一个没有过滤的路由器，但很可能我们不会那么幸运；因此，我们需要在我们的路由器设备上设置过滤。这绝对是我们想要添加的东西，但现在我们将建立网络并确保它正常工作，然后再应用过滤。这样我们就可以根据需要进行故障排除，而不必处理过滤。
- en: 'As we have a router, we need to add a target machine and connect our architecture;
    we are going to accomplish this by adding a web server to our architecture. Our
    intentions are to create the network at the first level, as shown in the following
    diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有一个路由器，我们需要添加一个目标机器并连接我们的架构；我们将通过向我们的架构添加一个Web服务器来实现这一点。我们的意图是在第一级创建网络，如下图所示：
- en: '![Establishing layered architectures](img/477-1_06_3.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_3.jpg)'
- en: 'We could continue on and build more layers to our architecture, but a better
    design method is to test each layer before you move on to the next one. As we
    review the previous diagram, we have three machines that are the components of
    the architecture. We now want to add these machines and conduct our testing. The
    router is up and running, so we have two machines to bring up. The next machine
    we will bring up is the attacker. As we did in [Chapter 4](ch04.html "Chapter 4. Identifying
    Range Architecture"), *Identifying Range Architecture*, we will use the Kali Linux
    distribution machine. The preferred machine is the one that we downloaded in the
    VM format. The configuration of the VM is shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续构建我们架构的更多层，但更好的设计方法是在进入下一层之前测试每一层。当我们回顾前面的图表时，我们有三台机器是架构的组成部分。我们现在要添加这些机器并进行测试。路由器已经运行起来了，所以我们有两台机器要启动。我们要启动的下一台机器是攻击者。就像我们在[第4章](ch04.html
    "第4章。识别范围架构")*识别范围架构*中所做的那样，我们将使用Kali Linux发行版机器。首选的机器是我们以VM格式下载的那台。VM的配置如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_4.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_4.jpg)'
- en: 'The main thing that we want to ensure is that we have one of our network cards
    connected to the VMnet8 (NAT) switch, and in this case, we do have that. Once
    we have verified the network adapters, we can start up the virtual machine. Once
    the machine comes up, log in with a username and password that you have created,
    or the defaults if you have not changed the password. It is a good idea to update
    the distribution anytime you start the Kali VM. However, before you do this, always
    take a snapshot in case something goes wrong during the update. Navigate to **VM**
    | **Snapshot** | **Take snapshot**. In the window that opens, enter a name for
    your snapshot and click on **Take snapshot**. After you have taken the snapshot,
    update the distribution by entering the following commands:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要确保的主要事情是我们的网络卡之一连接到VMnet8（NAT）交换机，在这种情况下，我们确实有。一旦我们验证了网络适配器，我们就可以启动虚拟机。一旦机器启动，使用您创建的用户名和密码登录，或者如果您没有更改密码，则使用默认密码。每次启动Kali
    VM时更新发行版都是一个好主意。但是，在这样做之前，始终在更新期间拍摄快照以防出现问题。导航到**VM** | **快照** | **拍摄快照**。在打开的窗口中，输入快照的名称，然后单击**拍摄快照**。拍摄快照后，通过输入以下命令更新发行版：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the upgrade has completed, the next thing to do is to test connectivity
    to the router. On Kali, enter `ping 192.168.177.10 –c 5`, and if all goes well,
    you should see a reply, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 升级完成后，下一步是测试与路由器的连接。在Kali上，输入`ping 192.168.177.10 –c 5`，如果一切顺利，您应该会看到一个回复，如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_5.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_5.jpg)'
- en: Now that we have connectivity, we are ready to add our next machine, and this
    is our web server. As we mentioned in [Chapter 4](ch04.html "Chapter 4. Identifying
    Range Architecture"), *Identifying Range Architecture*, we have many choices when
    it comes to adding a web server, and it really is a matter of personal preference.
    As we know, we are going to have two web servers in the architecture; we can select
    a different web server for the second machine than that of the first one. For
    the first web server in the book, we are going to select **Broken Web Application
    VM** from the OWASP and Mandiant. As this is going to be connected to the DMZ
    switch, we only have to make sure the network adapter is connected to the VMnet2
    switch.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了连接，我们准备添加我们的下一个机器，这是我们的Web服务器。正如我们在[第4章](ch04.html "第4章。识别范围架构")*识别范围架构*中提到的，当我们要添加Web服务器时，我们有很多选择，这实际上是一个个人偏好的问题。正如我们所知，我们将在架构中有两台Web服务器；我们可以为第二台机器选择不同的Web服务器。对于书中的第一台Web服务器，我们将从OWASP和Mandiant中选择**Broken
    Web Application VM**。由于这将连接到DMZ交换机，我们只需要确保网络适配器连接到VMnet2交换机。
- en: 'An example of this configuration is shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_6.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_6.jpg)'
- en: 'Once the configuration has been verified, the next thing we will do is start
    the virtual machine. After the machine has started, you will note the IP address
    assigned to the VM. Now that we have the machine up and running, we want to verify
    that we can access it. We have a couple of choices. We can use a simple ping,
    or we can use the application layer and connect via the browser. For the purpose,
    here we will use the browser. At the time of writing this book, our machine was
    assigned the IP address of `10.2.0.132`, so we open our browser to that IP address.
    An example of this is shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置已经验证，我们将要做的下一件事是启动虚拟机。机器启动后，您将注意到分配给VM的IP地址。现在我们的机器已经启动运行，我们想要验证我们是否可以访问它。我们有几种选择。我们可以使用简单的ping，或者我们可以使用应用程序层并通过浏览器连接。在这里，我们将使用浏览器。在撰写本书时，我们的机器被分配了IP地址`10.2.0.132`，因此我们打开浏览器到该IP地址。此示例如下屏幕截图所示：
- en: '![Establishing layered architectures](img/477-1_06_7.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_7.jpg)'
- en: Screen showing the browser when opened with the address 10.2.0.132 (the cropped
    text is not important)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开地址为10.2.0.132的浏览器时显示的屏幕。 (裁剪的文本不重要)
- en: What happened? Why are we not able to connect? It is actually a quite common
    problem when you are building virtual environments, but before we reveal the reason,
    we will walk through a logical progression of steps. Next, we will attempt to
    ping it from the router. Select your Dynamips machine, and in the router window,
    enter the ping `10.2.0.132` to verify that you can access the machine on the flat
    network. An example of this is shown in the following screenshot. It is possible
    that your IP address will not be the same, and in such cases, you will use the
    IP address that is assigned.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？为什么我们无法连接？这实际上是在构建虚拟环境时非常常见的问题，但在我们揭示原因之前，我们将按步骤进行逻辑推理。接下来，我们将尝试从路由器ping它。选择您的Dynamips机器，在路由器窗口中，输入ping
    `10.2.0.132`以验证您可以在平面网络上访问该机器。此示例如下屏幕截图所示。您的IP地址可能不同，这种情况下，您将使用分配的IP地址。
- en: '![Establishing layered architectures](img/477-1_06_8.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_8.jpg)'
- en: 'This shows we have the connectivity when it is flat, and we also know that
    we can ping the router external interface from our earlier test; so, what is the
    next step? We want to look at the path to the target. So, open a command prompt
    on your host machine and enter `tracert 10.2.0.132`. An example of the output
    of this command is shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明当它是平的时候，我们有连接，我们也知道我们可以从之前的测试中ping通路由器的外部接口；那么，下一步是什么？我们想要查看到目标的路径。因此，在您的主机上打开命令提示符，输入`tracert
    10.2.0.132`。此命令的输出示例如下屏幕截图所示：
- en: '![Establishing layered architectures](img/477-1_06_9.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_9.jpg)'
- en: 'The key to the problem is that at the first hop, the gateway should be pointing
    to the router interface; however, it is currently pointing to the wireless router
    that the machine is connected to. This is very common when we build architectures;
    moreover, when we perform techniques such as pivoting we have to set the routing
    up so that we can access the target. We could change the default gateway, but
    this is the least attractive option as we use that to get the traffic out to the
    Internet from the NAT interface. Consequently, a better option is to manually
    add the route. This is required for all machines when we want to talk across networks.
    The syntax used to add the route will vary across the different operating systems.
    We will add the route in the host Windows machine first. Open an administrator
    command prompt, and in the command prompt, enter `route add 10.2.0.0 mask 255.255.255.0
    192.168.177.10 metric 2`, and then test it. An example is shown in the following
    screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的关键在于，在第一跳时，网关应指向路由器接口；然而，它当前指向机器连接的无线路由器。这在构建架构时非常常见；此外，当我们执行诸如枢纽之类的技术时，我们必须设置路由，以便可以访问目标。我们可以更改默认网关，但这是最不理想的选择，因为我们用它将流量从NAT接口传输到互联网。因此，更好的选择是手动添加路由。当我们要跨网络通信时，所有机器都需要这样做。用于添加路由的语法将因不同操作系统而异。我们将首先在主机Windows机器上添加路由。打开管理员命令提示符，在命令提示符中，输入`route
    add 10.2.0.0 mask 255.255.255.0 192.168.177.10 metric 2`，然后测试它。此示例如下屏幕截图所示：
- en: '![Establishing layered architectures](img/477-1_06_10.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_10.jpg)'
- en: Wait a minute! Why is it not working? This is part of the process of building
    environments; we like to say frustration is good because this is when you learn.
    Once you get stuck, take a step back and think about it and then try harder. In
    the previous image, we see that the traffic is going the right direction, that
    is, toward the router interface; however, it does not report anything back after
    that hop. This is another common thing that you will have to keep in mind. We
    have added a route on the host, but we have not added the route on the target
    and this is required; we have to configure routes on both sides of the network
    session.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！为什么它不起作用？这是构建环境的过程的一部分；我们喜欢说挫折是好的，因为这是您学习的时候。一旦遇到困难，退一步思考，然后更加努力。在前一个图像中，我们看到流量朝着正确的方向前进，即朝着路由器接口；然而，在那一跳之后它没有返回任何东西。这是您必须牢记的另一个常见问题。我们在主机上添加了路由，但我们没有在目标上添加路由，这是必需的；我们必须在网络会话的两侧配置路由。
- en: Select the broken web app **VM**, and log in to the machine. Once you have logged
    in, we will enter the command to add the route. You could enter `man route` and
    review the main page to determine the syntax required to add the route. Enter
    `route add –net 192.168.177.0 netmask 255.255.255.0 dev eth0` and add the route
    to the machine. Return to your host machine and test the configuration.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 选择破损的web应用程序**VM**，并登录到该机器。登录后，我们将输入添加路由的命令。您可以输入`man route`并查看主页，以确定添加路由所需的语法。输入`route
    add –net 192.168.177.0 netmask 255.255.255.0 dev eth0`并将路由添加到该机器。返回到您的主机并测试配置。
- en: 'An example after the test is shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 测试后的示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_11.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_11.jpg)'
- en: 'We now have our connectivity throughout our first layer. We also need to add
    the route into our attacking machine. Fortunately, the syntax is the same; this
    is not always the case, but it is this time. In your Kali attacker machine, enter
    `route add –net 10.2.0.0 netmask 255.255.255.0 dev eth0` and test the configuration
    by pinging the target; an example of the successful test is shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在我们的第一层中建立了连接。我们还需要在我们的攻击机器中添加路由。幸运的是，语法是相同的；这并不总是这样，但这次是这样。在你的Kali攻击机器中，输入“route
    add –net 10.2.0.0 netmask 255.255.255.0 dev eth0”并通过ping目标来测试配置；成功测试的示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_12.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_12.jpg)'
- en: We now have the first layer of our defense baseline installed and more importantly,
    we have the network connectivity established and working. There is one concern
    with our configuration, and that is in the routing. We have not set the routing
    to survive a reboot. We have a number of options to do this, and we will not cover
    all of them. One option in Windows is to use a `batch` file with your route statements
    and then run it as required. There is another option in Windows that you can use
    and this is the `-p` option on the route command itself. This sets the route as
    a persistent route, and when you do this, it adds the route to the registry. The
    location of this route is inserted into the registry at the `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip
    \Parameters\PersistentRoutes` key. For our purposes, we do not need to make the
    routes persistent, but it is only an option and this is why we covered it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了我们防御基线的第一层，并且更重要的是，我们已经建立并运行了网络连接。我们的配置中有一个问题，那就是路由。我们还没有设置路由以在重启后生效。我们有多种选项可以做到这一点，我们不会覆盖所有选项。在Windows中的一个选项是使用一个带有路由语句的“批处理”文件，然后根据需要运行它。在Windows中还有另一个选项，你可以使用route命令本身的“-p”选项。这将路由设置为持久路由，当你这样做时，它会将路由添加到注册表中。这个路由的位置被插入到注册表的“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip
    \Parameters\PersistentRoutes”键中。对于我们的目的，我们不需要使路由持久，但这只是一个选项，这就是为什么我们涵盖它的原因。
- en: 'Next, we will configure our second layer; this requires us to connect a web
    server to the Orange or eth2 interface that we set up in [Chapter 3](ch03.html
    "Chapter 3. Planning a Range"), *Planning a Range*, on the Bastion Host. To further
    complete our second layer, we will have to add the routing once we connect the
    machine. An example of our second layer is shown in the following diagram:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置我们的第二层；这要求我们将一个Web服务器连接到我们在[第3章](ch03.html "第3章。规划一个范围")中设置的橙色或eth2接口，*规划一个范围*，在堡垒主机上。为了进一步完成我们的第二层，我们将在连接机器后添加路由。我们第二层的示例如下图所示：
- en: '![Establishing layered architectures](img/477-1_06_13.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_13.jpg)'
- en: As the previous diagram shows, we need to build another web server for our second
    layer that is connected to the **VMnet3** switch. This will serve as a separate
    services subnet architecture that will be screened by the router and the Bastion
    Host—effectively a two layered defensive architecture.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的图表所示，我们需要为连接到**VMnet3**交换机的第二层构建另一个Web服务器。这将作为一个由路由器和堡垒主机屏蔽的独立服务子网架构，有效地构成了一个两层的防御架构。
- en: We can use the same platform that we have in our first layer of defense architecture,
    but we want to use a variety of machines as we architect our external environment;
    therefore, we will use another machine. We have already downloaded the metasploitable
    virtual machine from Rapid7, so we will use that as our second web server. We
    just need to configure it to match our requirements for the second layer of defense.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们在第一层防御架构中拥有的相同平台，但是在设计外部环境时，我们希望使用各种各样的机器；因此，我们将使用另一台机器。我们已经从Rapid7下载了metasploitable虚拟机，所以我们将把它用作我们的第二个Web服务器。我们只需要配置它以满足我们第二层防御的要求。
- en: 'An example of the configuration is shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置的示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_14.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_14.jpg)'
- en: We now have our machine set for the subnet; consequently, it is time to bring
    up all machines and test it! Once the machines start, you will test the connectivity;
    the easiest way is to test from the Bastion Host virtual machine. For testing
    purposes, we will start up Kali, the router, Bastion Host, and metasploitable.
    We will note the IP address of our metasploitable when it boots up. As we have
    set the VMnet3 with a DHCP server, the address should be assigned automatically
    at boot. Log in to the machine and enter `ifconfig` to display the network configuration
    of the web server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为子网设置了我们的机器；因此，是时候启动所有机器并进行测试了！一旦机器启动，你将测试连接；最简单的方法是从堡垒主机虚拟机进行测试。为了测试目的，我们将启动Kali、路由器、堡垒主机和metasploitable。当metasploitable启动时，我们将记录其IP地址。由于我们已经设置了带有DHCP服务器的VMnet3，地址应该在启动时自动分配。登录到机器并输入“ifconfig”以显示Web服务器的网络配置。
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_15.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_15.jpg)'
- en: 'As we discovered while building the first layer, we have to establish routing.
    As we are on an isolated subnet, we can configure a default gateway rather than
    add the subnets one by one. In the metasploitable virtual machine, enter `sudo
    route add default gw 10.3.0.10` to add the route to the table. This provides us
    with a route; any time a packet makes it to our web server, if it does not know
    in which direction to go, it will forward the packet to the default gateway, which
    is the interface on the Bastion Host. To test connectivity, you have to ping in
    the direction from the Bastion Host to the web server. By default, the Smoothwall
    firewall will not allow you to ping from the orange subnet outbound. This is a
    good thing for security, and also for our testing, because unless the administrator
    makes a mistake and opens a hole like this, we will encounter the same type of
    default configuration. An example of the successful test of the orange subnet
    is shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在构建第一层时发现的，我们必须建立路由。由于我们处于隔离的子网中，我们可以配置默认网关，而不是逐个添加子网。在metasploitable虚拟机中，输入`sudo
    route add default gw 10.3.0.10`来添加路由到表中。这为我们提供了一条路由；每当一个数据包到达我们的Web服务器时，如果它不知道该往哪个方向去，它将把数据包转发到默认网关，即Bastion
    Host上的接口。要测试连接性，你必须从Bastion Host到Web服务器的方向进行ping。默认情况下，Smoothwall防火墙不允许你从橙色子网向外部ping。这对于安全是件好事，也对我们的测试是好事，因为除非管理员犯错并打开这样的漏洞，否则我们将遇到相同类型的默认配置。橙色子网成功测试的一个例子如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_16.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_16.jpg)'
- en: The next thing we want to do is to verify the access to the orange subnet from
    the attacker router. To do this, we need to test from the router to the web server.
    To accomplish this, we have to add a route in the router to our `10.3.0.0` subnet.
    As you may recall, we made the red interface of the Bastion Host virtual machine
    DHCP. This is one thing we might want to reconsider now that we have added another
    layer to our architecture. If you want, you can change the IP to static. For our
    purpose, we will just use the one that is assigned at the boot of the Bastion
    Host. To determine the IP address for this command, enter `ifconfig eth0` in the
    Bastion Host and note the IP address on the interface.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要做的是验证攻击者路由器对橙色子网的访问。为了做到这一点，我们需要从路由器测试到Web服务器。为了实现这一点，我们必须在路由器中添加一个到我们的`10.3.0.0`子网的路由。你可能还记得，我们将Bastion
    Host虚拟机的红色接口设置为DHCP。现在我们已经为我们的架构添加了另一层，这是我们可能要重新考虑的一件事。如果你愿意，你可以将IP更改为静态。对于我们的目的，我们将使用在Bastion
    Host启动时分配的IP。要确定这个命令的IP地址，输入`ifconfig eth0`在Bastion Host中，并注意接口上的IP地址。
- en: 'An example is shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_17.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_17.jpg)'
- en: As the previous screenshot shows, the IP address assigned on the eth0 interface
    is `10.2.0.131`; we will use this to add our route in the router. Switch to the
    router and enter `show ip route` in the router terminal window. The output of
    the command will show that we do not have a route to the 10.3.0.0 network; therefore,
    we have to add this so that we can access that subnet. In the router, enter `conf
    t` to enter the configuration mode. Once you are here, enter `ip route 10.3.0.0
    255.255.255.0 10.2.0.131` to add the route to the table. As you see from the command,
    we use the IP address from the eth0 interface to route traffic through. Once you
    have entered the command, return to the main prompt by entering *Ctrl* + *Z*.
    Enter `ping 10.3.0.10` to ping the eth2 interface of the Bastion Host. Next we
    will test connectivity to the web server machine. Enter `ping 10.3.0.128`; you
    will notice that this fails! Why is this? Well, you have to think about the architecture
    again. The Bastion Host is serving as a firewall, and as we showed in [Chapter
    3](ch03.html "Chapter 3. Planning a Range"), *Planning a Range*, the ingress filtering
    on the Smoothwall firewall is, by default, set to not allow anything inbound;
    therefore, we have to open the connection from the outside into the orange eth2
    subnet.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，eth0接口上分配的IP地址是`10.2.0.131`；我们将使用这个地址在路由器中添加我们的路由。切换到路由器，并在路由器终端窗口中输入`show
    ip route`。命令的输出将显示我们没有到10.3.0.0网络的路由；因此，我们必须添加这个路由，以便我们可以访问该子网。在路由器中，输入`conf t`进入配置模式。一旦你在这里，输入`ip
    route 10.3.0.0 255.255.255.0 10.2.0.131`来添加路由到表中。如你从命令中看到的，我们使用eth0接口的IP地址来路由流量。一旦你输入了命令，通过输入*Ctrl*
    + *Z*返回到主提示符。输入`ping 10.3.0.10`来ping Bastion Host的eth2接口。接下来我们将测试与Web服务器机器的连接。输入`ping
    10.3.0.128`；你会注意到这个失败了！为什么呢？嗯，你必须再次考虑架构。Bastion Host充当防火墙，正如我们在[第3章](ch03.html
    "第3章。规划一个范围")中所示，“规划一个范围”，Smoothwall防火墙的入口过滤默认设置为不允许任何入站；因此，我们必须打开从外部到橙色eth2子网的连接。
- en: We need to access the configuration of the Smoothwall firewall, and as you may
    recall from [Chapter 3](ch03.html "Chapter 3. Planning a Range"), *Planning a
    Range*, we can do this from a web browser. Open the web browser of your choice
    and access the configuration by entering `https://10.4.0.10:441` to open the login
    page. Then, enter the username and password that you configured when you created
    the machine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要访问Smoothwall防火墙的配置，正如你可能还记得来自[第3章](ch03.html "第3章。规划一个范围")，“规划一个范围”，我们可以通过Web浏览器来做到这一点。打开您选择的Web浏览器，并输入`https://10.4.0.10:441`来打开登录页面。然后，输入您在创建机器时配置的用户名和密码。
- en: Once the configuration page comes up, navigate to **Networking** | **incoming**
    to open the configuration page for the incoming traffic. As you review the information
    that is available, you will notice that the capability to allow ICMP inbound is
    not an option; therefore, we can only allow UDP or TCP. Consequently, this is
    another reason why we like to use the Smoothwall firewall when we architect our
    ranges. We know that the metasploitable machine has a web server on it, so we
    will configure the firewall to allow access to the server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置页面出现，转到**Networking** | **incoming**打开传入流量的配置页面。当您审查可用的信息时，您会注意到允许ICMP入站不是一个选项；因此，我们只能允许UDP或TCP。因此，这也是为什么我们喜欢在架构我们的范围时使用Smoothwall防火墙的另一个原因。我们知道metasploitable机器上有一个Web服务器，所以我们将配置防火墙以允许访问服务器。
- en: 'We will configure the rule to meet the settings that are identified in the
    following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置规则，以满足以下截图中确定的设置：
- en: '![Establishing layered architectures](img/477-1_06_18.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_18.jpg)'
- en: We could make the rule more granular with specific IP blocks specified for the
    external source IP, but for our purpose, this will suffice; furthermore, you might
    want to make the IP address static in the web server to avoid the possibility
    of an IP address changing and then breaking our rule, but that is easy enough
    to do and it has been covered, so it will not be covered again here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定外部源IP的特定IP块使规则更加精细，但对于我们的目的，这就足够了；此外，您可能希望将Web服务器中的IP地址设置为静态，以避免IP地址更改并破坏我们的规则的可能性，但这很容易做到，并且已经涵盖过了，所以这里不再涵盖。
- en: 'The next thing we will do is test our rule. We have already seen that we cannot
    access the machine from our router using a ping. So, we will now try to access
    the web server, which is the port 80 of the web server, as we have added it into
    our firewall rule set. In the router terminal window, enter `telnet 10.3.0.128
    80` and once the connection is completed, enter `get / http/1.1` and then press
    *Enter* twice. This will attempt to return the home page from the web server and
    verify that you do have connectivity through the Bastion Host to the web server.
    An example is shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的是测试我们的规则。我们已经看到我们无法使用ping从我们的路由器访问机器。所以，我们现在将尝试访问Web服务器，这是Web服务器的端口80，因为我们已经将其添加到我们的防火墙规则集中。在路由器终端窗口中，输入`telnet
    10.3.0.128 80`，一旦连接完成，输入`get / http/1.1`，然后按两次*Enter*。这将尝试从Web服务器返回主页，并验证您通过堡垒主机对Web服务器的连通性。示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_19.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_19.jpg)'
- en: We now have to add a route and test it from our attacking machine; furthermore,
    we have to add a route in the Bastion Host back to the 192.168.177.0 network.
    This is an area that is often overlooked. You have to maintain the routing of
    the network traffic for target ranges as it is essential.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须添加一个路由并从我们的攻击机器进行测试；此外，我们还必须在堡垒主机中添加一条返回到192.168.177.0网络的路由。这是经常被忽视的一个领域。您必须维护目标范围的网络流量路由，这是至关重要的。
- en: In the Kali and Bastion Host machines, add the route. In the Kali machine, enter
    `route add 10.3.0.0 netmask 255.255.255.0 dev eth0` and enter `route add 192.168.177.0
    netmask 255.255.255.0 dev eth0` in the Bastion Host.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali和堡垒主机上添加路由。在Kali机器上，输入`route add 10.3.0.0 netmask 255.255.255.0 dev eth0`，在堡垒主机上输入`route
    add 192.168.177.0 netmask 255.255.255.0 dev eth0`。
- en: 'Once the routes are added, open a browser of your choice and connect to the
    web server located on the metasploitable VM; alternatively, you can use the telnet
    method we used from the router. An example of what you should see is shown in
    the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦路由被添加，打开您选择的浏览器并连接到metasploitable VM上的Web服务器；或者，您可以使用我们从路由器使用的telnet方法。您应该看到的示例如下截图所示：
- en: '![Establishing layered architectures](img/477-1_06_20.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_20.jpg)'
- en: Congratulations! You made it! We have built our external architecture! It takes
    some time to build it, but once it is built, we can perform any type of external
    testing that we may run into, and this is the power of virtualization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你成功了！我们已经建立了我们的外部架构！建立它需要一些时间，但一旦建立完成，我们就可以执行任何类型的外部测试，这就是虚拟化的力量。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A note here on the routing; this can be a cumbersome thing if you get it mixed
    up and make a mistake so, you might want to consider permanently storing the routing
    changes to survive reboots or any other unforeseen challenges.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 关于路由的一点说明；如果您搞混了并犯了错误，这可能是一件麻烦的事情，因此，您可能希望考虑永久存储路由更改以在重新启动或其他意外挑战中生存。
- en: You can create batch files as we discussed, and another way is to just keep
    the routing configurations in a text file and copy and paste them as required.
    Finally, if you really want to set the routing up on a more permanent basis, then
    you can set a cron job or place the route commands in the configuration file.
    For those of you who want to do this, it is left as a homework assignment for
    you!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像我们讨论的那样创建批处理文件，另一种方法是将路由配置保存在文本文件中，并根据需要复制和粘贴它们。最后，如果您真的想要更加永久地设置路由，那么您可以设置一个cron作业或将路由命令放在配置文件中。对于那些想要这样做的人，这留作作业给您！
- en: 'An example of our completed external architecture is shown in the following
    diagram:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成的外部架构示例如下图所示：
- en: '![Establishing layered architectures](img/477-1_06_21.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![建立分层架构](img/477-1_06_21.jpg)'
- en: We now have the baseline architecture set here, and we are ready to start the
    build and configuration of the various components. First, we have to make some
    configuration changes as our architecture is a little loose with respect to filtering.
    We will do this now. Before we proceed, save the router configuration we have
    built. At the router prompt enter `write mem`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在这里设置了基线架构，并且准备好开始构建和配置各种组件。首先，我们必须进行一些配置更改，因为我们的架构在过滤方面有些松散。我们现在就来做这个。在继续之前，保存我们已经构建的路由器配置。在路由器提示符下输入`write
    mem`。
- en: For those of you who are using the iptables machine, we will start to address
    some of the changes on this configuration. So far, the changes were not required,
    and you have the advantage of not having to make the router configuration entries
    that the ones who use the Cisco IOS do.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用iptables机器的人，我们将开始解决这个配置的一些变化。到目前为止，这些变化是不需要的，而且你有一个优势，不需要像使用Cisco IOS的人那样进行路由器配置条目。
- en: Configuring firewall architectures
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置防火墙架构。
- en: 'We have configured the one rule in our Smoothwall firewall, and this has been
    the only filtering we have configured. While we would love to test from an external
    location and not have any filtering in place which would effectively give us a
    flat network, in reality, this will rarely be the case. Therefore, we want a minimal
    set of filters set in our architecture that will resemble something that we may
    see in typical network architecture. There is an important point to make here:
    if we run into a well-configured layered and protected architecture, we will only
    get through on the ports that they have to allow to ingress to their services.
    This is the reality of testing; a well-configured architecture will not offer
    many vectors for us outside of the ones they have to allow. Consequently, this
    is not a bad thing because we know there will be openings and we will virtually
    always have a web server and web applications to work with.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的Smoothwall防火墙中配置了一个规则，这是我们配置的唯一过滤规则。虽然我们很想从外部位置进行测试，并且不设置任何过滤规则，这样就可以实际上给我们一个扁平的网络，但实际上，这种情况很少发生。因此，我们希望在我们的架构中设置一组最小的过滤规则，这将类似于我们在典型网络架构中可能看到的东西。这里有一个重要的观点：如果我们遇到一个良好配置的分层和受保护的架构，我们只能通过它们必须允许进入其服务的端口通过。这就是测试的现实情况；一个良好配置的架构不会为我们提供许多向量，除非它们必须允许的向量。因此，这并不是一件坏事，因为我们知道会有漏洞，我们几乎总是会有一个Web服务器和Web应用程序可以使用。
- en: With the current architecture configuration, we have no filtering placed on
    the first layer of defense, and some of you, if not all of you, reading this may
    know that even though our perimeter device is serving as a router, one of the
    core features of a router is the ability to filter traffic. While the traditional
    router filtering has been considered to be stateless that is no memory of anything
    but the current packet it is processing. The routers and filtering capability
    at the perimeter today will often be stateful and operate much the same as our
    traditional firewalls. For our purpose in the book, we will maintain the traditional
    approach with our filtering of being stateless. This is required to provide us
    with weaknesses we want to test, and it still is very viable as many of the administrators
    will configure a router in the traditional fashion. Consequently, we still run
    into weak filtering configurations in our testing even today, and you need to
    know how to test for and identify this at the early stages of testing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的架构配置中，我们在第一层防御上没有设置任何过滤规则，你们中的一些人，如果不是所有人，可能知道，即使我们的外围设备充当路由器，路由器的核心功能之一是过滤流量。虽然传统的路由器过滤被认为是无状态的，即除了它正在处理的当前数据包之外没有任何记忆。今天的外围路由器和过滤功能通常是有状态的，并且与我们传统的防火墙工作方式基本相同。对于我们在书中的目的，我们将保持传统的无状态过滤方法。这是为了提供我们想要测试的弱点，而且它仍然是非常可行的，因为许多管理员会按照传统的方式配置路由器。因此，即使在今天，我们在测试中仍然会遇到弱的过滤配置，你需要知道如何在测试的早期阶段进行测试和识别。
- en: In your router window, enter `sh access-lists` and display the access lists
    configured on the router, as you will see there is no access list on the router
    at this time. This is why we could not only ping through it but also access the
    web server(s) through it. Therefore, the first thing we want to do is configure
    the access list. Before we do this, a word about access lists. There are a multitude
    of configurations we can put in an access list or **Access Control List** (**ACL**)
    as we like to refer to them; however, to cover these would take a chapter or two
    in itself, so we will just cover the very basics. The intent is that once you
    have an access list between you and the target, we want to see how our network
    packets behave as we progress through our testing methodology. For those of you
    who want to know more, there is an excellent tutorial located at [http://gtcc-it.net/billings/acltutorial.htm](http://gtcc-it.net/billings/acltutorial.htm).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的路由器窗口中，输入`sh access-lists`并显示路由器上配置的访问列表，你会看到此时路由器上没有访问列表。这就是为什么我们不仅可以ping通过它，还可以通过它访问Web服务器。因此，我们想要做的第一件事是配置访问列表。在我们这样做之前，先说一下访问列表。我们可以在访问列表或**访问控制列表**（ACL）中放置多种配置，但是要覆盖这些内容需要一个或两章的篇幅，所以我们只会涵盖基础知识。我们的目的是一旦你在你和目标之间有一个访问列表，我们想看到我们的网络数据包在我们的测试方法中的行为。对于那些想了解更多的人，可以在[http://gtcc-it.net/billings/acltutorial.htm](http://gtcc-it.net/billings/acltutorial.htm)找到一个优秀的教程。
- en: 'To create the access control list in your router, enter `ip access-list extended
    External` and press *Enter*. The next thing to do is to create the rules; we want
    to always allow ICMP so that we can troubleshoot. We know we only want to have
    access from the VMnet8 (NAT) subnet, and as such we can set this with the rule;
    enter `permit icmp 192.168.177.0 0.0.0.255 any` and press *Enter*. The next thing
    we want to configure is the access to our web servers; we could make two rules
    and have them set granular enough to only allow port 80 traffic to the web servers.
    However, for our testing purposes, it is acceptable to allow access to the entire
    subnets behind the router. Moreover, it will make our testing much easier than
    always configuring one rule for each protocol. This is the way to do it if it
    is a production environment, but we have the luxury of a test architecture. In
    the router window, enter `permit tcp any any eq 80` and then press *Enter*. We
    now have our configuration set, and we need to apply it. Hit *Ctrl* + *Z* to return
    to the main prompt, and then enter the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的路由器中创建访问控制列表，输入`ip access-list extended External`并按*Enter*。接下来要做的是创建规则；我们希望始终允许
    ICMP，以便进行故障排除。我们知道我们只想从 VMnet8（NAT）子网访问，并且可以使用规则设置这一点；输入`permit icmp 192.168.177.0
    0.0.0.255 any`并按*Enter*。接下来我们想要配置的是对我们的网页服务器的访问；我们可以制定两条规则，并将它们设置得足够精细，只允许端口80的流量到达网页服务器。然而，出于测试目的，允许访问路由器后面的整个子网是可以接受的。此外，这将使我们的测试比始终为每个协议配置一个规则更容易。这是在生产环境中的做法，但我们有一个测试架构的奢侈。在路由器窗口中，输入`permit
    tcp any any eq 80`，然后按*Enter*。现在我们已经设置好了配置，需要应用它。按*Ctrl* + *Z*返回到主提示符，然后输入以下内容：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are now ready to test it; ping and then access the web server located at
    the 10.3.0.0 subnet. You should be successful, and if not, then it is our favorite
    troubleshooting time. To see if your access list is working in the router, press
    *Ctrl* + *Z* to return to the main prompt. Once there, enter `show access-lists`
    to display the access list information. An example is shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好测试了；ping 然后访问位于 10.3.0.0 子网的网页服务器。您应该成功，如果没有，那么现在是我们最喜欢的故障排除时间。要查看路由器中的访问列表是否起作用，请按*Ctrl*
    + *Z*返回到主提示符。一旦在那里，输入`show access-lists`以显示访问列表信息。以下是一个示例截图：
- en: '![Configuring firewall architectures](img/477-1_06_22.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![配置防火墙架构](img/477-1_06_22.jpg)'
- en: The key here as you view the access list is do you see matches? If you see matches,
    then your access list is working. This is the extent of our firewall configuration.
    We can from this point add anything we want to our architecture, and this is what
    we will do as we continue to conduct a variety of different testing techniques
    to emulate what we need to plan for when we conduct our actual tests. We have
    made a number of changes to our router, so before we go on to save the router
    configuration we have built, enter `write mem` at the router prompt.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看访问列表时的关键是您是否看到匹配项？如果看到匹配项，那么您的访问列表就起作用了。这就是我们防火墙配置的范围。从这一点开始，我们可以向我们的架构添加任何我们想要的东西，并且这正是我们将继续进行各种不同测试技术以模拟我们需要计划的内容时所做的。我们对路由器进行了许多更改，因此在继续保存我们构建的路由器配置之前，请在路由器提示符处输入`write
    mem`。
- en: Now, for those of you who do not have access to Cisco IOS, we will work with
    the iptables we set up in [Chapter 4](ch04.html "Chapter 4. Identifying Range
    Architecture"), *Identifying Range Architecture*. As has been mentioned, there
    really is very little difference thus far in our configuration, but that is about
    to change. The iptables have to be configured to allow the traffic to the Bastion
    Host and to the OWASP web server that is in our public DMZ. Other than that, there
    are no changes to our configuration. This is another reason why we have proceeded
    in this direction. The architecture we have built enables us to place any device
    or virtual machine as the perimeter device without changing anything behind it.
    The same goes for our Bastion Host; we can change it as we build different environments,
    and our architecture allows us to do that.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于那些没有 Cisco IOS 访问权限的人，我们将使用我们在[第4章](ch04.html "第4章。识别范围架构")*识别范围架构*中设置的
    iptables。正如已经提到的，到目前为止，我们的配置几乎没有什么区别，但这将发生改变。iptables 必须配置为允许流量到堡垒主机和位于我们公共 DMZ
    中的 OWASP 网页服务器。除此之外，我们的配置没有任何改变。这也是我们选择这个方向的另一个原因。我们构建的架构使我们能够在不改变其后面的任何内容的情况下将任何设备或虚拟机放置为外围设备。对于我们的堡垒主机也是如此；我们可以在构建不同环境时更改它，我们的架构允许我们这样做。
- en: iptables
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iptables
- en: For those of you who do not have a Cisco IOS, we can use the filtering features
    of **iptables** to create the firewall capability we used in the Dynamips virtual
    machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些没有 Cisco IOS 的人，我们可以使用 **iptables** 的过滤功能来创建我们在 Dynamips 虚拟机中使用的防火墙功能。
- en: In [Chapter 4](ch04.html "Chapter 4. Identifying Range Architecture"), *Identifying
    Range Architecture*, we created a Debian distribution to serve as our iptables
    machine. We could also use iptables as our Bastion Host filter, but for the purposes
    of the book, we will stick with using the iptables machine at the first level
    of defense. Of course, you can build and plug machines in anywhere in the architecture
    because it is flexible and just a baseline-layered configuration.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。识别范围架构")*识别范围架构*中，我们创建了一个 Debian 发行版作为我们的 iptables 机器。我们还可以使用
    iptables 作为我们的堡垒主机过滤器，但出于本书的目的，我们将继续使用 iptables 机器作为第一层防御。当然，您可以在架构中的任何地方构建和插入机器，因为它是灵活的，只是一个基线分层配置。
- en: Even if you have already built the **Cisco Dynamips** machine, you still should
    follow along and complete the steps to add the iptables machine to your architecture
    as it is something you might encounter. It is no secret that many organizations
    are adding Linux to their enterprise, and virtually all of them come with some
    form of filtering. Moreover, this iptables filtering capability is virtually a
    part of all distributions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已经构建了**Cisco Dynamips**机器，您仍应跟着完成添加iptables机器到您的架构中的步骤，因为您可能会遇到这种情况。毫无疑问，许多组织正在将Linux添加到其企业中，几乎所有这些组织都配备了某种形式的过滤功能。此外，这种iptables过滤功能几乎是所有发行版的一部分。
- en: 'If you think back to when we built the iptables machine, we selected different
    addresses than the addresses we used for the Dynamips virtual machine. We did
    this so that we can always have both machines in the architecture, and this allows
    us to cover the potential different scenarios we may encounter as a pen tester.
    All we have to do is to add the route in the external machine (Kali) and point
    it to the interface of the iptables machine. The virtual configuration is the
    same as Dynamips. An example of this is shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回想一下我们构建iptables机器时，我们选择了与我们用于Dynamips虚拟机的不同地址。我们这样做是为了始终可以在架构中拥有这两台机器，并且这使我们能够涵盖作为渗透测试人员可能遇到的潜在不同情况。我们所要做的就是在外部机器（Kali）中添加路由，并将其指向iptables机器的接口。虚拟配置与Dynamips相同。下面的截图显示了一个示例：
- en: '![iptables](img/477-1_06_23.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_23.jpg)'
- en: The tricky part is in the configuration of the routing; therefore, we will work
    on this before we work on the actual filter rule syntax. Note that we can enable
    packet forwarding and then we can test our routing, but for now we will just set
    the route direction and verify that it gets to where we want it to go.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 配置中棘手的部分在于路由的配置；因此，在我们处理实际的过滤规则语法之前，我们将先处理这个问题。请注意，我们可以启用数据包转发，然后测试我们的路由，但现在我们只需设置路由方向并验证它是否到达我们想要到达的位置。
- en: 'Power on your Debian virtual machine, and once it starts, log in with the username
    and password that you created when you built the machine. Open a terminal window
    and enter `ifconfig` to display the interface configuration information. Remember,
    if you are not logged in as `root`, you will have to elevate your privileges with
    the `su` command and then enter the root password to get the command to work.
    An example of the configuration of our machine is shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的Debian虚拟机，一旦启动，请使用您在构建机器时创建的用户名和密码登录。打开一个终端窗口，输入`ifconfig`以显示接口配置信息。请记住，如果您没有以`root`身份登录，您将需要使用`su`命令提升权限，然后输入root密码以使命令生效。我们机器的配置示例如下截图所示：
- en: '![iptables](img/477-1_06_24.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_24.jpg)'
- en: As the previous screenshot shows, we have the 15 address on both interfaces.
    We have the routes added from earlier in the chapter, but these routes are through
    the Dynamips virtual machine. So if you have both of these machines up at the
    same time, there will not be an IP conflict, but you have to tweak the routes
    in the other machines to ensure that the traffic goes through the right machine.
    The easiest and recommended way is to just suspend the Dynamips virtual machine
    before continuing. To suspend the machine in VMware Workstation, navigate to **VM**
    | **Power** | **Suspend Guest**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们在两个接口上都有15地址。我们在本章前面添加了路由，但这些路由是通过Dynamips虚拟机的。因此，如果您同时启动这两台机器，就不会有IP冲突，但您必须调整其他机器中的路由，以确保流量通过正确的机器。最简单和推荐的方法是在继续之前暂停Dynamips虚拟机。要在VMware
    Workstation中暂停机器，请导航至**VM** | **Power** | **Suspend Guest**。
- en: 'Now that the machine is suspended, we will enter a route into the Kali machine
    and test it. If you still have the route in for the Dynamips machine, it will
    work as we just used the subnet 10.2.0.0 and did not make an entry for the gateway
    machine. To test your routing, enter `ping 10.2.0.15 –c 3` to test you have connectivity.
    If you do not, then you no longer have the route in the table. We have showed
    how to do this, but to save you from either having to think about it or referring
    to earlier in the chapter, an example of the method to view the table and add
    and test the route is shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在机器已经暂停，我们将在Kali机器中输入一个路由并进行测试。如果您仍然为Dynamips机器输入了路由，那么它将起作用，因为我们只是使用了子网10.2.0.0，并没有为网关机器添加条目。要测试您的路由，请输入`ping
    10.2.0.15 –c 3`以测试您是否具有连接性。如果没有，那么您的路由表中不再有该路由。我们已经展示了如何做到这一点，但为了让您不必考虑或参考本章前面的内容，下面的截图显示了查看表格、添加和测试路由的方法示例：
- en: '![iptables](img/477-1_06_25.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_25.jpg)'
- en: Screen showing an example of the method to view the table and add and test the
    route (the cropped text is not important)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了查看表格、添加和测试路由的方法示例（裁剪的文本不重要）
- en: 'Once you have successfully tested access to the interface of the iptables machine,
    we will next test for the connectivity to the OWASP web server we built. In the
    terminal window, enter `ping 10.2.0.132 –c 3` to test the connectivity to the
    web server. Remember that if your OWASP machine is at another IP address, you
    will have to enter this. However, you will notice that this fails. Do you know
    why? Hopefully, you remember that we had a router with the Dynamips machine, so
    routing is already set up. The default installation of most Linux machines does
    not have IP forwarding turned on. Therefore, we have to manually turn it on to
    provide the functionality of a router. In the iptables machine, enter `cat /proc/sys/net/ipv4/ip_forward`
    in the terminal window to check the setting for IP forwarding; the value should
    be a `1` if the forwarding is turned on. To turn on the forwarding, enter `echo
    1 > /proc/sys/net/ipv4/ip_forward` and overwrite `0` with `1`. The forwarding
    will now be enabled. An example of enabling forwarding is shown in the following
    screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功测试了对iptables机器接口的访问，我们将接下来测试与我们构建的OWASP Web服务器的连接。在终端窗口中，输入`ping 10.2.0.132
    –c 3`来测试与Web服务器的连接。请记住，如果您的OWASP机器位于另一个IP地址，您将不得不输入该地址。但是，您会注意到这次失败了。你知道为什么吗？希望您记得我们在Dynamips机器上有一个路由器，因此路由已经设置好了。大多数Linux机器的默认安装不会打开IP转发。因此，我们必须手动打开它以提供路由器的功能。在iptables机器上，在终端窗口中输入`cat
    /proc/sys/net/ipv4/ip_forward`来检查IP转发的设置；如果转发已打开，则该值应为`1`。要打开转发，请输入`echo 1 > /proc/sys/net/ipv4/ip_forward`并用`1`覆盖`0`。转发现在已启用。以下屏幕截图显示了启用转发的示例：
- en: '![iptables](img/477-1_06_26.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_26.jpg)'
- en: 'Once you have turned it on, you will probably not be able to complete a successful
    test. When we configured our routing earlier, we were not as granular as we should
    have been. We did this for a reason: to show those of you who might be a little
    rusty on your networking skills; moreover, the routing knowledge that you had
    may have perished if you have been spending a lot of time at the upper layers.
    What we are driving at here is that you have to place a gateway into the route
    command. Sometimes, it will work without the gateway as it did in our previous
    chapter, but often it will fail, so it is best to set our routes as specific as
    possible to avoid this. You have to enter the route in the Kali and the OWASP
    virtual machines.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您打开它，您可能无法完成成功的测试。在之前配置路由时，我们没有像应该那样精细化。我们出于一个原因这样做：为了向那些可能对网络技能有点生疏的人展示；此外，您可能已经忘记了您以前拥有的路由知识，如果您一直在更高层花费大量时间的话。我们在这里要表达的是，您必须在route命令中放置一个网关。有时，没有网关也可以工作，就像在我们之前的章节中一样，但通常会失败，因此最好尽可能具体地设置我们的路由，以避免这种情况。您必须在Kali和OWASP虚拟机中输入路由。
- en: 'An example of the route command for both machines is shown in the following
    screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了两台机器的route命令示例：
- en: '![iptables](img/477-1_06_27.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_27.jpg)'
- en: Screen showing an example of the route command for both machines (the cropped
    text is not important)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了两台机器的route命令示例（裁剪的文本不重要）
- en: As a reminder, your IP address might be different if you set up your own scheme.
    We now have our network architecture built, so it is time to configure and set
    up the filtering, as we can access the machine on any port. Open a browser and
    verify that you can access the web server on the OWASP machine.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，如果您设置了自己的方案，您的IP地址可能会有所不同。我们现在已经建立了我们的网络架构，所以是时候配置和设置过滤了，因为我们可以访问OWASP机器上的任何端口。打开浏览器并验证您是否可以访问OWASP机器上的Web服务器。
- en: We will now configure the iptables in the Debian machine. When you configure
    the iptables, you can configure the rules directly from the command line. However,
    the method we are going to use here is to enter the rules on the command line
    and then save them. With Debian, there is no setup for loading the iptables at
    boot by default. Consequently, this is not something we want to leave as is. To
    correct it, we will add the package for `iptables-persistent`. In the terminal
    window, enter `apt-get install iptables-persistent` to grab the package and install
    it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在Debian机器上配置iptables。当您配置iptables时，可以直接从命令行配置规则。但是，我们将在这里使用的方法是在命令行上输入规则，然后保存它们。在Debian中，默认情况下没有设置在启动时加载iptables的设置。因此，这不是我们想要保留的状态。为了更正，我们将添加`iptables-persistent`软件包。在终端窗口中，输入`apt-get
    install iptables-persistent`来获取并安装该软件包。
- en: 'Once the package is installed, there will be a configuration file located in
    the `/etc/iptables` folder that is named `rules.ip4`. If you want to take a look
    at the file, enter `more /etc/iptables/rules.v4` to display the contents of the
    file. As you can see, by default, the chains are all set at `ACCEPT`. We will
    change that now. So, we will use the command line and then use the save utility
    to save our changes. Before we do that, we will test whether we have connectivity
    throughout our architecture; we can do this by pinging the OWASP machine. Once
    you have done this successfully, now it is time to change it and block the forwarding
    of the packets. In the Debian machine, enter `iptables –P FORWARD DROP` to set
    the policy to drop and not forward all packets. We do this as it is the prudent
    approach to security and is what we will run into in a test environment. The problem
    is that if we do not save the rule, then when we reboot, the rule will not be
    there. In the package we downloaded, there is a tool for this. In the terminal
    window, enter `iptables-save /etc/iptables/rules.v4` to save the configuration
    to the file. This will provide us with the rule even after we reboot the machine.
    An example of what the rules file should like going forward is provided in the
    following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完软件包后，将在`/etc/iptables`文件夹中找到一个名为`rules.ip4`的配置文件。如果你想查看文件，输入`more /etc/iptables/rules.v4`来显示文件内容。正如你所看到的，默认情况下，所有链都设置为`ACCEPT`。我们现在将更改它。因此，我们将使用命令行，然后使用保存实用程序保存我们的更改。在我们这样做之前，我们将测试我们的架构是否具有连通性；我们可以通过ping
    OWASP机器来做到这一点。一旦你成功完成了这一点，现在是时候改变它并阻止数据包的转发了。在Debian机器上，输入`iptables –P FORWARD
    DROP`来将策略设置为拒绝并且不转发所有数据包。我们这样做是因为这是安全的谨慎方法，也是我们在测试环境中会遇到的情况。问题是，如果我们不保存规则，那么当我们重新启动时，规则将不复存在。在我们下载的软件包中，有一个工具可以做到这一点。在终端窗口中，输入`iptables-save
    /etc/iptables/rules.v4`来将配置保存到文件中。这将使我们在重新启动机器后仍然可以使用规则。未来规则文件应该如下截图所示：
- en: '![iptables](img/477-1_06_28.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_28.jpg)'
- en: This rule should prevent you from being able to ping the machine and this is
    what we wanted to accomplish. We currently have a default deny policy and will
    add rules as required to allow the traffic that we need. The traffic that we need
    to allow is the web traffic to the web server. In the terminal window, enter `iptables
    –A FORWARD –p tcp –d 10.2.0.0/24 –dport 80 –j ACCEPT` to create a rule for the
    inbound port 80 traffic to be forwarded to the OWASP machine. We also need a rule
    for the other direction. We can use a state directive and other methods, but we
    want to create the functionality of a router the best we can and this requires
    two rules that a stateless filter would require.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则应该阻止你能够ping机器，这正是我们想要实现的。我们目前有一个默认的拒绝策略，并将根据需要添加规则以允许我们需要的流量。我们需要允许的流量是发送到Web服务器的Web流量。在终端窗口中，输入`iptables
    –A FORWARD –p tcp –d 10.2.0.0/24 –dport 80 –j ACCEPT`来创建一个规则，将入站端口80的流量转发到OWASP机器。我们还需要另一个方向的规则。我们可以使用状态指令和其他方法，但我们希望尽可能地创建路由器的功能，这需要两条规则，而无状态过滤器则需要。
- en: 'The second rule we want to enter is `iptables –A FORWARD –p tcp –s 10.2.0.0/24
    –sport 80 –j ACCEPT` to add the rule for the return traffic. Once you have entered
    the rules, you will save them by entering `iptables-save /etc/iptables/rules.v4`.
    Once the configuration has been saved, you should now have access to the web server,
    but nothing else on the OWASP machine, and this is what we wanted. An example
    of this configuration file is shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要输入的第二条规则是`iptables –A FORWARD –p tcp –s 10.2.0.0/24 –sport 80 –j ACCEPT`，以添加返回流量的规则。一旦输入了规则，你可以通过输入`iptables-save
    /etc/iptables/rules.v4`来保存它们。配置保存后，你现在应该可以访问Web服务器，但不能访问OWASP机器上的其他内容，这正是我们想要的。这个配置文件的示例如下截图所示：
- en: '![iptables](img/477-1_06_29.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![iptables](img/477-1_06_29.jpg)'
- en: This completes our configuration. We can add protocols to the iptables filter
    as required and practice virtually all the forms of testing that we are more than
    likely going to encounter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们的配置。我们可以根据需要向iptables过滤器添加协议，并练习我们很可能会遇到的几乎所有形式的测试。
- en: Deploying IDS/IPS and load balancers
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署IDS/IPS和负载均衡器
- en: 'We now have the main components of our architecture built for the most part;
    therefore, it is time to discuss adding the monitoring capability to our testing
    range. There is one thing that is important to note: no matter what monitoring
    solution we select, we cannot predict how the site is going to configure it! This
    is the only thing we cannot overlook while testing. We can test and successfully
    evade the monitoring systems we have placed on the range, but as these systems
    are largely policy- and configuration-based, there is a chance that we will not
    experience the same success we did in the lab. In this section, we will discuss
    a sample of some of the types of monitoring systems that are available and look
    at deploying one of them. We will discuss the concept further when we look at
    evasion later in the book.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在基本上已经构建了我们架构的主要组件；因此，现在是时候讨论向我们的测试范围添加监控功能了。有一件重要的事情需要注意：无论我们选择什么监控解决方案，我们都无法预测网站将如何配置它！这是我们在测试时不能忽视的唯一事情。我们可以测试并成功规避我们放置在范围上的监控系统，但由于这些系统主要是基于策略和配置的，有可能我们在实验室中取得的成功不会在现实中得到同样的结果。在本节中，我们将讨论一些可用的监控系统类型的示例，并在书的后面讨论逃避时部署其中一个。
- en: Intrusion Detection System (IDS)
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵检测系统（IDS）
- en: When it comes to selecting an IDS for our architecture, there are a number of
    things we need to take into consideration, such as what product we want to set
    as our practice IDS. There are a number of products that are available and this
    can become a daunting task, but as one of the most popular ones is Snort, we will
    concentrate on that. Another bonus of Snort is that it has a free as well as a
    commercial version.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择我们的架构的IDS时，有一些事情我们需要考虑，比如我们想要将哪种产品设置为我们的实践IDS。有许多可用的产品，这可能会成为一项艰巨的任务，但由于最受欢迎的产品之一是Snort，我们将集中讨论它。Snort的另一个优点是它有免费版本和商业版本。
- en: We have a couple of choices when we deploy our Snort machine on the network,
    but before we address this, we need to discuss where we will deploy Snort sensors
    and how the traffic is going to get to the sensor in a virtual environment.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在网络上部署我们的Snort机器时，我们有几种选择，但在解决这个问题之前，我们需要讨论我们将在虚拟环境中部署Snort传感器的位置以及流量将如何到达传感器。
- en: 'In an actual architecture, a switch is a unicast device that will only forward
    traffic to the port of the destination. Furthermore, the broadcast traffic is
    the only traffic that is sent on all ports. When it comes to deploying IDS network
    sensors, this can present a problem, and we have to either use a SPAN port or
    a tap. For more information and a comparison on these options, you can go to the
    following link:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的架构中，交换机是一个单播设备，只会将流量转发到目的端口。此外，广播流量是唯一发送到所有端口的流量。在部署IDS网络传感器时，这可能会带来问题，我们必须使用SPAN端口或TAP。有关这些选项的更多信息和比较，您可以访问以下链接：
- en: '[http://www.networktaps.com/](http://www.networktaps.com/)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.networktaps.com/](http://www.networktaps.com/)'
- en: Fortunately, we do not have this problem in a VMware switch. The switches are
    set so that we can see traffic across a switch and this allows us to connect an
    IDS network sensor and not worry about configuring a SPAN port. To verify this,
    you can conduct a ping between two of your machines and run `tcpdump` on a third
    machine and check if you can see the traffic between the two other machines. For
    an example, we are going to conduct a ping between the OWASP web server and the
    Bastion Host; we will view the ping traffic by running `tcpdump` in the Kali machine.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在VMware交换机中我们没有这个问题。交换机被设置为我们可以看到交换机上的流量，这使我们能够连接IDS网络传感器，而不必担心配置SPAN端口。要验证这一点，你可以在两台机器之间进行ping测试，并在第三台机器上运行`tcpdump`，检查是否可以看到两台其他机器之间的流量。例如，我们将在OWASP
    Web服务器和堡垒主机之间进行ping测试；我们将通过在Kali机器上运行`tcpdump`来查看ping流量。
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中有例子：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_30.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_30.jpg)'
- en: 'Once we have established that we can view the traffic across the switch, the
    next thing we want to discuss is the sensor placement. With network-based IDS,
    the normal configuration is to have a network sensor on each segment. Therefore,
    the only requirement is that all of the machines have to be connected to the same
    switch. Going forward, we will follow this approach when it comes to deploying
    and monitoring in our range. An example of our external architecture with the
    IDS sensors is shown in the following diagram:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定我们可以查看交换机上的流量，我们想讨论的下一件事是传感器的位置。对于基于网络的IDS，正常的配置是在每个段上都有一个网络传感器。因此，唯一的要求是所有的机器都必须连接到同一个交换机。在未来，当我们部署和监控我们的范围时，我们将遵循这种方法。我们的带有IDS传感器的外部架构示例如下图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_31.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_31.jpg)'
- en: Now that we have identified our sensor placement within our architecture, we
    will now discuss how we are going to achieve this in our virtual configuration.
    We could build another virtual machine to serve as IDS sensor, but then we could
    start to feel the strain of our existing RAM. Therefore, our preferred method
    is to have one machine and configure it with multiple network cards and configure
    the Snort sensor on each existing card that is connected to the required switch.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了我们架构中传感器的位置，我们将讨论如何在我们的虚拟配置中实现这一点。我们可以构建另一台虚拟机作为IDS传感器，但这样我们可能会感受到现有RAM的压力。因此，我们更倾向于有一台机器，并配置多个网络卡，并在每个已连接到所需交换机的现有卡上配置Snort传感器。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To accomplish this, we need to build a machine to run Snort on. We could build
    one from scratch, but for the purposes of the book, we will look at other alternatives.
    However, building a machine from scratch is an interesting experience and it is
    left as homework for the reader. An excellent resource on how to do this for Snort
    that also has guidance on a number of platforms can be found at [http://www.snort.org/docs](http://www.snort.org/docs).
    A note of caution about these study guides, they are not 100 percent accurate,
    and so your mileage may vary.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们需要构建一台运行Snort的机器。我们可以从头开始构建一台机器，但为了本书的目的，我们将考虑其他选择。然而，从头开始构建一台机器是一次有趣的经历，留给读者作业。关于如何为Snort做到这一点的出色资源，也提供了一些平台的指导，可以在[http://www.snort.org/docs](http://www.snort.org/docs)找到。关于这些学习指南的一个注意事项，它们并不是100%准确的，所以你的实际情况可能有所不同。
- en: 'To create our Snort sensors we are going to use a distribution that already
    has the Snort program installed and more importantly, all of the dependencies.
    The distribution we will use is the **Network Security Toolkit**. It contains
    125 of the top security tools, and this is something that is worth adding to your
    architecture. What we like most about it is the ease of setting up Snort. You
    can download the ISO image from [http://sourceforge.net/projects/nst/files/](http://sourceforge.net/projects/nst/files/).
    Once you have downloaded the ISO image, you need to create a virtual machine.
    As we have covered this already, we will not do it again. The thing you have to
    do is to mount the ISO image and boot it. Once the machine boots, you will install
    it to the hard drive. Located on the desktop, there is an icon to install to the
    hard drive. An example of the desktop is shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的Snort传感器，我们将使用一个已经安装了Snort程序和所有依赖项的发行版。我们将使用的发行版是**网络安全工具包**。它包含125个顶级安全工具，这是值得添加到您的架构中的东西。我们最喜欢的是它设置Snort的简易性。您可以从[http://sourceforge.net/projects/nst/files/](http://sourceforge.net/projects/nst/files/)下载ISO映像。下载ISO映像后，您需要创建一个虚拟机。由于我们已经涵盖了这一点，我们不会再重复。您需要做的是挂载ISO映像并引导它。一旦机器引导，您将安装它到硬盘。在桌面上，有一个图标用于安装到硬盘。桌面的一个示例如下截图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_32.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_32.jpg)'
- en: Double-click on the icon and follow the prompts to install the image to the
    hard drive. This will take some time. You might be wondering why we are installing
    to the hard drive when we can just boot from the ISO image. The reason we are
    installing it to the hard drive is that we want to have the NST VM as an actual
    machine, so we can save and build a variety of configurations with it and then
    save them. If the installation comes up with custom partitioning selected, click
    on the icon and change it to automatic partitioning as it will save time. Once
    the installation is complete, double-click on the icon on the desktop and set
    the system password. Once the password is set, right-click in the desktop area
    and select **Open in Terminal** to open a new terminal window and enter `shutdown
    –h now` to shut down the system. Once the system is shut down, we need to configure
    the machine to support the three interfaces that we will need to connect our Snort
    sensors.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 双击图标并按照提示将映像安装到硬盘。这将需要一些时间。您可能想知道为什么我们要安装到硬盘，而不是直接从ISO映像引导。我们之所以要安装到硬盘，是因为我们希望将NST
    VM作为实际的机器，这样我们就可以保存和构建各种配置，然后保存它们。如果安装时选择了自定义分区，请单击图标并将其更改为自动分区，因为这样可以节省时间。安装完成后，双击桌面上的图标并设置系统密码。设置密码后，在桌面区域右键单击并选择**在终端中打开**以打开新的终端窗口，然后输入`shutdown
    –h now`以关闭系统。系统关闭后，我们需要配置机器以支持我们需要连接Snort传感器的三个接口。
- en: 'An example of this configuration is shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置的一个示例如下截图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_33.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_33.jpg)'
- en: 'As you may have noticed in the previous screenshot, the ISO image is no longer
    mounted; it is a good idea to remove that setting to avoid any potential conflict.
    Once you have verified your configuration power on the virtual machine, we will
    continue to configure the machine to provide our IDS requirements for our external
    architecture range. Open a terminal window and enter `ifconfig` and verify that
    you have three interfaces as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，在上一个截图中，ISO映像不再挂载；删除该设置是一个好主意，以避免任何潜在的冲突。一旦验证了您的配置并启动了虚拟机，我们将继续配置机器以满足我们外部架构范围的IDS需求。打开一个终端窗口并输入`ifconfig`，验证您是否有三个接口，如下截图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_34.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_34.jpg)'
- en: 'Now that we have the interfaces set, we are ready to start Snort. The reason
    we have selected the Network Security Toolkit is that it provides us with a very
    easy setup of a Snort sensor. Click on **Activities** and select the Firefox icon
    and open the browser, you will be prompted for a username and password. Enter
    the username as `root` and the password you set when you installed it to the hard
    drive. In the web interface, click on **Security** | **Intrusion Detection** |
    **Snort IDS** to open the GUI to configure Snort. An example of this is shown
    in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了接口，准备启动Snort。我们选择网络安全工具包的原因是它为我们提供了一个非常简单的Snort传感器设置。单击**活动**，选择Firefox图标并打开浏览器，系统将提示您输入用户名和密码。输入用户名`root`和安装到硬盘时设置的密码。在Web界面中，单击**安全**
    | **入侵检测** | **Snort IDS**以打开配置Snort的GUI。这种配置的一个示例如下截图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_35.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_35.jpg)'
- en: Screen showing GUI to configure Snort (the cropped text is not important)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示配置Snort的GUI的屏幕（裁剪的文本不重要）
- en: 'To configure the sensor, select the radio button for the sensor you are starting,
    which is the eth0 interface. Once you have selected the interface, scroll down
    and click on **Setup/Start Snort** to start the sensor. Give it some time and
    then click on **Check Status** to see if the sensor has started. It will sometimes
    take two tries, and if it says stopped, click on **Enable** and run through the
    process again. Once it is successful, you should see the process running on the
    interface. Follow the same steps for the other two interfaces. An example of this
    configuration is shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置传感器，请选择您要启动的传感器的单选按钮，即eth0接口。选择接口后，向下滚动并单击**设置/启动Snort**以启动传感器。给它一些时间，然后单击**检查状态**以查看传感器是否已启动。有时需要尝试两次，如果显示停止，请单击**启用**，然后再次运行该过程。一旦成功，您应该看到接口上正在运行的进程。对其他两个接口执行相同的步骤。这种配置的一个示例如下截图所示：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_36.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_36.jpg)'
- en: Screen showing the process running on the interface (the cropped text is not
    important)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 显示在接口上运行的进程的屏幕（裁剪的文本不重要）
- en: 'That''s it! We now have a fully distributed IDS using the Snort tool and we
    have sensors connected to each switch of the architecture. We will not go into
    the details of using the IDS here, because we will cover it in great detail when
    we show methods of evasion. For now, we want to at least look at a simple way
    to verify that your Snort installation is working. To the right of the sensor,
    there are a number of buttons; click on the **Rules** button for the interface
    eth0\. This will bring up the rules that you can configure on the interface; as
    you review the rules, you will see that this base installation does not have that
    many rules enabled; this is to help avoid false positives. It is common for sites
    to disable the scan rules as it can result in a number of false positives and
    in actuality, scanning is such a common occurrence. We want to enable the scan
    rules for the interface by selecting it in the radio button. Once you have made
    the changes for the rules, you will be required to reload the interface. Click
    on **Include Only Selected Rules**. An example of this is shown in the following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们现在使用Snort工具拥有了一个完全分布式的IDS，并且我们已经将传感器连接到架构的每个交换机上。我们不会在这里详细介绍如何使用IDS，因为当我们展示规避方法时，我们将会详细介绍。现在，我们至少想简单地查看一种验证您的Snort安装是否正常工作的方法。在传感器的右侧，有许多按钮；点击**规则**按钮以选择eth0接口。这将显示您可以在接口上配置的规则；当您审查规则时，您会发现这个基本安装并没有启用太多规则；这是为了避免误报。通常，网站会禁用扫描规则，因为它可能导致许多误报，而实际上，扫描是如此常见。我们希望通过在单选按钮中选择它来启用接口的扫描规则。一旦您对规则进行了更改，您将需要重新加载接口。点击**仅包括所选规则**。以下是此示例的屏幕截图：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_37.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_37.jpg)'
- en: The next step is to reload the sensor to update the rules. Click on **Manage
    Snort Processes** to manage the Snort sensor and click on the **Reload** button.
    We are now set to test our sensor! Open a terminal window and enter `cd /etc/snort_eth0`
    to enter the directory that has been configured when you ran the NST script files.
    This is where all of the configuration files are located when you use the web
    interface to start your sensor. From here, the process is to start the Snort sensor
    again and perform a quick test. Again, this is just a quick reference of how to
    test a sensor; we will use the NST distribution much more in the section of evasion.
    As you have seen, we had to enable the scan rules so we can detect a scan, and
    this is quite common.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是重新加载传感器以更新规则。点击**管理Snort进程**以管理Snort传感器，然后点击**重新加载**按钮。现在我们准备测试我们的传感器！打开一个终端窗口并输入`cd
    /etc/snort_eth0`以进入在运行NST脚本文件时配置的目录。当您使用Web界面启动传感器时，所有配置文件都位于此处。从这里开始，流程是再次启动Snort传感器并执行快速测试。再次强调，这只是一个测试传感器的快速参考；在规避部分，我们将更多地使用NST分发。正如您所见，我们必须启用扫描规则以便检测扫描，这是非常常见的。
- en: 'Additionally, there are ways to avoid detection even if the scan rules are
    enabled, but that is for another time. In the terminal window, enter `snort –A
    console –c snort.conf` to start another instance of Snort and log information
    to the console. If you are not at root privileges, you will have to run the command
    as `root`. Open another terminal and enter `nmap –sX –p 137,445 192.168.177.1`
    in it to conduct a Christmas tree scan against the host machine. An example of
    the alerts that you should see on the console from Snort is shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，即使启用了扫描规则，也有方法可以避免检测，但这是另一回事。在终端窗口中，输入`snort –A console –c snort.conf`以启动另一个Snort实例并将信息记录到控制台。如果您没有root权限，您将需要以`root`身份运行该命令。打开另一个终端并输入`nmap
    –sX –p 137,445 192.168.177.1`以对主机进行圣诞树扫描。以下是您应该在Snort控制台上看到的警报的示例屏幕截图：
- en: '![Intrusion Detection System (IDS)](img/477-1_06_38.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![入侵检测系统（IDS）](img/477-1_06_38.jpg)'
- en: This verifies that we have Snort configured and the rules are working. At this
    time, we will not do any more here. You are welcome to explore on your own. The
    NST distribution has a significant amount of tools and it is well worth exploring
    to learn more, and it is recommended that you use the NST as a nice complement
    to the Kali machine.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了我们已经配置了Snort并且规则正在工作。此时，我们不会再做更多的工作。欢迎您自行探索。NST分发拥有大量的工具，值得进一步探索学习，建议您将NST作为Kali机器的一个很好的补充。
- en: Intrusion Prevention System (IPS)
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵防范系统（IPS）
- en: We have deployed the IDS, so now it is time to turn our attention to the IPS.
    In the early days of IDS, there were three functions that the IDS provided us;
    they were monitor, detect, and respond. This is where the IPS came from; the function
    of response today is the capability to respond and potentially prevent an attack.
    For the most part, the response is to block by IP address when it comes to a network
    IPS. For the host or machine-based IPS, it is a matter of blocking the process
    from accessing something. A somewhat limited example of this is the **User Account
    Control** (**UAC**) protection on the latest version of Windows. The problem with
    these approaches is that we are asking software to detect an attack that is real
    compared to one that may not be real. That is, we are asking software to think.
    It is my opinion that we do not have thinking software no matter what the media
    or entertainment industry tries to portray. As an example, when we perform an
    action on a machine that involves UAC, it warns us that something is going on;
    the problem is that it warns us so much that we just click on **yes**. Therefore,
    this is not an effective method of protection. We know the user more than likely
    will click; this is good for testing and bad for security.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经部署了IDS，现在是时候把注意力转向IPS了。在IDS的早期，IDS为我们提供了三个功能；它们是监视、检测和响应。这就是IPS的来源；今天的响应功能是响应和潜在地防止攻击。在大多数情况下，网络IPS的响应是根据IP地址进行阻止。对于基于主机或机器的IPS，阻止进程访问某些内容。这方面的一个有限的例子是Windows最新版本的**用户账户控制**（**UAC**）保护。这些方法的问题在于我们要求软件检测真实攻击与可能不真实攻击的区别。也就是说，我们要求软件进行思考。我认为，无论媒体或娱乐行业如何描绘，我们都没有思考的软件。例如，当我们在机器上执行一个涉及UAC的操作时，它会警告我们有事情发生；问题在于它警告我们太多，以至于我们只是点击**是**。因此，这不是一种有效的保护方法。我们知道用户很可能会点击；这对测试有好处，对安全有害。
- en: Years ago, we would spoof an IP address of something that the client site used
    like their gateway and then generate an attack. The response action was to block
    the IP address and as a result, they blocked their own gateway and no one could
    access anything outside of their network. So as you can imagine, an IPS can cause
    problems when it is deployed; consequently, it has been my experience that if
    it is deployed, it is configured in monitor mode and not in block mode.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，我们会伪装客户端网站使用的IP地址，比如他们的网关，然后发动攻击。响应动作是阻止IP地址，结果他们阻止了自己的网关，没有人能够访问他们网络之外的任何内容。因此，可以想象，IPS在部署时可能会引起问题；因此，根据我的经验，如果部署了IPS，通常会配置为监视模式而不是阻止模式。
- en: When it comes to IPS, there are not that many available for our range purposes
    that are not commercial products. For this reason, we will not go through the
    process of adding one to our range at this time. When we get to the section in
    evasion, we will take another look at this. The IPS deployment on our range will
    be dependent on what we encounter with the client and the details in the scope
    of work.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPS方面，我们的范围内可用的产品并不多，而且都是商业产品。因此，我们暂时不会在我们的范围内添加IPS。当我们到了规避部分时，我们会再次考虑这个问题。我们在范围内的IPS部署将取决于我们在客户端遇到的情况和工作范围的细节。
- en: Load balancers
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: When it comes to adding load balancers to our architecture, there are a couple
    of choices. The main thing with testing is detecting when a load balancer is in
    place and dealing with the ramifications of that as we carry out our testing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在向我们的架构添加负载均衡器时，有几种选择。测试的主要问题是检测负载均衡器是否就位，并在进行测试时处理相关问题。
- en: 'We will concentrate the discussion on our potential options to have load balancing
    within our architecture. We will be discussing only protocol load balancing. We
    have the capability to use load balancing in iptables. For an example of this,
    refer to the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将集中讨论在我们的架构中实现负载均衡的潜在选择。我们只会讨论协议负载均衡。我们有能力在iptables中使用负载均衡。关于这一点的例子，请参考以下屏幕截图：
- en: '![Load balancers](img/477-1_06_39.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![负载均衡器](img/477-1_06_39.jpg)'
- en: The example in the previous screenshot uses the concept of rotating packets
    between the three machines as specified. The configuration load balances incoming
    HTTPS traffic to three different IP addresses, using `counter 0` for every third
    packet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中的示例中，使用了在三台机器之间旋转数据包的概念。配置负载均衡将传入的HTTPS流量分配到三个不同的IP地址，使用“counter 0”来处理每第三个数据包。
- en: 'Our next example for load balancing is the pfsense firewall; there is a capability
    to load balance within the firewall configuration. To find additional information
    and a tutorial to configure inbound load balancing, refer to this website [https://doc.pfsense.org/index.php/Inbound_Load_Balancing](https://doc.pfsense.org/index.php/Inbound_Load_Balancing).
    Additionally, the book *Advanced Penetration Testing for Highly-Secured Environments:
    The Ultimate Security Guide* by Lee Allen has details on how to use pfsense to
    load balance.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个负载均衡的例子是pfsense防火墙；在防火墙配置中有负载均衡的功能。要获取有关配置入站负载均衡的额外信息和教程，请参考这个网站[https://doc.pfsense.org/index.php/Inbound_Load_Balancing](https://doc.pfsense.org/index.php/Inbound_Load_Balancing)。此外，Lee
    Allen的书《高度安全环境的高级渗透测试：终极安全指南》中有关于如何使用pfsense进行负载均衡的详细信息。
- en: Integrating web application firewalls
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成Web应用防火墙
- en: At the time of writing this book, more and more architectures that you encounter
    start to deploy protection of their web servers. Moreover, deployment of web application
    firewalls, or WAF, as they are commonly referred to are becoming more and more
    prevalent. As such, we need to deploy them in our architecture to test and determine
    how to get past them. We will cover the details of this in a later section. For
    now, we will look at adding a WAF capability to our architecture. One of the most
    popular WAFs that are free and open source is ModSecurity. We will revisit this
    in the later chapters; for now, we are going to add a WAF to our existing metasploitable
    VM that we have used in our earlier architecture.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，您遇到的越来越多的架构开始部署其Web服务器的保护。此外，部署Web应用防火墙（或WAF，通常所说的）变得越来越普遍。因此，我们需要在我们的架构中部署它们，以测试并确定如何通过它们。我们将在后面的部分详细介绍这些细节。现在，我们将看看如何向我们的架构添加WAF功能。最受欢迎的免费开源WAF之一是ModSecurity。我们将在后面的章节中重新讨论这个问题；现在，我们将向我们之前架构中使用的现有metasploitable
    VM添加一个WAF。
- en: 'Prior to installing and configuring the WAF, we will clone the machine and
    create a WAF appliance for our architecture. This will allow us to connect the
    WAF machine to any point of our range so that we can test our ability to get past
    it. This will provide us with the configuration as shown in the following diagram:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置WAF之前，我们将克隆机器并为我们的架构创建一个WAF设备。这将允许我们将WAF机器连接到我们范围的任何地方，以便我们可以测试我们通过它的能力。这将为我们提供以下图表中显示的配置：
- en: '![Integrating web application firewalls](img/477-1_06_43.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![集成Web应用防火墙](img/477-1_06_43.jpg)'
- en: As we need to access the Internet, you will need to change the network adapter
    so that it connects to the NAT switch and provides us with the link to the Internet.
    Once you have made the configuration change, power on the machine. Once you have
    logged in, enter `sudo –i` to assume the root level of privilege.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要访问互联网，您需要更改网络适配器，以便它连接到NAT开关并为我们提供互联网的链接。更改配置后，启动机器。登录后，输入`sudo –i`以假定特权的根级别。
- en: 'We need to download the software, and we will use the `wget` command for this.
    The link will be different when you are reading this book. Therefore, go to the
    website and verify what version is currently available and change the version
    number to match the one you discover, then the download should progress as normal.
    In the terminal window, enter `wget http://www.applicure.com/downloads/5.12/Linux/i386/dotDefender-5.12.Linux.i386.deb.bin.gz`
    to connect and download the software. Once the software is downloaded, it is time
    to install it. However, before we do this, we have to unzip it and make it executable.
    Enter `gunzip dotDefender-5.12.Linux.i386.deb.bin.gz` to unzip the file. Once
    the file has been unzipped, we now have to make it executable. Enter `chmod +x
    dotDefender-5.12.Linux.i386.deb.bin` and change the permissions for execution.
    An example of these commands is shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载软件，我们将使用`wget`命令。当您阅读本书时，链接将会有所不同。因此，转到网站并验证当前可用的版本，并更改版本号以匹配您发现的版本，然后下载应该正常进行。在终端窗口中，输入`wget
    http://www.applicure.com/downloads/5.12/Linux/i386/dotDefender-5.12.Linux.i386.deb.bin.gz`以连接并下载软件。软件下载完成后，是时候安装它了。但是，在这之前，我们必须解压缩它并使其可执行。输入`gunzip
    dotDefender-5.12.Linux.i386.deb.bin.gz`以解压文件。文件解压缩后，我们现在必须使其可执行。输入`chmod +x dotDefender-5.12.Linux.i386.deb.bin`并更改执行权限。这些命令的示例如下图所示：
- en: '![Integrating web application firewalls](img/477-1_06_40.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![集成Web应用防火墙](img/477-1_06_40.jpg)'
- en: We are now ready to start the installation process. Enter `./dotDefender-5.12.Linux.i386.deb.bin`
    to start the installation process. Follow the defaults until you have to enter
    the path to the Apache executable. Enter `/usr/sbin/apache2` for the location
    of the Apache server and continue with the installation defaults until you get
    to enter a URI to access the application. Enter `dotDefender`. Then, enter a password
    for admin access; again you can enter any password of your choice, but in a test
    environment, I like to keep it simple, so we will use a password of `adminpw`
    and continue with the installation. At the update option, select the **either**
    option and continue with the installation. If prompted for an update periodicity
    options, select any one for your choice and then click on **Next**. Select the
    first option to get the updates from the website and then **Next** to continue
    on with the installation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始安装过程。输入`./dotDefender-5.12.Linux.i386.deb.bin`以开始安装过程。按默认设置进行，直到您必须输入Apache可执行文件的路径。输入`/usr/sbin/apache2`作为Apache服务器的位置，并继续使用安装默认设置，直到您输入要访问应用程序的URI。输入`dotDefender`。然后，输入管理员访问密码；在测试环境中，您可以输入任何您选择的密码，但我喜欢保持简单，所以我们将使用密码`adminpw`并继续安装。在更新选项中，选择**任一**选项并继续安装。如果提示更新周期选项，请选择您选择的任何一个，然后单击**下一步**。选择第一个选项从网站获取更新，然后单击**下一步**继续安装。
- en: 'If all goes well, you should see a successful installation completion message
    as shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该看到安装完成的成功消息，如下图所示：
- en: '![Integrating web application firewalls](img/477-1_06_41.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![集成Web应用防火墙](img/477-1_06_41.jpg)'
- en: 'We now need to restart Apache as directed in the completion message; enter
    `/etc/init.d/apache2 restart` to restart the server. Once the web server has been
    restarted, we will access the WAF. Open a browser of your choice and connect to
    the WAF with the URL of the Metasploitable machine. Once you are connected, enter
    the username of admin and the password you selected during installation and access
    the configuration page; an example is shown in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据完成消息的指示，我们需要重新启动Apache；输入`/etc/init.d/apache2 restart`以重新启动服务器。重新启动Web服务器后，我们将访问WAF。打开您选择的浏览器，并使用Metasploitable机器的URL连接到WAF。连接后，输入管理员用户名和您在安装过程中选择的密码，并访问配置页面；如下图所示的示例：
- en: '![Integrating web application firewalls](img/477-1_06_42.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![集成Web应用防火墙](img/477-1_06_42.jpg)'
- en: 'As we have not applied a license, we are only in the monitoring mode, but for
    our purposes of testing and using a WAF to practice, this is really all we need.
    We now want to test our WAF, and we will use the Kali distribution for the test.
    In the Kali machine, open a terminal window and enter `nikto –h 192.168.177.134`
    to use the nikto web scanner and see if the dotDfender WAF alerts. If your WAF
    is at a different IP address, then you will have to change the target destination
    to the IP address of your WAF. After you have performed the scan, return to your
    dotDefender and navigate to **Log Viewer** | **Metasploitable** to view the logs
    from the WAF. You should see some alerts from the scan with nikto; an example
    is shown in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们尚未应用许可证，我们只处于监控模式，但对于我们的测试和使用WAF进行练习来说，这已经足够了。现在我们想要测试我们的WAF，并且我们将使用Kali发行版进行测试。在Kali机器上，打开一个终端窗口，输入`nikto
    –h 192.168.177.134`来使用nikto网络扫描程序，看看dotDfender WAF是否会发出警报。如果您的WAF位于不同的IP地址，则必须将目标地址更改为您的WAF的IP地址。扫描完成后，返回到您的dotDefender，并导航到**日志查看器**
    | **Metasploitable**，查看来自WAF的日志。您应该会看到来自nikto扫描的一些警报；以下是一个示例截图：
- en: '![Integrating web application firewalls](img/477-1_06_44.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![集成Web应用防火墙](img/477-1_06_44.jpg)'
- en: We have now built a robust and complete architecture for not only external testing
    but also other methods. We have the components that can be reused in a number
    of different scenarios; therefore, from the perspective of this chapter, our requirements
    have been met and we completed our stated goals. One last thing to do is take
    snapshots of all of the machines we have configured in this chapter so that you
    have them in case something ever goes wrong.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为外部测试以及其他方法构建了一个强大而完整的架构。我们拥有可以在许多不同情况下重复使用的组件；因此，从本章的角度来看，我们的需求已经得到满足，我们也完成了我们的目标。最后要做的一件事是对本章中配置的所有机器进行快照，以防万一出现问题。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have built a layered architecture to serve the requirements
    of the potential variety of scenarios that we might encounter. We started the
    chapter with a layered approach to meet the needs of our external testing.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们建立了一个分层架构，以满足我们可能遇到的各种情况的需求。我们从分层方法开始，以满足我们外部测试的需求。
- en: Following the defined layers, we began with adding the required components to
    each of the segments of the architecture. We also looked at the filtering and
    routing requirements and built and configured both a Cisco router emulator as
    well as an iptables machine to meet our filtering requirements.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了各层之后，我们开始向架构的每个部分添加所需的组件。我们还研究了过滤和路由的需求，并构建和配置了Cisco路由器模拟器以及iptables机器，以满足我们的过滤需求。
- en: Once we configured and tested our first layer components, we moved to the task
    of adding a firewall to the architecture. We used the popular tool Smoothwall
    as our firewall and configured it to support one service for testing purposes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们配置并测试了第一层组件，我们就开始添加防火墙到架构中的任务。我们使用了流行的工具Smoothwall作为我们的防火墙，并将其配置为支持一个服务以进行测试。
- en: After we built the firewall and tested the configuration, we next took on the
    task of adding monitoring capability to the range. We built and configured Snort
    on all three required subnets to support our need for intrusion detection capability.
    Then, we discussed the process of adding both IPS and load balancing to the configuration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了防火墙并测试了配置之后，我们接下来着手添加监控功能到网络。我们在所有三个所需的子网上构建和配置了Snort，以支持我们对入侵检测的需求。然后，我们讨论了向配置中添加IPS和负载平衡的过程。
- en: Finally, we closed the chapter with a discussion on the integration of web application
    firewalls. We installed and configured the web application firewall dotDefender.
    Once we built the machine, we cloned it so that we now have a WAF machine that
    we can connect to any location within our architecture. Once we finished the cloning
    process, we used a tool, nikto, to test whether our WAF was detecting web application
    types of attacks.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了集成Web应用防火墙的内容。我们安装并配置了Web应用防火墙dotDefender。一旦我们建立了机器，我们对其进行了克隆，这样我们现在就有了一个可以连接到架构中任何位置的WAF机器。在完成克隆过程后，我们使用了一个工具nikto来测试我们的WAF是否能检测到Web应用程序类型的攻击。
- en: This concludes the chapter. You now have a complete layered architecture to
    include the routing requirements. Now, it is just a matter of connecting the desired
    targets to this architecture and testing to see what works and does not work against
    the targets. From this point, the process will be to look at the potential targets
    that we may encounter and then lab it up and see what we can discover. The foundation
    and core of the range is built and now it is time to add targets. One of the first
    protection, and therefore targets, we will encounter is some form of a device;
    consequently, this is where we will start in the next chapter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章到此结束。您现在拥有一个完整的分层架构，包括路由需求。现在，只需连接所需的目标到这个架构，并测试看看对目标的攻击是否奏效。从这一点开始，我们将看看可能遇到的目标，然后进行实验，看看我们能发现什么。范围的基础和核心已经建立，现在是时候添加目标了。我们将遇到的第一个保护，也是目标，将是某种设备；因此，这将是我们下一章的起点。
