- en: Chapter 11. Attacking Servers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。攻击服务器
- en: 'In this chapter, we will identify the methods we use to attack services and
    servers. The nice thing about this is that we know a server has to have the service
    running and, more importantly, have the socket in a listening state, ready to
    accept connections. Moreover, this means that the server sits there and just waits
    for us to attack it. This is good for us, as we already covered this in [Chapter
    9](ch09.html "Chapter 9. Assessment of Web Servers and Web Applications"), *Assessment
    of Web Servers and Web Applications*. The most common attack vector we are going
    to see is the web applications that are running on a web server. It is not our
    intention to cover this again here; instead, we will focus on other things that
    we can attack on the server platforms we encounter. In this chapter, we will be
    discussing the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将确定我们用来攻击服务和服务器的方法。好消息是，我们知道服务器必须运行服务，并且更重要的是，必须将套接字处于监听状态，准备接受连接。此外，这意味着服务器只需坐在那里等待我们来攻击它。这对我们来说是好事，因为我们已经在[第9章](ch09.html
    "第9章。评估Web服务器和Web应用程序")中涵盖了这一点，*评估Web服务器和Web应用程序*。我们将看到的最常见的攻击向量是运行在Web服务器上的Web应用程序。我们不打算在这里再次涵盖这一点；相反，我们将专注于我们可以攻击的其他服务器平台上的其他事物。在本章中，我们将讨论以下主题：
- en: Common protocols and applications for servers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器的常见协议和应用程序
- en: Database assessment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库评估
- en: OS platform specifics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统平台特定
- en: This chapter will provide us with information about the ways we can target and
    hopefully, penetrate the servers that we encounter when we are testing. As the
    target is a server, we could potentially get access via an OS vulnerability or
    a flaw. Unfortunately, this is becoming more and more rare. Microsoft and other
    vendors have done their homework, and the vectors of attack against the OS are
    not dead, but they could be considered to be on life support. Therefore, we want
    to focus on the protocols and the applications that are running on the servers,
    as they will usually provide us with our best chance at a successful attack.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供有关我们在测试时可以针对的服务器的信息。由于目标是服务器，我们可能会通过操作系统漏洞或缺陷来获取访问权限。不幸的是，这种情况变得越来越少见。微软和其他供应商已经做了他们的功课，对操作系统的攻击向量并没有消失，但可以认为它们处于生命支持状态。因此，我们希望专注于运行在服务器上的协议和应用程序，因为它们通常会为我们提供成功攻击的最佳机会。
- en: Common protocols and applications for servers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器的常见协议和应用程序
- en: In this section, we will look at some of the more common protocols and applications
    that are typically found on servers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一些通常在服务器上找到的常见协议和应用程序。
- en: Web
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: Again, we have covered this, but it is still one of the most common applications
    on servers, and as such, one of our potential vectors of attack. When it comes
    to web applications, we have even more potential areas that we can attack due
    to the common mistakes in the coding of the applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，尽管我们已经涵盖了这一点，但它仍然是服务器上最常见的应用程序之一，因此也是我们潜在的攻击向量之一。在涉及到Web应用程序时，由于应用程序编码中的常见错误，我们有更多潜在的攻击领域。
- en: File Transfer Protocol
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件传输协议
- en: '**File Transfer Protocol** (**FTP**) has been around for a very long time.
    In this section, we are going to use an advanced method of FTP that can be used
    when you encounter an environment that does not allow the standard FTP client/server
    communication to work. An excellent reference for information on protocols is
    the Network Sorcery website; you can find it at [http://www.networksorcery.com](http://www.networksorcery.com).
    There is a wealth of information here for reference; the area we want to concentrate
    on is **RFC** **Sourcebook** | **Protocols**. An example of this page is shown
    in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件传输协议**（**FTP**）已经存在很长时间了。在本节中，我们将使用一种高级的FTP方法，当您遇到不允许标准FTP客户端/服务器通信工作的环境时可以使用。关于协议的信息的一个很好的参考是Network
    Sorcery网站；您可以在[http://www.networksorcery.com](http://www.networksorcery.com)找到它。这里有大量的参考信息；我们想要专注的领域是**RFC**
    **Sourcebook** | **Protocols**。以下是此页面的示例屏幕截图：'
- en: '![File Transfer Protocol](img/477-1_11_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![文件传输协议](img/477-1_11_1.jpg)'
- en: The RFC protocols (the cropped text is not important)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RFC协议（裁剪的文本不重要）
- en: 'As you review the site, you will see that at the top, there is a menu bar that
    is alphabetical. This is where we want to select the protocols we might encounter
    when we do our professional security testing. We want to take a look at the FTP
    information. Navigate to **F** | **FTP** to open the page that contains the information
    about FTP. An example of this is shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看网站时，您会发现顶部有一个按字母顺序排列的菜单栏。这是我们想要选择我们在进行专业安全测试时可能遇到的协议的地方。我们想要查看FTP信息。导航到**F**
    | **FTP**以打开包含有关FTP信息的页面。以下是此示例的屏幕截图：
- en: '![File Transfer Protocol](img/477-1_11_2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![文件传输协议](img/477-1_11_2.jpg)'
- en: Screen showing the page that contains the information about FTP (the cropped
    text is not important)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示包含有关FTP信息的页面（裁剪的文本不重要）
- en: 'When we are doing our testing, it is often too late to get the detailed knowledge
    we might need with certain protocols; this is where the RFC Sourcebook can assist
    us. This site is beneficial because it also provides the protocol packet header
    information. Click on **IP** to display the header. An example of the header is
    shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行测试时，通常为时已晚以获取我们可能需要的某些协议的详细知识；这就是RFC Sourcebook可以帮助我们的地方。这个网站很有用，因为它还提供了协议数据包头信息。单击**IP**以显示头部。以下是头部的示例屏幕截图：
- en: '![File Transfer Protocol](img/477-1_11_3.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![文件传输协议](img/477-1_11_3.jpg)'
- en: Protocol research
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协议研究
- en: There are a number of things you can discover when you research on a protocol;
    however, to be able to do this, we need to understand how the protocol behaves.
    This is what we want to do when we research the protocol; furthermore, we want
    to know how we can leverage FTP. As the majority, if not all clients, have an
    FTP client on the machine, it is a good way to transfer files. For example, we
    commonly do this if we find the weak filters that we discussed in [Chapter 7](ch07.html
    "Chapter 7. Assessment of Devices"), *Assessment of Devices*. Before we can do
    this, we need to understand more about the FTP and how it creates the connections.
    We will save you some time and offer an example; however, you are encouraged to
    research the protocol to learn more tricks that you can use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究协议时，你可以发现很多东西；然而，要能够做到这一点，我们需要了解协议的行为方式。这就是我们在研究协议时想要做的事情；此外，我们想知道如何利用FTP。由于大多数客户端，如果不是所有的话，都在机器上有一个FTP客户端，这是一个很好的传输文件的方式。例如，如果我们发现了我们在[第7章](ch07.html
    "第7章.设备评估")中讨论的弱过滤器，我们通常会这样做，*设备评估*。在我们能够做到这一点之前，我们需要更多地了解FTP以及它是如何创建连接的。我们将为您节省一些时间并提供一个示例；然而，我们鼓励您研究该协议以了解更多可以使用的技巧。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The main thing you need to know is that the FTP port command identifies an IP
    address by separating it with commas and not decimals like we are commonly used
    to.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要知道的主要事情是FTP端口命令通过逗号而不是我们通常使用的小数点来识别IP地址。
- en: 'Additionally, it uses a byte mode system, and the ports are represented in
    the Base 256 format. So, to connect to IP address `192.168.177.10` on port `1024`,
    the command is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它使用字节模式系统，端口以Base 256格式表示。因此，要连接到IP地址`192.168.177.10`的端口`1024`，命令如下：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The breakdown of this is that the port is represented by *4x256=1024*. Again,
    these are the types of things that are good to know when we run into the common
    FTP protocol, and it is located in a DMZ protected by a weak filtering rule.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个端口的分解，端口由*4x256=1024*表示。再次强调，当我们遇到常见的FTP协议时，了解这些是很有用的，它位于一个由弱过滤规则保护的DMZ中。
- en: This is best represented with an example. You will need a machine to serve as
    the filter; you can use either the **Dynamips** machine or the **IP Tables** machine
    that we created earlier in the book. Then, you need a machine that will serve
    as the inside machine that will run the FTP server. We will use a Windows 7 machine
    here in the book, but it can be any machine with the capability to run an FTP
    server. Then, we need a machine that will serve as the external machine, sending
    traffic from the outside. You need to create routes on both sides of the filtering
    device. Additionally, create the rule to allow FTP traffic and the return traffic.
    Remember that the return traffic will have a source port of 20\. Once you have
    built the required architecture, it is just a matter of working through the commands.
    We will use the Kali Linux machine to send the commands and run `netcat`; we will
    use the 3com FTP server on the protected machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这最好用一个例子来表示。你需要一台机器作为过滤器；你可以使用我们在本书中之前创建的**Dynamips**机器或**IP Tables**机器。然后，你需要一台作为内部机器的机器，它将运行FTP服务器。我们将在本书中使用Windows
    7机器，但它可以是任何具有运行FTP服务器能力的机器。然后，我们需要一台作为外部机器的机器，从外部发送流量。你需要在过滤设备的两侧创建路由。此外，创建允许FTP流量和返回流量的规则。请记住，返回流量的源端口将是20。一旦你建立了所需的架构，只是一个通过命令来工作的问题。我们将使用Kali
    Linux机器发送命令并运行`netcat`；我们将使用受保护机器上的3com FTP服务器。
- en: As we mentioned earlier, with routers and stateless filters, it is often common
    for the administrator to allow the return traffic of a protocol such as FTP, and
    as we have shown, we can leverage this to get past the filter that is in place.
    Furthermore, we can use our knowledge of how the FTP behaves and the commands
    it uses to interact with an FTP server through a filter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，对于路由器和无状态过滤器来说，管理员通常允许诸如FTP之类的协议的返回流量，正如我们所展示的，我们可以利用这一点来绕过已经设置的过滤器。此外，我们可以利用我们对FTP行为方式和与FTP服务器交互所使用的命令的知识。
- en: 'The first thing we need to do once we have our environment built is start our
    FTP server. Once the server has started, we then need to connect to it from the
    Kali Linux machine using the capability coming from the source port of 20\. In
    the terminal window on Kali Linux, type the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们建立了我们的环境，我们需要做的第一件事就是启动我们的FTP服务器。一旦服务器启动，我们需要使用来自源端口20的能力从Kali Linux机器连接到它。在Kali
    Linux的终端窗口中，输入以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will connect to the FTP server that is located inside the filtering device.
    An example is shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将连接到位于过滤设备内部的FTP服务器。下面的截图显示了一个示例：
- en: '![Protocol research](img/477-1_11_4.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![协议研究](img/477-1_11_4.jpg)'
- en: As the previous screenshot shows, a good indication that we are successful is
    the fact that we see the banner from the server. This is a common configuration
    when an inside machine is allowed to connect to an external FTP server, as the
    server will send the data from a source port of 20\. Then, the rule to allow this
    connection is in the filtering device; therefore, by sending the data from this
    port, we can penetrate into a weak filter. We use the FTP server on the inside
    to demonstrate the point. We could have chosen any open port on the machine to
    show this. We now need to log in to the server, and it is likely that `anonymous`
    will be enabled. So, enter the user as `anonymous`, and once you see the acknowledgement
    of the user, enter the password as `password123`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们成功的一个很好的指示是我们看到了服务器的横幅。这是一个常见的配置，当内部机器被允许连接到外部FTP服务器时，服务器将从源端口20发送数据。然后，允许此连接的规则在过滤设备中；因此，通过从这个端口发送数据，我们可以渗透到一个弱过滤器中。我们使用内部的FTP服务器来证明这一点。我们本可以选择机器上的任何开放端口来展示这一点。现在我们需要登录服务器，很可能`anonymous`将被启用。因此，将用户输入为`anonymous`，一旦看到用户的确认，输入密码为`password123`。
- en: 'Once you get the acknowledgement that the user is logged in, you can enter
    `help` to see the commands if you want to. From the FTP commands that are available,
    the one that we want to use is the `nlst` command that will provide us with a
    listing of the directory that we are in. In the FTP login window, enter `nlst`
    to list a directory. Are you successful? The answer is no! This is because for
    this to work, the program has to know what port the client is listening on to
    send the data to that port. To set this up, we need to open another window so
    that we can get the data returned by the connection. When you open another terminal
    window, you can arrange them so that you can see both of them at the same time.
    In the new window, enter the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到用户已登录的确认，您可以输入`help`以查看命令。从可用的FTP命令中，我们想要使用的是`nlst`命令，它将为我们提供所在目录的列表。在FTP登录窗口中，输入`nlst`以列出目录。您成功了吗？答案是否定的！这是因为要使其工作，程序必须知道客户端正在侦听的端口，以便将数据发送到该端口。为了设置这一点，我们需要打开另一个窗口，以便可以获取连接返回的数据。当您打开另一个终端窗口时，可以将它们排列在一起，以便同时看到它们。在新窗口中，输入以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will open a port on the Kali Linux machine that will receive the data
    from the server. Once the port is in the listening state, we need to tell the
    server what port to send the data to, and we do this with the `port` command as
    follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Kali Linux机器上打开一个端口，用于接收来自服务器的数据。一旦端口处于侦听状态，我们需要告诉服务器将数据发送到哪个端口，我们使用`port`命令来做到这一点：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will inform the server that the port to send the data to is 2048\. Once
    the data has been sent, you enter the `nlst` command. This will show you the directory
    that is listed on the server. An example is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通知服务器将数据发送到端口2048。数据发送后，您输入`nlst`命令。这将显示服务器上列出的目录。以下屏幕截图显示了一个示例：
- en: '![Protocol research](img/477-1_11_5.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![协议研究](img/477-1_11_5.jpg)'
- en: 'As the previous screenshot shows, we have a file called `account.txt`, which
    is located on the server. We will now transfer the file using the FTP server to
    send it to us. We want to output the data that is received on the port to a file;
    we will do this using the output redirection (`>`) operator. The process is the
    same as before. In the window with the `netcat` tool, enter the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们在服务器上有一个名为`account.txt`的文件。我们现在将使用FTP服务器将文件发送给我们。我们希望将接收到的数据输出到一个文件中；我们将使用输出重定向（`>`）运算符来实现这一点。这个过程与之前的一样。在带有`netcat`工具的窗口中，输入以下命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We are now ready to run through the command sequence. Enter the same commands
    as we did earlier to the port command. Once the port command has been entered,
    we need to get the file. We do this by entering `retr accounts.txt`. An example
    is shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备运行命令序列。输入与我们之前输入到端口命令相同的命令。一旦输入了端口命令，我们需要获取文件。我们通过输入`retr accounts.txt`来实现这一点。以下屏幕截图显示了一个示例：
- en: '![Protocol research](img/477-1_11_6.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![协议研究](img/477-1_11_6.jpg)'
- en: 'As the previous screenshot shows, we have transferred the file to our Kali
    Linux machine. To verify this, we enter `trophy.txt`. The results are shown in
    the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们已经将文件传输到我们的Kali Linux机器上。为了验证这一点，我们输入`trophy.txt`。结果如下屏幕截图所示：
- en: '![Protocol research](img/477-1_11_7.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![协议研究](img/477-1_11_7.jpg)'
- en: As the previous screenshot shows, we have successfully transferred a file. It
    is important to remember that this could have been any file. The requirement is
    to find the weak filtering rule and then leverage it for our benefit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们已成功传输了一个文件。重要的是要记住，这可以是任何文件。要求是找到弱过滤规则，然后利用它为我们谋利。
- en: We have discussed how to identify vulnerabilities and a number of resources
    to do this on numerous occasions throughout the book, and this also applies here.
    The FTP server is a software and, as such, does have vulnerabilities. In fact,
    the version of the FTP server we used, 3com Daemon, does actually have an exploitable
    vulnerability in it. However, as this is our test lab, we control for the most
    part what happens to our machines and also the applications running on these machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何识别漏洞以及进行这方面的许多资源，这在整本书中都有提到。FTP服务器是一种软件，因此也存在漏洞。事实上，我们使用的FTP服务器版本3com
    Daemon确实存在一个可利用的漏洞。但是，由于这是我们的测试实验室，我们在很大程度上控制着我们的机器以及在这些机器上运行的应用程序。
- en: 'We can visit the Exploit DB site ([http://www.exploit-db.com](http://www.exploit-db.com))
    to see what we are referring to. Once we are on the site, we enter a search on
    all the vulnerabilities that were found to be running on port 21\. An example
    of the results of the search is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问Exploit DB网站（[http://www.exploit-db.com](http://www.exploit-db.com)）来查看我们所指的内容。一旦我们在网站上，我们搜索在端口21上运行的所有漏洞。以下屏幕截图显示了搜索结果的示例：
- en: '![Protocol research](img/477-1_11_9.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![协议研究](img/477-1_11_9.jpg)'
- en: Secure Shell
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全外壳
- en: The **Secure Shell** (**SSH**) protocol is quite common, so we will more than
    likely encounter it when we are testing. The techniques we applied with FTP could
    also, in some cases, be applied to SSH; it depends on how the administrator has
    configured the access to and from the SSH server. We will not focus on this here
    as we have covered the process and steps we would use with respect to FTP.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全外壳**（**SSH**）协议非常常见，所以在测试时很可能会遇到。我们应用于FTP的技术在某些情况下也可以应用于SSH；这取决于管理员如何配置对SSH服务器的访问。我们不会在这里专注于此，因为我们已经涵盖了关于FTP的过程和步骤。'
- en: So, what is the SSH protocol? It was designed originally as a replacement for
    the clear text weaknesses of the Telnet protocol. An excellent way to learn more
    on the protocol is to visit the Network Sorcery site.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，SSH协议是什么？它最初是作为Telnet协议明文弱点的替代品而设计的。了解更多关于该协议的方法是访问Network Sorcery网站。
- en: 'An example of the explanation for SSH is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SSH的解释示例如下屏幕截图所示：
- en: '![Secure Shell](img/477-1_11_8.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_8.jpg)'
- en: 'Now that we have a brief understanding of what the SSH protocol is, let''s
    take a look at the vulnerabilities related to it. If we return to our Exploit
    DB and enter a search for the port of SSH, which is 22, we can review the vulnerabilities
    in the protocol itself. An example of the results of this search is shown in the
    following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对SSH协议有了一个简要的了解，让我们来看看与之相关的漏洞。如果我们回到我们的Exploit DB并搜索SSH的端口，即22，我们可以查看协议本身的漏洞。这次搜索的结果的一个例子如下截图所示：
- en: '![Secure Shell](img/477-1_11_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_10.jpg)'
- en: Our search returned some exploits; however, this search has not returned any
    for a recent version. At first, we would say that this makes it very difficult
    to find an exploit that we can use against a site today. In many environments,
    we have and continue to discover old versions of the SSH protocol, so never count
    out using it in the future.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搜索结果返回了一些漏洞利用；然而，这次搜索并没有返回最新版本的漏洞。起初，我们会说这使得我们今天很难找到一个可以用来攻击网站的漏洞。在许多环境中，我们发现并继续发现SSH协议的旧版本，所以未来不要排除使用它。
- en: Another nice thing about the SSH protocol is that it is only as strong as the
    administrator configures it. If the administrator allows weak passwords to exist,
    then there is still a chance that we can gain access using the SSH protocol. This
    brings us to a very important point that is good to understand, and that is, we
    do not always have to exploit the box to get on the box! We can use other methods
    of access to the machine, so it is not always imperative that we find an exploit.
    Furthermore, the validation of vulnerabilities or exploitation has to be allowed
    as per the scope of work.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SSH协议的另一个好处是，它的强度取决于管理员的配置。如果管理员允许存在弱密码，那么我们仍然有机会使用SSH协议获得访问权限。这带我们来到一个非常重要的观点，那就是，我们并不总是必须利用漏洞才能进入系统！我们可以使用其他方法访问机器，所以并不总是必须找到一个漏洞。此外，漏洞的验证或利用必须根据工作范围来允许。
- en: A powerful thing that we can do is use SSH to mask our presence and blind the
    monitoring of the client network. As SSH is encrypted, we can use it to carry
    out commands remotely once we have exploited a machine. For this demonstration,
    we will use the Kioptrix virtual machine. The process will be to exploit it, then
    crack the password and use it to log in via SSH to the machine, then execute our
    commands in an encrypted tunnel. We will run Wireshark throughout, so we can see
    exactly what the victims' network monitoring systems would see.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的一个强大的事情是使用SSH来掩盖我们的存在并使客户网络的监控失效。由于SSH是加密的，我们可以利用它来远程执行命令一旦我们利用了一台机器。在这个演示中，我们将使用Kioptrix虚拟机。过程将是利用它，然后破解密码并使用它通过SSH登录到机器，然后在加密隧道中执行我们的命令。我们将一直运行Wireshark，这样我们可以看到受害者的网络监控系统会看到什么。
- en: 'As we discovered earlier, we know that we have a vulnerable version of Samba,
    so we will use that as our initial vector of attack. We can use metasploit or
    the code from the exploit database. We need to run Wireshark and see what can
    be seen when we attack. For the example, in the book, we will use the code and
    not metasploit. We decided to use this because the metasploit Meterpreter shell
    is great, but if we do not have a Windows machine, then we have a limited selection
    of shells. To refresh your memory, we are using the C file `10.c`, and we have
    compiled it to the name of `sambaexp`,so we want to run the`./sambaexp` command
    to see how to use the tool. Remember that you have to be in the directory of the
    program to get the program to execute the command. An example of the results of
    this is shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前发现的，我们知道我们有一个易受攻击的Samba版本，所以我们将使用它作为我们的初始攻击向量。我们可以使用metasploit或者来自exploit数据库的代码。我们需要运行Wireshark并查看我们攻击时能看到什么。在书中的例子中，我们将使用代码而不是metasploit。我们决定使用这个是因为metasploit
    Meterpreter shell很棒，但如果我们没有Windows机器，那么我们的shell选择就有限了。为了提醒你，我们使用的是C文件`10.c`，我们已经将其编译成了`sambaexp`的名称，所以我们想要运行`./sambaexp`命令来看如何使用这个工具。记住，你必须在程序的目录中才能执行该命令。这个结果的一个例子如下截图所示：
- en: '![Secure Shell](img/477-1_11_11.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_11.jpg)'
- en: 'In the terminal window, we need to enter the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，我们需要输入以下命令：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command should result in getting the shell on the machine, and once you
    have done this, you can just copy the password file over and crack a password.
    Alternatively, you could create a user or change the root password. Which one
    you choose is up to you. An example of the exploited machine is shown in the following
    screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该会在机器上获取shell，一旦你做到了这一点，你就可以复制密码文件并破解密码。或者，你可以创建一个用户或者更改root密码。你选择哪一个取决于你。下面的截图显示了一个被利用的机器的例子：
- en: '![Secure Shell](img/477-1_11_12.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_12.jpg)'
- en: 'We now have root user on the machine, but the problem is we are going across
    the network, so any monitoring system will see what we do. We can enter a few
    commands and then review the information in Wireshark. Enter `/sbin/ifconfig`
    to view the IP information. Then, enter `nmap` to see if we have got lucky and
    the administrator has installed Nmap on the machine. An example of this command
    is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在机器上有了root用户，但问题是我们正在通过网络进行，所以任何监控系统都会看到我们的操作。我们可以输入一些命令，然后在Wireshark中查看信息。输入`/sbin/ifconfig`来查看IP信息。然后，输入`nmap`来看看我们是否幸运地管理员已经在机器上安装了Nmap。这个命令的一个例子如下截图所示：
- en: '![Secure Shell](img/477-1_11_13.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_13.jpg)'
- en: Screen that comes up when we enter nmap (the cropped text is not important)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输入nmap后出现的屏幕（裁剪的文本不重要）
- en: 'As the previous screenshot shows, we have gotten lucky; well, not that lucky
    as this is a very old version of Nmap. However, what about our activity? Have
    we been noticed? What does Wireshark capture? As you can imagine, for the most
    part, everything we have done is in clear text; therefore, Wireshark will show
    our activity. An example of this is shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们很幸运；嗯，并不是那么幸运，因为这是一个非常旧的Nmap版本。不过，我们的活动呢？我们被注意到了吗？Wireshark捕获了什么？可以想象，我们所做的大部分事情都是明文的；因此，Wireshark会显示我们的活动。以下截图显示了一个例子：
- en: '![Secure Shell](img/477-1_11_14.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_14.jpg)'
- en: As the previous screenshot shows, we have intercepted our communications, and
    a monitoring device would know what we were doing. As we have the Nmap tool on
    the machine, we could run commands with it. However, we would be detected again
    if someone looked at the network traffic; therefore, it is much better to use
    a tunnel, and we will do that now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们截取了我们的通信，监视设备会知道我们在做什么。由于我们在机器上有Nmap工具，我们可以用它运行命令。但是，如果有人查看网络流量，我们会再次被发现；因此，最好使用隧道，我们现在就这样做。
- en: 'For our example in the book, we have changed the root password on the compromised
    machine to `password`. To connect via SSH, we enter `ssh root@192.168.177.148`.
    An example of this is shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们已将受损机器上的root密码更改为`password`。要通过SSH连接，我们输入`ssh root@192.168.177.148`。以下截图显示了这个示例：
- en: '![Secure Shell](img/477-1_11_15.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_15.jpg)'
- en: 'As the previous screenshot shows, we logged in to the root account. Once we
    are in, we did an Nmap scan. That is all well and good, but the thing we want
    to know is what our network traffic reveals to our potential clients'' monitoring
    devices. An example of the Wireshark information is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们登录到了root账户。一旦我们进入，我们进行了一个Nmap扫描。这都很好，但我们想知道的是我们的网络流量对我们潜在客户的监视设备揭示了什么。以下截图显示了Wireshark信息的示例：
- en: '![Secure Shell](img/477-1_11_16.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![安全外壳](img/477-1_11_16.jpg)'
- en: Our network traffic shows the handshake that has the clear text information
    for the different algorithms as well as the banners of the client and server.
    Once the handshake completes, the rest of the data is encrypted, and as such,
    we cannot see what is taking place in our tunnel; this was our goal. It is good
    that many of the types of architecture that are out there use SSH on a regular
    basis, and we can use this to our advantage if we compromise a machine and perform
    post-exploitation tasks without being monitored.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网络流量显示了握手过程，其中包含了不同算法的明文信息以及客户端和服务器的横幅。一旦握手完成，其余数据就被加密了，因此我们无法看到在我们的隧道中发生了什么；这正是我们的目标。很多类型的架构都经常使用SSH，如果我们攻击了一台机器并执行后期利用任务而不被监视，我们就可以利用这一点。
- en: Mail
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邮件
- en: The next service we want to discuss is mail. This is another one of those services
    that we can count on to be on the servers of our clients. One of the first challenges
    we face is the type of mail server that is being used. Once we have determined
    that, we can start looking for ways to attack it or, at the very least, use it
    to our advantage when we are doing our testing. Most of the servers we encounter
    will be running the **Simple Mail Transfer Protocol** (**SMTP**), which is one
    of the easy things to determine. The port that SMTP runs on is 25, but administrators
    can change this and often do. So, it is a matter of looking for the banner that
    is returned to discover where the service is running.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想讨论的下一个服务是邮件。这是我们可以指望在客户端服务器上找到的服务之一。我们面临的第一个挑战之一是正在使用的邮件服务器类型。一旦我们确定了这一点，我们就可以开始寻找攻击它的方法，或者至少在测试时利用它。我们遇到的大多数服务器将运行**简单邮件传输协议**（**SMTP**），这是一件容易确定的事情。SMTP运行的端口是25，但管理员可以更改这一点，而且经常这样做。因此，要找到返回的横幅以发现服务运行的位置。
- en: 'We can use the same technique that we used earlier and search in the Exploit
    DB to see whether there might be some kind of exploit there. An example of a search
    for the SMTP exploits is shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们之前使用的相同技术，并在Exploit DB中搜索，看看是否可能有某种利用。以下截图显示了对SMTP利用的搜索示例：
- en: '![Mail](img/477-1_11_17.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![邮件](img/477-1_11_17.jpg)'
- en: 'As the previous screenshot shows, we really do not have anything current in
    the exploit department for the SMTP service. This is only one type of mail we
    might encounter in testing, so let us explore another one and see if we have any
    more luck. We will look at the **Post Office Protocol** (**POP**) that runs on
    port 110\. An example of the search for exploits for this service is shown in
    the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们在SMTP服务的利用部门实际上并没有什么最新的内容。这只是我们在测试中可能遇到的邮件类型之一，所以让我们再探索另一种类型，看看我们是否能有更多的运气。我们将查看运行在端口110上的**邮局协议**（**POP**）的服务的利用搜索的示例如下截图所示：
- en: '![Mail](img/477-1_11_18.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![邮件](img/477-1_11_18.jpg)'
- en: 'We are not having much luck here, and this is the reality of searching for
    exploits. All systems and services will have vulnerabilities in them, but not
    all vulnerabilities will have exploits. We have one more mail type that we can
    look for and that is **Internet Message Access Protocol** (**IMAP**), which runs
    on port 143\. An example of a search for exploits is shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里并没有太多运气，这就是搜索利用的现实。所有系统和服务都会有漏洞，但并非所有漏洞都会有利用。我们还有一种邮件类型可以寻找，那就是运行在端口143上的**互联网消息访问协议**（**IMAP**）。以下截图显示了对利用的搜索示例：
- en: '![Mail](img/477-1_11_19.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![邮件](img/477-1_11_19.jpg)'
- en: 'Well, we are not getting anywhere with an exploit for the mail service, so
    what do we do now? Give up? Not yet! We can interact with the mail server in SMTP
    and potentially send an e-mail. This is possible provided that social engineering
    is part of our scope of work. You can connect to the port 25 and send an e-mail.
    Years ago, you could send an e-mail as any user of your choice. It was fun to
    send an e-mail as the Queen of England or the President of the United States.
    This was because the connection of port 25 could be made manually, and you could
    enter the commands that a mail server uses when it sends mails. In the year 2000,
    this mail spoofing attack was used to attack the company Emulex by spreading false
    information about the company. This had a direct impact on the stock price and
    caused a *paper* loss of more than 2 billion dollars to the company before it
    was discovered to be a spoof and illegitimate e-mail. Since there are few relay
    sites available after the Emulex attack, you still need to test for them. Furthermore,
    I can send an e-mail as a legitimate user at the site by connecting to port 25\.
    This is commonly referred to as an SMTP relay. The steps are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们在邮件服务的利用上没有取得任何进展，那么现在该怎么办呢？放弃吗？还没有！我们可以在SMTP中与邮件服务器交互，可能发送一封电子邮件。只要社会工程学是我们工作范围的一部分，这是可能的。你可以连接到端口25并发送电子邮件。多年前，你可以以任何你选择的用户身份发送电子邮件。以英国女王或美国总统的名义发送电子邮件是很有趣的。这是因为可以手动连接端口25，并输入邮件服务器发送邮件时使用的命令。在2000年，这种邮件欺骗攻击被用来攻击Emulex公司，散布关于该公司的虚假信息。这直接影响了股价，并导致公司损失超过20亿美元，直到发现这是一封欺骗和非法的电子邮件。由于Emulex攻击后可用的中继站很少，你仍然需要对其进行测试。此外，我可以通过连接到端口25以合法用户的身份发送电子邮件。这通常被称为SMTP中继。步骤如下：
- en: telnet <site> 25
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: telnet <site> 25
- en: 'mail from: kevin@company.com'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'mail from: kevin@company.com'
- en: 'rcpt to: victim@spoofed.com'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'rcpt to: victim@spoofed.com'
- en: data
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据
- en: 'Subject: Message from the IT department'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主题：IT部门的消息
- en: Hello, this is the IT department, please send an email with your username and
    password to access XYZ project files. Thank You.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你好，这是IT部门，请发送一封电子邮件，附上您的用户名和密码，以访问XYZ项目文件。谢谢。
- en: (this is a period on a line by itself to indicate end of the data)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (这是一个单独一行的句号，表示数据结束)
- en: 'This is the process for manually connecting and sending an e-mail. Again, most
    organizations will prevent this, but it is worth an attempt. Furthermore, in an
    internal test, you might have more success. An example of an attempt that fails
    is shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是手动连接和发送电子邮件的过程。再次强调，大多数组织会阻止这样做，但值得一试。此外，在内部测试中，你可能会更成功。以下是一个失败的尝试示例：
- en: '![Mail](img/477-1_11_20.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Mail](img/477-1_11_20.jpg)'
- en: As the previous screenshot shows, the first `rcpt to` is to an incorrect e-mail
    address, and it is immediately rejected with the message stating that the relay
    is not permitted. This is because of the lessons that were learned some time ago
    with the Emulex attack as well as others. In today's environment, this more than
    likely will not work, but there is always a chance.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，第一个`rcpt to`是发送到一个错误的电子邮件地址，并立即被拒绝，显示中继不被允许的消息。这是因为一段时间前通过Emulex攻击以及其他攻击所学到的教训。在今天的环境中，这很可能不会奏效，但总有机会。
- en: Database assessment
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库评估
- en: 'We are testing one of the things that we want to treat as a valuable asset:
    the databases for our clients. This is where the company usually has most of the
    data that, if compromised, could cost the company a great amount of revenue. There
    are a number of different databases that are out there. We will concentrate on
    only three of them: **Microsoft SQL** (**MSSQL**), **MySQL**, and **Oracle**.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在测试我们想要视为有价值资产的东西之一：我们客户的数据库。这是公司通常拥有大部分数据的地方，如果泄露，可能会给公司造成巨大的损失。有许多不同的数据库。我们将只集中在其中的三个：**Microsoft
    SQL** (**MSSQL**), **MySQL**, 和 **Oracle**。
- en: MSSQL
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MSSQL
- en: 'The MSSQL database has provided us with a number of vulnerabilities over the
    years, but as the versions of the database became more mature, the vulnerabilities
    decreased dramatically. We will start off by searching to see whether we can find
    any database exploits in the Exploit DB site for MSSQL. The results of the search
    are shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，MSSQL数据库为我们提供了许多漏洞，但随着数据库版本的成熟，漏洞大大减少。我们将首先搜索在Exploit DB网站上是否能找到任何MSSQL数据库利用。搜索结果如下截图所示：
- en: '![MSSQL](img/477-1_11_21.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_21.jpg)'
- en: As the previous screenshot shows, we do not have much of a selection of exploits
    that are against the MSSQL database, but we do have an interesting exploit that
    is against the Symantec Endpoint Protection Manager. However, it is not against
    MSSQL, so we will leave this as homework for those of you who want to pursue it.
    It is interesting that it attacks an endpoint protection system via SQL injection
    among other things.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们没有太多针对MSSQL数据库的利用选择，但我们有一个针对Symantec Endpoint Protection Manager的有趣利用。然而，这不是针对MSSQL的，所以我们将把这留作作业，供那些想要追求的人。有趣的是，它通过SQL注入等方式攻击终端保护系统。
- en: 'As we really did not discover much in our search of the exploit database, we
    will turn our attention to the process we use when we encounter a MSSQL target.
    As with all the testing, the sequence to follow is very similar to the methodologies
    that we have discussed throughout the book. The first approach we will use is
    the Nmap tool in our Kali Linux distribution. You will need an SQL Server as a
    target. If you do not have one, you can download the software from the Microsoft
    site. Bear in mind that the newer the version you install, the more you will have
    to change the settings so that it is vulnerable. Open a terminal window and enter
    `nmap –p 1433 --script ms-sql-info <target>`. An example of the results from this
    command is shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在搜索利用数据库时我们并没有发现太多东西，我们将把注意力转向我们在遇到MSSQL目标时使用的过程。与所有测试一样，要遵循的顺序与我们在整本书中讨论过的方法论非常相似。我们将使用的第一种方法是我们Kali
    Linux发行版中的Nmap工具。你需要一个SQL Server作为目标。如果你没有，你可以从微软网站上下载软件。请记住，你安装的版本越新，你就需要更改设置，使其更易受攻击。打开一个终端窗口，输入`nmap
    –p 1433 --script ms-sql-info <target>`。这个命令的结果示例如下截图所示：
- en: '![MSSQL](img/477-1_11_22.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_22.jpg)'
- en: As the previous screenshot shows, we have an old version of SQL Server, and
    this should make our job easier. Once we have the information on the database,
    we need to see if we can determine the password of the administration account,
    which is the SA account in MSSQL. We have a script in Nmap that will perform a
    brute-force attempt to find the password. In the terminal window, enter `nmap
    –p 1433 --script ms-sql-brute` `192.168.177.149` to determine the password.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有一个旧版本的SQL Server，这应该会让我们的工作更容易。一旦我们获得了数据库的信息，我们需要看看是否能确定管理账户的密码，这个账户是MSSQL中的SA账户。我们在Nmap中有一个脚本，可以进行暴力破解尝试来找到密码。在终端窗口中，输入`nmap
    –p 1433 --script ms-sql-brute` `192.168.177.149`来确定密码。
- en: 'An example of an attempt at this is shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试的示例如下截图所示：
- en: '![MSSQL](img/477-1_11_23.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_23.jpg)'
- en: 'Unfortunately, our attempt has failed, and in this case, we were not able to
    crack the SA password. Often, the password will be the default, which is `<blank>`.
    As we have failed at this, we will face more challenges as we attempt to extract
    more data from this database. As we are in control of the targets, we can just
    create a target that has the default or a known password so that we can continue
    our testing. One of the things we can do if we do get the credentials of the SA
    account is that we can attempt to dump the password hashes. To do this, enter
    `nmap –p 1433 --script ms-sql-empty-password,ms-sql-dump-hashes <target>` in the
    terminal window in Kali. An example of this is shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们的尝试失败了，在这种情况下，我们无法破解SA密码。通常，密码将是默认的，即`<blank>`。由于我们在这方面失败了，我们将在尝试从这个数据库中提取更多数据时面临更多挑战。由于我们控制着目标，我们可以创建一个具有默认或已知密码的目标，以便我们可以继续我们的测试。如果我们确实获得了SA账户的凭据，我们可以尝试转储密码哈希。要做到这一点，在Kali的终端窗口中输入`nmap
    –p 1433 --script ms-sql-empty-password,ms-sql-dump-hashes <target>`。这个命令的示例如下截图所示：
- en: '![MSSQL](img/477-1_11_24.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_24.jpg)'
- en: The thing that we want to explore is the stored procedures within the SQL Server.
    As we have identified that the credentials are default, we can execute commands
    on the server. In the terminal window, enter `nmap –p 1433 --script ms-sql-xp-cmdshell,ms-sql-empty-password`
    -`p 1433 192.168.177.149` to run a command on the server machine. By default,
    the command will be `ipconfig /all`, but you can change it if you want to run
    another command. It is important to note that this command shell access is the
    same as opening a command prompt window on the server machine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要探索的是SQL Server中的存储过程。由于我们已经确定了凭据是默认的，我们可以在服务器上执行命令。在终端窗口中，输入`nmap –p 1433
    --script ms-sql-xp-cmdshell,ms-sql-empty-password` -`p 1433 192.168.177.149`来在服务器上运行命令。默认情况下，命令将是`ipconfig
    /all`，但如果你想运行其他命令，可以进行更改。重要的是要注意，这个命令行访问与在服务器上打开命令提示符窗口是一样的。
- en: 'An example of a portion of the output from this command is shown in the following
    screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的部分输出示例如下截图所示：
- en: '![MSSQL](img/477-1_11_25.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_25.jpg)'
- en: 'We now have virtually complete access to this machine. Of course, it is running
    SQL Server 2000; however, what if it is running SQL Server 2005? We will now take
    a look at a Windows Server 2003 machine. The main thing to remember is that with
    SQL Server 2005, these stored procedures are disabled by default and the administrator
    will have to enable them. Also, the SA password will have to remain as the default,
    so when you encounter Server 2005, you might not be able to gain the information
    as with an SQL Server 2000 configuration. Furthermore, if the password cannot
    be determined, you will not be able to execute the commands. An example is shown
    in the following screenshot where SQL Server 2000 is not configured with the default
    password:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们几乎完全可以访问这台机器。当然，它正在运行SQL Server 2000；但是，如果它正在运行SQL Server 2005呢？我们现在将看一下一个Windows
    Server 2003机器。要记住的主要事情是，对于SQL Server 2005，这些存储过程默认是禁用的，管理员必须启用它们。此外，SA密码必须保持默认，因此当你遇到Server
    2005时，你可能无法像在SQL Server 2000配置中那样获得信息。此外，如果密码无法确定，你将无法执行命令。下面的截图示例显示了SQL Server
    2000未配置默认密码的情况：
- en: '![MSSQL](img/477-1_11_26.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_26.jpg)'
- en: 'So far, we have only used the scripting capability within Nmap. We also have
    the capability for database testing in metasploit. Start the metasploit tool by
    entering `msfconsole` in a terminal window. Once the metasploit tool comes up,
    enter `use auxiliary/scanner/mssql/mssql_ping`, then set `RHOSTS` and run the
    module. An example of the output of the module is shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了Nmap中的脚本功能。我们还可以在metasploit中进行数据库测试。在终端窗口中输入`msfconsole`启动metasploit工具。一旦metasploit工具启动，输入`use
    auxiliary/scanner/mssql/mssql_ping`，然后设置`RHOSTS`并运行模块。模块的输出示例如下截图所示：
- en: '![MSSQL](img/477-1_11_27.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_27.jpg)'
- en: 'We now have information about the database server and the version of SQL that
    is running. The next thing we need to do is to see what the configuration on the
    SQL Server is. In the metasploit window, enter `use auxiliary/scanner/mssql/mssql_login`,
    set `RHOSTS`, and run the command. An example of the output of this command is
    shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了数据库服务器的信息以及正在运行的SQL版本。接下来我们需要做的是查看SQL Server的配置。在metasploit窗口中，输入`use
    auxiliary/scanner/mssql/mssql_login`，设置`RHOSTS`，然后运行命令。这个命令的输出示例如下截图所示：
- en: '![MSSQL](img/477-1_11_28.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_28.jpg)'
- en: We now have enough information about our target, the database it is running,
    and the configuration of that database. It is time to attempt enumeration methods
    on the database using metasploit. In the metasploit window, enter `use auxiliary/admin/mssql/mssql_enum`
    to enumerate information about the database. The output from this command is quite
    extensive.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有足够的关于我们的目标、它正在运行的数据库以及数据库的配置的信息。是时候尝试使用metasploit对数据库进行枚举了。在metasploit窗口中，输入`use
    auxiliary/admin/mssql/mssql_enum`来枚举有关数据库的信息。这个命令的输出非常广泛。
- en: 'An example of the first portion of the output from this command is shown in
    the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出的第一部分示例如下截图所示：
- en: '![MSSQL](img/477-1_11_29.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_29.jpg)'
- en: 'As the previous screenshot shows, we have been able to determine a number of
    configuration parameters and we have names of the databases that have been created.
    An example of another portion of the output is shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们已经能够确定了许多配置参数，并且知道了已创建的数据库的名称。输出的另一部分示例如下截图所示：
- en: '![MSSQL](img/477-1_11_30.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_30.jpg)'
- en: We now have a list of the admin logins and the stored procedures that are allowed
    by the database configuration. The list is truncated here, but you are encouraged
    to review all of the possible stored procedures that you can find in an MSSQL
    database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了管理员登录和数据库配置允许的存储过程的列表。这里只显示了部分列表，但是建议您查看在MSSQL数据库中可以找到的所有可能的存储过程。
- en: 'As you might expect, we have the capability to execute commands using these
    stored procedures just as we did with Nmap. We will do this now. In the terminal
    window, enter `use auxiliary/admin/mssql/mssql_exec` to access the module. Once
    you are in the module, enter `set CMD ''dir''` to display a directory on the machine.
    Remember that this is a command shell with system privileges, and as such, the
    only limit is your imagination. An example of the output of this command is shown
    in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的，我们有能力使用这些存储过程执行命令，就像我们在Nmap中所做的一样。我们现在就来做这个。在终端窗口中，输入`use auxiliary/admin/mssql/mssql_exec`来访问模块。一旦进入模块，输入`set
    CMD 'dir'`来显示机器上的目录。请记住，这是一个具有系统权限的命令行，因此唯一的限制就是你的想象力。这个命令的输出示例如下截图所示：
- en: '![MSSQL](img/477-1_11_31.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![MSSQL](img/477-1_11_31.jpg)'
- en: MySQL
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL
- en: 'The next database that we will look at is the MySQL database that is free and
    open source. As we did earlier, we will start with searching the Exploit DB site
    and see what exploits we might have available when it comes to this database.
    An example of the search results is shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将看一下MySQL数据库，这是一个免费开源的数据库。和之前一样，我们将从Exploit DB网站开始搜索，看看在这个数据库方面可能有哪些利用程序。以下截图显示了搜索结果的一个示例：
- en: '![MySQL](img/477-1_11_32.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL](img/477-1_11_32.jpg)'
- en: As the previous screenshot shows, we have a number of vulnerabilities that have
    exploits for them with respect to MySQL. For now, we will continue with the methodology
    of identifying and enumerating information from a MySQL database.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有许多关于MySQL的漏洞，针对这些漏洞已经有了利用程序。现在，我们将继续使用识别和枚举MySQL数据库中的信息的方法。
- en: We need a MySQL database to work with first, so we can use our CentOS virtual
    machine. To install the database, enter `yum install mysql-server mysql`. Once
    the installation is completed, you need to check it. Enter `chkconfig mysqld on`,
    and once this completes, enter `/etc/init.d/mysqld start` to start the database.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要一个MySQL数据库来进行操作，所以我们可以使用我们的CentOS虚拟机。要安装数据库，输入`yum install mysql-server
    mysql`。安装完成后，需要进行检查。输入`chkconfig mysqld on`，一旦完成，输入`/etc/init.d/mysqld start`来启动数据库。
- en: 'This is what we need to do for our testing purposes. We will use Nmap, as we
    did in the previous sections, against the database. The first command we will
    enter is to take advantage of the fact that the database has been set up with
    the default settings, and as such, there is no password on the root account. In
    the terminal window on Kali, enter `nmap -p 3306 --script mysql-empty-password,mysql-databases
    <target>`. An example of the results of this command is shown in the following
    screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们进行测试所需要做的。我们将使用Nmap，就像我们在之前的部分中所做的一样，针对数据库进行操作。我们将输入的第一个命令是利用数据库已经设置了默认设置这一事实，因此根帐户没有密码。在Kali上的终端窗口中，输入`nmap
    -p 3306 --script mysql-empty-password,mysql-databases <target>`。这个命令的结果示例如下截图所示：
- en: '![MySQL](img/477-1_11_33.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL](img/477-1_11_33.jpg)'
- en: 'As the previous screenshot shows, this version of MySQL does not allow the
    connection. This is a change in the default install configuration. We have a couple
    of options. We can attempt enumeration without a password; this probably will
    not get us very far. Additionally, we can set a password and configure the database
    to see what we can discover; however, to save us the time, we will use the metasploitable
    virtual machine. We just need to start the MySQL server. In the metasploitable
    virtual machine terminal window, enter `sudo /etc/init.d/mysql start`. When prompted,
    enter the required password. Return to your Kali machine and enter `nmap -p 3306
    --script mysql-empty-password,mysql-databases <target>`. An example of the output
    of this command is shown in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，这个版本的MySQL不允许连接。这是默认安装配置的更改。我们有几个选项。我们可以尝试在没有密码的情况下进行枚举；这可能不会让我们走得很远。此外，我们可以设置密码并配置数据库，看看我们能发现什么；但是，为了节省时间，我们将使用metasploitable虚拟机。我们只需要启动MySQL服务器。在metasploitable虚拟机终端窗口中，输入`sudo
    /etc/init.d/mysql start`。提示时，输入所需的密码。返回到您的Kali机器，输入`nmap -p 3306 --script mysql-empty-password,mysql-databases
    <target>`。此命令的输出示例如下截图所示：
- en: '![MySQL](img/477-1_11_34.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL](img/477-1_11_34.jpg)'
- en: 'Now that we have the MySQL database with an empty password, we can continue
    to explore the different commands within Nmap. In the Kali terminal window, enter
    `nmap -sV --script mysql-empty-password,mysql-databases,mysql-users <target>`
    to enumerate the users from the database. An example of the output from this command
    is shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了空密码的MySQL数据库，我们可以继续探索Nmap中的不同命令。在Kali终端窗口中，输入`nmap -sV --script mysql-empty-password,mysql-databases,mysql-users
    <target>`来枚举数据库中的用户。此命令的输出示例如下截图所示：
- en: '![MySQL](img/477-1_11_35.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL](img/477-1_11_35.jpg)'
- en: The metasploit tool also has a number of modules for the MySQL database. We
    will not explore them here, as it is very similar to the process we covered when
    we were looking at the MSSQL database. We have covered the process, and as such,
    you are encouraged to explore on your own.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: metasploit工具还有许多针对MySQL数据库的模块。我们在这里不会探索它们，因为它与我们在查看MSSQL数据库时涵盖的过程非常相似。我们已经涵盖了这个过程，因此鼓励您自行探索。
- en: Oracle
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 甲骨文
- en: This is one of the most popular databases that we could run into. The Oracle
    database is used quite extensively from small to large corporations. As such,
    it is more than likely something that we will encounter when testing; therefore,
    we need to take a look at some of the techniques to test it. The product is a
    commercial one, but they do offer an express version that you can use for free.
    You can download it from the Oracle site, but it you are required to register
    it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可能会遇到的最流行的数据库之一。Oracle数据库在从小型到大型企业中被广泛使用。因此，在测试时很可能会遇到它；因此，我们需要查看一些测试它的技术。该产品是商业产品，但他们提供了一个您可以免费使用的express版本。您可以从Oracle网站下载它，但您需要注册。
- en: There are many references on the Internet that you can use to assist with the
    setup of Oracle to view the one that is put out by Oracle itself; refer to [http://docs.oracle.com/html/B13669_01/toc.htm](http://docs.oracle.com/html/B13669_01/toc.htm).
    Once you have the Oracle box set up, we can try a number of techniques to extract
    information and test it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有很多参考资料，可以帮助您设置Oracle，可以查看Oracle自己发布的文档；请参阅[http://docs.oracle.com/html/B13669_01/toc.htm](http://docs.oracle.com/html/B13669_01/toc.htm)。一旦您设置好了Oracle盒子，我们可以尝试多种技术来提取信息并进行测试。
- en: 'The Oracle database after Version 9 has started to protect the information
    in the database. The first thing we need to do is determine the SID of the Oracle
    database. We will attempt this using the metasploit module for it. In the metasploit
    terminal window, enter `use auxiliary/scanner/oracle/sid_enum` to enter the module.
    Once you are in the module, you need to set `RHOSTS` value and then enter `run`.
    An example of the output from this command is shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 版本9之后的Oracle数据库开始保护数据库中的信息。我们需要做的第一件事是确定Oracle数据库的SID。我们将尝试使用metasploit模块来进行此操作。在metasploit终端窗口中，输入`use
    auxiliary/scanner/oracle/sid_enum`进入模块。一旦进入模块，您需要设置`RHOSTS`的值，然后输入`run`。此命令的输出示例如下截图所示：
- en: '![Oracle](img/477-1_11_36.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![Oracle](img/477-1_11_36.jpg)'
- en: 'As the previous screenshot shows, if you encounter an Oracle database that
    is newer than v9, the SID is protected. We can run a brute force attack to determine
    the SIDs. It is also good to note that there are some defaults. When you install
    the Oracle database, you can review the information there and see what the default
    SIDs there are. To attempt to brute force the SIDs, enter `use auxiliary/admin/oracle/sid_brute`
    in the metasploit terminal window to enter the module. Set the RHOST and then
    run the module. An example of the output from the module is shown in the following
    screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，如果遇到新于v9的Oracle数据库，则SID受到保护。我们可以运行暴力破解攻击来确定SIDs。还要注意一点，有一些默认值。安装Oracle数据库时，您可以在那里查看默认的SID。要尝试暴力破解SIDs，请在metasploit终端窗口中输入`use
    auxiliary/admin/oracle/sid_brute`进入模块。设置RHOST，然后运行模块。此模块的输出示例如下截图所示：
- en: '![Oracle](img/477-1_11_37.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Oracle](img/477-1_11_37.jpg)'
- en: As the previous screenshot shows, we now have some SIDs to reference. As the
    installation package that we installed was the Express Edition, it is nice to
    see that there is a default SID of XE.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们现在有一些SID可以参考。由于我们安装的是Express Edition安装包，很高兴看到有一个默认的SID为XE。
- en: 'The next thing we can do is attempt to brute force the passwords for the database
    accounts. We do this with another module within metasploit. In the metasploit
    window, enter `use auxiliary/scanner/oracle/oracle_login` to enter the module.
    Once you are in the module, you have to set the `RHOSTS` value as well as the
    `RPORTS` value. The default port for Oracle is 1521, so this is the port that
    you will more than likely set. An example of a portion of the output from this
    command is shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以尝试暴力破解数据库账户的密码。我们可以使用metasploit中的另一个模块来实现这一点。在metasploit窗口中，输入`use auxiliary/scanner/oracle/oracle_login`进入模块。一旦进入模块，你需要设置`RHOSTS`值和`RPORTS`值。Oracle的默认端口是1521，所以你很可能会设置这个端口。这个命令的部分输出示例如下截图所示：
- en: '![Oracle](img/477-1_11_38.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Oracle](img/477-1_11_38.jpg)'
- en: As the previous screenshot shows, we have now locked out all of the accounts.
    This is always the danger when attempting to brute force, but at least we did
    it in our test lab and not our client's live database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们现在已经锁定了所有账户。这总是尝试暴力破解时的危险，但至少我们是在我们的测试实验室中进行的，而不是在客户的实时数据库中进行的。
- en: OS platform specifics
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统平台的具体情况
- en: As in this chapter we are looking at servers, we want to look at some of the
    platform characteristics that we can encounter when we are testing servers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章我们正在研究服务器，所以我们想看一下在测试服务器时可能遇到的一些平台特性。
- en: Windows legacy
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows legacy
- en: These are the older Windows servers, that is, Windows 2000 and Windows Server
    2003\. Even though the Windows 2000 server has been out for many years, it is
    not uncommon to find one when you are testing. This is especially true when you
    are testing **Supervisory Control and Data Acquisition** (**SCADA**) systems.
    It is quite common to see these systems on SCADA networks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是较旧的Windows服务器，即Windows 2000和Windows Server 2003。尽管Windows 2000服务器已经存在多年，但在测试时发现它并不罕见。特别是在测试**监控和数据采集**（**SCADA**）系统时，发现这种情况非常普遍。在SCADA网络上经常看到这些系统。
- en: 'A good way to determine some of the things we can do against this platform
    is to return to our Exploit DB and conduct a search for vulnerabilities. An example
    of the search results is shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 确定我们可以针对这个平台做些什么的一个好方法是返回到我们的Exploit DB并搜索漏洞。搜索结果的示例如下截图所示：
- en: '![Windows legacy](img/477-1_11_39.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Windows legacy](img/477-1_11_39.jpg)'
- en: As the previous screenshot shows, we have some exploits available, but as the
    OS is becoming outdated, we really do not have that many in the database. We can
    search the Internet and look for them as well. The Windows Server 2003 platform
    has had a number of vulnerabilities that we might be able to leverage. We have
    covered a number of methods to do this, so when you encounter any of these machines,
    you can use those techniques to discover potential exploits.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有一些可用的漏洞利用，但随着操作系统变得过时，我们在数据库中真的没有那么多。我们也可以在互联网上搜索。Windows Server
    2003平台存在一些我们可以利用的漏洞。我们已经介绍了一些方法，所以当你遇到这些机器时，你可以使用这些技术来发现潜在的漏洞。
- en: Windows Server 2008 and 2012
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows Server 2008和2012
- en: 'Windows Server 2008 and 2012 servers represent a different approach to security
    for Microsoft and, as such, have proven to be hard targets for the most part,
    especially the 64-bit versions. In fact, at the time of writing this book, the
    available 64-bit exploits were not that many. An example for a search of 64-bit
    exploits in the exploit DB is shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Server 2008和2012服务器代表了微软安全的不同方法，因此在很大程度上已被证明是难以攻击的目标，特别是64位版本。事实上，在撰写本书时，64位漏洞利用并不多。在Exploit
    DB中搜索64位漏洞利用的示例如下截图所示：
- en: '![Windows Server 2008 and 2012](img/477-1_11_40.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Windows Server 2008 and 2012](img/477-1_11_40.jpg)'
- en: As the previous screenshot shows, there are only six results returned when we
    search for 64-bit exploits in the Exploit DB. This is a good indication that the
    latest versions of Microsoft are providing a challenge when it comes to writing
    exploit code; therefore, the more common method of compromising these operating
    systems is via a configuration error or an application that is running on the
    machine.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，在Exploit DB中搜索64位漏洞利用时，只返回了六个结果。这很好地表明了当涉及编写漏洞利用代码时，最新版本的Microsoft提供了挑战；因此，攻击这些操作系统的更常见方法是通过配置错误或在机器上运行的应用程序。
- en: Unix
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unix
- en: There are still some Unix servers that you might encounter when testing, but
    there will not be many exploits when you search for them. This is part of the
    fact that the most targeted platform is Windows, and as such, there are not a
    lot of people who target Unix. Additionally, there are not that many commercial
    Unix providers. There is still **Solaris**, so we can conduct a search for Solaris
    exploits.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试时可能会遇到一些Unix服务器，但当你搜索它们时，你不会找到很多漏洞利用。这部分是因为最受攻击的平台是Windows，因此没有很多人攻击Unix。此外，商业Unix提供商并不多。仍然有**Solaris**，所以我们可以搜索Solaris漏洞利用。
- en: 'An example of the results of this search is shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这次搜索的结果示例如下截图所示：
- en: '![Unix](img/477-1_11_41.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![Unix](img/477-1_11_41.jpg)'
- en: Linux
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'The Linux OS has continued to increase in popularity, and with it, the number
    of discovered vulnerabilities has also increased. There are lots of Linux distributions
    today, and there is a chance that you will encounter a variety of them when testing.
    A search of the Exploit DB site is shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Linux操作系统的受欢迎程度不断增加，随之而来的是发现的漏洞数量也在增加。今天有很多Linux发行版，当你进行测试时，有可能会遇到各种发行版。Exploit
    DB网站的搜索如下截图所示：
- en: '![Linux](img/477-1_11_42.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Linux](img/477-1_11_42.jpg)'
- en: As the previous screenshot shows, there are a number of exploits available for
    2014, so the exploit writers continue to explore the Linux code for weaknesses.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，2014年有许多可用的漏洞利用，因此漏洞利用作者继续探索Linux代码的弱点。
- en: MAC
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAC
- en: 'A common misconception is that there are no exploits for the MAC OS. Well,
    to refute this, we first have to understand that MAC is based on Unix; therefore,
    it has the potential to have similar types of vulnerabilities. A search for the
    exploit DB is shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个常见的误解是MAC OS没有漏洞利用。好吧，为了驳斥这一点，我们首先必须了解MAC是基于Unix的；因此，它有可能存在类似类型的漏洞。在下面的截图中显示了对漏洞利用数据库的搜索：
- en: '![MAC](img/477-1_11_43.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![MAC](img/477-1_11_43.jpg)'
- en: As the previous screenshot shows, we do have some exploits available for the
    OS X of the MAC machine. For more information on malware on the MAC platform,
    refer to the following brief from the Blackhat Conference at [https://www.blackhat.com/asia-14/briefings.html#Tsai](https://www.blackhat.com/asia-14/briefings.html#Tsai).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们确实有一些可以用于MAC机器的OS X的漏洞利用。有关MAC平台上恶意软件的更多信息，请参考来自Blackhat会议的以下简要介绍：[https://www.blackhat.com/asia-14/briefings.html#Tsai](https://www.blackhat.com/asia-14/briefings.html#Tsai)。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the process of assessing servers. We started off
    the chapter by looking at the common protocols that servers run. We looked at
    the FTP, e-mail, and SSH. We explored ways to extract information from a server
    when it is running these services.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了评估服务器的过程。我们从查看服务器运行的常见协议开始这一章。我们研究了FTP、电子邮件和SSH。我们探讨了在服务器运行这些服务时如何提取信息的方法。
- en: Following the exploration of the common protocols, we continued with a look
    at databases and how we can assess them. We looked at MySQL, MSSQL, and Oracle.
    We discovered that the latest versions of these have more protections in place,
    and as such, it takes some effort to extract information when the database is
    configured with security in mind.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索常见协议之后，我们继续研究了数据库以及我们如何评估它们。我们研究了MySQL、MSSQL和Oracle。我们发现这些最新版本都有更多的保护措施，因此，在数据库配置了安全性方面，提取信息需要一些努力。
- en: Finally, we closed the chapter and looked at different server operating systems
    and information that can be obtained based on the platform that we have discovered.
    The newer the platform we encounter, the bigger the challenge we face with respect
    to testing.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们结束了这一章，看了不同的服务器操作系统以及根据我们发现的平台可以获得的信息。我们遇到的平台越新，我们在测试方面面临的挑战就越大。
- en: This concludes the chapter. In the next chapter, we will look at the more common
    vector we have for attacks since the vendors have improved their security, and
    that is the client-side attack vector.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了这一章。在下一章中，我们将看看由于供应商改进了他们的安全性，我们对攻击的更常见的向量，即客户端攻击向量。
