- en: Automating Web Application Scanning - Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Web应用程序扫描-第1部分
- en: 'When we talk about web application scanning, there are various attack vectors
    that come to mind, such as SQL injection, XSS, CSRF, LFI, and RFI. The tool that
    we might think of when we talk about web application testing is the Burp Suite.
    In this chapter, we are going to study how we can use Python in order to try and
    automate web application attack vector detection. We will also look at how Python
    can be used to automate Burp scanning in order to cover the vulnerabilities that
    we would otherwise have to discover manually. In this chapter, we are going to
    look at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Web应用程序扫描时，会想到各种攻击向量，如SQL注入、XSS、CSRF、LFI和RFI。当我们谈论Web应用程序测试时，我们可能会想到Burp
    Suite。在本章中，我们将研究如何使用Python来尝试自动化Web应用程序攻击向量检测。我们还将看看如何使用Python来自动化Burp扫描，以覆盖我们否则需要手动发现的漏洞。在本章中，我们将研究以下主题：
- en: Automating web application scanning with Burp Suite
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Suite自动化Web应用程序扫描
- en: Burp automation with Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python自动化Burp
- en: SQL injection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入
- en: Automatic detection of SQL injection with Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python自动检测SQL注入
- en: Automating web application scanning with Burp Suite
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite自动化Web应用程序扫描
- en: Burp Suite Professional has exposed an additional functionality for pen-testers
    in terms of its API. With the help of the Burp Suite Professional API, a tester
    can automatically invoke a scan and integrate their findings with other tools
    as well.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite Professional在其API方面为渗透测试人员提供了额外的功能。借助Burp Suite Professional API，测试人员可以自动调用扫描并将其发现与其他工具集成。
- en: Burp suite currently offers API support with its licensed version (burp-suite
    professional). This is one of the utility that all  cyber security professionals
    must have. I would recommended to get the licensed version of Burp Suite in order
    to get maximum out of this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite目前在其许可版本（burp-suite专业版）中提供API支持。这是所有网络安全专业人员必须拥有的工具之一。我建议获取Burp Suite的许可版本，以便充分利用本章内容。
- en: 'Start Burp Suite and configure the API as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Burp Suite并按以下方式配置API：
- en: '![](img/e4ce8eae-640e-4880-8f32-65e911e0ef72.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4ce8eae-640e-4880-8f32-65e911e0ef72.png)'
- en: 'Then, start the API and configure the API key as shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，启动API并按以下方式配置API密钥：
- en: '![](img/06a55de3-a63a-48a4-8061-aea501583b03.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06a55de3-a63a-48a4-8061-aea501583b03.png)'
- en: 'The key would be copied to the clipboard when we click on the button. We can
    use it as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单击按钮时，密钥将被复制到剪贴板。我们可以按以下方式使用它：
- en: '![](img/f3a7587c-9f78-437f-82bf-efe060c1f24e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3a7587c-9f78-437f-82bf-efe060c1f24e.png)'
- en: 'We can see that the API is listening at port `1337`. We use the API key to
    refer to this endpoint address. The API exposes three endpoints: to get issue
    definitions, to start a scan, and to get the status of a running scan.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到API正在端口`1337`上监听。我们使用API密钥来引用此端点地址。API公开了三个端点：获取问题定义、启动扫描和获取正在运行扫描的状态。
- en: Let's see the parameters that are expected for us to start a new scan to test
    the Damn Vulnerable Web Application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们需要的参数，以启动对Damn Vulnerable Web Application的新扫描。
- en: 'The application can be installed from the following URLs:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应用可以从以下URL安装：
- en: '[http://www.dvwa.co.uk/](http://www.dvwa.co.uk/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.dvwa.co.uk/](http://www.dvwa.co.uk/)'
- en: '[https://github.com/ethicalhack3r/DVWA](https://github.com/ethicalhack3r/DVWA)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ethicalhack3r/DVWA](https://github.com/ethicalhack3r/DVWA)'
- en: 'Once installed and set up, we can use the following `curl` command in order
    to start an active scan with Burp on the website:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并设置好后，我们可以使用以下`curl`命令来在网站上启动Burp的主动扫描：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A more generic request containing a more exhaustive test for crawling and auditing
    would look as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 包含更详尽的爬行和审计测试的更通用请求如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It should be noted that the preceding request can either be sent via the Terminal
    on Ubuntu or the web interface provided by Burp API can be used to generate the
    request. It should be noted that if the request is invoked in the manner shown
    previously, it will not return us anything, but would instead create a new scan
    with a task ID.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意，前面的请求可以通过Ubuntu上的终端发送，也可以使用Burp API提供的Web界面生成请求。应注意，如果以前面显示的方式调用请求，它将不会返回任何内容，而是会创建一个带有任务ID的新扫描。
- en: 'This can be seen at the Burp Suite console as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在Burp Suite控制台上看到，如下所示：
- en: '![](img/d4f2011e-9920-41cf-adfe-9f51337b2faf.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4f2011e-9920-41cf-adfe-9f51337b2faf.png)'
- en: 'In the previous screenshot, we can see that a new task with the ID as `9` has
    been created and it is scanning our Damn Vulnerable Web Application, which is
    hosted locally. When the screenshot was captured, the task was able to identify
    four high, ten medium, and three low issues. In the following section, we can
    see how to make the scanner constantly tell us the status of the scan. In order
    for it to do so, we need to set up a call back URL. In other words, we need to
    have a listening port where the scanner will constantly send results. We can print
    this on the console as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张屏幕截图中，我们可以看到创建了一个ID为`9`的新任务，并且正在扫描我们本地托管的Damn Vulnerable Web Application。当截图被捕获时，该任务能够识别出四个高级问题、十个中级问题和三个低级问题。在接下来的部分中，我们可以看到如何使扫描器不断告诉我们扫描的状态。为了做到这一点，我们需要设置一个回调URL。换句话说，我们需要有一个监听端口，扫描器将不断发送结果。我们可以在控制台上打印如下内容：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/2919585e-8d65-4874-a61b-8201ed5a2d4d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2919585e-8d65-4874-a61b-8201ed5a2d4d.png)'
- en: 'The status of the scan and all the findings will be sent back to the address
    indicated:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描的状态和所有发现的内容将发送回指定的地址：
- en: '![](img/3a30a396-3b57-489a-96ea-59e76ddd2b6a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a30a396-3b57-489a-96ea-59e76ddd2b6a.png)'
- en: Given that we now have an understanding of how to automate a scan with Burp
    Suite API, let's make a Python script to do this. We will create a Python script
    to invoke the scan and at the same time the same script will listen to callback
    requests and parse the responses to display all the high, medium, and low issues.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们现在了解了如何使用Burp Suite API自动化扫描，让我们编写一个Python脚本来实现这一点。我们将创建一个Python脚本来调用扫描，同时该脚本将监听回调请求并解析响应以显示所有高、中和低问题。
- en: Burp automation with Python
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行Burp自动化
- en: 'Let''s create a simple Python script and call it `burp_automate.py`. Enter
    the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的Python脚本并将其命名为`burp_automate.py`。输入以下代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When we execute the script, it will display all the issues reported by the Burp
    scan that might be of a `high`, `medium`, or `low` nature.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行脚本时，它将显示Burp扫描报告的所有问题，这些问题可能是“高”、“中”或“低”性质。
- en: 'This is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示：
- en: '![](img/29538d16-d08b-42f5-8fec-9f0fe1fab1fe.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29538d16-d08b-42f5-8fec-9f0fe1fab1fe.png)'
- en: 'The following screenshot represents the status of the scan and the total number
    of requests made. The script will keep on running until the scan is finished,
    which is depicted by the status **succeeded**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图表示扫描的状态和发出的请求总数。脚本将持续运行，直到扫描完成，状态为**成功**：
- en: '![](img/20dad012-3a34-4b6c-bd3c-378f498f1370.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20dad012-3a34-4b6c-bd3c-378f498f1370.png)'
- en: SQL injection
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入
- en: An **SQL injection attack** is an attack, using which the execution of an SQL
    query can be altered to cater to the needs of an attacker. A web application might
    be interacting with a database at the backend and it might take user inputs that
    form parameters or part of the SQL query that is to be executed to insert, delete,
    update, or retrieve data from the database tables. In this case, a developer must
    take the utmost care not to pass the user-supplied parameters directly to the
    backend database system as this may lead to SQL injection. The developer must
    make sure to use parameterized queries. Let's assume that we have a login page
    on the application that takes a username and a password from the user and passes
    this information to the backed SQL query as:  `select * from users where email
    ='"+request.POST['email']+"' and password ='"+request.POST['password']"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL注入攻击**是一种攻击，通过该攻击可以更改SQL查询的执行以满足攻击者的需求。Web应用程序可能在后端与数据库交互，并且可能接受用户输入，这些输入形成参数或SQL查询的一部分，用于插入、删除、更新或检索数据库表中的数据。在这种情况下，开发人员必须非常小心，不要直接将用户提供的参数传递给后端数据库系统，因为这可能导致SQL注入。开发人员必须确保使用参数化查询。假设我们在应用程序上有一个登录页面，该页面从用户那里获取用户名和密码，并将此信息传递给后端SQL查询，如下所示：`select
    * from users where email =''"+request.POST[''email'']+"'' and password =''"+request.POST[''password'']"`.'
- en: The logic written in the application would check if there are any rows returned
    by the query. If there are, then the user is legit and a valid session would be
    assigned to the user, otherwise an error message showing `Invalid credentials` would
    be displayed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中编写的逻辑将检查查询返回的行数。如果有，那么用户是合法的，并且将为用户分配有效的会话，否则将显示错误消息“无效凭据”。
- en: 'Let''s say a user puts their email address as `admin@abc.com` and their password
    as `admin@123`, in that case the query that will get executed at the backend will
    be the following: `select * from users where email =''admin@abc.com'' and password
    =''admin@123''`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户将其电子邮件地址设置为`admin@abc.com`，密码设置为`admin@123`，在这种情况下，将在后端执行以下查询：`select *
    from users where email ='admin@abc.com' and password ='admin@123'`。
- en: However, if the user enters the email as `hacker@abc.com'` or `'1'='1` and their
    password as `hacker'` or `'1'='1` , the query that will be executed at the backend
    will become:`select * from users where email ='hacker@abc.com' or '1'='1' and
    password ='hacker' or '1'='1'`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果用户将电子邮件输入为`hacker@abc.com'`或`'1'='1`，并且他们的密码为`hacker'`或`'1'='1`，那么将在后端执行以下查询：`select
    * from users where email ='hacker@abc.com' or '1'='1' and password ='hacker' or
    '1'='1'`。
- en: Therefore, the first record of the dataset returned will be considered as the
    user who is trying to login, resulting in the authentication being bypassed because
    of SQL injection.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，返回的数据集的第一条记录将被视为试图登录的用户，由于SQL注入而绕过了身份验证。
- en: Automatic detection of SQL injection with Python
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python自动检测SQL注入
- en: Our focus here is to understand how can we automate the detection of SQL injections
    with the help of Python. Whenever we talk about SQL injections, the tool that
    comes to our mind is SQLmap, an excellent tool that is my personal favorite for
    detecting SQL injection in web applications. There are a number of tutorials on
    the internet about how to use SQLmap to detect SQL injection. In this section,
    we will see how can we use the server version of SQLmap, which exposes an API,
    to automate the whole process of detecting SQL injection vulnerabilities. We will
    use a Python script in order to automate the detection process.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的重点是了解如何使用Python自动化检测SQL注入。每当我们谈论SQL注入时，我们想到的工具就是SQLmap，这是一个非常好的工具，也是我个人在检测Web应用程序中的SQL注入时的首选。互联网上有许多关于如何使用SQLmap检测SQL注入的教程。在本节中，我们将看到如何使用SQLmap的服务器版本，该版本公开了一个API，以自动化整个检测SQL注入漏洞的过程。我们将使用Python脚本来自动化检测过程。
- en: 'Let''s start the SQLmap server:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动SQLmap服务器：
- en: '![](img/b05c9931-ed0e-457b-bba4-a87c67eeeb8a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b05c9931-ed0e-457b-bba4-a87c67eeeb8a.png)'
- en: 'Now that the server is up and running on the localhost (port `8775`), let''s
    look at how to scan an application (DVWA), for SQL injection, using cURL and API:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务器在本地主机（端口`8775`）上运行，让我们看看如何使用cURL和API扫描应用程序（DVWA）进行SQL注入：
- en: 'Create a new task as follows:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新任务如下：
- en: '![](img/10c420c5-00d4-47a9-a4dc-70929be7d3a1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10c420c5-00d4-47a9-a4dc-70929be7d3a1.png)'
- en: 'Set `scan` options for the new task as follows:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新任务设置`scan`选项如下：
- en: '![](img/2aa2f353-fb96-4096-b479-2b5c6fd98aee.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aa2f353-fb96-4096-b479-2b5c6fd98aee.png)'
- en: 'Set `list` options for the new task as follows:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新任务设置`list`选项如下：
- en: '![](img/a3a34ab3-25e0-4335-91ac-45d222bd999f.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3a34ab3-25e0-4335-91ac-45d222bd999f.png)'
- en: 'Start the scan with the `set` options as follows:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下`set`选项开始扫描：
- en: '![](img/27bda66f-8f89-4d47-ad03-0d193be91bce.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27bda66f-8f89-4d47-ad03-0d193be91bce.png)'
- en: 'Check the `status` of the created scan to discover SQL injection as follows:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查创建的扫描的“状态”，以发现SQL注入，如下所示：
- en: '![](img/24549a86-71b3-4da7-8e2f-1caa74dbe25c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24549a86-71b3-4da7-8e2f-1caa74dbe25c.png)'
- en: '![](img/98393f6a-9bef-47ce-975d-5da6438fb606.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98393f6a-9bef-47ce-975d-5da6438fb606.png)'
- en: '![](img/0c836bba-b17f-4ae6-bb41-f625705ee784.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c836bba-b17f-4ae6-bb41-f625705ee784.png)'
- en: The preceding screenshot validates that the backend database is MySQL and the
    parameter ID is vulnerable to SQL injection.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图验证了后端数据库是MySQL，参数ID容易受到SQL注入攻击。
- en: 'Let''s automate this whole process with the help of a Python script as shown
    in the following. Name the script `sql_automate.py`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们借助Python脚本自动化整个过程，如下所示。将脚本命名为`sql_automate.py`：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s execute the script and obtain the output for SQL injection, as shown
    here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行脚本并获取SQL注入的输出，如下所示：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output obtained can be parsed and printed on the screen.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 获取的输出可以被解析并打印在屏幕上。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the approaches that we can use to automate our
    web application scanning and assessment with Python. We saw how can we use the
    Burp Suite API in order to scan an underlying application with Python and studied
    a collection of assessment results. We also discussed SQL injection and how Python
    can be used with our favorite tool, SQLmap. Finally, we looked at an invocation
    of SQLmap with Python to automate the whole process of SQL injection detection.
    In the next chapter, we will read about using Python to automate the detection
    of other web application vulnerabilities such as XSS, CSRF, Click jacking, and
    SSL strips.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了可以使用Python自动化Web应用程序扫描和评估的方法。我们看到了如何使用Burp Suite API来扫描底层应用程序，并研究了一系列评估结果。我们还讨论了SQL注入以及Python如何与我们喜爱的工具SQLmap一起使用。最后，我们看了一下如何使用Python调用SQLmap来自动化整个SQL注入检测过程。在下一章中，我们将了解使用Python自动化检测其他Web应用程序漏洞，如XSS、CSRF、点击劫持和SSL剥离。
- en: Questions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are other ways of writing Python code with Burp?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有哪些使用Python代码与Burp的方法？
- en: Which other SQL injection tools can be automated with Python?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有哪些SQL注入工具可以用Python自动化？
- en: What are the drawbacks and advantages of using an automated approach of web
    application scanning?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自动化的Web应用程序扫描方法的优缺点是什么？
- en: Further reading
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Burp and SQL plugin: [https://github.com/codewatchorg/sqlipy](https://github.com/codewatchorg/sqlipy)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp和SQL插件：[https://github.com/codewatchorg/sqlipy](https://github.com/codewatchorg/sqlipy)
- en: Extending Burp to detect SQL injection with SQL map: [https://www.codewatch.org/blog/?p=402](https://www.codewatch.org/blog/?p=402)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQLmap扩展Burp以检测SQL注入：[https://www.codewatch.org/blog/?p=402](https://www.codewatch.org/blog/?p=402)
- en: 'Burp extensions: [https://portswigger.net/burp/extender](https://portswigger.net/burp/extender)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp扩展：[https://portswigger.net/burp/extender](https://portswigger.net/burp/extender)
