- en: Exploitation of Embedded Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用嵌入式Web应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Getting started with web app security testing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始进行Web应用程序安全测试
- en: Using Burp Suite
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Suite
- en: Using OWASP ZAP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OWASP ZAP
- en: Exploiting command injection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用命令注入
- en: Exploiting XSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用XSS
- en: Exploiting CSRF
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用CSRF
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web applications and web services are used to execute remote access features
    as well as to manage devices. A great deal of power can be given to web applications
    of IoT devices that would enable remotely executable control over to an attacker.
    Certain products such as connected vehicles or smart door locks with remotely
    executable vulnerabilities can cause harm and personal safety risks to its users.
    When testing products in the before mentioned categories of IoT, locating vulnerabilities
    with the highest risk and impact to users are the first to target. In this chapter,
    we will show how to select a web application testing methodology, setup your web
    testing toolkit, as well as discuss how to discover and exploit some of the most
    commonly found embedded web application vulnerabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序和Web服务用于执行远程访问功能以及管理设备。Web应用程序和IoT设备可以赋予大量的权力，使攻击者能够远程执行控制。某些产品，如连接的车辆或具有远程可执行漏洞的智能门锁，可能会对用户造成伤害和个人安全风险。在测试IoT产品的上述类别时，首先要针对对用户造成最高风险和影响的漏洞进行定位。在本章中，我们将展示如何选择Web应用程序测试方法论，设置您的Web测试工具包，以及讨论如何发现和利用一些最常见的嵌入式Web应用程序漏洞。
- en: Getting started with web app security testing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始进行Web应用程序安全测试
- en: Much of the modern web is running on applications that are behind hundreds of
    web, application, and database servers as their backend systems. The web has progressed
    from static HTML pages to sophisticated asynchronous applications that require
    more resources to compute. Although the web has changed, some of the most common
    security issues have not. Vulnerabilities first discovered in the 1990s are still
    relevant and actively being exploited. In IoT products, some of these common vulnerabilities
    are often command injection, **Cross-site scripting** (**XSS**), directory traversal,
    authentication bypass, session hijacking, **XML External Entity** (**XXE**), **cross-site
    request forgery** (**CSRF**), and other business logic flaws. In this recipe,
    we will establish a web application testing methodology to be used for finding
    and exploiting IoT web application and web services vulnerabilities.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web的大部分运行在数百个Web、应用程序和数据库服务器后面作为其后端系统的应用程序上。Web已经从静态HTML页面发展到需要更多资源来计算的复杂的异步应用程序。尽管Web已经发生了变化，但一些最常见的安全问题仍然存在。在1990年代首次发现的漏洞仍然是相关的，并且正在积极被利用。在IoT产品中，一些常见的漏洞通常是命令注入、**跨站脚本**（**XSS**）、目录遍历、身份验证绕过、会话劫持、**XML外部实体**（**XXE**）、**跨站请求伪造**（**CSRF**）和其他业务逻辑缺陷。在这个方法中，我们将建立一个Web应用程序测试方法论，用于发现和利用IoT
    Web应用程序和Web服务的漏洞。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: To start assessing web applications, it is important to establish a methodology
    and sometimes even a checklist once you get the hang of things. Understanding
    your approach and contextual applications risks are key to the success of compromising
    security controls. After we establish methodologies relevant to our target application,
    we will start configuring our web testing environment and toolkit to start with
    web application security testing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始评估Web应用程序，建立方法论甚至一份清单是很重要的，一旦您掌握了一些技巧。了解您的方法和上下文应用风险对于成功破坏安全控制至关重要。在我们建立与目标应用程序相关的方法论之后，我们将开始配置我们的Web测试环境和工具包，以开始进行Web应用程序安全测试。
- en: Web penetration testing methodologies
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web渗透测试方法
- en: 'There are a number of pen testing methodologies other than web pen testing
    methodologies. There is no right or wrong methodology per se; however, establishing
    your approach to testing an application is crucial to your success in finding
    software flaws. The most common methodologies are **Penetration Testing Execution
    Standard** (**PTES**) and OWASP''s Web Application Penetration Testing Methodology.
    **Open Web Application Security Project** (**OWASP**) is a not-for-profit charitable
    organization providing tools and documents, and advocates software security internationally.
    If you have ever tested an application or had to remediate software vulnerabilities,
    you might be familiar with OWASP already. If you have ever performed a penetration
    test, you might have run into PTES as well. PTES is meant to provide a baseline
    to follow for penetration tests. PTES defines penetration testing as seven phases
    that consist of the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了网络渗透测试方法之外，还有许多其他的渗透测试方法。并不存在绝对正确或错误的方法论；然而，建立测试应用程序的方法对于成功发现软件缺陷至关重要。最常见的方法论是**渗透测试执行标准**（**PTES**）和OWASP的Web应用程序渗透测试方法论。**开放式Web应用安全项目**（**OWASP**）是一个非营利性慈善组织，提供工具和文件，并在国际上倡导软件安全。如果您曾经测试过一个应用程序或不得不修复软件漏洞，您可能已经熟悉OWASP。如果您曾经进行过渗透测试，您可能也遇到过PTES。PTES旨在为渗透测试提供一个基准。PTES将渗透测试定义为包括以下七个阶段的测试：
- en: Pre-engagement interactions.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预交互
- en: Intelligence gathering.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 情报收集
- en: Threat modeling.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 威胁建模
- en: Vulnerability analysis.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 漏洞分析
- en: Exploitation.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用
- en: Post-exploitation.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后期利用
- en: Reporting.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 报告
- en: 'Although PTES is relevant to all silos of information security testing, it
    is most used and applied for network-oriented penetration tests. There are small
    sections pertaining to web security but not enough to perform a successful assessment
    at this time. PTES does provide detailed hands-on examples for each phase of the
    methodology and also includes tool usage examples. On the other hand, OWASP''s
    Web Application Penetration Testing Methodology is geared purely towards web application
    penetration testing. OWASP''s Web Application Penetration Testing Methodology
    consists of the following 12 categories:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PTES与信息安全测试的所有领域相关，但它最常用于面向网络的渗透测试。虽然有关Web安全的小节，但目前还不足以进行成功的评估。PTES确实为方法论的每个阶段提供了详细的实际示例，并包括工具使用示例。另一方面，OWASP的Web应用程序渗透测试方法论纯粹针对Web应用程序渗透测试。OWASP的Web应用程序渗透测试方法论包括以下12个类别：
- en: Introduction and objectives
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍和目标
- en: Information gathering
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息收集
- en: Configuration and deployment management testing
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和部署管理测试
- en: Identity management testing
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份管理测试
- en: Authentication testing
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证测试
- en: Authorization testing
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权测试
- en: Session management testing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话管理测试
- en: Input validation testing
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入验证测试
- en: Error handling
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理
- en: Cryptography
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码学
- en: Business logic testing
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务逻辑测试
- en: Client-side testing
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端测试
- en: Similar to PTES, OWASP's testing methodology provides a number of examples for
    each phase with screenshots as well as tool references and usage. Having examples
    relevant to your testing target application is helpful when experience is low
    in some areas. One of the great things about the OWASP testing methodology is
    the context to specific testing methods to try for use cases and testing perspectives,
    such as black box or grey box. OWASP is considered the de facto organization for
    application security guidance and testing. When in doubt, have a look at the OWASP
    testing guide or their various cheat sheet series for a helping hand.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与PTES类似，OWASP的测试方法提供了每个阶段的许多示例，包括屏幕截图以及工具参考和用法。当某些领域的经验较低时，具有与测试目标应用程序相关的示例是有帮助的。OWASP测试方法的一大优点是提供了特定测试方法的上下文，以尝试用例和测试视角，例如黑盒或灰盒。OWASP被认为是应用程序安全指南和测试的事实标准组织。如果有疑问，请查看OWASP测试指南或它们的各种小抄系列以寻求帮助。
- en: Choosing your testing tools
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的测试工具
- en: 'There are a number of tools available for testing web applications. The first
    step in assembling your tool box for assessing web applications will be selecting
    a browser and customizing its configuration for testing. A common browser to test
    with is Firefox due to its many testing add-ons available. Other browsers can
    also be used and may be required for some applications, such as those that utilize
    ActiveX or Silverlight, which need an Internet Explorer browser to function. Some
    add-ons make life much easier and more efficient for testing. Common useful add-ons
    are the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用于测试Web应用程序的工具。组装用于评估Web应用程序的工具箱的第一步将是选择浏览器并自定义其配置以进行测试。由于其许多可用的测试附加组件，常用于测试的浏览器是Firefox。也可以使用其他浏览器，并且可能需要一些应用程序，例如使用ActiveX或Silverlight的应用程序，需要Internet
    Explorer浏览器才能运行。一些附加组件使测试变得更加轻松和高效。常用的有用附加组件包括以下内容：
- en: '**FoxyProxy**: A tool to manage browser proxy settings for Chrome and Firefox.
    Sometimes you may have multiple proxy tools running concurrently and may need
    to switch between the two. FoxyProxy helps with changing proxy settings without
    clicking through a number of browser setting menus. FoxyProxy can be downloaded
    at [https://addons.mozilla.org/en-us/firefox/addon/foxyproxy-standard/](https://addons.mozilla.org/en-us/firefox/addon/foxyproxy-standard/).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FoxyProxy**：用于管理Chrome和Firefox的浏览器代理设置的工具。有时您可能同时运行多个代理工具，并且可能需要在两者之间切换。FoxyProxy可以帮助更改代理设置，而无需点击多个浏览器设置菜单。FoxyProxy可以在[https://addons.mozilla.org/en-us/firefox/addon/foxyproxy-standard/](https://addons.mozilla.org/en-us/firefox/addon/foxyproxy-standard/)下载。'
- en: '**Cookie Manager+**: A cookie manager is useful for editing cookie values and
    viewing their attributes. There are many cookie manager add-ons available for
    Firefox and Chrome. A common cookie manager for Firefox is Cookie Manager+. Cookie
    Manager+ can be downloaded at https://addons.mozilla.org/en-US/firefox/addon/cookies-manager-plus/.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie Manager+**：Cookie管理器对于编辑cookie值和查看其属性非常有用。有许多适用于Firefox和Chrome的cookie管理器附加组件。Firefox的常见cookie管理器是Cookie
    Manager+。Cookie Manager+可以在https://addons.mozilla.org/en-US/firefox/addon/cookies-manager-plus/下载。'
- en: '**Wappalyzer**: For a better understanding of the target application, it helps
    to know what components are being utilized. Wappalyzer is an add-on that assists
    with uncovering the technology being used, which includes the web server, frameworks,
    and JavaScript libraries. Wappalyzer can be downloaded for Firefox and Chrome
    at https://wappalyzer.com/download.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wappalyzer**：为了更好地了解目标应用程序，了解正在使用的组件是很有帮助的。Wappalyzer是一个附加组件，可帮助揭示正在使用的技术，包括Web服务器、框架和JavaScript库。Wappalyzer可以在https://wappalyzer.com/download下载到Firefox和Chrome。'
- en: After a browser is selected, proxy settings must be configured in order to view
    the application's request and responses in a web application proxy tool. In the
    following recipes, we will walk through configuring proxy settings and web application
    proxy tools.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择浏览器后，必须配置代理设置，以便在Web应用程序代理工具中查看应用程序的请求和响应。在接下来的步骤中，我们将介绍配置代理设置和Web应用程序代理工具。
- en: Using Burp Suite
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite
- en: Burp Suite is one of the most popular web proxy tools used for assessing web
    applications. Burp is a cross-platform tool based on Java. With Burp Suite, HTTP
    requests, and responses can be man-in-the-middled in order to tamper with as well
    as monitor application behavior. Additionally, applications can be spidered, actively
    scanned for vulnerabilities, passively scanned, and fuzzed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite是用于评估Web应用程序的最流行的Web代理工具之一。Burp是基于Java的跨平台工具。使用Burp Suite，可以中间人攻击HTTP请求和响应，以便篡改并监视应用程序行为。此外，应用程序可以进行蜘蛛爬行，主动扫描漏洞，被动扫描和模糊处理。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Burp Suite is preinstalled in the virtual machine prepared for the cookbook;
    however, it can also be downloaded at [https://portswigger.net/burp/](https://portswigger.net/burp/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite已经预装在为本书准备的虚拟机中；但是，也可以在[https://portswigger.net/burp/](https://portswigger.net/burp/)上下载。
- en: 'There are two versions of Burp: free edition and professional edition. The
    professional edition is available for a modest price ($349.00 USD) given Burp''s
    feature set. There is a 2-week professional edition trial available as well. The
    free edition allows proxying of HTTP requests and responses as well as downloading
    some of the extender add-ons available in the BApp store. The professional version
    allows usage of more advanced features and professional extender add-ons.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Burp有两个版本：免费版和专业版。专业版的价格适中（349.00美元），考虑到Burp的功能集。还有一个为期2周的专业版试用版。免费版允许代理HTTP请求和响应，以及下载BApp商店中的一些扩展插件。专业版允许使用更高级的功能和专业的扩展插件。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will walk through basic usage of Burp Suite to start testing embedded web
    applications. The following examples will be using the Burp Suite professional
    edition; however, the same setup steps can also be applied to the free edition:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍Burp Suite的基本用法，以开始测试嵌入式Web应用程序。以下示例将使用Burp Suite专业版；但是，相同的设置步骤也适用于免费版：
- en: 'Set up Burp proxy listener settings to `127.0.0.1` with port `8080`, as seen
    in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Burp代理监听器设置为`127.0.0.1`，端口为`8080`，如下图所示：
- en: '![](img/5ab04475-9738-48f9-8a02-ca5f7d2f8aea.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ab04475-9738-48f9-8a02-ca5f7d2f8aea.png)'
- en: 'Set up browser proxy settings with FoxyProxy to our Burp Suite listener address
    we set in the previous step:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用FoxyProxy将浏览器代理设置为我们在上一步中设置的Burp Suite监听器地址：
- en: '![](img/1c75e385-9c69-413c-874b-2d40f9c6f692.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c75e385-9c69-413c-874b-2d40f9c6f692.png)'
- en: 'Select the configured proxy to route all traffic to our Burp proxy listener:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择配置的代理以将所有流量路由到我们的Burp代理监听器：
- en: '![](img/16663d82-4c91-462f-9392-9b3cb8c7f417.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16663d82-4c91-462f-9392-9b3cb8c7f417.png)'
- en: 'Next, we need to download and install Burp''s CA certificate by navigating
    to `http://burp/cert`, save the certificate in a folder, and import the certificate
    into the browser''s certificate manager. Importing Burp''s CA certificate allows
    for the proxying of HTTPS connections, which may come in handy in the future:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载并安装Burp的CA证书，方法是转到`http://burp/cert`，将证书保存在一个文件夹中，并将证书导入浏览器的证书管理器中。导入Burp的CA证书允许代理HTTPS连接，这在将来可能会派上用场：
- en: '![](img/d394bec0-e6a7-407c-8484-4109e37db384.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d394bec0-e6a7-407c-8484-4109e37db384.png)'
- en: 'Navigate to `about:preferences#advanced` in Firefox and select Certificates
    then Authorities:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Firefox中导航到`about:preferences#advanced`，选择证书，然后选择授权机构：
- en: '![](img/f38711f7-1d8b-42db-95b0-d2cdc78ab708.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f38711f7-1d8b-42db-95b0-d2cdc78ab708.png)'
- en: 'Click on the Import... button and select the Burp Suite certificate that was
    saved locally:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“导入…”按钮，然后选择本地保存的Burp Suite证书：
- en: '![](img/0468ca2b-36b5-455f-996e-3c5ec8af99a0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0468ca2b-36b5-455f-996e-3c5ec8af99a0.png)'
- en: Now we can view HTTP /HTTPS request and responses.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以查看HTTP/HTTPS请求和响应。
- en: 'Once we have basic proxy settings configured for our browser and Burp Suite,
    navigate to a target web application. Add our target application to scope by right-clicking
    its address and select Add to scope, as seen in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们为浏览器和Burp Suite配置了基本代理设置，就导航到目标Web应用程序。右键单击其地址并选择添加到范围，将我们的目标应用程序添加到范围，如下图所示：
- en: '![](img/053deda8-7603-4721-a3c8-4070db6fc438.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/053deda8-7603-4721-a3c8-4070db6fc438.png)'
- en: 'Once the scope is selected, requests can be scanned via Burp''s scanning engine
    by right-clicking a request and selecting Do an active scan:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择范围后，可以通过右键单击请求并选择执行主动扫描来使用Burp的扫描引擎扫描请求：
- en: '![](img/32fb5ab3-dcb5-4fa2-aaea-03be79890bf6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32fb5ab3-dcb5-4fa2-aaea-03be79890bf6.png)'
- en: 'View the scan results by navigating to Scan queue:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到扫描队列查看扫描结果：
- en: '![](img/c01b5144-1b24-4680-b86e-d91a1303f322.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c01b5144-1b24-4680-b86e-d91a1303f322.png)'
- en: 'Sometimes we may want to replay requests using a Repeater for observing application
    responses or for tweaking payloads. This can be done by right-clicking the target
    request and sending it to the Repeater. The following screenshot shows the `alias`
    parameter being tweaked with a payload:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，我们可能希望使用重复器重放请求，以观察应用程序响应或调整有效载荷。这可以通过右键单击目标请求并将其发送到重复器来完成。以下截图显示了使用有效载荷调整`alias`参数：
- en: '![](img/5faec337-291f-4c7c-b1b9-ced6e1550d6c.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5faec337-291f-4c7c-b1b9-ced6e1550d6c.png)'
- en: 'While on the subject of tweaking payloads, we may need to encode or decode
    certain characters to ensure our payload executes using Burp Suite''s decoder
    facility. The following screenshot shows a decoded value (top) being URL encoded
    (bottom):'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调整有效载荷的过程中，我们可能需要对某些字符进行编码或解码，以确保我们的有效载荷能够使用Burp Suite的解码器执行。以下截图显示了一个解码值（顶部）被URL编码（底部）：
- en: '![](img/02b7e4ff-8973-45ff-b9ad-319f891921b6.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02b7e4ff-8973-45ff-b9ad-319f891921b6.png)'
- en: 'A more manual approach for fuzzing parameters with specific targeted payloads
    can be accomplished using Burp Suite''s Intruder. First, a target parameter needs
    to be specified. In this case, we use the `alias` parameter as the target:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Burp Suite的入侵者可以以更手动的方式对具有特定目标有效载荷的参数进行模糊处理。首先，需要指定一个目标参数。在这种情况下，我们使用`alias`参数作为目标：
- en: '![](img/c9d6df39-b119-4c59-b10d-316a208dee36.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9d6df39-b119-4c59-b10d-316a208dee36.png)'
- en: 'Next, select the attack payloads to be used (Fuzzing - XSS in this case) and
    click Start attack:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择要使用的攻击有效载荷（在本例中为Fuzzing - XSS），然后单击开始攻击：
- en: '![](img/be2b63cd-033d-4fee-90d1-14cfaffacd59.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be2b63cd-033d-4fee-90d1-14cfaffacd59.png)'
- en: 'A separate window will pop up, where attack results will be viewable:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将会弹出一个单独的窗口，攻击结果将可见：
- en: '![](img/dbd3005f-0a49-4206-b819-f8c10c75bd27.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbd3005f-0a49-4206-b819-f8c10c75bd27.png)'
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: During our setup steps, we configured Burp proxy settings and browser settings,
    and learned the basics of Burp Suite that will be used for testing. We configured
    browser proxy settings using FoxyProxy, installed Burp's CA certificate, scanned
    a request, and showed how to use additional Burp tools that may be helpful in
    more target attacks, such as the Repeater, decoder, and Intruder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置步骤中，我们配置了Burp代理设置和浏览器设置，并学习了将用于测试的Burp Suite的基础知识。我们使用FoxyProxy配置了浏览器代理设置，安装了Burp的CA证书，扫描了一个请求，并展示了如何使用其他可能有助于更多目标攻击的Burp工具，比如Repeater、decoder和Intruder。
- en: With this knowledge, we can now start accessing embedded web applications for
    vulnerabilities on target devices using Burp Suite.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，我们现在可以开始使用Burp Suite访问嵌入式Web应用程序，以查找目标设备上的漏洞。
- en: There's more...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Burp Suite has a strong community behind it. The community has created a number
    of add-on extensions when new attack techniques are discovered. The same goes
    for Burp Suite itself. PortSwigger does a great job of staying ahead of the curve
    by constantly updating Burp. Have a look at the various release notes and you
    might learn a thing or two ([http://releases.portswigger.net/](http://releases.portswigger.net/)).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite有一个强大的社区支持。当发现新的攻击技术时，社区会创建许多附加扩展。Burp Suite本身也是如此。PortSwigger通过不断更新Burp来保持领先地位。看看各种发布说明，你可能会学到一两件事情（[http://releases.portswigger.net/](http://releases.portswigger.net/)）。
- en: Useful intruder payloads
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的入侵者有效载荷
- en: When using Intruder, it's a good idea to have a set of targeted payloads for
    fuzzing parameters. The SecList project has a number of wordlists as well as fuzzing
    payloads to be used in more targeted attacks. The project is regularly being updated
    with community contributions that assist with testing. The SecList repository
    can be found via the URL [https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Intruder时，最好准备一组用于模糊参数的有针对性的有效载荷。SecList项目有许多单词列表以及用于更有针对性攻击的模糊有效载荷。该项目定期更新，社区贡献有助于测试。SecList存储库可以通过URL
    [https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/)找到。
- en: See also
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: If you ever find yourself needing to create macros or an add-on for a customized
    purpose, have a look at Burp's extensibility API found at [https://portswigger.net/burp/extender/](https://portswigger.net/burp/extender/).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你发现自己需要为定制目的创建宏或附加组件，请查看Burp的可扩展API，网址为[https://portswigger.net/burp/extender/](https://portswigger.net/burp/extender/)。
- en: Using OWASP ZAP
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OWASP ZAP
- en: The OWASP **Zed Attack Proxy** (**ZAP**) is a free cross-platform web proxy
    testing tool used for finding vulnerabilities in web applications. ZAP is a close
    runner-up to Burp Suite in the web application proxy testing tool space and is
    a definite go-to when your budget may be low for licensing commercial products.
    ZAP is designed to be used by people with a wide range of security experience
    and as such is ideal for developers as well as functional testers who are new
    to penetration testing. With ZAP's API, scans can be automated and used within
    a developer's workflow to scan builds prior to production. ZAP has a number of
    different useful add-ons with a strong scanning engine that includes other proven
    testing tools within its engine, such as Dirbuster and SQLmap. In addition, ZAP
    has a graphical scripting language known as ZEST that records and replays requests
    similar to a type of macro. This recipe will introduce the basic ZAP features
    for web app security testing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP **Zed Attack Proxy** (**ZAP**)是一个免费的跨平台Web代理测试工具，用于发现Web应用程序中的漏洞。ZAP在Web应用程序代理测试工具领域是Burp
    Suite的紧密竞争对手，当你的预算可能不足以购买商业产品的许可证时，ZAP绝对是一个不错的选择。ZAP旨在供具有广泛安全经验的人使用，因此也非常适合开发人员以及对渗透测试新手的功能测试人员。借助ZAP的API，扫描可以自动化，并在开发人员的工作流程中用于在生产之前扫描构建。ZAP有许多不同的有用附加组件，具有强大的扫描引擎，其中包括引擎内的其他经过验证的测试工具，如Dirbuster和SQLmap。此外，ZAP还有一种名为ZEST的图形化脚本语言，可以记录和重放类似于宏的请求。本教程将介绍用于Web应用程序安全测试的基本ZAP功能。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Burp Suite is preinstalled in the virtual machine prepared for the cookbook;
    however, it can also be downloaded via [https://github.com/zaproxy/zaproxy/wiki/Downloads](https://github.com/zaproxy/zaproxy/wiki/Downloads).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite预装在为菜谱准备的虚拟机中；但是，也可以通过[https://github.com/zaproxy/zaproxy/wiki/Downloads](https://github.com/zaproxy/zaproxy/wiki/Downloads)下载。
- en: The ZAP download page contains additional Docker images as well as ZAP weekly
    versions that utilize new features not introduced in the official releases. The
    weekly releases are highly stable and I would recommend giving them a go if you
    would like more extensibility.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP下载页面包含额外的Docker镜像，以及利用新功能的ZAP每周版本，这些功能在官方版本中尚未引入。每周版本非常稳定，如果您希望获得更多的可扩展性，我建议您尝试一下。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will introduce the setup and basic usage of ZAP:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将介绍ZAP的设置和基本用法：
- en: 'Set up the ZAP proxy listener settings by clicking Tools and then Options.
    Input the IP and port information for ZAP to listen on, as seen in the following
    screenshot:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“工具”，然后单击“选项”来设置ZAP代理监听器设置。输入ZAP要监听的IP和端口信息，如下截图所示：
- en: '![](img/fb263bcd-8773-464d-92c6-1b7bc38bd6d1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb263bcd-8773-464d-92c6-1b7bc38bd6d1.png)'
- en: 'Generate and install ZAP''s CA certificate via the Dynamic SSL Certificate
    option and install the certificate in the browser, similar to how you did in the
    Burp Suite recipe:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过动态SSL证书选项生成和安装ZAP的CA证书，并在浏览器中安装证书，类似于你在Burp Suite教程中所做的：
- en: '![](img/71c9b102-a12e-4392-9a2d-9390a01c450a.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71c9b102-a12e-4392-9a2d-9390a01c450a.png)'
- en: 'Save the certificate in a known directory:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将证书保存在已知目录中：
- en: '![](img/6e52f310-3823-4d8b-9587-4b93a9612454.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e52f310-3823-4d8b-9587-4b93a9612454.png)'
- en: 'There are required add-on installations that will assist in active and passive
    web pen testing. These add-ons are Advanced SQLInjection Scanner, Active scanner
    rules (alpha), DOM XSS Active scanner rule, Passive scanner rules (alpha), and
    Technology detection using Wappalyzer. ZAP has levels of maturity for its add-ons
    but it does not hurt using an alpha-level add-on. The following screenshot illustrates
    the necessary add-ons:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有必要安装附加组件来协助主动和被动的网络渗透测试。这些附加组件包括高级SQL注入扫描器、主动扫描规则（alpha）、DOM XSS主动扫描规则、被动扫描规则（alpha）和使用Wappalyzer进行技术检测。ZAP的附加组件有不同的成熟度级别，但使用alpha级别的附加组件并不会有害。下面的截图说明了必要的附加组件：
- en: '![](img/bfd962bc-aedd-46c3-8dbf-047275b0e390.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfd962bc-aedd-46c3-8dbf-047275b0e390.png)'
- en: 'Once we have the required add-ons installed, scan policies can now be configured
    via the Analyse and Scan Policy Manager options. These policies can also be exported
    and imported. The following screenshot shows an example scan policy to be used
    for XSS:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了所需的附加组件后，现在可以通过分析和扫描策略管理器选项来配置扫描策略。这些策略也可以导出和导入。下面的截图显示了一个用于XSS的示例扫描策略：
- en: '![](img/8d08cc6f-ac66-405b-9e02-ef621a203ac1.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d08cc6f-ac66-405b-9e02-ef621a203ac1.png)'
- en: ZAP's scan policies contain a threshold and strength. The threshold pertains
    to the alert confidence and how likely ZAP is to report potential vulnerabilities.
    The strength pertains to the amount of attacks ZAP will perform. This information
    can be found via ZAP's user guide located in the tool itself or online at [https://github.com/zaproxy/zap-core-help/wiki](https://github.com/zaproxy/zap-core-help/wiki).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP的扫描策略包含阈值和强度。阈值涉及警报的置信度以及ZAP报告潜在漏洞的可能性。强度涉及ZAP执行攻击的数量。这些信息可以在ZAP的用户指南中找到，该指南位于工具本身或在线[https://github.com/zaproxy/zap-core-help/wiki](https://github.com/zaproxy/zap-core-help/wiki)。
- en: 'With our scanning configurations configured, we need to add the target site
    to be in context by right-clicking the target, as seen in the following screenshot.
    This is similar to Burp''s Add to Scope:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置了我们的扫描配置后，我们需要通过右键单击目标将目标站点添加到上下文中，如下面的截图所示。这类似于Burp的“添加到范围”功能：
- en: '![](img/88e0ab44-58cc-483d-b55c-8192fc0e7488.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88e0ab44-58cc-483d-b55c-8192fc0e7488.png)'
- en: 'The target is now included in context for scanning:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在目标已经包含在扫描上下文中：
- en: '![](img/63ac437e-c29e-4d52-bb9a-fbf1f55d6fd5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63ac437e-c29e-4d52-bb9a-fbf1f55d6fd5.png)'
- en: 'Scanning a request is done by right-clicking the target request, selecting
    your scan policy, and starting the scan, as seen in the following screenshots:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描请求是通过右键单击目标请求，选择扫描策略，并开始扫描来完成的，如下面的截图所示：
- en: '![](img/335ee3fc-f922-4ea2-bd9b-7fe33af67715.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/335ee3fc-f922-4ea2-bd9b-7fe33af67715.png)'
- en: The XSS scan policy is chosen and now the scan will begin with the output of
    the scan shown in the "Active Scan" tab in ZAP.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了XSS扫描策略，现在扫描将开始，并且扫描的输出将显示在ZAP的“主动扫描”选项卡中。
- en: '![](img/5bf5c0a4-3580-4a5a-a47c-7184e178c0d8.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bf5c0a4-3580-4a5a-a47c-7184e178c0d8.png)'
- en: 'For a more targeted approach to active scanning, utilize ZAP''s fuzzing feature,
    which is similar to Burp''s Intruder. To fuzz, right click the request and select
    fuzz locations and payloads, as seen in the following screenshot:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了更有针对性地进行主动扫描，可以利用ZAP的模糊测试功能，这类似于Burp的Intruder。要进行模糊测试，请右键单击请求并选择模糊测试位置和有效载荷，如下面的截图所示：
- en: '![](img/5f7d9c14-7016-4d24-856e-fd6e7ff3f692.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f7d9c14-7016-4d24-856e-fd6e7ff3f692.png)'
- en: 'Decoding and encoding characters are crucial to code executing. ZAP''s Encoder/Decoder,
    accessible via the Tool menu, works similar to Burps Decoder, as seen in the following
    screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解码和编码字符对于代码执行至关重要。ZAP的编码器/解码器，可通过工具菜单访问，与Burp的解码器类似，如下面的截图所示：
- en: '![](img/f46f40f5-8bc5-42bc-abf8-a8a7fdf353b1.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f46f40f5-8bc5-42bc-abf8-a8a7fdf353b1.png)'
- en: There's more...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: ZAP is very customizable and extendable; our last recipe only covered the basic
    usage of ZAP to assist with web app security testing. To learn more about using
    and customizing ZAP, visit ZAP's blog as well as their wiki via the links [https://github.com/zaproxy/zaproxy/wiki](https://github.com/zaproxy/zaproxy/wiki)
    and [https://zaproxy.blogspot.com/](https://zaproxy.blogspot.com/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP非常可定制和可扩展；我们上一个示例只涵盖了ZAP的基本用法，以帮助进行Web应用程序安全测试。要了解更多关于使用和定制ZAP的信息，请访问ZAP的博客以及他们的维基，网址为[https://github.com/zaproxy/zaproxy/wiki](https://github.com/zaproxy/zaproxy/wiki)和[https://zaproxy.blogspot.com/](https://zaproxy.blogspot.com/)。
- en: Additionally, if you would like to hone your web application testing skills
    with ZAP or Burp Suite, have a look at OWASP's Vulnerable Web Application Directory
    Project found at [https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您想要通过ZAP或Burp Suite来提高您的网络应用程序测试技能，请查看OWASP的易受攻击的Web应用程序目录项目，网址为[https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project)。
- en: Exploiting command injection
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用命令注入
- en: In embedded systems, OS command injection is a vulnerability most commonly via
    a web interface or debug page left from development firmware builds in order to
    execute arbitrary operating system commands. The user supplies operating system
    commands within a web service parameter through a web interface in order to execute
    OS commands. A parameter that is dynamic and not properly sanitized is subject
    to this vulnerability being exploited. With the ability to execute OS commands,
    an attacker can upload malicious firmware, change configuration settings, gain
    persistent access to the device, obtain passwords, attacker other devices in a
    network, or even lock out legitimate users from the device. In this recipe, we
    will demonstrate how to exploit command injection to gain shell access to a device.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式系统中，OS命令注入是一种常见的漏洞，通常通过Web界面或调试页面留下来自开发固件构建的方式来执行任意操作系统命令。用户通过Web界面在Web服务参数中提供操作系统命令，以执行OS命令。动态且未经适当清理的参数容易受到此漏洞的利用。通过执行OS命令的能力，攻击者可以上传恶意固件，更改配置设置，获得对设备的持久访问权限，获取密码，攻击网络中的其他设备，甚至锁定合法用户对设备的访问。在这个步骤中，我们将演示如何利用命令注入来获取对设备的shell访问权限。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use tcpdump, Burp Suite, and a vulnerable IHOMECAM
    ICAM-608 IP camera. Tcpdump is included in most *Nix operating systems but Wireshark
    can also be used to observe packets.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将使用tcpdump、Burp Suite和一个易受攻击的IHOMECAM ICAM-608 IP摄像头。Tcpdump包含在大多数*Nix操作系统中，但也可以使用Wireshark来观察数据包。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The process of finding command injectable pages within an embedded web application
    is rather trivial. The first places within an application we want to examine are
    diagnostic pages that make use of system commands, such as `ping` or `traceroute`,
    but also configuration setting pages for daemons, such as SMB, PPTP, or FTP. If
    we have acquired firmware or gained access to a target device''s console, it''s
    always best to statically analyze vulnerable scripts and functions that the device
    executes and validate potential findings discovered via dynamic analysis:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式Web应用程序中查找可注入命令的页面的过程相当简单。我们要检查的应用程序中的第一个地方是使用系统命令的诊断页面，比如`ping`或`traceroute`，还有守护程序的配置设置页面，比如SMB、PPTP或FTP。如果我们已经获得了固件或者访问了目标设备的控制台，最好是静态分析设备执行的易受攻击脚本和函数，并验证通过动态分析发现的潜在发现：
- en: 'Let''s have a look at our target IP camera''s configuration menu settings to
    pinpoint a potentially vulnerable page:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看一下我们目标IP摄像头的配置菜单设置，以确定可能存在漏洞的页面：
- en: '![](img/9675cb0f-af21-474c-8094-1b0c3c4f8d1d.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9675cb0f-af21-474c-8094-1b0c3c4f8d1d.png)'
- en: 'There are not many pages to choose from, but we do see mail service and FTP
    service setting pages. These pages may feed system commands into the operating
    system for execution. Let''s first examine the FTP service setting page and attempt
    to manipulate parameter values with system commands via Burp Suite:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选择的页面并不多，但我们看到了邮件服务和FTP服务设置页面。这些页面可能会将系统命令输入操作系统以执行。让我们首先检查FTP服务设置页面，并尝试通过Burp
    Suite操纵参数值以执行系统命令：
- en: '![](img/e6c1d0f6-2898-4872-9721-cd5ed3b1054c.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6c1d0f6-2898-4872-9721-cd5ed3b1054c.png)'
- en: 'There appears to be a stripping of characters from the application when trying
    to send the payload `$(ping%20192.168.1.184)` in the `pwd` parameter, as seen
    in the following screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尝试在`pwd`参数中发送有效负载`$(ping%20192.168.1.184)`时，应用程序似乎会剥离字符，如下面的屏幕截图所示：
- en: '![](img/81a56e3b-bea5-4e4d-b597-4c9d9b98a8b8.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81a56e3b-bea5-4e4d-b597-4c9d9b98a8b8.png)'
- en: 'Using a basic command such as `ping` for a payload to our host computer gives
    us an indication that our command has successfully executed. In order to observe
    whether the ping has been executed, set up `tcpdump` to listen for ICMP packets
    coming from our target IP camera using the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基本命令，比如`ping`，将有效负载发送到我们的主机计算机，这让我们知道我们的命令已成功执行。为了观察ping是否已执行，设置`tcpdump`来监听来自我们目标IP摄像头的ICMP数据包，使用以下命令：
- en: '[PRE0]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using Burp Suite''s Repeater, we can change the values and bypass client-side
    checks the IP camera is performing. Using the following request, we can see that
    the application accepts our changes and needs to refresh the `ftp.htm` page based
    on the HTTP response:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Burp Suite的Repeater，我们可以更改数值并绕过IP摄像头执行的客户端检查。使用以下请求，我们可以看到应用程序接受了我们的更改，并需要根据HTTP响应刷新`ftp.htm`页面：
- en: '[PRE1]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Upon refreshing to the `ftp.htm` page, we observe ICMP packets being sent to
    our host computer:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新到`ftp.htm`页面后，我们观察到ICMP数据包被发送到我们的主机计算机：
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we know the `pwd` parameter is vulnerable to command injection, our
    next goal is to obtain shell access to the target device. We know the IP camera
    contains legacy daemons based on the usage of FTP, and chances are Telnet is also
    used. Next, we will invoke Telnet to start on port `25` and drop us into a shell
    without a username or password using the following payload:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道`pwd`参数容易受到命令注入的攻击，我们的下一个目标是获取对目标设备的shell访问权限。我们知道IP摄像头包含基于FTP的传统守护程序，很可能也使用Telnet。接下来，我们将调用Telnet在端口`25`上启动，并使用以下有效负载在没有用户名或密码的情况下进入shell：
- en: '[PRE3]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We also know the application requires a refresh to the `ftp.htm` page for the
    settings to save but, viewing the source of the page, it calls to a CGI called
    `ftptest.cgi` that executes our payload. The following is the snippet of code
    that executes our payload from the `ftp.htm` page:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还知道应用程序需要刷新`ftp.htm`页面以保存设置，但是在查看页面源代码时，它调用了一个名为`ftptest.cgi`的CGI，执行我们的有效负载。以下是从`ftp.htm`页面执行我们的有效负载的代码片段：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we can call the `ftptest.cgi` directly to save our settings using the
    following `GET` request:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以直接调用`ftptest.cgi`来保存我们的设置，使用以下`GET`请求：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Telnet is now running on port `25` and gives us a root shell:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Telnet现在在端口`25`上运行，并给我们一个root shell：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are a variety of techniques that can be used for post-exploitation on
    the device''s LAN after the shell has been granted. Post-exploitation techniques
    will not be covered in this recipe; however, we can easily script our command
    injection payloads to ensure access using the following bash script:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备的LAN上获得shell权限后，可以使用各种技术进行后期利用。本教程不涵盖后期利用技术；然而，我们可以轻松地编写命令注入有效负载的脚本，以确保使用以下bash脚本访问：
- en: '[PRE7]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this recipe, we walked through discovering and exploiting command injection
    on an IHOMECAM ICAM-608 IP camera. We were able to gain shell access and create
    a script to automate the exploitation of command injection.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们介绍了在IHOMECAM ICAM-608 IP摄像头上发现和利用命令注入。我们能够获得shell访问权限，并创建一个脚本来自动化利用命令注入。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: To learn more on finding and preventing command injection, refer to OWASP's
    command injection wiki page ([https://www.owasp.org/index.php/Command_Injection](https://www.owasp.org/index.php/Command_Injection))
    as well as OWASP's Embedded Application Security project ([https://www.owasp.org/index.php/OWASP_Embedded_Application_Security](https://www.owasp.org/index.php/OWASP_Embedded_Application_Security)).
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于查找和预防命令注入的信息，请参考OWASP的命令注入维基页面（[https://www.owasp.org/index.php/Command_Injection](https://www.owasp.org/index.php/Command_Injection)）以及OWASP的嵌入式应用安全项目（[https://www.owasp.org/index.php/OWASP_Embedded_Application_Security](https://www.owasp.org/index.php/OWASP_Embedded_Application_Security)）。
- en: Exploiting XSS
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用XSS
- en: 'XSS is a type of attack that executes and injects arbitrary JavaScript from
    an untrusted source in the context of a trusted website. XSS attacks occur when
    an attacker discovers a vulnerable parameter within a web application that executes
    dynamic content without validating or output encoding characters before rendering
    content back to the user. XSS attacks utilize the browser''s to transport attack
    payloads since the browser believes the code is trusted. There are three types
    of XSS vulnerabilities: reflective (most common), stored, and DOM-based. Reflective
    XSS vulnerabilities arise when parameter data is copied and echoed back into the
    application''s response without sanitizing its content. Stored XSS vulnerabilities
    arise when an application allows parameter input data to be stored in the application''s
    database for later use. **Document Object Model** (**DOM**) XSS vulnerabilities
    occur when data from a parameter is fed into a DOM element via a JavaScript function.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: XSS是一种攻击类型，它从不受信任的来源执行和注入任意JavaScript到受信任网站的上下文中。当攻击者发现Web应用程序中存在一个漏洞参数，可以在不验证或输出编码字符的情况下执行动态内容并将内容呈现给用户时，XSS攻击就会发生。XSS攻击利用浏览器的能力传输攻击有效负载，因为浏览器认为代码是受信任的。XSS漏洞有三种类型：反射型（最常见），存储型和基于DOM的。反射型XSS漏洞是在不对内容进行消毒的情况下，将参数数据复制并回显到应用程序的响应中产生的。存储型XSS漏洞是当应用程序允许将参数输入数据存储在应用程序的数据库中以供以后使用时产生的。**文档对象模型**（**DOM**）XSS漏洞是当来自参数的数据通过JavaScript函数被馈送到DOM元素中时产生的。
- en: 'An attacker who successfully exploits an XSS would be able to do the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 成功利用XSS的攻击者可以做到以下几点：
- en: Key log data
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键日志数据
- en: Attack the victim's **local area networks** (**LANs**)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击受害者的本地区域网络（LAN）
- en: Proxy all web traffic through the victim known as **man-in-the-browser** (**MITB**)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有Web流量代理通过受害者，称为**浏览器中间人**（**MITB**）
- en: Steal or modify the application cookie(s) for session hijacking
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取或修改应用程序的cookie以进行会话劫持
- en: Modify the appearance of the victim's application
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改受害者应用程序的外观
- en: Bypass CSRF security controls
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过CSRF安全控制
- en: 'In order to successfully attack a victim, an attacker would need to perform
    a type of social engineering technique to get the user to execute the malicious
    request. Common methods of social engineering for an XSS attack are the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功攻击受害者，攻击者需要执行某种社会工程技术，以使用户执行恶意请求。XSS攻击的常见社会工程方法包括以下几种：
- en: Creating a fake website with malicious JavaScript and linking to its page
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有恶意JavaScript的假网站，并链接到其页面
- en: Sending emails embedding the malicious web URL
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送嵌入恶意Web URL的电子邮件
- en: Masking the URL with a URL shortener
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用URL缩短器掩盖URL
- en: In each of the scenarios, the initial URL will link to the trusted victim's
    site, and will execute malicious JavaScript code asynchronously without user knowledge.
    In this recipe, we will walk through discovering and exploiting a reflective XSS
    vulnerability that will gain full control over the victim's browser.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，初始URL将链接到受信任的受害者网站，并且将在用户不知情的情况下异步执行恶意JavaScript代码。在这个教程中，我们将介绍发现和利用反射型XSS漏洞，从而完全控制受害者浏览器。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will make use of OWASP ZAP, **Browser Exploitation Framework**
    (**BeEF**), and a vulnerable RT-N12 ASUS router. BeEF can be installed via [http://beefproject.com](http://beefproject.com)
    or used within a Kali Linux virtual machine where BeEF is installed by default.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用OWASP ZAP，**浏览器利用框架**（**BeEF**）和一个易受攻击的RT-N12 ASUS路由器。BeEF可以通过[http://beefproject.com](http://beefproject.com)安装，或者在默认安装了BeEF的Kali
    Linux虚拟机中使用。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'When attempting to find a reflective XSS vulnerability, we start by observing
    parameter input behavior to see whether the data is reflected back to the user.
    Web proxys such as OWASP ZAP and Burp Suite can help automate the discovery process
    with their scanning engines:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试查找反射型XSS漏洞时，我们首先观察参数输入行为，看数据是否反射回用户。OWASP ZAP和Burp Suite等Web代理可以帮助自动化发现过程，使用它们的扫描引擎：
- en: 'Navigate through the application to find potential reflected values. Usually
    places to probe are diagnostic pages, troubleshooting, or configuration pages
    that change services or daemons running on the embedded device. The following
    screenshot shows a potential starting point for discovering a web vulnerability:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览应用程序以查找潜在的反射值。通常可以探测的地方是诊断页面、故障排除或更改嵌入式设备上运行的服务或守护进程的配置页面。以下屏幕截图显示了发现Web漏洞的潜在起点：
- en: '![](img/d8c989d0-42ca-4330-a072-d11264aaf784.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8c989d0-42ca-4330-a072-d11264aaf784.png)'
- en: 'Proxy the HTTP request in ZAP and make a change to the configuration on this
    page. You should see the POST body parameters as seen in the following image:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理ZAP中的HTTP请求，并对此页面的配置进行更改。您应该看到POST主体参数如下图所示：
- en: '![](img/7633b956-938c-4db3-94b1-b10db94b9ad5.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7633b956-938c-4db3-94b1-b10db94b9ad5.png)'
- en: 'Reviewing the `start_apply.htm` source reveals some possible dynamic variables
    that can be manipulated via concatenating JavaScript code. These variables appear
    to be the parameters sent as the `POST` body of the request but can also be sent
    via a `GET` request as well. The following are snippets of possible injectable
    parameter values for `next_page` within `start_apply.htm`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查`start_apply.htm`源代码，发现一些可能通过连接JavaScript代码进行操作的动态变量。这些变量似乎是作为请求的`POST`主体发送的参数，但也可以通过`GET`请求发送。以下是`start_apply.htm`中`next_page`的可能可注入参数值的片段：
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using fuzz parameters with XSS payloads, we can manually inject XSS payloads
    and observe the responses but we can also utilize known XSS payloads with wordlists
    such as SecLists that will help speed up the discovery process.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XSS负载的模糊参数，我们可以手动注入XSS负载并观察响应，但我们也可以利用诸如SecLists之类的已知XSS负载与单词列表，以加快发现过程。
- en: 'Based on the fuzz results in ZAP, we see a number of reflected parameters in
    the HTTP response, as seen in the following screenshot:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据ZAP中的模糊结果，我们在HTTP响应中看到了一些反射参数，如下图所示：
- en: '![](img/23539223-f5c8-4c98-9e52-1b719528c184.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23539223-f5c8-4c98-9e52-1b719528c184.png)'
- en: 'We can see that the `next_page` parameter reflects our exact fuzzing input
    value (`<script>(document.head.childNodes[3].text)</script>`) as seen in the following
    snippet of the HTTP response:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到`next_page`参数反映了我们精确的模糊输入值(`<script>(document.head.childNodes[3].text)</script>`)，如下HTTP响应片段所示：
- en: '![](img/ba67e021-85c2-4b02-bfb1-129fbfaa864d.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba67e021-85c2-4b02-bfb1-129fbfaa864d.png)'
- en: 'Let''s manually input this reflected parameter in the browser to observe its
    response:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们手动在浏览器中输入这个反射参数，观察其响应：
- en: '![](img/5c82cc2b-d804-4f6d-aa3c-7e240e775c8b.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c82cc2b-d804-4f6d-aa3c-7e240e775c8b.png)'
- en: It appears we are breaking some of the JavaScript code based on the response.
    It may have to do with the encoding or possible length of the payload. We will
    need to adjust encoding characters and review the JavaScript code to make sure
    our code starts or ends a function that may be in use.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 根据响应，我们似乎破坏了一些JavaScript代码。这可能与负载的编码或可能的长度有关。我们需要调整编码字符并审查JavaScript代码，确保我们的代码开始或结束一个可能正在使用的函数。
- en: 'Using basic alert XSS payloads for discovery, remember in the `start_apply.html`
    source, the parameter values were in the following form:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基本的警报XSS负载进行发现时，请记住在`start_apply.html`源代码中，参数值的形式如下：
- en: '[PRE9]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s use ZAPs Encoder/Decoder tool to adjust our basic XSS payloads, as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用ZAP的编码器/解码器工具来调整我们的基本XSS负载，如下所示：
- en: '![](img/f2e101c9-017b-42b6-87b1-7653dc17fec7.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2e101c9-017b-42b6-87b1-7653dc17fec7.png)'
- en: 'Plug in the URL encoded value into the vulnerable parameter via the web interface
    and now our alert code executes successfully. It''s always best to try an integer
    within the alert box to see whether our code executes first before digging into
    more complex XSS payloads:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Web界面将URL编码值插入易受攻击的参数，现在我们的警报代码成功执行。最好先尝试在警报框中插入一个整数，看看我们的代码是否先执行，然后再深入研究更复杂的XSS负载：
- en: '![](img/e4fa7004-3f96-47af-97b7-4c17d1fb1c83.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4fa7004-3f96-47af-97b7-4c17d1fb1c83.png)'
- en: 'Now let''s take it a step further and dump any cookies within the alert box
    with the following payload:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们更进一步，使用以下负载在警报框中转储任何cookie：
- en: '[PRE10]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now see the cookie value `IoTCookbook=1234567890` rendered in our browser
    using the basic payload of `alert(document.cookie)`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以看到在我们的浏览器中呈现出`IoTCookbook=1234567890`的cookie值，使用基本的`alert(document.cookie)`负载：
- en: '![](img/5917c0dd-44e6-4ceb-98bc-7d0962aa5415.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5917c0dd-44e6-4ceb-98bc-7d0962aa5415.png)'
- en: Awesome! We now know that we can do some basic XSS payloads at this point. Luckily
    for us, we have yet to hit any character limitations or any type of filtering.
    Let's see if we can do more damage and insert a BeEF hook payload into the vulnerable
    parameter. After all, what risk does an alert box pose?
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在知道我们可以在这一点上进行一些基本的XSS负载。幸运的是，我们还没有遇到任何字符限制或任何类型的过滤。让我们看看我们是否可以造成更多的损害，并将BeEF钩负载插入到易受攻击的参数中。毕竟，警报框会带来什么风险呢？
- en: Introduction to using BeEF XSS payloads
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BeEF XSS负载的介绍
- en: BeEF is a tool that exploits web browsers and client-side attack vectors within
    a victim's environment via vulnerable application parameters as well social engineering
    techniques. BeEF will hook one or more web browsers when a victim has executed
    its payload where a number of command modules are available for further exploitation.
    This next section will expand on our discovered XSS vulnerability to have it execute
    a BeEF hook and then touch on some of the basic uses.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF是一个利用Web浏览器和客户端攻击向量的工具，通过易受攻击的应用程序参数和社会工程技术在受害者环境中钩取一个或多个Web浏览器。当受害者执行了它的负载时，BeEF将钩取一个或多个Web浏览器，然后可以利用多个命令模块进行进一步的利用。接下来的部分将扩展我们发现的XSS漏洞，使其执行BeEF钩，并介绍一些基本用法。
- en: 'BeEF is powerful and demonstrates the impact of what an XSS is capable of:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF很强大，展示了XSS的影响力：
- en: 'Now that we have demonstrated how basic XSS payloads execute, we are going
    to kick it up a notch and try a BeEF payload with similar formatting as the last
    two with the following `GET` request:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经演示了基本的XSS负载执行，我们将尝试使用类似格式的BeEF负载进行`GET`请求：
- en: '[PRE11]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using this `GET` request, we can see the browser respond with a broken page
    as seen in the following image:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个`GET`请求，我们可以看到浏览器响应一个损坏的页面，如下图所示：
- en: '![](img/8f20f997-5804-4dfb-8490-e2bd459956a4.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f20f997-5804-4dfb-8490-e2bd459956a4.png)'
- en: 'Again, we are breaking some piece of JavaScript code, preventing the browser
    from executing our JavaScript code hosted externally on the BeEF server. Chances
    are we need to terminate the intended JavaScript code and start our own `<script>`
    tags to have our external JavaScript BeEF be requested. We can try adding a parameter
    with open and close script tag brackets, add quotation marks, and then try to
    call our BeEF hook payload using the following `GET` request:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们正在破坏一些JavaScript代码，阻止浏览器执行我们在BeEF服务器上托管的外部JavaScript代码。很可能我们需要终止预期的JavaScript代码，并开始我们自己的`<script>`标签，以请求我们的外部JavaScript
    BeEF。我们可以尝试添加一个带有打开和关闭脚本标签括号的参数，添加引号，然后尝试使用以下`GET`请求调用我们的BeEF钩有效负载：
- en: '[PRE12]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When we send the `GET` request and have a look at the browser response, it
    appears to output the same broken JavaScript; however, if we have a look at ZAP,
    we can see the browser sending requests to our BeEF server:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们发送`GET`请求并查看浏览器响应时，似乎输出相同的破损JavaScript；但是，如果我们查看ZAP，我们可以看到浏览器向我们的BeEF服务器发送请求：
- en: '![](img/0e4d47ed-73f8-4246-99b6-18f7b14c7bd3.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e4d47ed-73f8-4246-99b6-18f7b14c7bd3.png)'
- en: 'Following are the BeEF hook requests shown in ZAP''s History tab:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是ZAP历史选项卡中显示的BeEF钩请求：
- en: '![](img/874c69c1-28ec-4c5c-af61-0a06d6c75255.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/874c69c1-28ec-4c5c-af61-0a06d6c75255.png)'
- en: 'From the BeEF server, we have successfully hooked our browser with our payload,
    as shown in the following screenshot:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从BeEF服务器，我们已成功用我们的有效负载钩住了我们的浏览器，如下面的屏幕截图所示：
- en: '![](img/84dc7381-1e28-4346-9c3b-8513ab31358e.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84dc7381-1e28-4346-9c3b-8513ab31358e.png)'
- en: Basic usage of BeEF when hooking a victim
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钩住受害者时BeEF的基本使用
- en: 'The following is the basic usage of BeFF while hooking a victim:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是钩住受害者时BeEF的基本使用：
- en: Once a victim is hooked, BeEF quickly enumerates information running on the
    victim's computer.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦受害者被钩住，BeEF会快速枚举运行在受害者计算机上的信息。
- en: 'The following screenshot illustrates what BeEF captures:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图说明了BeEF捕获的内容：
- en: '![](img/7e372f36-35c1-4f4f-a1ac-6c5f376f7f63.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e372f36-35c1-4f4f-a1ac-6c5f376f7f63.png)'
- en: 'Along with host details, BeEF uses a number of exploitation modules to be used
    on the victim, as seen in the following screenshot:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了主机详细信息，BeEF还使用许多利用模块在受害者身上使用，如下面的屏幕截图所示：
- en: '![](img/95723930-53b5-44b3-afb0-5afec8d5fbdb.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95723930-53b5-44b3-afb0-5afec8d5fbdb.png)'
- en: 'One module in the network category can scan the victim''s ports for post-exploitation
    assistance:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络类别中的一个模块可以扫描受害者的端口以进行后期利用：
- en: '![](img/e7308456-d9aa-4794-a8d9-28e5bafa6e1a.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7308456-d9aa-4794-a8d9-28e5bafa6e1a.png)'
- en: Proxying traffic through a victim's browser
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过受害者的浏览器代理流量
- en: 'One of my favorite features of BeEF is the ability to use the victim as a proxy
    to send forged requests on behalf of the user:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF的我最喜欢的功能之一是能够使用受害者作为代理，代表用户发送伪造请求：
- en: 'It''s as simple as right-clicking the hooked victim to use as a proxy, navigating
    to the Rider tab, and using the Forge Request option, as seen in the following
    screenshots:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就像右键单击被钩住的受害者以用作代理一样简单，导航到Rider选项卡，并使用Forge Request选项，如下面的屏幕截图所示：
- en: '![](img/22b6a1a5-8afd-4e62-824b-a593a1dfbc9d.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22b6a1a5-8afd-4e62-824b-a593a1dfbc9d.png)'
- en: 'Copy a known `HTTP` request to forge through the victim''s browser, such as
    creating or changing an admin user''s password, as seen in the following screenshot:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制已知的`HTTP`请求，通过受害者的浏览器伪造，例如创建或更改管理员用户的密码，如下面的屏幕截图所示：
- en: '![](img/75c54380-421e-4c78-a096-3434c0eb51c6.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75c54380-421e-4c78-a096-3434c0eb51c6.png)'
- en: 'View the forged response in the History tab:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在历史选项卡中查看伪造的响应：
- en: '![](img/85c6f421-d3d9-405d-9bc9-fa9d95d49a18.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85c6f421-d3d9-405d-9bc9-fa9d95d49a18.png)'
- en: 'When the forged request is double-clicked, another tab will open with the path
    of the forged request and the `HTTP` response will be shown, as illustrated in
    the following screenshot:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当伪造的请求被双击时，将打开另一个选项卡，显示伪造请求的路径和`HTTP`响应，如下面的屏幕截图所示：
- en: '![](img/535439ce-c485-47cc-9bb0-5458a79d1cf0.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/535439ce-c485-47cc-9bb0-5458a79d1cf0.png)'
- en: In this recipe, we demonstrated how to discover vulnerable XSS parameters, reviewed
    encoding considerations, dissected JavaScript code, discussed usage of basic XSS
    payloads, and exploited a cross-site scripting vulnerability with a BeEF hook.
    When BeEF is hooking a victim, there are a number of possibilities and exploitation
    techniques to be used.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们演示了如何发现易受攻击的XSS参数，审查编码考虑因素，解剖JavaScript代码，讨论了基本XSS有效负载的使用，并利用了BeEF钩的跨站脚本漏洞。当BeEF钩住受害者时，有许多可能性和利用技术可供使用。
- en: There's more...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For details on BeEF modules and advanced features, visit BeEF's GitHub wiki
    page at [https://github.com/beefproject/beef/wiki](https://github.com/beefproject/beef/wiki).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有关BeEF模块和高级功能的详细信息，请访问BeEF的GitHub维基页面，网址为[https://github.com/beefproject/beef/wiki](https://github.com/beefproject/beef/wiki)。
- en: See also
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There are many caveats when trying to exploit XSS beyond a basic alert box.
    Quite often, encoding will need to be adjusted for evading filters or to minimize
    a payload due to character limitations. For assistance with evading filters and
    XSS in general, have a look at OWASP's XSS wiki page found via [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)).
    The XSS wiki page also links to several XSS testing guidance documents, such as
    evading filters.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在尝试利用XSS时有许多注意事项，超出了基本的警报框。经常需要调整编码以逃避过滤器或由于字符限制而最小化有效负载。有关逃避过滤器和XSS的一般帮助，请查看OWASP的XSS维基页面，网址为[https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))。XSS维基页面还链接到几个XSS测试指南文件，例如逃避过滤器。
- en: Exploiting CSRF
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用CSRF
- en: CSRF is an attack that tricks a victim into submitting a malicious request with
    the identity and privileges of the victim to perform an undesired function on
    the victim's behalf. For most applications, browsers will automatically include
    any associated session information such as the user's session cookie, token, IP
    address, and sometimes Windows domain credential NTLM hashes. If the victim user
    is currently authenticated to the site, the site will have no way to distinguish
    between the forged request sent by the victim and a legitimate request sent by
    the victim.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF是一种攻击，它欺骗受害者以受害者的身份和权限提交恶意请求，以代表受害者执行不需要的功能。对于大多数应用程序，浏览器将自动包括任何相关的会话信息，如用户的会话cookie、令牌、IP地址，有时还包括Windows域凭据NTLM哈希。如果受害者用户当前已经在站点上进行了身份验证，站点将无法区分受害者发送的伪造请求和受害者发送的合法请求。
- en: CSRF attacks target application functionality that causes a state change on
    the server, such as changing the victim's email address, password, or various
    other application configuration settings. The adversary does not receive a response
    if the attack was successful, only the victim does. As such, CSRF attacks target
    state-changing configuration requests that are performed in an automated fashion.
    Embedded IoT devices are known to be susceptible to CSRF attacks due to hardware
    computational complexities of keeping the state of anti-CSRF tokens. Although
    there are preventative design patterns that do not require a server-side state
    but instead the app validates HTTP referrers and origin headers, these are not
    effective solutions.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击针对引起服务器状态更改的应用功能，例如更改受害者的电子邮件地址、密码或各种其他应用程序配置设置。如果攻击成功，对手不会收到响应，只有受害者会收到。因此，CSRF攻击针对以自动方式执行的更改状态的配置请求。由于嵌入式物联网设备由于硬件计算复杂性而容易受到CSRF攻击的影响。尽管有预防性设计模式，不需要服务器端状态，而是应用程序验证HTTP引用者和来源标头，但这些并不是有效的解决方案。
- en: CSRF attacks have been used in a number malware that target IoT devices and
    SOHO routers to reroute the victim's traffic to DNS servers controlled by attackers
    for control over internet traffic as well as DDoS attacks. A couple of these malware
    strands are known as SOHO Pharming ([https://www.team-cymru.com/ReadingRoom/Whitepapers/2013/TeamCymruSOHOPharming.pdf](https://www.team-cymru.com/ReadingRoom/Whitepapers/2013/TeamCymruSOHOPharming.pdf))
    and DNSChanger ([https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices](https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices)).
    In this recipe, we will demonstrate how to exploit CSRF on a target device.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击已经被用于针对物联网设备和SOHO路由器的恶意软件，以将受害者的流量重定向到攻击者控制的DNS服务器，用于控制互联网流量以及进行DDoS攻击。其中一些恶意软件分别称为SOHO
    Pharming（[https://www.team-cymru.com/ReadingRoom/Whitepapers/2013/TeamCymruSOHOPharming.pdf](https://www.team-cymru.com/ReadingRoom/Whitepapers/2013/TeamCymruSOHOPharming.pdf)）和DNSChanger（[https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices](https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices)）。在本教程中，我们将演示如何在目标设备上利用CSRF。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To exploit CSRF, we will use Burp Suite and a vulnerable IHOMECAM ICAM-608 IP
    camera.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用CSRF，我们将使用Burp Suite和易受攻击的IHOMECAM ICAM-608 IP摄像头。
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Our first step in discovering whether an application is vulnerable to CSRF
    is observing the request parameter and HTML form values that change the application
    state. If there is not a randomized token sent with each parameter or a hardcoded
    token in the HTML form chances are the application is vulnerable to CSRF. We want
    to look at either changing sensitive configurations that will benefit us as attackers
    or a form of persistence to the device, such as adding users:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现应用程序是否容易受到CSRF攻击的第一步是观察请求参数和HTML表单值，这些值会改变应用程序的状态。如果每个参数都没有发送一个随机令牌，或者HTML表单中没有硬编码的令牌，那么应用程序很可能容易受到CSRF攻击。我们要么改变对我们作为攻击者有利的敏感配置，要么对设备进行持久化，比如添加用户。
- en: 'Let''s have a look at the target IP camera''s user settings configuration page
    and its source code:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下目标IP摄像头的用户设置配置页面及其源代码：
- en: '![](img/f3984ef0-4e53-46a7-942a-412868599cce.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3984ef0-4e53-46a7-942a-412868599cce.png)'
- en: 'The source of the user settings page looks like it doesn''t contain anti-CSRF
    tokens and blindly inputs parameters into the URL of the page without any validations:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户设置页面的源代码看起来似乎没有包含反CSRF令牌，并且盲目地将参数输入到页面的URL中而没有任何验证：
- en: '![](img/1395fc52-c7e4-445a-8165-f89f2ea70382.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1395fc52-c7e4-445a-8165-f89f2ea70382.png)'
- en: We can now create a **proof of concept** (**PoC**) CSRF HTML page that creates
    three users on behalf of the victim.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建一个**概念验证**（**PoC**）CSRF HTML页面，代表受害者创建三个用户。
- en: 'First, we need to right click the vulnerable HTTP request and select Generate
    CSRF PoC:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要右键单击易受攻击的HTTP请求，然后选择生成CSRF PoC：
- en: '![](img/601612c0-ec5c-44db-9a52-01dff3d5937d.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/601612c0-ec5c-44db-9a52-01dff3d5937d.png)'
- en: 'Burp Suite creates a PoC HTML page we can weaponize and tailor to our needs.
    Our next step is to change the admin user settings and add two new users by hardcoding
    input values. In the following screenshot, we have added `IoTCookbookUserAdmin`,
    `IoTCookbookUser1`, and `IoTCookbookUser2`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp Suite创建了一个我们可以武装并根据需要调整的PoC HTML页面。我们的下一步是更改管理员用户设置，并通过硬编码输入值添加两个新用户。在下面的截图中，我们添加了`IoTCookbookUserAdmin`，`IoTCookbookUser1`和`IoTCookbookUser2`：
- en: '![](img/e9caa619-1b80-42e5-85c0-2db77dcf97da.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9caa619-1b80-42e5-85c0-2db77dcf97da.png)'
- en: 'Select Test in browser, which pops up the following box:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中选择测试，弹出以下框：
- en: '![](img/e3770d3b-7f60-4550-8c1a-60eeadb1f90c.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3770d3b-7f60-4550-8c1a-60eeadb1f90c.png)'
- en: 'Copy the link into your browser:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将链接复制到浏览器中：
- en: '![](img/a59cd1cc-5f91-49d1-80aa-7a366df75908.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a59cd1cc-5f91-49d1-80aa-7a366df75908.png)'
- en: 'Once the link is run in your browser, observe the request sent to Burp Suite''s
    proxy HTTP history that contains the hardcoded input values we used in our PoC
    HTML page adding the users to the IP camera:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在浏览器中运行链接，请观察发送到Burp Suite代理HTTP历史记录的请求，其中包含我们在PoC HTML页面中使用的硬编码输入值，用于将用户添加到IP摄像机：
- en: '![](img/fdd8e5e9-480f-483f-8757-e04d1457bcb8.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdd8e5e9-480f-483f-8757-e04d1457bcb8.png)'
- en: 'Refresh the user settings page of the IP camera to see the changes made:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新IP摄像机的用户设置页面以查看所做的更改：
- en: '![](img/d4a50a84-d353-451f-a126-1c72ff833d81.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4a50a84-d353-451f-a126-1c72ff833d81.png)'
- en: Similar tactics and techniques based upon the aforementioned malware can be
    utilized when sending the CSRF PoC page victims. Administrator and user accounts
    will be created in an automated manner, allowing attackers to make unauthorized
    changed on behalf of the victim user.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当发送CSRF PoC页面给受害者时，可以利用类似的策略和技术，基于上述恶意软件。管理员和用户帐户将以自动化方式创建，允许攻击者代表受害者用户进行未经授权的更改。
- en: See also
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For additional guidance on reviewing code for CSRF vulnerabilities as well as
    finding and preventing CSRF, refer to the OWASP's CSRF wiki page [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)).
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关审查代码以查找和防止CSRF漏洞的额外指导，请参考OWASP的CSRF维基页面[https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))。
