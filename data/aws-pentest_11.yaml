- en: '*Chapter 9*: Real-Life Pentesting with Metasploit and More!'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：使用Metasploit和更多工具进行真实渗透测试！'
- en: Up until now, we have looked at how various services are set up and how we can
    modify and exploit them – as well as having discussed simple solutions for how
    we can recommend fixing them. Now we are going to be moving forward quite significantly
    and will apply our knowledge of pentesting. We will use AWS and tools such as
    Metasploit to help us leverage exploiting vulnerabilities within AWS environments.
    This chapter will take on a real-life approach to how you would pentest AWS environments
    in a real-world setting.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过各种服务是如何设置的，以及我们如何修改和利用它们 - 同时也讨论了如何建议修复它们的简单解决方案。现在我们将会有相当大的进展，并将应用我们的渗透测试知识。我们将使用AWS和诸如Metasploit之类的工具来帮助我们利用AWS环境中的漏洞。本章将采用真实生活中的方式，来演示如何在真实世界的环境中进行AWS环境的渗透测试。
- en: We will do some basic setups of new systems to mimic common vulnerabilities,
    as well as looking at some of the images we set up in previous chapters. We will
    run through real-life pentesting scenarios that you could expect to come across,
    as well as some fun exercises that will teach you some new tactics and techniques.
    We will be finishing the chapter by exploring some AWS modules within Metasploit
    that allow us to enumerate sensitive information that can lead to further attacking
    and privilege escalation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进行一些基本的系统设置，模仿常见的漏洞，以及查看我们在之前章节中设置的一些镜像。我们将运行一些你可能会遇到的真实渗透测试场景，以及一些有趣的练习，教你一些新的策略和技术。我们将通过探索Metasploit中的一些AWS模块来结束本章，这些模块允许我们枚举敏感信息，从而导致进一步的攻击和权限提升。
- en: Think of this chapter as a "technical" capstone of all the chapters before it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 把这一章看作是之前所有章节的“技术”顶峰。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Real pentesting with Metasploit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit进行真实渗透测试
- en: The pentest pregame
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试前期准备
- en: Targeting WordPress for exploitation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对WordPress进行利用
- en: Targeting vulnerable service applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对易受攻击的服务应用
- en: Exploring AWS Metasploit modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索AWS Metasploit模块
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements for this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的技术要求：
- en: Metasploit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit
- en: Nmap
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap
- en: WordPress
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress
- en: EC2 instances
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2实例
- en: VPC
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟私人云
- en: 'Amazon Lightsail: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Lightsail：[https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)
- en: 'Phishing tool: [https://github.com/xHak9x/SocialPhish](https://github.com/xHak9x/SocialPhish)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钓鱼工具：[https://github.com/xHak9x/SocialPhish](https://github.com/xHak9x/SocialPhish)
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kPcjNL](https://bit.ly/3kPcjNL)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际操作：[https://bit.ly/3kPcjNL](https://bit.ly/3kPcjNL)
- en: Real pentesting with Metasploit
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行真实渗透测试
- en: We have talked quite a bit about **Metasploit** throughout this book, and have
    even used a few modules within Metasploit to help us assess various exercises
    throughout this book – however, these examples have only been skimming the surface
    of what Metasploit really is and the potential it has with pentesting and ethical
    hacking in the cloud.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经谈论了**Metasploit**相当多，并且甚至在Metasploit中使用了一些模块来帮助我们评估本书中的各种练习 - 但是，这些例子只是浅尝辄止，Metasploit的真正潜力以及在云中进行渗透测试和道德黑客的潜力。
- en: Metasploit has mixed reviews from some of us in the pentesting community because
    it helps automate a lot of our processes and can be thought of as being cheap
    or a script kiddie when relying on automated tools to help you pentest. However,
    coming from someone who pentests for a living, Metasploit provides a great advantage
    and automates a lot of the boring and easy stuff, as well as allowing you to focus
    on more detailed portions of an assessment that need a more manual approach. We
    will see, throughout this chapter, how to leverage Metasploit while also using
    other various techniques to help us exploit services and systems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit在渗透测试社区中有好坏参半的评价，因为它帮助自动化了我们的许多流程，可能被认为是廉价的或者是依赖自动化工具来进行渗透测试的新手。然而，作为一个以渗透测试为生的人，Metasploit提供了巨大的优势，并自动化了许多无聊和简单的工作，同时让你专注于需要更多手动方法的评估的详细部分。在本章中，我们将看到如何利用Metasploit，同时使用其他各种技术来帮助我们利用服务和系统。
- en: Important note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Never rely on one tool to get the pentest job done. As pentesters, it is our
    job to provide the assessment of a real-life attacker effectively and efficiently
    while also assessing the overall security posture of the target organization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要依赖一个工具来完成渗透测试工作。作为渗透测试人员，我们的工作是有效和高效地提供对真实攻击者的评估，同时评估目标组织的整体安全状况。
- en: In this chapter, we are going to take our knowledge from all the previous chapters
    and apply it to our cloud environment using real-world scenarios that you may
    encounter during an actual pentest.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把我们从前面所有章节中学到的知识应用到我们的云环境中，使用你在实际渗透测试中可能遇到的真实场景。
- en: 'We will take two approaches:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采取两种方法：
- en: White-box/functional testing
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白盒/功能测试
- en: Having no knowledge with black-box testing
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有黑盒测试的知识
- en: What is functional testing?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是功能测试？
- en: Before we get moving, I do want to make a quick mention of what functional testing
    is. It is pretty much the same thing as a white-box test; only the main goal is
    to ensure that applications and services in the environment work securely and
    adequately, while pentesting allows you to look for more issues and discover when
    something is not functioning correctly or securely.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我想快速提一下功能测试是什么。它基本上和白盒测试是一样的；只是主要目标是确保环境中的应用和服务安全且正常运行，而渗透测试允许你寻找更多问题，并发现当某些东西没有正确或安全地运行时。
- en: Functional testing plays a critical role in cloud pentesting simply because
    cloud pentesting requires a different approach. With security being very well
    developed on the services provider side, most of the issues found in cloud environments
    derive from user implementation. We have seen firsthand, in chapters such as [*Chapter
    4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting S3 Buckets*,
    what overly permissive policies can lead to and how that allows attackers to exploit
    services such as S3\. We are essentially applying that same methodology by already
    having credentials to start assessing our environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试在云渗透测试中起着至关重要的作用，因为云渗透测试需要不同的方法。由于服务提供商方面的安全性非常发达，云环境中发现的大多数问题都源自用户的实施。我们已经亲眼见证了在[*第4章*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)等章节中，过度宽松的政策会导致什么，以及这如何允许攻击者利用S3等服务。我们基本上是通过已经拥有凭证来评估我们的环境，应用了相同的方法论。
- en: Having credentials and looking for exciting resources and broken policies allows
    us, the pentesters, to find issues before the bad guys. It's vital to ensure that
    when pentesting AWS, the pentest team has some credentialed access that will allow
    them to perform functional testing on the AWS environment efficiently.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有凭证并寻找令人兴奋的资源和破损的政策使我们渗透测试人员能够在坏人之前发现问题。确保在进行AWS渗透测试时，渗透测试团队具有一些凭证访问权限，这将使他们能够高效地对AWS环境进行功能测试至关重要。
- en: We will look at more functional testing near the end of this chapter, in the
    *Exploring AWS Metasploit modules* section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的最后看更多的功能测试，在*探索AWS Metasploit模块*部分。
- en: In the dark with black-box testing
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑盒测试
- en: While we did mention **black-box testing** back in [*Chapter 2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056),
    *Pentesting and Ethical Hacking*, I want to make a brief mention of it again here
    since we will be applying it to the scenarios within this chapter. For the sake
    of the scenarios in this chapter, black-box testing for the cloud means that we
    don't have any details about the target or its environment. However, we will at
    least know the DNS or IP of the target host – this allows us to save time and
    find the target.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在[*第2章*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056)中提到了**黑盒测试**，*渗透测试和道德黑客*，我想在这里再次简要提及它，因为我们将把它应用到本章的场景中。对于本章的场景来说，云的黑盒测试意味着我们对目标或其环境没有任何细节。然而，我们至少会知道目标主机的DNS或IP地址
    - 这使我们能够节省时间并找到目标。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Black-box testing can sometimes be a waste of time because much of the testing
    is spent enumerating information due to the pentest team not having any prior
    knowledge of the assessment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试有时可能是浪费时间，因为大部分测试时间都花在枚举信息上，因为渗透测试团队没有关于评估的任何先前知识。
- en: What this means is that the pentest team will need to go out on their own and
    find their way into the applications and into the AWS cloud environment. This
    entails phishing and brute-forcing to find credentials for web applications and
    AWS environments, as well as any other types of social engineering. We can use
    the tactics learned throughout this book, and in this chapter, to help us gain
    access to the deliberately vulnerable systems throughout this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着渗透测试团队需要自己去找到进入应用程序和AWS云环境的方法。这包括钓鱼和暴力破解以找到Web应用程序和AWS环境的凭证，以及任何其他类型的社会工程。我们可以利用本书和本章中学到的策略来帮助我们访问本章中故意脆弱的系统。
- en: Now that we have an understanding of the types of testing that we will be performing,
    let's get moving toward our scenario-based testing. Before we can get started,
    we need to make sure that a couple of things are in order and that we have prepared
    ourselves before testing commences.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了我们将要进行的测试类型，让我们开始朝着基于场景的测试迈进。在我们开始之前，我们需要确保一些事情有条不紊，并且在测试开始之前我们已经做好了准备。
- en: The pentest pregame
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试前期
- en: Before we can get started, we need to ensure that our environment is prepared
    for pentesting. This means we need to ensure that our AWS network is set up and
    that any tools that we use are updated. Aside from our own environment for this
    book, it's always important to remember to check that your setup is configured
    correctly before a pentest. If your setup is not prepared correctly, you're likely
    to run into issues that will inhibit you from conducting a successful pentest;
    or, at the very least, you will have some setbacks during the pentest that will
    take time away from pentesting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要确保我们的环境已经准备好进行渗透测试。这意味着我们需要确保我们的AWS网络已经设置好，并且我们使用的任何工具都已经更新。除了本书中的环境之外，始终重要的是要记住在进行渗透测试之前检查您的设置是否正确。如果您的设置没有准备好，您很可能会遇到问题，这将阻碍您进行成功的渗透测试；或者至少在渗透测试过程中会遇到一些挫折，这将耽误您的时间。
- en: For this section, let's make sure that we are on the correct **Virtual Private
    Cloud** (**VPC**) and that our targets are configured. This ensures that we have
    direct access to machines on their private network, and we shouldn't face any
    issues with attempting to access the internal side of the AWS environment. We
    also will need to ensure that Metasploit is up to date and has the latest modules
    installed so that we can use them to exploit our targets.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，让我们确保我们在正确的**虚拟私有云**（**VPC**）上，并且我们的目标已经配置好。这确保我们可以直接访问其私有网络上的机器，并且在尝试访问AWS环境的内部时不会遇到任何问题。我们还需要确保Metasploit已经更新，并且安装了最新的模块，以便我们可以使用它们来利用我们的目标。
- en: Renaming our VPC for clarity
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名我们的VPC以便更清晰
- en: Let's go ahead and move forward with renaming our VPC. Remember, the VPC acts
    as the virtual private cloud network where the hosts we are working with are.
    We have been working with the same VPC for setting up hosts; however, we never
    renamed it because it didn't pertain to our goals and tasks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续重命名我们的VPC。请记住，VPC充当我们正在使用的主机的虚拟私有云网络。我们一直在使用相同的VPC来设置主机；然而，我们从未重命名它，因为它与我们的目标和任务无关。
- en: 'To rename your VPC, log in to the AWS console and follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名您的VPC，请登录AWS控制台并按照以下步骤操作：
- en: Search the term `VPC` in the main AWS console:![Figure 9.1 – Searching VPC
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台的主要搜索框中搜索`VPC`一词：![图9.1-搜索VPC
- en: '](img/Figure_9.01_B15630.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.01_B15630.jpg)'
- en: Figure 9.1 – Searching VPC
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1-搜索VPC
- en: Click on **VPCs**:![Figure 9.2 – Selecting the VPCs option
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**VPCs**：![图9.2-选择VPC选项
- en: '](img/Figure_9.02_B15630.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.02_B15630.jpg)'
- en: Figure 9.2 – Selecting the VPCs option
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2-选择VPC选项
- en: 'You will see a list of VPCs. Select the VPC with your Kali instance in it and
    rename it. We have renamed ours **Pentest Playground**:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个VPC列表。选择包含Kali实例的VPC并将其重命名。我们已经将我们的VPC重命名为**Pentest Playground**：
- en: '![Figure 9.3 – Renaming our VPC'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3-重命名我们的VPC'
- en: '](img/Figure_9.03_B15630.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B15630.jpg)'
- en: Figure 9.3 – Renaming our VPC
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3-重命名我们的VPC
- en: And that's it! We have now renamed our VPC, which will make things a little
    bit easier moving forward since we can automatically place any target hosts within
    that VPC. Next, let's move on to updating our main tool, Metasploit.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们现在已经重命名了我们的VPC，这将使得以后的工作变得更加容易，因为我们可以自动将任何目标主机放在该VPC中。接下来，让我们继续更新我们的主要工具Metasploit。
- en: Updating Metasploit
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Metasploit
- en: 'Now we need to do one last thing before moving forward with our pentest – we
    need to go ahead and update Metasploit on our Kali Linux machine. We are going
    to be using our Kali machine that is hosted in AWS, so please ensure that you
    have that instance started up and accessed. To access the machine, use the following
    command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行渗透测试之前，我们需要做最后一件事-我们需要更新我们Kali Linux机器上的Metasploit。我们将使用托管在AWS中的Kali机器，因此请确保您已经启动并访问了该实例。要访问该机器，请使用以下命令：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once you have gained access to the Kali machine, go ahead and type the following
    command to update the Metasploit application within your Kali host:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您获得对Kali机器的访问权限，请继续输入以下命令来更新Kali主机中的Metasploit应用程序：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let that run for a minute and update. You'll be prompted when it's complete
    and will be able to move forward.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让它运行一分钟并更新。完成后会提示您，然后可以继续。
- en: Now that our environment is ready, it's time to move forward with some real
    pentest scenarios. The following scenarios simulate deliberately vulnerable environments
    that mimic common issues seen in real-world environments. We will also have some
    other exercises that use AWS as a platform to help boost your knowledge of pentesting
    and also help illustrate some of the capabilities that AWS has in regard to **pentesting**
    and **offensive security**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的环境已经准备好了，是时候继续进行一些真正的渗透测试场景了。以下场景模拟了故意制造的易受攻击环境，模仿了真实环境中常见的问题。我们还将进行一些其他练习，使用AWS作为平台，以帮助提升您对渗透测试的了解，并展示AWS在渗透测试和攻击性安全方面的一些能力。
- en: Targeting WordPress for exploitation
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对WordPress进行利用
- en: 'For our first pentest, we will be pentesting a target application known as
    WordPress, a very popular website that is used for blogging and building websites
    swiftly and somewhat securely. It is not uncommon for WordPress websites to be
    a target during a pentest simply because they are fairly agile and super simple
    to start up – as we will see in a moment. If you want to find out more about WordPress,
    please go here: [https://wordpress.com/](https://wordpress.com/).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个渗透测试，我们将对一个名为WordPress的目标应用进行渗透测试，这是一个非常流行的用于博客和快速构建网站的网站。在渗透测试中，WordPress网站成为目标并不罕见，因为它们非常灵活，而且非常简单易上手-正如我们将在下一刻看到的。如果您想了解更多关于WordPress，请访问这里：[https://wordpress.com/](https://wordpress.com/)。
- en: Now, let's look at what the actual scenario is and what we are being requested
    to test, as well as how to test it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看实际的情景是什么，以及我们被要求测试什么，以及如何测试。
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The test requirements will vary from test to test. Some targets may only need
    initial access, while others will require full post-exploitation. This scenario
    is completely dependent on the client and what their needs are.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试要求会因测试而异。有些目标可能只需要初始访问，而其他目标则需要完整的后期利用。这种情况完全取决于客户及其需求。
- en: The scenario - gaining unauthorized access
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景-获取未经授权的访问权限
- en: In this scenario, we have been asked to target a WordPress website and see whether
    we can gain any type of access. The target suspects that the administrators are
    lazy and have implemented weak credentials to access both the web application
    and the backend host. So, at the request of the target, this means we need to
    get access to the web GUI and get access to the host system via a reverse shell.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们被要求针对一个WordPress网站进行攻击，并查看是否能够获得任何类型的访问权限。目标怀疑管理员很懒惰，并且已经实施了弱凭证来访问Web应用程序和后端主机。因此，根据目标的要求，这意味着我们需要访问Web
    GUI并通过反向shell访问主机系统。
- en: We can do this through a couple of different methods, such as brute-forcing
    and social engineering. We will use Metasploit and use an open source tool to
    perform a phishing exercise on the target. Upon getting the credentials, we will
    access the application and attempt to access the host system by putting a back
    door on the web application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几种不同的方法来做到这一点，比如蛮力攻击和社会工程学。我们将使用Metasploit并使用一个开源工具对目标进行网络钓鱼演习。在获得凭证后，我们将访问应用程序，并尝试通过在Web应用程序上放置后门来访问主机系统。
- en: Before we get to pentesting, we need to first stand up a web server with WordPress
    on it. We can execute this fairly quickly using a service called **Lightsail**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行渗透测试之前，我们需要首先搭建一个带有WordPress的Web服务器。我们可以使用一个名为**Lightsail**的服务来快速执行这个操作。
- en: Setting the target with Lightsail
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Lightsail设置目标
- en: We are going to use something that is a little different this time around while
    setting up our server. In the past, we have used EC2 instances to configure hosts
    and applications. Now, we are pretty much going to automate that entire part using
    a service called **Lightsail**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次在设置服务器时，我们将使用一种略有不同的方法。过去，我们使用EC2实例来配置主机和应用程序。现在，我们几乎要完全自动化整个过程，使用一个名为**Lightsail**的服务。
- en: Lightsail is a feature within AWS that allows us to build applications within
    a matter of minutes. This works wonderfully for administrators who need to get
    a server and website up and running in minutes; however, as we will see in this
    pentest scenario, there are sometimes common issues that may come with that. Often,
    simple credentials and over-permissive access opens vulnerable doors that allow
    attackers to find ways into the applications!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Lightsail是AWS中的一个功能，允许我们在几分钟内构建应用程序。这对需要在几分钟内启动服务器和网站的管理员非常有效；然而，正如我们将在这个渗透测试场景中看到的那样，有时可能会出现一些常见问题。通常，简单的凭据和过度宽松的访问会打开脆弱的大门，使攻击者找到进入应用程序的方法！
- en: 'For now, let''s worry about standing up our target with Lightsail. If you like,
    you can find out more about Lightsail here: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们先担心用Lightsail搭建我们的目标。如果您愿意，您可以在这里了解更多关于Lightsail的信息：[https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)。
- en: 'To get started, you''ll need to log in to your AWS account at [aws.amazon.com](http://aws.amazon.com).
    After logging in, you can go to Lightsail here: [https://lightsail.aws.amazon.com](https://lightsail.aws.amazon.com).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要登录到您的AWS帐户，网址是[aws.amazon.com](http://aws.amazon.com)。登录后，您可以在这里进入Lightsail：[https://lightsail.aws.amazon.com](https://lightsail.aws.amazon.com)。
- en: 'Once you log in to the Lightsail dashboard, you''ll need to create an instance
    and configure it to fit our vulnerable target scenario. The following steps will
    help guide you through how to do this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录到Lightsail仪表板，您需要创建一个实例并配置它以适应我们易受攻击的目标场景。以下步骤将帮助您了解如何执行此操作：
- en: Click on **Create instance**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建实例**。
- en: Select the **WordPress** application and build it on a Linux image:![Figure
    9.4 – Selecting our Lightsail image with WordPress and Linux
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**WordPress**应用程序，并在Linux镜像上构建它：![图9.4 - 选择我们的Lightsail镜像，带有WordPress和Linux
- en: '](img/Figure_9.04_B15630.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.04_B15630.jpg)'
- en: Figure 9.4 – Selecting our Lightsail image with WordPress and Linux
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 - 选择我们的Lightsail镜像，带有WordPress和Linux
- en: Now we need to choose a plan. Go with the **cheapest plan**, which gives you
    the first month free. You can cancel at any time:![Figure 9.5 – Selecting the
    plan that has a free month option to avoid charges
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要选择一个计划。选择**最便宜的计划**，可以免费使用一个月。您随时可以取消：![图9.5 - 选择具有免费月份选项的计划，以避免收费
- en: '](img/Figure_9.05_B15630.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.05_B15630.jpg)'
- en: Figure 9.5 – Selecting the plan that has a free month option to avoid charges
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 - 选择具有免费月份选项的计划，以避免收费
- en: Name your instance! In this case, we have named our instance `WordPress-Metasploit`
    to keep things simple:![Figure 9.6 – Naming our instance for familiarity
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给您的实例命名！在这种情况下，我们将我们的实例命名为`WordPress-Metasploit`，以保持简单：![图9.6 - 为熟悉性命名我们的实例
- en: '](img/Figure_9.06_B15630.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.06_B15630.jpg)'
- en: Figure 9.6 – Naming our instance for familiarity
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 - 为熟悉性命名我们的实例
- en: Click **Create instance**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建实例**。
- en: Now, we should have a dashboard up and running with our new instance!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该有一个正在运行的仪表板与我们的新实例！
- en: '![Figure 9.7 – Our instance loaded in Lightsail'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 - 我们在Lightsail中加载的实例'
- en: '](img/Figure_9.07_B15630.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.07_B15630.jpg)'
- en: Figure 9.7 – Our instance loaded in Lightsail
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 - 我们在Lightsail中加载的实例
- en: Next, we are going to make this instance vulnerable so that we can attack it.
    The first thing we need to do is log in and change the password for the login.
    When you get to the Lightsail dashboard, you'll see **Connect using SSH**. Clicking
    that button will give us an SSH Terminal within our WordPress host.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使这个实例变得脆弱，以便我们可以攻击它。我们需要做的第一件事是登录并更改登录密码。当您到达Lightsail仪表板时，您会看到**使用SSH连接**。单击该按钮将为我们提供WordPress主机内的SSH终端。
- en: 'Let''s move forward with the next steps to set up our vulnerable host:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行下一步，设置我们的易受攻击主机：
- en: Click **Connect using SSH**:![Figure 9.8 – Connecting to the host system
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**使用SSH连接**：![图9.8 - 连接到主机系统
- en: '](img/Figure_9.08_B15630.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.08_B15630.jpg)'
- en: Figure 9.8 – Connecting to the host system
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 - 连接到主机系统
- en: This will create an SSH window within your browser. Type `ls` in the Terminal
    to list any files and directories within the application:![Figure 9.9 – Listing
    out files within the host
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在您的浏览器中创建一个SSH窗口。在终端中键入`ls`以列出应用程序中的任何文件和目录：![图9.9 - 列出主机中的文件
- en: '](img/Figure_9.09_B15630.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.09_B15630.jpg)'
- en: Figure 9.9 – Listing out files within the host
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 - 列出主机中的文件
- en: List out the application password file with the `cat` command:![](img/Figure_9.10_B15630.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cat`命令列出应用程序密码文件！[](img/Figure_9.10_B15630.jpg)
- en: Figure 9.10 – Listing out the contents of the password file
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 - 列出密码文件的内容
- en: Now that we have the password, let's go to the login address and use the password
    and username to log in to the web app. The address to log in will be at `http://<publiciP>/wp-login.php`:![Figure
    9.11 – Logging in to our WordPress host
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了密码，让我们去登录地址，并使用密码和用户名登录到Web应用程序。登录地址将是`http://<publiciP>/wp-login.php`：![图9.11
    - 登录到我们的WordPress主机
- en: '](img/Figure_9.11_B15630.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B15630.jpg)'
- en: Figure 9.11 – Logging in to our WordPress host
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 - 登录到我们的WordPress主机
- en: Once logged in, go to the **Users** section, and click **Add New**:![Figure
    9.12 – Adding a new user
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，转到**用户**部分，然后单击**添加新用户**：![图9.12 - 添加新用户
- en: '](img/Figure_9.12_B15630.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B15630.jpg)'
- en: Figure 9.12 – Adding a new user
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12 - 添加新用户
- en: Now, go ahead and create a new user called `admin` and set the password to `admin`:![Figure
    9.13 – Creating an admin account
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，继续创建一个名为`admin`的新用户，并将密码设置为`admin`：![图9.13 - 创建管理员帐户
- en: '](img/Figure_9.13_B15630.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.13_B15630.jpg)'
- en: Figure 9.13 – Creating an admin account
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13 - 创建管理员帐户
- en: 'Once the user is created, you''ll need to ensure that it is part of the **Administrator**
    role group:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户后，您需要确保它是**管理员**角色组的一部分：
- en: '![Figure 9.14 – Assigning the Administrator role to our admin account'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.14 - 将管理员角色分配给我们的管理员帐户'
- en: '](img/Figure_9.14_B15630.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.14_B15630.jpg)'
- en: Figure 9.14 – Assigning the Administrator role to our admin account
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 - 将管理员角色分配给我们的管理员帐户
- en: Now, our target is successfully set up with some vulnerable issues that will
    allow us to discover the weaknesses in the application. Remember, we only set
    up the application as an administrator, but we are attacking it as a pentester.
    This means we have knowledge of the credentials on the application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的目标已经成功设置了一些容易受攻击的问题，这将使我们能够发现应用程序中的弱点。请记住，我们只是将应用程序设置为管理员，但我们是作为渗透测试人员对其进行攻击。这意味着我们知道应用程序的凭据。
- en: Let's get started and begin pentesting!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始并开始渗透测试！
- en: Enumerating the target
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举目标
- en: 'Alright, now that the stage is set, we are ready to get to pentesting our target.
    The thing we need to do is get back on to our AWS Kali Linux instance. Once you
    have access to your Kali host, let''s start scanning the target application to
    see what ports and services we discover as potential entry points:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在舞台已经搭好，我们准备开始对目标进行渗透测试。我们需要做的第一件事是回到我们的AWS Kali Linux实例上。一旦你能够访问你的Kali主机，让我们开始扫描目标应用程序，看看我们发现了哪些端口和服务作为潜在的入口点：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output can be seen as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Figure 9.15 – Scanning our WordPress host'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.15 - 扫描我们的WordPress主机'
- en: '](img/Figure_9.15_B15630.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.15_B15630.jpg)'
- en: Figure 9.15 – Scanning our WordPress host
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15 - 扫描我们的WordPress主机
- en: As you can see, the ports and services that are open are web service ports and
    SSH. Since we were only requested to test the WordPress application, we can go
    ahead and not worry about SSH since technically it isn't within the scope of the
    test.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，打开的端口和服务是web服务端口和SSH。由于我们只被要求测试WordPress应用程序，所以我们可以继续而不用担心SSH，因为从技术上讲，它不在测试范围内。
- en: Important note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Always remember to stay within the scope of the requested pentest. Going beyond
    the scope can result in fines, loss of revenue, loss of trust, and lawsuits.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 始终记住要在请求的渗透测试范围内活动。超出范围可能导致罚款、收入损失、信任丧失和诉讼。
- en: Now that we know that we can access both web ports on ports `80` and `443`,
    let's start to move forward and see what we can enumerate from the website using
    a WordPress module within Metasploit. This is the next logical step since we already
    know that the target is hosting **WordPress** – if we didn't know, we would attempt
    to access the site through our browser first to see what kind of application is
    running on the web service port.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们可以访问端口`80`和`443`上的web端口，让我们开始向前迈进，看看我们可以从网站中使用Metasploit中的WordPress模块进行枚举。这是下一个逻辑步骤，因为我们已经知道目标正在托管WordPress
    - 如果我们不知道，我们将首先尝试通过浏览器访问站点，看看web服务端口上运行的是什么应用程序。
- en: 'The following commands will launch Metasploit and scan our target:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将启动Metasploit并扫描我们的目标：
- en: 'Launch Metasploit:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Metasploit：
- en: '[PRE3]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next screenshot will give you a visual of what the Metasploit Terminal
    looks like:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图将让你看到Metasploit终端的外观：
- en: '![Figure 9.16 – Starting Metasploit'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.16 - 启动Metasploit'
- en: '](img/Figure_9.16_B15630.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.16_B15630.jpg)'
- en: Figure 9.16 – Starting Metasploit
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16 - 启动Metasploit
- en: 'Now, we need to go ahead and select a **scanning module** within **Metasploit**
    that will enumerate the version of **WordPress**:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要继续选择Metasploit中的一个**扫描模块**，用于枚举**WordPress**的版本：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will give the following output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 9.17 – Discovering WordPress 5.3.4'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.17 - 发现WordPress 5.3.4'
- en: '](img/Figure_9.17_B15630.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.17_B15630.jpg)'
- en: Figure 9.17 – Discovering WordPress 5.3.4
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17 - 发现WordPress 5.3.4
- en: 'It looks like we may be dealing with an outdated version of **WordPress**.
    If a target is hosting outdated applications, those applications could have vulnerabilities
    that lead to easy exploitation and system compromise. Now, we will look at vulnerabilities
    associated with **5.3.4**. You can find vulnerabilities associated with this version
    here: [https://wpvulndb.com/wordpresses/53](https://wpvulndb.com/wordpresses/53).'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看起来我们可能正在处理一个过时的**WordPress**版本。如果目标托管过时的应用程序，这些应用程序可能存在易受攻击和系统妥协的漏洞。现在，我们将查看与**5.3.4**相关的漏洞。你可以在这里找到与这个版本相关的漏洞：[https://wpvulndb.com/wordpresses/53](https://wpvulndb.com/wordpresses/53)。
- en: We didn't find anything that stood out as an easy exploit, so now we can go
    ahead and move on to seeing whether we can discover any usernames through manual
    enumeration.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有找到任何突出的易受攻击的东西，所以现在我们可以继续看看是否可以通过手动枚举发现任何用户名。
- en: To start enumerating username information, we need to go check out the login
    page for our WordPress application. We will begin assessing by entering random
    usernames until we find an exact match on the username. This will allow us to
    **brute - force** with a known username and a password list and will take less
    time because we will only need to search for passwords, not usernames.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始枚举用户名信息，我们需要去查看我们的WordPress应用程序的登录页面。我们将通过输入随机用户名开始评估，直到我们在用户名上找到一个精确匹配。这将允许我们使用已知的用户名和密码列表进行**暴力破解**，并且会花费更少的时间，因为我们只需要搜索密码，而不是用户名。
- en: To begin, go to the login page at `http://<public dns>/wp-login.php`. Once there,
    start using some common usernames to log in to the page. In our case, we will
    use `root` and `user` for our attempts.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到`http://<public dns>/wp-login.php`的登录页面。一旦到达那里，开始使用一些常见的用户名来登录页面。在我们的情况下，我们将尝试使用`root`和`user`。
- en: 'Let''s go ahead and begin:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Input `root` as the username, and `password` for the password:![Figure 9.18
    – No luck with finding the username
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`root`作为用户名，`password`作为密码：![图9.18 - 找不到用户名
- en: '](img/Figure_9.18_B15630.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.18_B15630.jpg)'
- en: Figure 9.18 – No luck with finding the username
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18 - 找不到用户名
- en: As you can see, the username was not found – meaning this username does not
    exist on this application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，用户名未找到 - 这意味着这个用户名在这个应用程序中不存在。
- en: Next, we will try to input `user` for the username:![Figure 9.19 – Username
    found
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试输入`user`作为用户名：![图9.19 - 找到用户名
- en: '](img/Figure_9.19_B15630.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.19_B15630.jpg)'
- en: Figure 9.19 – Username found
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19 - 找到用户名
- en: Now we can see that we have found the username because the prompt tells us that
    `user` username is valid, let's take a look at how we can use Metasploit to automate
    the easy discovery of credentials.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们已经找到了用户名，因为提示告诉我们`user`用户名是有效的，让我们看看如何使用Metasploit自动发现凭据。
- en: First, you need to create a file to put the username in. We can also use this
    file later if we find more usernames.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个文件来放置用户名。如果我们找到更多的用户名，我们以后也可以使用这个文件。
- en: 'Go ahead and open the `user` into the file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 继续将`user`打开到文件中：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we need to save the file. Type `:wq` to save and exit.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要保存文件。键入`:wq`以保存并退出。
- en: 'We are good to go with our username document; now, we just need to use it on
    our target host. We are going to be relying on Metasploit again to do this. Metasploit
    has a login enumeration module that will help us find some passwords for our discovered
    user. Once you have Metasploit up, use the following commands to configure your
    Metasploit module to fit your target:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好使用我们的用户名文档；现在，我们只需要在目标主机上使用它。我们将再次依靠Metasploit来完成这项任务。Metasploit有一个登录枚举模块，将帮助我们为我们发现的用户找到一些密码。一旦您启动了Metasploit，请使用以下命令配置您的Metasploit模块以适应您的目标：
- en: '[PRE6]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice in the next screenshot that we have found the user `user`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在下一个截图中，我们找到了用户`user`：
- en: '![Figure 9.21 – Brute - forcing and finding user'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.21–暴力破解和找到用户'
- en: '](img/Figure_9.21_B15630.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.21_B15630.jpg)'
- en: Figure 9.21 – Brute - forcing and finding user
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21–暴力破解和找到用户
- en: 'As you can see, we found the user and the password. The next screenshot highlights
    that the password is `admin`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们找到了用户和密码。下一张截图突出显示密码是`admin`：
- en: '![Figure 9.22 – Discovering a password'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.22–发现密码'
- en: '](img/Figure_9.22_B15630.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.22_B15630.jpg)'
- en: Figure 9.22 – Discovering a password
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22–发现密码
- en: Great work! We successfully gathered credentials for the WordPress application.
    While we could stop enumerating here and move forward with attempting to exploit
    the application, let's take another approach to get other credentials that will
    allow us access to the application – after all, the more credentials you have,
    the better!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们成功地收集了WordPress应用程序的凭据。虽然我们可以在这里停止枚举并继续尝试利用应用程序，但让我们采取另一种方法来获取其他凭据，以便让我们访问应用程序–毕竟，您拥有的凭据越多，越好！
- en: Next, we will attempt to get more credentials through a phishing scheme using
    an open source phishing tool.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试通过使用开源网络钓鱼工具来获取更多的凭据。
- en: Phishing for credentials
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集凭据
- en: The next portion of this section involves us sending a malicious link to the
    target company in order to attempt to get additional credentials that will gain
    us access to the web application. **Phishing** is a **social engineering** attack
    that involves sending malicious emails that attempt to mimic legitimate emails.
    The overall goal is to have users click on links or downloads within the email
    or application that then install malware on the target or gather information.
    In our case, we will be using it to gather additional credentials.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的下一部分涉及向目标公司发送恶意链接，以尝试获取额外的凭据，从而使我们能够访问Web应用程序。**网络钓鱼**是一种涉及发送恶意电子邮件的**社会工程**攻击，试图模仿合法电子邮件。总体目标是让用户点击电子邮件或应用程序中的链接或下载，然后在目标上安装恶意软件或收集信息。在我们的情况下，我们将使用它来收集额外的凭据。
- en: Important note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We will not be sending a fake email to anyone in this exercise. We will assume
    a very descriptive email has been sent with the malicious link attached to it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们不会向任何人发送虚假电子邮件。我们将假设已发送了一个非常描述性的电子邮件，并附有恶意链接。
- en: 'To get started, we need to grab a program called **Social Phish** and put it
    on our **AWS Kali host**. To get the application, please use the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要获取一个名为**Social Phish**的程序，并将其放在我们的**AWS Kali主机**上。要获取该应用程序，请使用以下命令：
- en: '[PRE7]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have the application on your Kali machine, go ahead and run the application:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Kali机器上安装应用程序后，继续运行应用程序：
- en: '[PRE8]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, follow these steps to execute the attack:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤执行攻击：
- en: Now that the application is running, you'll need to ensure that you select the
    **WordPress** template:![Figure 9.23 – Setting up our phishing application
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应用程序正在运行，您需要确保选择**WordPress**模板：![图9.23–设置我们的网络钓鱼应用程序
- en: '](img/Figure_9.23_B15630.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.23_B15630.jpg)'
- en: Figure 9.23 – Setting up our phishing application
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23–设置我们的网络钓鱼应用程序
- en: After selecting the **WordPress** template, move forward with putting the **tinyURL**
    into your browser. This will use the public DNS of your Kali host for access via
    the web:![Figure 9.24 – Fake WordPress site from the phishing link
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**WordPress**模板后，继续将**tinyURL**放入浏览器中。这将使用您的Kali主机的公共DNS进行访问：![图9.24–来自网络钓鱼链接的假WordPress网站
- en: '](img/Figure_9.24_B15630.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.24_B15630.jpg)'
- en: Figure 9.24 – Fake WordPress site from the phishing link
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24–来自网络钓鱼链接的假WordPress网站
- en: As you can see, we have what looks to be a normal WordPress site. We could deceive
    a user into putting their credentials into the input boxes, thus stealing the
    login information. Go ahead and use legitimate credentials from the WordPress
    application:![Figure 9.25 – Credentials discovered
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们看起来有一个正常的WordPress网站。我们可以欺骗用户将他们的凭据放入输入框中，从而窃取登录信息。继续使用WordPress应用程序的合法凭据：![图9.25–发现的凭据
- en: '](img/Figure_9.25_B15630.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.25_B15630.jpg)'
- en: Figure 9.25 – Credentials discovered
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25–发现的凭据
- en: After inputting the credentials, you'll receive the login information on your
    Terminal, as well as it being stored in a file on your system.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入凭据后，您将在终端上收到登录信息，并且它将存储在系统上的文件中。
- en: We now have credentials that we can use to access the application, so let's
    move on to more pentesting on the WordPress application and see what we can do.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了可以用来访问应用程序的凭据，让我们继续对WordPress应用程序进行更多的渗透测试，看看我们能做些什么。
- en: Gaining access to WordPress
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取WordPress的访问权限
- en: This is the shortest part of the assessment. We need to ensure that the credentials
    we discovered will allow us to access the web page. It is important to always
    try the credentials that you discover because they could be the outcome of a **false
    positive** or be changed by the time you try to use them.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是评估中最短的部分。我们需要确保我们发现的凭据能够让我们访问网页。始终尝试你发现的凭据是很重要的，因为它们可能是**误报**的结果，或者在你尝试使用它们时已经被更改。
- en: 'In our case, we will go back to the login page of the target host and use the
    credentials we discovered:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将返回到目标主机的登录页面，并使用我们发现的凭据：
- en: '![Figure 9.26 – WordPress dashboard'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.26 – WordPress仪表板'
- en: '](img/Figure_9.26_B15630.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.26_B15630.jpg)'
- en: Figure 9.26 – WordPress dashboard
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.26 – WordPress仪表板
- en: As you can see, we have successfully gained access to the system. Now that we
    have access, let's move forward with attempting to exploit the application and
    gain access to the underlying host operating system.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已成功访问了系统。既然我们已经获得了访问权限，让我们继续尝试利用应用程序并访问底层主机操作系统。
- en: Exploiting and getting a reverse shell
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用并获取反向shell
- en: Now it's time to see whether we can get a **reverse shell** and **maintain persistence**
    on the target application. Getting persistence on a vulnerable web application
    shows the target client how *easily* their system can be taken over. Additionally,
    it is also one of the scarier issues because it can be difficult to detect and
    allows unauthorized users to gain access to the host system – which at times can
    lead to total compromise.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看我们是否能在目标应用程序上获得**反向shell**并**保持持久性**了。在一个易受攻击的Web应用程序上保持持久性向目标客户展示了他们的系统可以被*轻松*接管。此外，这也是一个更可怕的问题之一，因为它很难被检测到，并且允许未经授权的用户访问主机系统
    - 这有时可能导致完全妥协。
- en: 'To begin our journey in getting a reverse shell on our target, we need to find
    some areas that we can inject or place code that can be executed:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们在目标上获取反向shell的旅程，我们需要找到一些可以注入或放置可执行代码的区域：
- en: To start, let's go look at **Theme Editor**:![Figure 9.27 – WordPress Theme
    Editor
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们去看看**主题编辑器**：![图9.27 – WordPress主题编辑器
- en: '](img/Figure_9.27_B15630.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.27_B15630.jpg)'
- en: Figure 9.27 – WordPress Theme Editor
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.27 – WordPress主题编辑器
- en: 'We will have quite a few templates to select from. Let''s use **404 Template**:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将有很多模板可供选择。让我们使用**404模板**：
- en: '[PRE9]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This can be seen as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以如下所示：
- en: '![Figure 9.28 – WordPress Theme Editor with our code'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.28 – 带有我们代码的WordPress主题编辑器'
- en: '](img/Figure_9.28_B15630.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.28_B15630.jpg)'
- en: Figure 9.28 – WordPress Theme Editor with our code
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.28 – 带有我们代码的WordPress主题编辑器
- en: 'We place the following code into the template. Set `443`. The code for this
    can be found here:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将以下代码放入模板中。设置`443`。此代码可以在此处找到：
- en: '[https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php](https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php](https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php)'
- en: 'Now, we need to start up `netcat` on our Kali Linux host to listen in on the
    connection:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的Kali Linux主机上启动`netcat`来监听连接：
- en: '[PRE10]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we need to attempt to access the full URL where our code is. We can do
    this by using the `curl` command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要尝试访问包含我们代码的完整URL。我们可以使用`curl`命令来做到这一点：
- en: '[PRE11]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will give the following output:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 9.29 – Reverse shell from our target host'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.29 – 来自我们目标主机的反向shell'
- en: '](img/Figure_9.29_B15630.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.29_B15630.jpg)'
- en: Figure 9.29 – Reverse shell from our target host
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.29 – 来自我们目标主机的反向shell
- en: Alright, so we got a **Netcat** shell using our fancy payload. However, now
    let's make things simpler by getting a **Meterpreter** shell! I personally find
    Meterpreter shells more pleasing because you can use them with Metasploit and
    they have extra features that typical shells do not.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们使用了我们的精巧有效载荷获得了一个**Netcat** shell。然而，现在让我们通过获取一个**Meterpreter** shell来简化事情！我个人觉得Meterpreter
    shells更令人愉悦，因为你可以在Metasploit中使用它们，并且它们具有典型shell所没有的额外功能。
- en: To get a Meterpreter shell, we are going to use a WordPress exploit within Metasploit.
    We will use the credentials we discovered during our assessment, as well as our
    AWS Kali Linux host to catch the incoming connection.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得一个Meterpreter shell，我们将在Metasploit中使用一个WordPress漏洞。我们将使用我们在评估中发现的凭据，以及我们的AWS
    Kali Linux主机来捕获传入的连接。
- en: 'Once you have Metasploit started, use the following commands to load your module
    and configure it to target the host:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你启动了Metasploit，使用以下命令加载你的模块并配置它以针对主机：
- en: '[PRE12]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will give the following output:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 9.30 – Meterpreter reverse shell from our target host'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.30 – 来自我们目标主机的Meterpreter反向shell'
- en: '](img/Figure_9.30_B15630.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.30_B15630.jpg)'
- en: Figure 9.30 – Meterpreter reverse shell from our target host
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.30 – 来自我们目标主机的Meterpreter反向shell
- en: As you can see, we have successfully gained access to the host operating system
    with both a **Netcat** shell and a **Meterpreter** shell. From the looks of it,
    this application was fairly insecure and had very little security in place. Now
    that we have finished our pentest on this application, it's time to move forward
    with discussing the issues and how you can discuss with others how to fix them.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已成功使用**Netcat** shell和**Meterpreter** shell获得了对主机操作系统的访问权限。从外观上看，这个应用程序相当不安全，并且几乎没有任何安全措施。现在我们已经完成了对这个应用程序的渗透测试，是时候继续讨论问题以及如何与他人讨论如何解决这些问题了。
- en: Discussing the issues
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论问题
- en: Once a pentest has concluded, it is **essential** that you discuss with your
    target some of the issues that were discovered during the pentest. It's also extremely
    important that you divert from using extremely technical terms that may confuse
    non-tech-savvy clients. Making a client feel confused or overwhelmed with technical
    terms can actually drive a client away and they may not recommend you for another
    pentest.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦渗透测试结束，与目标讨论一些在渗透测试期间发现的问题是至关重要的。同样非常重要的是，避免使用可能会让非技术人员客户感到困惑的极其技术性的术语。让客户感到困惑或被技术术语压倒实际上可能会让客户离开，并且他们可能不会推荐你进行另一次渗透测试。
- en: 'The following is a statement that we would write to the client and attach pentest
    findings to the statement:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将写给客户并附上渗透测试结果的声明：
- en: During the pentest of the WordPress application, pentesters were successfully
    able to extract passwords through guessing and social engineering. Social engineering
    involved sending a malicious link to users in the hope that one of them would
    click on the link and input their credentials in what looked like the customer's
    website.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress应用程序的渗透测试中，渗透测试人员成功地通过猜测和社会工程学提取了密码。社会工程包括向用户发送恶意链接，希望其中一些人会点击该链接并在看起来像客户网站的地方输入他们的凭据。
- en: Upon gaining access, the pentester moved forward and placed malicious code in
    the web application that could then be used to grant unauthorized access to the
    target server.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 获得访问权限后，渗透测试人员继续前进，并在Web应用程序中放置了恶意代码，然后可以用来授予对目标服务器的未经授权访问。
- en: It is recommended that the client trains its employees not to click on malicious
    links, and that engineers do not use weak credentials for any applications. It
    is also recommended that password policies be reviewed to prevent simple usernames
    and passwords from being created in the future. Please advise if you have any
    questions and we look forward to working with you again.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 建议客户培训其员工不要点击恶意链接，并且工程师不要为任何应用程序使用弱凭据。还建议审查密码策略，以防止未来创建简单的用户名和密码。如果您有任何问题，请告知，我们期待再次与您合作。
- en: As you can see, we stayed away from using any tech-heavy terms and advised on
    what to fix. This lets the target client understand that we are here to help and
    that we will work with them to fix their issues – ultimately solidifying a relationship
    with the client business.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们避免使用任何技术性术语，并建议如何解决问题。这让目标客户明白我们在这里是来帮助他们的，并且我们将与他们合作解决问题 – 最终巩固与客户业务的关系。
- en: Now that we have gotten our hands dirty with some fun WordPress hacking, let's
    look at some different issues that you may come across when assessing an AWS environment.
    Next up, we are going to start looking at how we can discover vulnerable applications
    hosted on EC2.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在WordPress黑客攻击中动手玩了一番，让我们来看看在评估AWS环境时可能遇到的一些不同问题。接下来，我们将开始研究如何发现托管在EC2上的易受攻击的应用程序。
- en: Targeting vulnerable service applications
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对易受攻击的服务应用程序
- en: '**Vulnerable services** are one of the worst things that can be part of your
    environment and one of the easiest, *but not always the cheapest*, things to fix.
    As applications get older, so does the code used to build the application, and
    while time advances, so do the vulnerabilities of the older application. Unfortunately,
    while simply patching or updating old software sounds easy, it''s actually quite
    expensive and time-consuming. Updating an application can take copious amounts
    of time and bring down the service the application uses to function. This means
    a loss in revenue and usability.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**易受攻击的服务**是环境中可能存在的最糟糕的问题之一，也是最容易修复的问题之一，*但并非总是最便宜的*。随着应用程序变老，构建应用程序所使用的代码也变老，而随着时间的推移，旧应用程序的漏洞也在增加。不幸的是，尽管简单地修补或更新旧软件听起来很容易，但实际上是非常昂贵和耗时的。更新应用程序可能需要大量时间，并且会使应用程序使用的服务停机。这意味着收入和可用性的损失。'
- en: In this next scenario, we will see the real damage produced by a vulnerable
    application on a network with AWS.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个场景中，我们将看到在AWS网络上易受攻击的应用程序造成的真正损害。
- en: The scenario – discovering and attacking any low-hanging fruit
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 – 发现和攻击任何易攻击的目标
- en: In this scenario, the client has requested a pentest for what they suspect to
    be a vulnerable application. This application is currently being hosted within
    its AWS environment and is publicly accessible from the World Wide Web. The client
    wants to get a view on whether and how vulnerable the web application is, and
    what issues would persist if an attacker were to exploit the application and gain
    access.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，客户要求对他们怀疑存在易受攻击的应用程序进行渗透测试。该应用程序目前托管在其AWS环境中，并且可以从全球范围内的互联网公开访问。客户希望了解Web应用程序的易受攻击程度以及如果攻击者利用该应用程序并获得访问权限，会出现什么问题。
- en: The client has informed us that the application is used for file storage, so
    we can assume that it will more than likely be some type of `21`. That's where
    we will start with our pentest.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 客户告诉我们，该应用程序用于文件存储，因此我们可以假设它很可能是某种类型的`21`。这就是我们将开始进行渗透测试的地方。
- en: Of course, before we do this, we need to stage the environment before moving
    forward.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在进行此操作之前，我们需要先设置环境。
- en: Setting up the target with community AMIs
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用社区AMI设置目标
- en: 'To get started, we will need to go to the EC2 console, which can be accessed
    via the main AWS console. Once you have accessed the EC2 console, click on **Launch
    instance** to quickly get a vulnerable instance up and running:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要转到EC2控制台，该控制台可以通过主AWS控制台访问。一旦您访问了EC2控制台，请点击**启动实例**，快速地启动一个易受攻击的实例：
- en: After selecting **Launch instance**, let's select the **vsftpd-2-3-4-final**
    community AMI:![Figure 9.31 – Launching our community image
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**启动实例**后，让我们选择**vsftpd-2-3-4-final**社区AMI：![图9.31 – 启动我们的社区镜像
- en: '](img/Figure_9.31_B15630.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.31_B15630.jpg)'
- en: Figure 9.31 – Launching our community image
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.31 – 启动我们的社区镜像
- en: You'll want to ensure that the instance is in the same **VPC** as other running
    instances. We will place it in our **Pentest Playground** VPC.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要确保实例与其他正在运行的实例在同一个**VPC**中。我们将把它放在我们的**Pentest Playground** VPC中。
- en: Skip to the end, generate a key pair, and launch the instance!
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳到最后，生成密钥对，并启动实例！
- en: As simple as that, our instance is ready to go. However, do give the instance
    a couple of minutes to load up and get addresses assigned to it so that we can
    access it.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单，我们的实例已经准备就绪。但是，请给实例几分钟的时间来加载并分配地址，以便我们可以访问它。
- en: Next, we will move forward with our pentest and see what issues we can find
    with the potentially vulnerable application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续进行渗透测试，看看我们可以发现哪些潜在易受攻击的应用程序问题。
- en: Scanning for open ports
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扫描打开的端口
- en: As always, we want to `21`, we want to check any other ports just in case we
    overlook something.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们想要`21`，我们想要检查任何其他端口，以防我们忽视了某些东西。
- en: 'Launch **Metasploit** on your **AWS Kali** instance and use the following commands
    to select and configure the module to port scan our target:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的**AWS Kali**实例上启动**Metasploit**，并使用以下命令选择和配置模块来对我们的目标进行端口扫描：
- en: '[PRE13]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will give us the following output:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 9.32 – Port scanning our host with Metasploit'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.32 - 使用Metasploit扫描我们的主机的端口'
- en: '](img/Figure_9.32_B15630.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.32_B15630.jpg)'
- en: Figure 9.32 – Port scanning our host with Metasploit
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.32 - 使用Metasploit扫描我们的主机的端口
- en: As you can see, we have port `22` and port `21` open on the host. We can confirm
    our suspicion that port `21` is in fact open. Now that we have confirmed it is
    open, let's move forward with gathering more information on port `21`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在主机上打开了端口`22`和端口`21`。我们可以确认我们的怀疑，端口`21`确实是打开的。既然我们已经确认它是打开的，让我们继续收集有关端口`21`的更多信息。
- en: Information gathering for vulnerable services
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对易受攻击的服务进行信息收集
- en: 'Moving forward, we need to determine the application and the version number
    that is running on port `21`. To help us discover this, we are going to use `nmap`
    to scan port `21` and enumerate the version of that service:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，我们需要确定运行在端口`21`上的应用程序和版本号。为了帮助我们发现这一点，我们将使用`nmap`来扫描端口`21`并枚举该服务的版本：
- en: '[PRE14]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will give us the following output:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 9.33 – Scanning our host with Nmap'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.33 - 使用Nmap扫描我们的主机'
- en: '](img/Figure_9.33_B15630.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.33_B15630.jpg)'
- en: Figure 9.33 – Scanning our host with Nmap
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.33 - 使用Nmap扫描我们的主机
- en: 'We now know the version of the file service that''s hosted on the target host.
    As you can see, `vsftpd 2.3.4` is the version of the application running on the
    system. Let''s use a program titled **SearchSploit** to see whether there are
    any exploits that we can use against our target:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了托管在目标主机上的文件服务的版本。正如你所看到的，`vsftpd 2.3.4`是系统上运行的应用程序的版本。让我们使用一个名为**SearchSploit**的程序来查看是否有我们可以针对我们的目标使用的任何漏洞利用：
- en: '[PRE15]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will give us the following output:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 9.34 – Searching for exploits'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.34 - 搜索漏洞'
- en: '](img/Figure_9.34_B15630.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.34_B15630.jpg)'
- en: Figure 9.34 – Searching for exploits
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.34 - 搜索漏洞
- en: It looks like there is a **Metasploit** module that we can use to exploit our
    target. We now have enough information to use to attempt to exploit our target
    with the hopes of getting access to the target system.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有一个**Metasploit**模块，我们可以用来利用我们的目标。我们现在有足够的信息来尝试利用我们的目标，希望能够访问目标系统。
- en: Using Metasploit for total system takeover
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Metasploit进行系统全面接管
- en: 'With all the information about the target gathered, let''s begin to shift gears
    and go into attack mode. To attack the application, we need to start up Metasploit
    and configure the module to fit the current target:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 有了关于目标的所有信息，让我们开始转变思路，进入攻击模式。要攻击应用程序，我们需要启动Metasploit并配置模块以适应当前目标：
- en: '[PRE16]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This gives us the following output:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下输出：
- en: '![Figure 9.35 – Getting a root shell on the target host'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.35 - 在目标主机上获取root shell'
- en: '](img/Figure_9.35_B15630.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.35_B15630.jpg)'
- en: Figure 9.35 – Getting a root shell on the target host
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.35 - 在目标主机上获取root shell
- en: As you can see, we have a root shell! This means we have total control of our
    target and can make changes to everything on the system. However, our shell could
    use a little more `background` in your shell Terminal.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们有一个root shell！这意味着我们完全控制了我们的目标，并可以对系统上的一切进行更改。然而，我们的shell可能需要在你的shell终端中再加一点“背景”。
- en: 'Now that we are back in our Metasploit Terminal, let''s use the `shell_to_meterpreter`
    module to upgrade our current shell. The following will select and configure this
    for us:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到了我们的Metasploit终端，让我们使用`shell_to_meterpreter`模块来升级我们当前的shell。以下内容将为我们选择和配置这个模块：
- en: '[PRE17]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will see the following output:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下输出：
- en: '![Figure 9.36 – Upgrading to the Meterpreter shell'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.36 - 升级到Meterpreter shell'
- en: '](img/Figure_9.36_B15630.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.36_B15630.jpg)'
- en: Figure 9.36 – Upgrading to the Meterpreter shell
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.36 - 升级到Meterpreter shell
- en: 'As you can see, we now have `vsftpd` exploit, and the second shell is our newly
    upgraded shell. To get access to our new Meterpreter shell, use the following
    command:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在有了`vsftpd`漏洞利用，第二个shell是我们新升级的shell。要访问我们的新Meterpreter shell，请使用以下命令：
- en: '[PRE18]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Awesome – now we have a Meterpreter shell that we can use to exploit more potential
    issues within the environment. Let's move forward and discuss and execute some
    of the common ways you can successfully exploit this particular host for more
    ethical hacking fun.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了 - 现在我们有了一个Meterpreter shell，我们可以用它来利用环境中的更多潜在问题。让我们继续讨论并执行一些常见的方法，你可以成功地利用这个特定的主机进行更多的道德黑客乐趣。
- en: Post exploitation and weakening additional services
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后期利用和削弱其他服务
- en: Great, we now have access to our system – want to see what else we can do? We
    already have root access, so that means we can do pretty much anything we want
    to our exploited target.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们现在可以访问我们的系统了 - 想看看我们还能做什么吗？我们已经有了root访问权限，这意味着我们可以对我们的受攻击目标做几乎任何我们想做的事情。
- en: Before we get started, let's see what network this host is on. Now that we have
    exploited it, we both have access to the private AWS network and can use the **public
    IP** and **DNS** name for attacks.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们看看这个主机所在的网络。现在我们已经利用了它，我们都可以访问私有AWS网络，并可以使用**公共IP**和**DNS**名称进行攻击。
- en: Important note
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In a real pentest, you can pivot inside the private AWS network and discover
    more hosts that may not be accessible to the public!
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在一次真正的渗透测试中，您可以在私有AWS网络内部进行枢纽转移，并发现更多可能对公众不可访问的主机！
- en: 'Let''s go ahead and look at our network information by running `ifconfig` on
    the target host:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在目标主机上运行`ifconfig`来查看我们的网络信息：
- en: '![Figure 9.37 – Pulling network information from the target host'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.37 – 从目标主机获取网络信息'
- en: '](img/Figure_9.37_B15630.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.37_B15630.jpg)'
- en: Figure 9.37 – Pulling network information from the target host
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.37 – 从目标主机获取网络信息
- en: As you can see, we have found the internal network on our `eth0` interface!
    While we won't be doing any pivoting here, it is important to understand that
    pivoting from host to host is something that is extremely dangerous – dangerous
    for the system. Hackers that can pivot inside a network undetected typically never
    get caught and can stay within the network for a long time. It is important to
    have logging and monitoring solutions in place to ensure that attackers are not
    able to move about the network.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在`eth0`接口上找到了内部网络！虽然我们不会在这里进行任何枢纽转移，但重要的是要理解，从一个主机到另一个主机的枢纽转移是非常危险的
    – 对系统来说是危险的。能够在网络内部进行枢纽转移而不被发现的黑客通常永远不会被抓住，并且可以在网络内部停留很长时间。重要的是要有日志记录和监控解决方案，以确保攻击者无法在网络中移动。
- en: Next, we are going to use a module with our current **Meterpreter** session.
    The module we are going to use will steal the SSH key for us and essentially allow
    us persistent access to the system.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在当前的**Meterpreter**会话中使用一个模块。我们将要使用的模块将为我们窃取SSH密钥，并基本上允许我们持久地访问系统。
- en: 'Let''s go ahead and back out of our current session by typing `background`.
    Next, load and run the following module:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续退出当前会话，输入`background`。接下来，加载并运行以下模块：
- en: '[PRE19]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will give the following output:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 9.38 – Obtaining an SSH public key'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.38 – 获取SSH公钥'
- en: '](img/Figure_9.38_B15630.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.38_B15630.jpg)'
- en: Figure 9.38 – Obtaining an SSH public key
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.38 – 获取SSH公钥
- en: 'Now what we can do is use this for persistence! Copy the stolen **SSH key**
    over to your local Kali machine. Then, save the file and change the permission:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以利用这一点来实现持久性！将窃取的**SSH密钥**复制到您的本地Kali机器上。然后，保存文件并更改权限：
- en: '[PRE20]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Great, now that the permissions are all set, we can move on to tunneling into
    our hacked target:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在权限都设置好了，我们可以继续进入我们的被黑客攻击的目标：
- en: '[PRE21]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will give the following output:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 9.39 – SSH into host target as root'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.39 – 以root身份SSH进入目标主机'
- en: '](img/Figure_9.39_B15630.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.39_B15630.jpg)'
- en: Figure 9.39 – SSH into host target as root
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.39 – 以root身份SSH进入目标主机
- en: Now for something that is fairly dangerous if it isn't caught – let's change
    the password to something that we can remember and that will deny the client access
    to the system!
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一件事情，如果不被发现，会相当危险 – 让我们将密码更改为我们可以记住的内容，并且会拒绝客户端访问系统！
- en: '[PRE22]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see an output as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![Figure 9.40 – Changing the password for the root account'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.40 – 更改root账户的密码'
- en: '](img/Figure_9.40_B15630.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.40_B15630.jpg)'
- en: Figure 9.40 – Changing the password for the root account
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.40 – 更改root账户的密码
- en: Now, we have a password we can use that is unknown to the target user. Now that
    we have changed the password to the root account, they won't have root-level access
    to it – meaning we have complete and total control of the host.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个密码可以使用，目标用户不知道。现在我们已经将密码更改为root账户，他们将无法以root级别访问它 – 这意味着我们完全控制了主机。
- en: Before we close up this pentest, we are going to take a look at the dangers
    of having publicly accessible EC2 instances that are also part of an internal
    network. In this case, the internal/private network to our exploit host is `172.31.7.0/24`.
    We were able to gather this information using the `ifconfig` command. Please refer
    to *Figure 9.37* for an illustration.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束这次渗透测试之前，我们将看一下具有公共访问权限的EC2实例也是内部网络的一部分的危险。在这种情况下，我们的利用主机到内部/私有网络的IP是`172.31.7.0/24`。我们可以使用`ifconfig`命令收集这些信息。请参考*图9.37*进行说明。
- en: To successfully discover any hosts on the system, we are going to need to install
    Nmap on the exploited `vsftpd` server. Installing and deploying **Nmap** will
    allow us to scan the internal network for any online hosts – or in our case, "targets"
    – that we can use to exploit even further.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功发现系统上的任何主机，我们需要在被利用的`vsftpd`服务器上安装Nmap。安装和部署**Nmap**将允许我们扫描内部网络，查找任何在线主机
    – 或者在我们的情况下，可以用来进一步利用的“目标”。
- en: 'Next, we will run the following command on the exploit machine to install Nmap:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在利用机器上运行以下命令来安装Nmap：
- en: '[PRE23]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now we can scan the inside of the network to see whether there are other hosts
    up!
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以扫描网络内部，看看是否有其他主机在线！
- en: '[PRE24]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will give us the following output:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 9.41 – Scanning the newly discovered internal host'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.41 – 扫描新发现的内部主机'
- en: '](img/Figure_9.41_B15630.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.41_B15630.jpg)'
- en: Figure 9.41 – Scanning the newly discovered internal host
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.41 – 扫描新发现的内部主机
- en: 'Looks like we found ourselves another host that could become another exploited
    target. Let''s do a version scan on the host to see what we can discover on the
    host:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们找到了另一个可能成为另一个被攻击目标的主机。让我们对主机进行版本扫描，看看我们可以在主机上发现什么：
- en: '[PRE25]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will see the following output:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![Figure 9.42 – Scanning the newly discovered internal host for ports and services'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.42 – 扫描新发现的内部主机的端口和服务'
- en: '](img/Figure_9.42_B15630.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.42_B15630.jpg)'
- en: Figure 9.42 – Scanning the newly discovered internal host for ports and services
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.42 – 扫描新发现的内部主机的端口和服务
- en: From here, we could pivot over to the discovered host if we want; however, we
    won't worry about that right now. For now, we have enough information to let the
    client know the overall risk to their security posture. Let's go ahead and move
    forward with discussing what is needed to report what we have found during this
    test.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以转向我们发现的主机，但是现在我们不需要担心这个问题。现在，我们已经有足够的信息让客户了解他们的安全状况的整体风险。让我们继续讨论在这次测试中发现的问题需要报告需要做些什么。
- en: Reporting the vulnerabilities
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告漏洞
- en: This test had us test an application that had some serious vulnerabilities and
    also led us to seeing other hosts within the internal network. Being able to pivot
    to other hosts inside the network is extremely dangerous because it lets us see
    systems that you don't typically see. Additionally, depending on the environment,
    we might find data that is extremely sensitive, such as social security numbers,
    credit card numbers, and health care information.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试让我们测试了一个应用程序，该应用程序存在一些严重的漏洞，还让我们看到了内部网络中的其他主机。能够转向网络内的其他主机是非常危险的，因为它让我们看到了通常看不到的系统。此外，根据环境的不同，我们可能会发现一些非常敏感的数据，比如社会安全号码、信用卡号码和医疗保健信息。
- en: Important note
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If sensitive information is ever discovered during a pentest, the pentest must
    stop all operations until the issue revolving around the sensitive information
    is corrected.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在渗透测试期间发现了敏感信息，渗透测试必须停止所有操作，直到围绕敏感信息的问题得到纠正。
- en: 'Now let''s discuss how we would present a statement to our target client on
    the environment that we just discovered and what we would need to do in order
    to work with the client to help them correct the issues:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论如何向我们的目标客户提出关于我们刚刚发现的环境的声明以及我们需要与客户合作以帮助他们纠正问题的内容：
- en: '"During the pentest, we found a vulnerable file transfer application hosted
    on a server that was available to the public. The vulnerable application, VSFTPD
    2.3.4, was discovered without any patches or updates. Once our pentester discovered
    the application, they were able to exploit that application located on the public
    EC2 instance using a pentesting software called Metasploit. This software allowed
    our pentester to exploit the application and get access to the private internal
    network and discover other hosts.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '"在渗透测试期间，我们发现了一个易受攻击的文件传输应用程序，该应用程序托管在对公众开放的服务器上。发现了易受攻击的应用程序VSFTPD 2.3.4，没有任何补丁或更新。一旦我们的渗透测试人员发现了该应用程序，他们就能够利用Metasploit这个渗透测试软件攻击位于公共EC2实例上的应用程序。该软件允许我们的渗透测试人员利用该应用程序并访问私人内部网络并发现其他主机。'
- en: It's recommended that the application is updated as soon as possible as the
    application is easily exploitable and can be seen by anyone. Additionally, ensure
    that the network is segmented correctly and that only authorized hosts can communicate
    with each other."
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 建议尽快更新该应用程序，因为该应用程序很容易受到攻击，并且任何人都可以看到。此外，请确保网络正确分割，并且只有授权的主机可以相互通信。"
- en: This statement, again, stays away from using heavy technical terms that may
    confuse the client. It mentions that the pentester was able to easily exploit
    that application and see the internal network. It also mentions how serious this
    issue is because we can exploit it via a **public DNS** name.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这份声明再次避免使用可能会让客户困惑的专业术语。它提到渗透测试人员能够轻松地利用该应用程序并查看内部网络。它还提到了这个问题有多严重，因为我们可以通过**公共DNS**名称来利用它。
- en: We have successfully run two different pentests that attacked applications within
    AWS and showed some of the real issues that come with lazy administration and
    a lack of patching. We also took a quick view of what can occur if we do not properly
    secure other instances within our private networks and discussed what could possibly
    occur if an attacker were to gain access.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功运行了两次不同的渗透测试，攻击了AWS内的应用程序，并展示了懒惰管理和缺乏修补所带来的一些真正问题。我们还快速查看了如果我们没有正确保护私人网络中的其他实例可能会发生什么，并讨论了如果攻击者获得访问权限可能会发生什么。
- en: Now, let's move on to something a little different – we are going to be utilizing
    functional testing to discover resources within our AWS environment.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向一些不同的事情——我们将利用功能测试来发现我们AWS环境中的资源。
- en: Exploring AWS Metasploit modules
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索AWS Metasploit模块
- en: Up until now, we have been using Metasploit to target hosts that fall within
    the scope of a pentest. Now, let's start to look at some of the AWS modules that
    we can use to enumerate and possibly attack AWS. For our purposes, let's say we
    were able to get credentials from the client. This will be part of a functional
    test. We want to see what we can leverage using the credentials.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用Metasploit来攻击渗透测试范围内的主机。现在，让我们开始查看一些AWS模块，以枚举并可能攻击AWS。对于我们的目的，假设我们能够从客户那里获得凭据。这将是功能测试的一部分。我们想看看我们可以利用这些凭据来做些什么。
- en: To get started, let's spin up the vulnerable `vsftpd` instance that we attacked
    earlier and the Kali instance in the **Pentest Playground** VPC.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们启动我们之前攻击过的易受攻击的`vsftpd`实例和**Pentest Playground** VPC中的Kali实例。
- en: Now, we are going to do something a little different. This is a combination
    of a functional test and a black-box test. We will have stolen credentials but
    have no clue about the environment – so, we need to see whether we can find anything
    good!
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要做一些不同的事情。这是功能测试和黑盒测试的结合。我们已经窃取了凭据，但对环境一无所知——因此，我们需要看看我们能否找到任何有用的东西！
- en: Stealing user credentials
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窃取用户凭据
- en: The first exercise we are going to go through is going to involve stealing credentials
    that belong to other AWS user accounts. These are credentials that allow you to
    access the AWS environment and access resources such as **S3 buckets** and **Lambda**.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要进行的第一个练习将涉及窃取属于其他AWS用户帐户的凭据。这些凭据允许您访问AWS环境并访问**S3存储桶**和**Lambda**等资源。
- en: This exercise will involve more of a functional testing environment and is geared
    toward seeing how many accounts we can view. We are not going to worry about using
    the accounts found because they are part of the same environment that we are already
    part of.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习将涉及更多的功能测试环境，并旨在查看我们可以查看多少个账户。我们不会担心使用找到的账户，因为它们是我们已经参与的同一环境的一部分。
- en: 'To get things started, let''s start up **Metasploit** in our AWS Kali Linux
    instance. Once you have Metasploit up and running, use the following module:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的AWS Kali Linux实例中启动**Metasploit**。一旦您启动并运行了Metasploit，使用以下模块：
- en: '[PRE26]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now that we have our module loaded, it's time to configure it with our access
    key to our AWS account. Please look back at [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Exploiting S3 Buckets*, to review how to obtain your credentials for your AWS
    environment. Once you have your AWS credentials, set the **access key ID** and
    **secret access key** in the **Metasploit** module to fit your account.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们加载了模块，是时候用我们的AWS账户访问密钥来配置它了。请回顾一下[*第4章*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)，*利用S3存储桶*，以了解如何获取您AWS环境的凭据。一旦您获得了AWS凭据，将**访问密钥ID**和**秘密访问密钥**设置到**Metasploit**模块中以适应您的账户。
- en: 'Once you have those configured, execute the module by using the `run` command:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好后，使用`run`命令执行模块：
- en: '![Figure 9.43 – Stealing accounts'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.43 – 盗取账户'
- en: '](img/Figure_9.43_B15630.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.43_B15630.jpg)'
- en: Figure 9.43 – Stealing accounts
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.43 – 盗取账户
- en: Now we have lots more users! You can use these credentials to access other accounts
    and potentially scale out the environment to further your attack. While we won't
    worry too much about that, it is good to know that as this compromised user, we
    can now see other accounts without accessing the AWS console. Now, let's use the
    EC2 Metasploit module to help us discover other potential EC2 instances that are
    running.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了更多的用户！您可以使用这些凭据访问其他账户，并可能扩展环境以进一步进行攻击。虽然我们不会太担心这一点，但知道作为这个受损用户，我们现在可以在不访问AWS控制台的情况下看到其他账户是很好的。现在，让我们使用EC2
    Metasploit模块来帮助我们发现正在运行的其他潜在EC2实例。
- en: Discovering EC2 instances in our unknown environment
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们未知的环境中发现EC2实例
- en: Imagine that some malicious actor has gained access to your environment but
    doesn't know where to start attacking. Now imagine that malicious hacker being
    able to scan and discover various instances within your environment. That's what
    this next exercise will help us understand – how an attacker can find EC2 instances
    within your environment within minutes!
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一些恶意行为者已经进入了您的环境，但不知道从哪里开始攻击。现在想象一下，恶意黑客能够扫描和发现您环境中的各种实例。下一个练习将帮助我们理解 -
    攻击者如何在几分钟内找到您环境中的EC2实例！
- en: 'For this exercise, we are going to use a Metasploit module that is going to
    enumerate all the EC2 instances in the environment. We will need to make sure
    that our `VSFTPD 2-3-4-Final` instance is used to show proof of concept in the
    exercise:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用一个Metasploit模块来枚举环境中的所有EC2实例。我们需要确保我们的`VSFTPD 2-3-4-Final`实例被用来在练习中展示概念的证明：
- en: 'To start, use Metasploit in your AWS Kali instance and use the following module:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在您的AWS Kali实例中使用Metasploit，并使用以下模块：
- en: '[PRE27]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once you have the module loaded, you will need to configure it with the **access
    keys** to our AWS environment:![Figure 9.44 – Configuring the module with credentials
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模块后，您需要使用**访问密钥**配置到我们的AWS环境中：![图9.44 – 配置带有凭据的模块
- en: '](img/Figure_9.44_B15630.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.44_B15630.jpg)'
- en: Figure 9.44 – Configuring the module with credentials
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.44 – 配置带有凭据的模块
- en: 'Once you have it configured, go ahead and use the `run` command to execute
    the exploit:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好后，使用`run`命令执行利用：
- en: '![Figure 9.45 – Discovering a new host and the private network'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.45 – 发现新主机和私有网络'
- en: '](img/Figure_9.45_B15630.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.45_B15630.jpg)'
- en: Figure 9.45 – Discovering a new host and the private network
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.45 – 发现新主机和私有网络
- en: You'll get quite a bit – check out the instances that are running! As you can
    see, we have a public IP and a private IP of the instance. As we saw in the *Targeting
    vulnerable service applications* section of the chapter, finding a weak host such
    as `VSFTPD 2-3-4-Final` can lead to some extremely impactful situations that could
    lead to a total system compromise. An attacker could use this information to exploit
    the weak service and compromise the internal AWS network.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到很多信息 - 查看正在运行的实例！正如我们在本章的*针对易受攻击的服务应用*部分所看到的，找到一个弱主机，比如`VSFTPD 2-3-4-Final`，可能会导致一些极具影响力的情况，可能导致整个系统被攻破。攻击者可以利用这些信息来利用弱服务并
    compromise 内部AWS网络。
- en: Now that we have had some fun with some unfamiliar Metasploit modules, let's
    take a look at one more module that will enumerate a service we are more familiar
    with. Remember back in [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Exploiting S3 Buckets*, how we enumerated S3 buckets? Now we are going to do
    the exact same thing, only we will be using Metasploit.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经玩了一些不熟悉的Metasploit模块，让我们再看看一个模块，它将枚举我们更熟悉的服务。还记得[*第4章*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)中，*利用S3存储桶*，我们是如何枚举S3存储桶的吗？现在我们要做的事情完全一样，只是我们将使用Metasploit。
- en: Enumerating S3 buckets with Metasploit
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Metasploit枚举S3存储桶
- en: We will now begin to take one last look at our AWS environment with Metasploit.
    We are going to use the account keys to quickly enumerate some buckets that are
    in the AWS environment. This won't access any content in the buckets, but it will
    let us know what buckets we can see.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将最后一次使用Metasploit查看我们的AWS环境。我们将使用账户密钥快速枚举一些在AWS环境中的存储桶。这不会访问存储桶中的任何内容，但它会让我们知道我们能看到哪些存储桶。
- en: 'To get started, use the following module within Metasploit:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请使用Metasploit中的以下模块：
- en: '[PRE28]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once that''s loaded, move forward with configuring the module with our AWS
    credentials and use the `run` command to execute the module:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 加载完成后，继续配置模块与我们的AWS凭据，并使用`run`命令执行模块：
- en: '![Figure 9.46 – Using Metasploit to gather S3 buckets'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.46 - 使用Metasploit收集S3存储桶'
- en: '](img/Figure_9.46_B15630.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.46_B15630.jpg)'
- en: Figure 9.46 – Using Metasploit to gather S3 buckets
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.46 - 使用Metasploit收集S3存储桶
- en: We successfully enumerated our `packtawspentesting` bucket! We can now move
    on to exploiting the bucket and exfiltrating data from the S3 resource. Refer
    to [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting
    S3 Buckets*, if you would like to refresh your memory on how to exploit S3 buckets.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功枚举了我们的`packtawspentesting`存储桶！现在我们可以继续利用存储桶并从S3资源中外泄数据。如果您想要回顾如何利用S3存储桶，请参考[*第4章*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)，*利用S3存储桶*。
- en: We are now heading toward the end of this chapter. Great job working through
    all the exercises and getting a real feel for what pentesting AWS can really feel
    like! We did quite a bit in this chapter, and have done in the book so far. We
    are now going to move forward into the next section of the book, where we will
    discuss the lessons learned and how we can pentest better. However, before we
    do that, let's summarize all that we have learned!
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在即将结束本章。通过完成所有练习并真正感受到渗透测试AWS的感觉，你做得很棒！在本章中我们做了很多，在整本书中也是如此。现在我们将继续进入书的下一部分，在那里我们将讨论所学到的经验教训以及我们如何进行更好的渗透测试。然而，在我们这样做之前，让我们总结一下我们所学到的一切！
- en: Summary
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a deeper look at how we can use Metasploit to perform
    a couple of lifelike pentesting scenarios that helped give us a better understanding
    of how real pentesting occurs with AWS. We also looked at some of the modules
    used in AWS that allow us to execute functional testing within our scoped environment
    and gather information that allows us to further our attacks.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入研究了如何使用Metasploit执行一些逼真的渗透测试场景，这有助于我们更好地理解AWS中真实的渗透测试是如何进行的。我们还研究了一些在AWS中使用的模块，这些模块允许我们在我们的范围环境内执行功能测试并收集信息，从而使我们进一步加强攻击。
- en: Next, we will begin to look at what happens after we complete a pentest. It
    is important to understand the concepts and processes and what to do once a pentest
    is completed and how we can use that post-pentest time to help secure clients.
    We will also start discussing further how we prep for a pentest and the steps
    needed to complete a successful pentest in AWS.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始研究在完成渗透测试后会发生什么。重要的是要理解概念和流程，以及在完成渗透测试后该做什么，以及我们如何利用渗透测试后的时间来帮助客户加强安全。我们还将开始进一步讨论如何为渗透测试做准备，以及在AWS中完成成功的渗透测试所需的步骤。
- en: Further reading
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'More about using Metasploit: [https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf](https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf)'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用Metasploit的更多信息：[https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf](https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf)
- en: 'Amazon Lightsail: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Lightsail：[https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)
