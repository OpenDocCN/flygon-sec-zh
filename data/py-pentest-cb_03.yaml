- en: Web Scraping with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行Web抓取
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Downloading web pages with Python scripts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python脚本下载网页
- en: Changing the user agent
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改用户代理
- en: Downloading files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载文件
- en: Using a regular expression to get the information from the downloaded web pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式从下载的网页中获取信息
- en: Requesting and downloading dynamic website pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和下载动态网站页面
- en: Dynamic GET requests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态GET请求
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web scraping is the process of automating the extraction of data from the web
    into a format so that you can easily analyze or make use of it. The `urllib` Python
    module helps you to download data from web servers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web抓取是自动从Web中提取数据并以便于您轻松分析或利用的格式的过程。`urllib` Python模块帮助您从Web服务器下载数据。
- en: Download web pages with Python scripts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python脚本下载网页
- en: To download web pages from the web server, the `urllib` module, which is part
    of the standard Python library, can be used `urllib` includes functions for retrieving
    data from URLs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Web服务器下载网页，可以使用标准Python库的一部分的`urllib`模块。`urllib`包括用于从URL检索数据的函数。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To learn the basics, we could use the Python interactive terminal. Type `python`
    in your Terminal window and press *Enter*. This will open up the Python (Python
    2.x) interactive terminal.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解基础知识，我们可以使用Python交互式终端。在终端窗口中输入`python`并按*Enter*。这将打开Python（Python 2.x）交互式终端。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: There are some differences in commands for doing this in Python 2.x and Python
    3.x, mainly with the `print` statements. So please note the difference in the
    syntax. This will be helpful in our upcoming recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2.x和Python 3.x中执行此操作的命令存在一些差异，主要是`print`语句。因此，请注意语法上的差异。这将有助于我们即将介绍的配方。
- en: With Python 2
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python 2
- en: 'First, import the required module, `urllib`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入所需的模块`urllib`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the `urlopen` method, you can download the web page:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`urlopen`方法，您可以下载网页：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can read the file like a returned object with the `read` method:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`read`方法像返回对象一样读取文件：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Close the object when it''s done:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后关闭对象：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we can print the HTML, which is in a string format:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以打印HTML，它是以字符串格式存在的：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is very easy to update the program to write the contents of the source string
    to a local file on your computer:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新程序以将源字符串的内容写入计算机上的本地文件非常容易：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With Python 3
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python 3
- en: 'In Python 3 both `urllib` and `urllib2` are part of the `urllib` module, so
    there is some difference in using `urllib`. Also, the `urllib` package contains
    the following modules:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，`urllib`和`urllib2`都是`urllib`模块的一部分，因此在使用`urllib`时存在一些差异。此外，`urllib`包含以下模块：
- en: '`urllib.request`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.request`'
- en: '`urllib.error`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.error`'
- en: '`urllib.parse`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.parse`'
- en: '`urllib.robotparser`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.robotparser`'
- en: 'The `urllib.request`module is used for opening and fetching URLs with Python
    3:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`urllib.request`模块用于在Python 3中打开和获取URL：'
- en: 'First import the `urllib.request` module from `urllib` packages:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从`urllib`包中导入`urllib.request`模块：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Get the web page with the `urlopen` method:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`urlopen`方法获取网页：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Read the object with the `read` method:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read`方法读取对象：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Close the object:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭对象：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print the source:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印源码：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can write the contents of the source string to a local file on your computer
    as follows. Make sure that the output file is in binary mode:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将源字符串的内容写入计算机上的本地文件，如下所示。确保输出文件处于二进制模式：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Python 2 modules `urllib` and `urllib2` help to do URL-request-related stuff,
    but both have different functionalities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2模块`urllib`和`urllib2`帮助执行与URL请求相关的操作，但两者具有不同的功能。
- en: '`urllib` provides the `urlencode` method, which is useful in generating `GET`
    requests. However, `urllib2` doesn''t support the `urlencode` method. Also, `urllib2`
    can accept the request object and modify the headers for a URL request, but `urllib`
    can only accept the URL and is not capable of modifying the headers in it.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`urllib`提供了`urlencode`方法，用于生成`GET`请求。但是，`urllib2`不支持`urlencode`方法。此外，`urllib2`可以接受请求对象并修改URL请求的标头，但`urllib`只能接受URL，并且无法修改其中的标头。'
- en: Changing the user agent
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改用户代理
- en: Many websites use a user agent string to identify the browser and serve it accordingly.
    As we are using `urllib` to access the website, it won't recognize this user agent
    and may behave in strange ways or fail. So, in this case, we could specify the
    user agent for our requests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站使用用户代理字符串来识别浏览器并相应地提供服务。由于我们使用`urllib`访问网站，它不会识别此用户代理并可能以奇怪的方式行事或失败。因此，在这种情况下，我们可以为我们的请求指定用户代理。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We use custom user agent string in the request as following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在请求中使用自定义用户代理字符串如下：
- en: 'First, import the required modules:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入所需的模块：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then define the user agent we plan to specify for the request:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后定义我们计划为请求指定的用户代理：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set up the headers for the request:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为请求设置标头：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the request as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建请求如下：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Request the web page with `urlopen`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`urlopen`请求网页：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Downloading files
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: We can make use of the `requests` Python module to download files. The `requests`
    module is a **simple and easy-to-use** HTTP library in Python that has various
    applications. Also, it helps establish the seamless interaction with the web services.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用`requests` Python模块下载文件。`requests`模块是Python中一个**简单易用**的HTTP库，具有各种应用。此外，它有助于与Web服务建立无缝的交互。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'First of all, you have to install the `requests` library. This can be done
    using `pip` by typing the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须安装`requests`库。可以通过输入以下命令使用`pip`来完成：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s try downloading a simple image file with the `requests` module. Open
    Python 2:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`requests`模块下载一个简单的图像文件。打开Python 2：
- en: 'As usual, import the `requests` library first:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，首先导入`requests`库：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create an HTTP response object by passing a URL to the `get` method:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将URL传递给`get`方法创建HTTP响应对象：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now send the HTTP request to the server and save it to a file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将HTTP请求发送到服务器并将其保存到文件中：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If it's a large file, the `response.``content` will be a large string and won't
    be able to save all the data in a single string. Here, we use the `iter_content`
    method to load the data in chunks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是一个大文件，`response.``content`将是一个大字符串，无法将所有数据保存在一个字符串中。在这里，我们使用`iter_content`方法以块的方式加载数据。
- en: 'Here, we can create an HTTP response object as a `stream`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以创建一个HTTP响应对象作为`stream`：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, send the request and save the file with the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，发送请求并使用以下命令保存文件：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will work in Python 3\. Also, make sure you install the required libraries
    in the Python 3 environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Python 3中起作用。还要确保在Python 3环境中安装所需的库。
- en: Using a regular expression to get the information from the downloaded web pages
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正则表达式从下载的网页中获取信息
- en: The **regular expression** (**re**) module helps to find specific patterns of
    text from the downloaded web page. Regular expressions can be used to parse data
    from the web pages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**正则表达式**（**re**）模块有助于从下载的网页中找到特定的文本模式。正则表达式可用于解析网页中的数据。'
- en: For instance, we can try to download all images in a web page with the help
    of the regular expression module.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以尝试使用正则表达式模块下载网页中的所有图像。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this, we can write a Python script that can download all JPG images in
    a web page:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以编写一个Python脚本，可以下载网页中的所有JPG图像：
- en: Create a file named `download_image.py` in your working directory.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录中创建一个名为`download_image.py`的文件。
- en: Open this file in a text editor. You could use sublime text3.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开此文件。您可以使用sublime text3。
- en: 'As usual, import the required modules:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，导入所需的模块：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Download the web page as we did in the previous recipe:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像在上一个配方中那样下载网页：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, iterate each line in the downloaded web page, search for image URLs, and
    download them:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，迭代下载的网页中的每一行，搜索图像URL，并下载它们：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first *for loop* iterates through the lines in the downloaded web page.
    The second *for loop* searches each line for the image URLs with the regular expression
    pattern.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个*for循环*迭代下载的网页中的行。第二个*for循环*使用正则表达式模式搜索每一行的图像URL。
- en: If the pattern is found, the filename of the image is extracted with the `urlsplit()`
    method in the `urlparse` module. Then, we download the image and save it to the
    local system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到模式，则使用`urlparse`模块中的`urlsplit()`方法提取图像的文件名。然后，我们下载图像并将其保存到本地系统。
- en: 'The same script can be rewritten to Python 3 with minimal changes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的脚本可以以最小的更改重写为Python 3：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In Python 3, the request and `urlparse` modules are combined with `urllib` as
    `urllib.request` and `urllib.parse`. With regular expression patterns, we could
    parse a lot of useful information for a web page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，请求和`urlparse`模块与`urllib`组合为`urllib.request`和`urllib.parse`。使用正则表达式模式，我们可以解析网页的许多有用信息。
- en: You could learn more about the regular expression module at [https://docs.python.org/3.7/library/re.html](https://docs.python.org/3.7/library/re.html).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.python.org/3.7/library/re.html](https://docs.python.org/3.7/library/re.html)了解更多关于正则表达式模块的信息。
- en: Requesting and downloading dynamic website pages
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求和下载动态网站页面
- en: In case of websites having forms or receiving user inputs, we have to submit
    a `GET` request or a `POST` request. Now let's try creating `GET` requests and
    post request with Python. The query string is the method for adding key-value
    pairs to a URL.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有表单或接收用户输入的网站，我们必须提交`GET`请求或`POST`请求。现在让我们尝试使用Python创建`GET`请求和`POST`请求。查询字符串是向URL添加键值对的方法。
- en: Escaping invalid characters
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转义无效字符
- en: In the previous recipe, what will happen if we remove the try catch block in
    the last step?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，如果我们在最后一步中删除try catch块，会发生什么？
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The script will fail after a few requests due to the error in the URL format.
    Some extra characters appeared in the URL and this failed the `urllib` request.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于URL格式错误，脚本将在几次请求后失败。URL中出现了一些额外的字符，这导致了`urllib`请求失败。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: It's impossible to remember which characters are invalid and manually escape
    them with percent signs, but the built-in Python module `urllib.parse` has the
    required methods to solve this.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能记住哪些字符是无效的，并手动用百分号转义它们，但内置的Python模块`urllib.parse`具有解决此问题所需的方法。
- en: 'Now we can try fixing this by escaping/URL encoding the request. Rewrite the
    script as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试通过转义/URL编码请求来修复这个问题。将脚本重写如下：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Dynamic GET requests
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态GET请求
- en: Now we know that Python can programmatically download a website as long as we
    have the URL. If we have to download multiple pages that only differ in the query
    string, then we can write a script to do this without repeatedly rerunning the
    script, and instead download everything we need in one run.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道，只要有URL，Python就可以以编程方式下载网站。如果我们必须下载多个页面，这些页面只有查询字符串不同，那么我们可以编写一个脚本来做到这一点，而不是反复运行脚本，而是在一次运行中下载我们需要的所有内容。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Check out this URL-- [https://www.packtpub.com/all?search=&offset=12&rows=&sort=](https://www.packtpub.com/all?search=&offset=12&rows=&sort=).
    Here, the query string variable that defines the page number (*offset**)* is multiples
    of 12:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此URL- [https://www.packtpub.com/all?search=&offset=12&rows=&sort=](https://www.packtpub.com/all?search=&offset=12&rows=&sort=)。在这里，定义页面号（*offset**）的查询字符串变量是12的倍数：
- en: 'To download all the images in all of these pages, we can rewrite the previous
    recipe as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载所有这些页面中的所有图像，我们可以将前一个配方重写如下：
- en: 'Import the required modules:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的模块：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define the URL and query string:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义URL和查询字符串：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Iterate the offset through multiples of 12:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过12的倍数迭代偏移量：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
