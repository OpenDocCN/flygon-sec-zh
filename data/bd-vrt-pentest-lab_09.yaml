- en: Chapter 9. Assessment of Web Servers and Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。评估Web服务器和Web应用程序
- en: 'In this chapter, you will learn the techniques of assessing the web servers
    and web applications that are a part of the vast majority of the environments
    we may encounter. We will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习评估我们可能遇到的绝大多数环境中的Web服务器和Web应用程序的技术。我们将讨论以下主题：
- en: Analyzing the OWASP Top Ten attacks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析OWASP十大攻击
- en: Identifying web application firewalls
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别Web应用程序防火墙
- en: Penetrating web application firewalls
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透Web应用程序防火墙
- en: Tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: This chapter will provide us with information on one of the most popular attack
    vectors and the attack vector that is virtually accessible on any environment.
    Virtually all organizations will require some form of online presence. Therefore,
    it is a good bet we will have a web server and probably some web applications
    that we can use to attempt to compromise a client system and/or network.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供有关最受欢迎的攻击向量之一的信息，这种攻击向量几乎可以在任何环境中访问。几乎所有组织都需要一定形式的在线存在。因此，我们很可能会有一个Web服务器，可能还有一些Web应用程序，我们可以尝试利用它们来破坏客户系统和/或网络。
- en: Analyzing the OWASP Top Ten attacks
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析OWASP十大攻击
- en: The **Open Web Application Security Project** (**OWASP**) group is one of the
    best resources we can use for gathering information on not only the different
    types of attacks but also the ways to defend from them and secure coding guidance.
    As we are in our testing mode, we will concentrate on the attacks. An excellent
    reference for this is the OWASP Top Ten attacks. You can download the latest version
    at [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 开放式网络应用安全项目（OWASP）组是我们可以利用的最佳资源之一，不仅可以收集有关不同类型的攻击信息，还可以了解防御这些攻击和安全编码指南的方法。在测试模式下，我们将集中关注攻击。关于这一点的一个很好的参考是OWASP十大攻击。您可以在[https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)下载最新版本。
- en: The OWASP group also has an excellent tutorial called WebGoat. You can find
    more information about the tutorial at [https://www.owasp.org/index.php/OWASP/Training/OWASP_WebGoat_Project](https://www.owasp.org/index.php/OWASP/Training/OWASP_WebGoat_Project).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP组还有一个名为WebGoat的优秀教程。您可以在[https://www.owasp.org/index.php/OWASP/Training/OWASP_WebGoat_Project](https://www.owasp.org/index.php/OWASP/Training/OWASP_WebGoat_Project)找到有关教程的更多信息。
- en: An advantage of selecting the OWASP Broken Web Application virtual machine is
    the tools that come with it. Once you have started the OWASP virtual machine,
    you will have an address assigned for the interface that we need to connect to.
    For this example in the book, the interface has been assigned the IP address of
    10.2.0.132, so all of the examples will be using this address.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 选择OWASP Broken Web Application虚拟机的一个优势是附带的工具。一旦启动了OWASP虚拟机，将为我们需要连接的接口分配一个地址。在本书的示例中，接口被分配了IP地址10.2.0.132，因此所有示例将使用此地址。
- en: Once the machine has booted, we will access it from a web browser. So, we open
    the browser of our choice and enter `http://10.1.0.132` to bring up the home page
    for the machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器启动，我们将从Web浏览器访问它。因此，我们打开我们选择的浏览器，并输入`http://10.1.0.132`以打开机器的主页。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will need a VMnet2 switch connected to your host machine to be able to access
    the virtual machine from a browser on the host. If you use a virtual machine,
    then it is not required as long as you are on the VMnet2 switch.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个连接到主机的VMnet2交换机，才能从主机上的浏览器访问虚拟机。如果使用虚拟机，则只要在VMnet2交换机上就可以了。
- en: '![Analyzing the OWASP Top Ten attacks](img/477-1_09-1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![分析OWASP十大攻击](img/477-1_09-1.jpg)'
- en: The page that is displayed once the user has logged in
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录后显示的页面
- en: We are now ready to look at specific attacks using the capabilities contained
    within this project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用此项目中包含的功能来查看特定的攻击。
- en: Injection flaws
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注入漏洞
- en: Injection flaws has been the number one attack for numerous versions of the
    OWASP Top Ten, and it continues to be in the lead. The most popular type of injection
    is the infamous SQL injection. Despite warning developers and providing numerous
    resources so that they can work at designing secure applications, we continue
    to see that this attack is still successful. With injection attacks, this is only
    one of the many methods. We can perform HTML, XML, and LDAP injections. The main
    component of all these attacks is getting the applications to execute something
    that is not intended, or getting access to data without authorization.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注入漏洞已经成为OWASP十大攻击的多个版本中的头号攻击，并且仍然保持领先地位。最流行的注入类型是臭名昭著的SQL注入。尽管我们警告开发人员并提供了许多资源，以便他们能够设计安全的应用程序，我们仍然看到这种攻击仍然成功。在注入攻击中，这只是众多方法中的一个。我们可以进行HTML、XML和LDAP注入。所有这些攻击的主要组成部分都是让应用程序执行意外的操作，或者在未经授权的情况下访问数据。
- en: 'We will use the tool WebGoat to see how this is done. On the OWASP Broken Web
    Application homepage, click on **OWASP WebGoat** to bring up the login page. In
    the login page, enter the username as `guest` and the password as `guest` to enter
    into the tutorial. An example of the front page of the tutorial is shown in the
    following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用WebGoat工具来了解这是如何完成的。在OWASP Broken Web Application首页，单击**OWASP WebGoat**以打开登录页面。在登录页面中，输入用户名`guest`和密码`guest`以进入教程。教程首页的示例如下截图所示：
- en: '![Injection flaws](img/477-1_09-2.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![注入漏洞](img/477-1_09-2.jpg)'
- en: 'Click on **Start WebGoat** to start the tool. This will bring you to the interface
    of the available training lessons contained within the tool. As you can see, there
    are a significant number of lessons available and as such, it would be beneficial
    to spend time working through these lessons. As we are discussing injection flaws,
    you will see an item for it on the left-hand side of the menu. Click on this and
    expand the different lessons within the topic. An example is shown in the following
    screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Start WebGoat**来启动工具。这将带你进入工具内包含的可用培训课程的界面。你可以看到有大量的可用课程，因此，花时间学习这些课程将是有益的。由于我们正在讨论注入缺陷，你会在菜单的左侧看到相关内容。点击这个并展开该主题下的不同课程。一个例子如下截图所示：
- en: '![Injection flaws](img/477-1_09-3.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Injection flaws](img/477-1_09-3.jpg)'
- en: Different lessons within the topic (the cropped text is not important)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 主题下的不同课程（裁剪的文本不重要）
- en: 'As the previous screenshot shows, there are a variety of flaws we can work
    with, and the predominant ones are to do with the SQL injection. We will look
    at the fifth one on the list, so click on **String SQL Injection** to bring up
    the lesson''s first page with the description. An example of this is shown in
    the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们可以处理各种各样的缺陷，主要的是与SQL注入有关的。我们将查看列表中的第五个，所以点击**String SQL Injection**来打开课程的第一页并查看描述。一个例子如下截图所示：
- en: '![Injection flaws](img/477-1_09-4.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Injection flaws](img/477-1_09-4.jpg)'
- en: 'As the previous screenshot shows, and as you will see while reviewing the tutorial,
    there are **Hints** as well as **Solution Videos** that you can refer to for help
    completing lessons. Many of you reading this will probably know that the simplest
    way to test for an SQL injection is to enter a single quote (`''`) character and
    see whether we make it past the frontend to the backend database that will produce
    the error message. We will try that now. Enter a single quote character as the
    name and then click on **Go!**. This will submit it to the application. An example
    of the result is shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，并且在查看教程时你会看到，有**提示**和**解决方案视频**可以帮助你完成课程。你们中的许多人可能知道，测试SQL注入最简单的方法是输入一个单引号（`'`）字符，看看我们是否能通过前端到后端数据库并产生错误消息。我们现在尝试一下。输入一个单引号字符作为名称，然后点击**Go!**。这将提交给应用程序。结果的例子如下截图所示：
- en: '![Injection flaws](img/477-1_09-5.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Injection flaws](img/477-1_09-5.jpg)'
- en: 'So, what does the result in the previous screenshot show us? It shows us that
    we now have a proof that the character we entered made it through the frontend
    application because it was placed into a query! If the frontend would have caught
    it, then it would not have become a part of a query. The error we see is because
    this is not a valid SQL query. So now it is a matter of entering the string that
    will evaluate to true. The most common string we use with SQL injection attacks
    is `'' OR 1=1 --` to dump the contents of the database when the data input is
    not properly sanitized. The resulting output that is returned when we use this
    common attack string is shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，前面截图中的结果告诉我们什么？它告诉我们，我们现在有证据表明我们输入的字符通过了前端应用程序，因为它被放入了一个查询中！如果前端捕捉到它，那么它就不会成为查询的一部分。我们看到的错误是因为这不是一个有效的SQL查询。现在的问题是输入一个会评估为真的字符串。我们在SQL注入攻击中最常用的字符串是`'
    OR 1=1 --`，当数据输入没有得到适当的净化时，可以倾倒数据库的内容。当我们使用这个常见的攻击字符串时返回的结果如下截图所示：
- en: '![Injection flaws](img/477-1_09-6.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Injection flaws](img/477-1_09-6.jpg)'
- en: As the previous screenshot shows, we have been successful and we have dumped
    the entire contents of the database. The output also informs us that the lesson
    has switched to a parameterized query for us to try it again. You can attempt
    this, but we will let you know ahead of time that once the query is switched to
    the parameter-based condition, the attack will no longer work. There are numerous
    SQL injection lessons here and you are encouraged to explore them. We will move
    on to the next item of attacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们已经成功地倾倒了整个数据库的内容。输出还告诉我们，课程已经切换到了一个参数化查询，让我们再试一次。你可以尝试这个，但我们提前告诉你，一旦查询切换到基于参数的条件，攻击将不再起作用。这里有很多SQL注入的课程，鼓励你去探索。我们将继续下一个攻击项目。
- en: Broken authentication and session management
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破损的身份验证和会话管理
- en: 'When an application is designed, it is imperative that the designer protects
    the tokens and session keys used for authentication. Unfortunately, this is an
    area that is often neglected or implemented poorly from a security standpoint
    and as such, provides us with an excellent vector for attack. This attack usually
    involves some form of capturing of an authentication token and then cracking the
    token or using the token to assume someone''s identity. Within our WebGoat tool,
    we have two sections for learning about these attacks, and they are authentication
    flaws and session management flaws. We will look at the authentication flaws.
    In the WebGoat tutorial, on the left-hand side of the screen, navigate to **Authentication
    Flaws** | **Basic Authentication** to bring up the lesson. An example is shown
    in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序被设计时，设计者必须保护用于身份验证的令牌和会话密钥。不幸的是，这个领域经常被忽视或者从安全的角度实施得很差，因此，为我们提供了一个很好的攻击向量。这种攻击通常涉及捕获身份验证令牌的某种形式，然后破解令牌或使用令牌来假扮某人的身份。在我们的WebGoat工具中，我们有两个部分来学习这些攻击，它们是身份验证缺陷和会话管理缺陷。我们将看看身份验证缺陷。在WebGoat教程中，屏幕的左侧，导航到**Authentication
    Flaws** | **Basic Authentication**来打开课程。一个例子如下截图所示：
- en: '![Broken authentication and session management](img/477-1_09-7.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Broken authentication and session management](img/477-1_09-7.jpg)'
- en: As you read through the information for the lesson, it is apparent that we need
    to intercept the traffic from the application and the client to see how it is
    coded. The most common way of doing this is to use a proxy, and there are a number
    of them that you can use. We will use a simple one, which is a plugin for Firefox,
    **Tamper Data**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您阅读课程信息时，显然我们需要拦截应用程序和客户端的流量，以查看其编码方式。最常见的方法是使用代理，有许多代理可供选择。我们将使用一个简单的插件，它是Firefox的插件**Tamper
    Data**。
- en: 'Once you have added the plugin into your browser, we are ready to capture the
    traffic from the server. In your Firefox browser, navigate to **Tools** | **Tamper
    Data** to bring up the tool. An example is shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将插件添加到浏览器中，我们就准备好从服务器捕获流量了。在您的Firefox浏览器中，导航到**工具** | **Tamper Data**以打开工具。示例如下图所示：
- en: '![Broken authentication and session management](img/477-1_09_8.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![破损的身份验证和会话管理](img/477-1_09_8.jpg)'
- en: 'To start capturing the data with the proxy, click on **Start Tamper**. The
    next thing you will do is return to the WebGoat lesson and click on the **Submit**
    button to send the query to the application. You will get a message when the request
    is received by the tool, and if you get more than one, then make sure that the
    one you select to tamper with has the URL of the OWASP virtual machine. An example
    of the request needed is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用代理捕获数据，请点击**开始Tamper**。接下来要做的是返回WebGoat课程并点击**提交**按钮将查询发送到应用程序。当工具接收到请求时，您将收到一条消息，如果收到多条消息，请确保您选择要篡改的消息具有OWASP虚拟机的URL。所需请求的示例如下图所示：
- en: '![Broken authentication and session management](img/477-1_09_9.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![破损的身份验证和会话管理](img/477-1_09_9.jpg)'
- en: As you review the information from the intercept, you will see that we have
    **Cookie** and **Authorization** fields, which we will concentrate on. We will
    also focus on the value in the **Authorization** field. This is Base64 encoded,
    and there are many ways you can decode the value. A website for this can be found
    at [http://base64-decode.com](http://base64-decode.com), which will take the values
    and decode it for you. The decoded value comes out as `guest:guest`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您审查拦截的信息时，您会看到我们有**Cookie**和**Authorization**字段，我们将集中在这两个字段上。我们还将专注于**Authorization**字段中的值。这是Base64编码的，有许多方法可以解码该值。可以在[http://base64-decode.com](http://base64-decode.com)找到一个网站，它将获取值并为您解码。解码后的值为`guest:guest`。
- en: 'We now have the information we need to finish the lesson; at least it appears
    that way. We will return to the WebGoat lesson and enter the name of the authentication
    field, which is **Authorization**, and the value of the encoded string as `guest:guest`,
    and click on **Submit** to load the values into the application. An example of
    the expected result is shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了完成课程所需的信息；至少看起来是这样。我们将返回WebGoat课程并输入身份验证字段的名称，即**Authorization**，以及编码字符串的值为`guest:guest`，然后点击**提交**将值加载到应用程序中。预期结果的示例如下图所示：
- en: '![Broken authentication and session management](img/477-1_09_10.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![破损的身份验证和会话管理](img/477-1_09_10.jpg)'
- en: 'As the previous screenshot shows, we have been successful. However, we have
    more to do; this is not just a one-step lesson. We now need to try and get the
    application to accept our login as `basic:basic`. To accomplish this, we need
    to corrupt the data and force the application to authenticate after the corruption.
    When you follow the instructions of the lesson, you see that it says to select
    the **Basic Authentication** lesson to continue on with the challenge. When you
    do this, you will be presented with the page in **Tamper Data**: click on **Tamper**
    to open the page so you can modify it. The key here is that we need to corrupt
    both of the fields, **Cookie** and **Authorization**, by deleting a character
    from each. Once the application detects the corruption, it will prompt for the
    credentials again, and when it does, enter `basic` as the username and `basic`
    as the password, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的屏幕截图所示，我们已经成功。但我们还有更多工作要做；这不仅仅是一个步骤的课程。现在我们需要尝试让应用程序接受我们的登录为`basic:basic`。为了实现这一点，我们需要破坏数据并强制应用程序在破坏后进行身份验证。当您按照课程的指示操作时，您会看到它说要选择**基本身份验证**课程以继续挑战。当您这样做时，您将看到**Tamper
    Data**中的页面：点击**Tamper**以打开页面以便修改。关键在于我们需要破坏**Cookie**和**Authorization**这两个字段，删除每个字段中的一个字符。一旦应用程序检测到破坏，它将提示再次输入凭据，当它这样做时，输入`basic`作为用户名和`basic`作为密码，如下图所示：
- en: '![Broken authentication and session management](img/477-1_09_11.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![破损的身份验证和会话管理](img/477-1_09_11.jpg)'
- en: Once you have entered the credentials, click on **OK** to submit the data to
    the application. Examine the intercepted query and you will notice that your password
    is now `basic` and it is Base64 encoded. We have now authenticated `basic` as
    the user, but we are not done yet.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输入凭据后，点击**确定**将数据提交给应用程序。检查拦截的查询，您会注意到您的密码现在是`basic`，并且它是Base64编码的。我们现在已经将`basic`作为用户进行了身份验证，但我们还没有完成。
- en: 'We have to convince the WebGoat tool that we are the user `basic`, we have
    done this on the server side. So, we now need to convince the WebGoat tool. The
    easiest way to do this is to corrupt **JSESSIONID** you intercept, as shown in
    the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须说服WebGoat工具我们是用户`basic`，我们已经在服务器端完成了这一点。所以，现在我们需要说服WebGoat工具。最简单的方法是破坏**JSESSIONID**，如下图所示：
- en: '![Broken authentication and session management](img/477-1_09_12.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![破损的身份验证和会话管理](img/477-1_09_12.jpg)'
- en: 'As the previous screenshot shows, you need to enter `novalidsession` to corrupt
    the session and force WebGoat to request the credentials again, and this will
    authenticate you as the user `basic`. Once this has occurred, you click on the
    **Basic Authentication** link to complete the lesson. An example of this is shown
    in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，你需要输入`novalidsession`来破坏会话并强制WebGoat再次请求凭据，这将验证你为用户`basic`。一旦发生这种情况，你点击**基本身份验证**链接完成课程。示例如下截图：
- en: '![Broken authentication and session management](img/477-1_09_13.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![破碎的身份验证和会话管理](img/477-1_09_13.jpg)'
- en: Screen after clicking on the Basic Authentication link (the cropped text is
    not important)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击基本身份验证链接后的屏幕（裁剪的文本不重要）
- en: This is the process with web application testing; there are so many different
    ways to write the code, and you have to analyze and interpret what the code is
    doing. In this lesson, we had to first intercept the query to identify what the
    names were of the parameters that we needed to interact with. Once we had done
    this, we had to corrupt the server side first and then the client side to successfully
    complete the requirements of the lesson. There are numerous lessons here, and
    the more you practice them, the better you will get at recognizing characteristics
    of authentication and session management.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Web应用程序测试的过程；有很多不同的编写代码的方式，你必须分析和解释代码在做什么。在这节课中，我们首先必须拦截查询，以确定我们需要与之交互的参数的名称。一旦我们做到了这一点，我们必须先破坏服务器端，然后再破坏客户端，才能成功完成课程的要求。这里有很多课程，你练习得越多，就越能够识别认证和会话管理的特征。
- en: Cross-Site Scripting
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站脚本攻击
- en: Another attack that has stood the test of time is the **Cross-Site Scripting**
    (**XSS**) attack. This is the process where an application takes untrusted data
    and sends it to a web browser without proper validation. There are two types of
    validation, reflected and stored, which have been used very successfully.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经受住时间考验的攻击是**跨站脚本攻击**（**XSS**）。这是一个应用程序接受不受信任的数据并在没有适当验证的情况下发送到Web浏览器的过程。有两种验证类型，反射和存储，它们已经被非常成功地使用。
- en: 'Before we use the WebGoat tool, we will look at another method that we can
    use in the OWASP machine:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用WebGoat工具之前，我们将看一下我们可以在OWASP机器上使用的另一种方法：
- en: At the main page of the machine, scroll down until you see **Applications for
    Testing Tools**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在机器的主页面上，向下滚动直到看到**测试工具的应用程序**。
- en: Click on **OWASP-ZAP-WAVE** to open the applications we want to test.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OWASP-ZAP-WAVE**打开我们想要测试的应用程序。
- en: Navigate to **Active vulnerabilities** | **Cross Site Scripting** | **Simple
    XSS** in a form parameter to bring up a form for us to test XSS.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**活动漏洞** | **跨站脚本攻击** | **简单XSS**，在表单参数中打开一个表单供我们测试XSS。
- en: In the form field, enter `<script>alert("Hello")</script>` and click on **Submit**
    to test for XSS. An example is shown in the following screenshot:![Cross-Site
    Scripting](img/477-1_09_14.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单字段中输入`<script>alert("Hello")</script>`并点击**提交**进行XSS测试。示例如下截图：![跨站脚本攻击](img/477-1_09_14.jpg)
- en: 'Now that we have successfully conducted XSS, we will turn our attention to
    the lessons in the WebGoat tool:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功进行了XSS攻击，我们将把注意力转向WebGoat工具中的课程：
- en: Log in to the WebGoat tutorial.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到WebGoat教程。
- en: Once you have started the program, click on the **Cross Site Scripting** link
    and expand it. An example of the lesson we are going to work on is shown in the
    following screenshot:![Cross-Site Scripting](img/477-1_09_15.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你开始了程序，点击**跨站脚本攻击**链接并展开它。我们将要学习的课程的示例如下截图：![跨站脚本攻击](img/477-1_09_15.jpg)
- en: We will start with **Stage 1**. Click on it and read the directions for the
    lesson. As the directions state, we are going to execute a XSS attack on Jerry.
    To do this, we have to store the information into the record for Tom so that when
    Jerry accesses it, he will fall into the XSS trap.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从**阶段1**开始。点击它并阅读课程的指示。正如指示所述，我们将对Jerry执行XSS攻击。为了做到这一点，我们必须将信息存储到Tom的记录中，这样当Jerry访问它时，他就会陷入XSS陷阱。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We show only pop-up boxes to make the point that there are many more things
    you can do once you have discovered the weakness. There are a number of Java calls
    that can be used once you find the vector.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只显示弹出框，以说明一旦发现弱点，你可以做更多的事情。一旦找到向量，就可以使用许多Java调用。
- en: 'Follow the directions and log in to the application as Tom:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按照指示以Tom的身份登录应用程序：
- en: Once you have logged in as Tom, you navigate to **View Profile** | **Edit Profile**
    to access Tom's profile.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你以Tom的身份登录，你导航到**查看个人资料** | **编辑个人资料**来访问Tom的个人资料。
- en: Once you have accessed it, you will enter the script tag into the address field.
    In the **Street** field, enter `<script>alert("Hello")</script>` and then click
    on **Upload Profile** to upload the profile.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你访问了它，你将在地址字段中输入脚本标记。在**街道**字段中，输入`<script>alert("Hello")</script>`，然后点击**上传个人资料**上传个人资料。
- en: Now you will log out and log back in as Jerry.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你将注销并以Jerry的身份重新登录。
- en: Once you have logged in as Jerry, you will navigate to **Tom Cat** | **View
    Profile** and see if you are successful. An example is shown in the following
    screenshot:![Cross-Site Scripting](img/477-1_09_16.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你以Jerry的身份登录，你将导航到**Tom Cat** | **查看个人资料**，看看你是否成功。示例如下截图：![跨站脚本攻击](img/477-1_09_16.jpg)
- en: 'We will not execute **Stage 2** as it will change the code to prevent the attack
    and we are on the offense here, so we are not looking to do any defense. We will
    next perform the **Stage 3** lesson using the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会执行**阶段2**，因为它会改变代码以防止攻击，而我们是进攻方，所以我们不打算进行任何防御。接下来，我们将使用以下步骤执行**阶段3**课程：
- en: 'Click on **Stage 3: Stored XSS Revisited** to bring up the login page, then
    start the next stage by reading the directions.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**阶段3：存储型XSS再审**以打开登录页面，然后通过阅读指示开始下一个阶段。
- en: The first thing we will do is log in as `David`, then navigate to the **Bruce**
    | **View Profile** record, and verify that `David` is a victim of XSS. An example
    is shown in the following screenshot:![Cross-Site Scripting](img/477-1_09_17.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先以`David`的身份登录，然后导航到**Bruce** | **View Profile**记录，并验证`David`是否是XSS的受害者。示例如下截图所示：![跨站脚本攻击](img/477-1_09_17.jpg)
- en: As the previous screenshot shows, rather than just a pop-up window, we have
    now accessed the cookie by using `document.cookie` inside the alert box.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们不仅仅是弹出一个窗口，而是通过在警报框内使用`document.cookie`来访问了cookie。
- en: We are now ready to move on to **Stage 5**. Again, we will not perform **Stage
    4** because it is a matter of putting in a defense, and we are not looking for
    this now. You may, however, work with the other stages. Just remember that you
    will need to use the developer package.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备进入**第5阶段**。再次强调，我们不会执行**第4阶段**，因为这涉及到防御措施的设置，而我们现在不打算这样做。但是，你可以与其他阶段一起工作。只需记住你需要使用开发者包。
- en: 'In **Stage 5**, we are going to work with the reflected type of XSS as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第5阶段**，我们将按照以下方式使用反射型XSS：
- en: 'Click on **Stage 5: Reflected XSS** to open the lesson and read the directions
    that are required for this stage. As the directions state, you have to embed a
    XSS string in the search function of the application.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击**Stage 5: Reflected XSS**以打开课程并阅读此阶段所需的说明。根据说明，你必须在应用程序的搜索功能中嵌入一个XSS字符串。'
- en: The first thing we need to do is log in as one of the users. As we have the
    user `Larry` listed in the application already, we will use this user.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是以其中一个用户的身份登录。由于我们已经在应用程序中列出了用户`Larry`，所以我们将使用这个用户。
- en: Log in as the user `Larry` and click on **SearchStaff** to open the search portion
    of the application code.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以用户`Larry`的身份登录，然后点击**SearchStaff**以打开应用程序代码的搜索部分。
- en: In the **Name** field, enter `<script>alert("You are Hacked")</script>` and
    then click on the **FindProfile** button to run the script. An example of the
    result is shown in the following screenshot:![Cross-Site Scripting](img/477-1_09_18.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Name**字段中输入`<script>alert("You are Hacked")</script>`，然后点击**FindProfile**按钮来运行脚本。结果的示例如下截图所示：![跨站脚本攻击](img/477-1_09_18.jpg)
- en: That's it! You have conducted a number of different XSS attacks, and they really
    are relatively easy to prevent. Yet, we continue to see these in web applications,
    and they will remain as a viable attack vector for some time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你已经进行了许多不同的XSS攻击，而且它们确实相对容易防止。然而，我们继续在Web应用程序中看到这些问题，并且它们将在一段时间内仍然作为一种可行的攻击向量存在。
- en: Insecure direct object references
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: With a direct object reference, a developer references a file or some other
    object without using any form of authentication or access control check. When
    we discover this, we can manipulate the data and access it without providing any
    authorization.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直接对象引用时，开发人员引用文件或其他对象而不使用任何形式的身份验证或访问控制检查。当我们发现这一点时，我们可以操纵数据并在不提供任何授权的情况下访问它。
- en: 'We will once again refer to the WebGoat tool to work with this attack against
    an application. The area within OWASP WebGoat that you want to focus on is **Access
    Control Flaws**. Once you have expanded it, you will see there are a number of
    lessons for us to work with. The list of lessons is shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次参考WebGoat工具来对抗应用程序的这种攻击。在OWASP WebGoat中，你要关注的区域是**访问控制漏洞**。一旦你扩展了它，你会看到有许多课程供我们使用。课程列表如下截图所示：
- en: '![Insecure direct object references](img/477-1_09_19.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![不安全的直接对象引用](img/477-1_09_19.jpg)'
- en: 'The lesson we want to open is the second one on the list. Click on **Bypass
    a Path Based Access Control Scheme** and read the directions for the lesson. The
    key to any path-based control protection is that we can break out of the intended
    directory and access a file that is located in another area. The first page of
    the application of the lesson is shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要打开的课程是列表中的第二个。点击**Bypass a Path Based Access Control Scheme**并阅读课程的说明。任何基于路径的控制保护的关键在于我们可以打破预期目录并访问位于另一个区域的文件。该课程应用程序的第一页如下截图所示：
- en: '![Insecure direct object references](img/477-1_09_20.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![不安全的直接对象引用](img/477-1_09_20.jpg)'
- en: 'So, the challenge is to modify the path and access a file outside of the current
    directory; in this case, the file is **tomcat-users.xml**. How do you think we
    can do this? We need to intercept something, and to do that, we have to use a
    proxy to capture the query. Earlier, we used a tool called Tamper Data and we
    will use it again. First, let''s start a workspace to record the information that
    we have so far. We will use Notepad, but you can use any program of your choice.
    We need to copy and paste the current directory path and the path to the file
    that we want to access in this document. An example of our workspace is shown
    in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，挑战在于修改路径并访问当前目录之外的文件；在这种情况下，文件是**tomcat-users.xml**。你认为我们可以如何做到这一点？我们需要拦截某些东西，为此，我们必须使用代理来捕获查询。之前，我们使用了一个名为Tamper
    Data的工具，我们将再次使用它。首先，让我们启动一个工作空间来记录我们目前所拥有的信息。我们将使用记事本，但你可以使用任何你选择的程序。我们需要将当前目录路径和我们想要访问的文件的路径复制并粘贴到这个文档中。我们的工作空间示例如下截图所示：
- en: '![Insecure direct object references](img/477-1_09_21.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![不安全的直接对象引用](img/477-1_09_21.jpg)'
- en: 'As we look at the information in our workspace, we see that there are several
    directories in the path of the current directory before we get to the `tomcat`
    directory. However, there is one concern. The current directory we are given has
    a `tomcat6` directory but our target file directory does not have this. It does
    say in the instructions that the path might be different and in this case, it
    is. We need to make the `tomcat` directory match the current directory as `tomcat6`.
    The key to breaking the access control is to break out of the directory using
    the `../` directory traversal technique. As there are four directories before
    the `tomcat6` folder, we need to enter that many directory traversals as a minimum.
    Consequently, we can always enter more to be safe. An example of the workspace
    for the string to attempt to bypass access control is shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看工作空间中的信息时，我们发现在当前目录的路径中有几个目录，然后才能到达`tomcat`目录。然而，有一个问题。我们得到的当前目录有一个`tomcat6`目录，但我们的目标文件目录没有这个。说明中确实说过路径可能会不同，在这种情况下就是这样。我们需要使`tomcat`目录与当前目录匹配为`tomcat6`。突破访问控制的关键是使用`../`目录遍历技术来跳出目录。由于在`tomcat6`文件夹之前有四个目录，我们至少需要输入这么多目录遍历。因此，我们可以始终输入更多以确保安全。尝试绕过访问控制的字符串的工作空间示例如下截图所示：
- en: '![Insecure direct object references](img/477-1_09_22.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![不安全的直接对象引用](img/477-1_09_22.jpg)'
- en: 'The following process is to intercept the query with the Tamper Data tool and
    then paste our path into the field that contains the file we are trying to upload
    from the application:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是使用Tamper Data工具拦截查询，然后将我们的路径粘贴到包含我们正在尝试从应用程序上传的文件的字段中：
- en: We will navigate to **OffByOne.html** | **View File** and intercept the query.
    An example of the query that is intercepted is shown in the following screenshot:![Insecure
    direct object references](img/477-1_09_23.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将导航到**OffByOne.html** | **查看文件**并拦截查询。拦截到的查询示例如下截图所示：![不安全的直接对象引用](img/477-1_09_23.jpg)
- en: The intercepted query shows that we are looking at the **File** field and this
    is where we need to place our prepared string.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的查询显示我们正在查看**文件**字段，这就是我们需要放置我们准备好的字符串的地方。
- en: Paste the string in the field and click on **OK** to send the string into the
    application. Return to the WebGoat lesson and review what happened. An example
    is shown in the following screenshot:![Insecure direct object references](img/477-1_09_24.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符串粘贴到字段中，然后单击**确定**将字符串发送到应用程序。返回到WebGoat课程并查看发生了什么。示例如下截图所示：![不安全的直接对象引用](img/477-1_09_24.jpg)
- en: As the previous screenshot shows, we were not successful in our first try, but
    the error message tells us that we seem to be within one directory of our path.
    We will add another directory traversal to our string and see what happens. An
    example of the results after one more directory traversal was added is shown in
    the following screenshot:![Insecure direct object references](img/477-1_09_25.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们第一次尝试并不成功，但错误消息告诉我们，我们似乎在我们的路径中只有一个目录。我们将在我们的字符串中再添加一个目录遍历，看看会发生什么。添加了一个目录遍历后的结果示例如下截图所示：![不安全的直接对象引用](img/477-1_09_25.jpg)
- en: We are finally successful and have broken the path-based access control. This
    can be a time-consuming process, which is why we typically use tools with web
    application testing to get us to identify areas to investigate further.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最终我们成功地突破了基于路径的访问控制。这可能是一个耗时的过程，这就是为什么我们通常使用Web应用程序测试工具来帮助我们识别需要进一步调查的领域。
- en: Security misconfiguration
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全配置错误
- en: 'A common method of attack is to look for default configurations or names that
    are set up by the administrator or just left in their install state. With web
    applications, there is almost always some form of a configuration access that
    can be used to configure or administer a site. We have a lesson for this in the
    WebGoat tool. Navigate to **Insecure Configuration** | **Forced Browsing** to
    open the lesson. As you can read in the directions, there is normally some form
    of configuration that is accessible to perform maintenance. We can try some of
    the different file names, but as the OWASP machine is a Linux machine, the most
    common configuration file for these machines is the `conf` file. So, in the browser,
    change the URL to `http://10.2.0.132/WebGoat/conf` to see whether there is a configuration
    file located here. An example of the results of this is shown in the following
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的攻击方法是寻找管理员设置的默认配置或名称，或者只是保留在安装状态下。对于Web应用程序，几乎总会有某种形式的配置访问，可用于配置或管理站点。我们在WebGoat工具中有一个关于这个的课程。导航到**不安全配置**
    | **强制浏览**以打开课程。正如您在说明中所读到的，通常会有一些可访问的配置来执行维护。我们可以尝试一些不同的文件名，但由于OWASP机器是一台Linux机器，这些机器最常见的配置文件是`conf`文件。因此，在浏览器中，将URL更改为`http://10.2.0.132/WebGoat/conf`，以查看是否有配置文件位于此处。这个结果的示例如下截图所示：
- en: '![Security misconfiguration](img/477-1_09_26.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![安全配置错误](img/477-1_09_26.jpg)'
- en: That's it! We have found a configuration access that should not be allowed to
    the public, but it is. This is a common mistake that websites have.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们找到了一个不应该向公众开放的配置访问，但它却是。这是网站经常犯的一个错误。
- en: Sensitive data exposure
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏感数据暴露
- en: The majority of web applications do not properly protect the data that they
    either work with or store. It is common to find data either unprotected with encryption
    or poorly encoded. Furthermore, when the application is working with the data,
    it is exposed in many cases.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序没有正确保护它们要么处理的数据，要么存储的数据。发现数据未经加密或编码不当是很常见的。此外，当应用程序处理数据时，在许多情况下会暴露数据。
- en: 'Within the WebGoat tool, there is a lesson that we can use to become more familiar
    with the different encoding techniques. Navigate to **Insecure Storage** | **Encoding
    Basics** to open the lesson; an example is shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在WebGoat工具中，有一个课程可以让我们更加熟悉不同的编码技术。导航到**不安全存储** | **编码基础**以打开课程；以下是一个示例截图：
- en: '![Sensitive data exposure](img/477-1_09_27.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![敏感数据暴露](img/477-1_09_27.jpg)'
- en: The lesson is pretty straightforward, so we will not cover any more details
    of it here. You are encouraged to enter several strings and then review the results
    in the table provided.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个课程非常简单，所以我们不会在这里再详细介绍。鼓励您输入几个字符串，然后在提供的表格中查看结果。
- en: Missing function-level access control
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺少功能级访问控制
- en: This weakness is a result of the developer failing to verify the function-level
    access before they make the functionality visible to the **user interface** (**UI**).
    When this is discovered, you can forge requests and potentially gain access without
    proper authorization.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种弱点是由于开发人员在将功能可见于**用户界面**（**UI**）之前未验证功能级访问控制。一旦发现这一点，您就可以伪造请求并可能在没有适当授权的情况下获得访问权限。
- en: Cross-Site Request Forgery
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站请求伪造
- en: In the **Cross-Site Request Forgery** (**CSRF**) attack, we need a user to be
    logged into a site with a session established that uses a cookie. When these parameters
    are met, the attack takes the included authentication information and submits
    it to a vulnerable application. As the application has the authentication information
    stored, the request is seen as legitimate.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在**跨站请求伪造**（**CSRF**）攻击中，我们需要用户登录到一个已建立会话并使用cookie的网站。当满足这些条件时，攻击会获取包含的身份验证信息并将其提交给一个易受攻击的应用程序。由于应用程序存储了身份验证信息，因此请求被视为合法。
- en: Within the WebGoat tool, we have a number of lessons for CSRF. They are located
    in the section on Cross-Site Scripting XSS. In the WebGoat tool, navigate to **Cross-Site
    Scripting (XSS)** | **Cross Site Request Forgery** to open the lesson and review
    the directions for the lesson.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在WebGoat工具中，我们有一些关于CSRF的课程。它们位于关于跨站脚本攻击XSS的部分。在WebGoat工具中，导航到**跨站脚本攻击（XSS）**
    | **跨站请求伪造**以打开课程并查看课程说明。
- en: For this attack, we need to add a transfer function to an embedded URL to get
    the users authenticated information to be passed and then used to authenticate
    our transaction. We will append the code to the URL to transfer funds. As the
    directions state, we can copy the URL by right-clicking on the lesson title on
    the left-hand side of the page and saving it to the clipboard. We want to use
    the `<IMG>` tag to store our URL. The process would be to send an e-mail and get
    the user to click on a link while they are logged in to the application we are
    tricking to use for the transfer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种攻击，我们需要向嵌入的URL添加一个转账功能，以获取用户的身份验证信息并用于验证我们的交易。我们将在URL中附加代码来转账。按照说明，我们可以通过右键单击页面左侧的课程标题并将其保存到剪贴板来复制URL。我们想要使用`<IMG>`标签来存储我们的URL。过程是发送一封电子邮件，让用户在登录到我们欺骗使用的应用程序时点击链接进行转账。
- en: 'We need to enter information in two areas. The first is **Title** and the second
    is **Message**. Let''s do this now in the following manner:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在两个区域输入信息。第一个是**标题**，第二个是**消息**。让我们按照以下方式进行：
- en: 'Enter `CSRF-1` as the name of the title and then enter the following string
    as the message, bearing in mind that the IP address may be different in your attack.
    Enter the following as the message:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CSRF-1`输入为标题的名称，然后输入以下字符串作为消息，要注意IP地址可能在您的攻击中有所不同。输入以下内容作为消息：
- en: '[PRE0]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An example is shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例截图：
- en: '![Cross-Site Request Forgery](img/477-1_09_28.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![跨站请求伪造](img/477-1_09_28.jpg)'
- en: The CSRF screen where the code is entered (the cropped text is not important)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输入代码的CSRF屏幕（裁剪的文本不重要）
- en: Once you have verified the command, click on the **Submit** button. This will
    place your title in the application at the bottom.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认命令后，点击**提交**按钮。这将把您的标题放在应用程序的底部。
- en: Before you click on it, start your Tamper Data proxy and intercept the request.
    An example of the intercepted request is shown in the following screenshot:![Cross-Site
    Request Forgery](img/477-1_09_29.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您点击之前，启动您的Tamper Data代理并拦截请求。以下是拦截请求的示例截图：![跨站请求伪造](img/477-1_09_29.jpg)
- en: 'Once you have reviewed the information in the intercepted query, click on **OK**
    and let the query be sent to the application. If required, refresh the WebGoat
    lesson. You should now see the green checkmark that shows you were successful,
    as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在拦截的查询中查看信息后，点击**确定**，让查询发送到应用程序。如果需要，刷新WebGoat课程。您现在应该看到绿色的勾号，表示您成功了，如下面的截图所示：
- en: '![Cross-Site Request Forgery](img/477-1_09_30.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![跨站请求伪造](img/477-1_09_30.jpg)'
- en: There are several more of these lessons available for you to practice CSRF,
    and you are encouraged to work through them to perfect your skills, knowledge,
    and understanding of web application attacks.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多这样的课程可供您练习CSRF，并鼓励您通过它们来完善您的技能、知识和对Web应用程序攻击的理解。
- en: Using known vulnerable components
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用已知的易受攻击组件
- en: It is a common practice in application development to use existing libraries
    and functions to create the code, and this has been leveraged recently in attacks.
    If we can infect a library, framework, or other popular components, then every
    one of the applications that uses it will be vulnerable. This is one of the most
    effective ways to spread vulnerabilities and is something that is becoming more
    and more common, and it was added to the list of top attacks in 2013 based on
    this.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开发中，使用现有库和函数创建代码是一种常见做法，最近这种做法已被利用在攻击中。如果我们可以感染一个库、框架或其他流行组件，那么使用它的每一个应用程序都将面临漏洞。这是传播漏洞最有效的方式之一，也是越来越常见的事情，基于这一点，它在2013年被添加到顶级攻击列表中。
- en: Invalidated redirects and forwards
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无效的重定向和转发
- en: In this attack, we take advantage of the fact that many web applications will
    use redirects and forwards without proper validation, and this can result in redirection
    of traffic to malware and other malicious sites.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次攻击中，我们利用了许多Web应用程序会在没有适当验证的情况下使用重定向和转发，这可能导致流量重定向到恶意软件和其他恶意网站。
- en: Identifying web application firewalls
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别Web应用防火墙
- en: We are more than likely going to encounter a **web application firewall** (**WAF**)
    when we are testing. These are designed to identify most of the attacks we have
    covered in this chapter (well, most of the URL-based attacks). We will once again
    turn to the Kali Linux distribution to identify a WAF. You will need your Kali
    Linux machine and your WAF machine we created in [Chapter 6](ch06.html "Chapter 6. Creating
    an External Attack Architecture"), *Creating an External Attack Architecture*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行测试时，很可能会遇到**Web应用防火墙**（**WAF**）。这些旨在识别本章中大部分攻击（嗯，大部分基于URL的攻击）。我们将再次转向Kali
    Linux发行版来识别WAF。您需要您的Kali Linux机器和我们在[第6章](ch06.html "第6章。创建外部攻击架构")中创建的WAF机器，*创建外部攻击架构*。
- en: Once the machines are up and running, the first thing we will do is identify
    we have a website protected by a web application firewall. We have several methods
    to do this, each with varying success. The first method we will try is the **Nmap**
    tool.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器开始运行，我们要做的第一件事是确定我们的网站是否受到Web应用防火墙的保护。我们有几种方法可以做到这一点，每种方法的成功率都不同。我们将尝试的第一种方法是**Nmap**工具。
- en: 'In your Kali Linux machine, open a terminal window and enter `nmap –p 80 -–script
    –http-waf-detect <target IP address>`. This scripting engine will try to determine
    whether there is a web application firewall present. An example is shown in the
    following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Kali Linux机器上，打开终端窗口，输入`nmap –p 80 -–script –http-waf-detect <目标IP地址>`。这个脚本引擎将尝试确定是否存在Web应用防火墙。示例如下截图所示：
- en: '![Identifying web application firewalls](img/477-1_09_31.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![识别Web应用防火墙](img/477-1_09_31.jpg)'
- en: 'As the previous screenshot shows, the script did not detect that we are running
    the WAF, so it is not always going to work. We will next take a look at the **dotDefender**
    console and see if it detected our scan. To do this, we need to open a browser
    and enter the address to the firewall and then log in. An example is shown in
    the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，脚本没有检测到我们正在运行WAF，所以它并不总是有效。接下来，我们将查看**dotDefender**控制台，看它是否检测到我们的扫描。为此，我们需要打开浏览器，输入防火墙的地址，然后登录。示例如下截图所示：
- en: '![Identifying web application firewalls](img/477-1_09_32.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![识别Web应用防火墙](img/477-1_09_32.jpg)'
- en: 'As the previous screenshot shows, it detects the script running against it,
    but unfortunately, it does not tell us if there is a WAF running or not. So, we
    will look at another tool. In Kali, we have a tool for this. Navigate to **Applications**
    | **Kali** | **IDS/IPS Identification** | **Wafw00f**, as shown in the following
    screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，它检测到正在运行的脚本，但不幸的是，它没有告诉我们是否正在运行WAF。所以，我们将查看另一个工具。在Kali中，我们有一个用于此目的的工具。转到**应用程序**
    | **Kali** | **IDS/IPS识别** | **Wafw00f**，如下截图所示：
- en: '![Identifying web application firewalls](img/477-1_09_33.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![识别Web应用防火墙](img/477-1_09_33.jpg)'
- en: 'Once the tool is open, enter `wafw00f –v www.example.com` in the terminal window
    to run a scan against the site. We are scanning the site and comparing information
    that is received from our probing. An example of the results is shown in the following
    screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工具打开，输入`wafw00f –v www.example.com`在终端窗口中对站点进行扫描。我们正在扫描站点并比较从我们的探测中收到的信息。示例结果如下截图所示：
- en: '![Identifying web application firewalls](img/477-1_09_34updated.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![识别Web应用防火墙](img/477-1_09_34updated.jpg)'
- en: 'As the results show, the site appears to be behind a firewall. Now, we will
    use the tool to scan our dotDefender machine. We do this by changing the target
    to the IP address of our machine. An example of the results is shown in the following
    screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，该网站似乎在防火墙后面。现在，我们将使用该工具扫描我们的dotDefender机器。我们通过将目标更改为我们机器的IP地址来执行此操作。示例结果如下截图所示：
- en: '![Identifying web application firewalls](img/477-1_09_35.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![识别Web应用防火墙](img/477-1_09_35.jpg)'
- en: As the previous screenshot shows, it appears that the latest version of dotDefender
    is not detected using the wafw00f tool. This is the reality of security testing,
    once something has been out for some time, there are teams of people trying to
    figure out ways to change or at least modify the way a product reacts to a tool
    when the tool is used against it. This is why we build the lab environment and
    see what does and does not work. Sometimes, we will get lucky and there will be
    another way that we can identify the error; moreover, the error message in some
    cases can list the identity of the device. This is all a matter of trial and error.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，使用wafw00f工具似乎无法检测到最新版本的dotDefender。这就是安全测试的现实，一旦某个东西存在一段时间后，就会有一群人试图找出改变或至少修改产品对工具的反应方式的方法。这就是为什么我们建立实验环境并查看什么有效和无效的原因。有时候，我们会很幸运地找到另一种识别错误的方法；此外，在某些情况下，错误消息可以列出设备的身份。这都是试错的过程。
- en: Penetrating web application firewalls
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透Web应用防火墙
- en: As we have discussed previously, it can be a challenge to evade detection, and
    this is on these same lines as it will depend on how the administrator has configured
    the policy. There are excellent references on the Internet you can use to see
    whether your obfuscation technique will work. The free and open source WAF **ModSecurity**
    provides a site where you can test the string to see if it might be detected by
    a WAF. You will find the site at this location [http://www.modsecurity.org/demo](http://www.modsecurity.org/demo).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，规避检测可能是一个挑战，这与管理员如何配置策略有关。互联网上有很好的参考资料，您可以使用它们来查看您的混淆技术是否有效。免费开源的WAF
    **ModSecurity**提供了一个网站，您可以在该网站上测试字符串，以查看它是否可能被WAF检测到。您可以在此位置找到该网站[http://www.modsecurity.org/demo](http://www.modsecurity.org/demo)。
- en: 'Once the site has opened, you will see that there is an area to post different
    strings and see the results. Before you do this, you will also see that they have
    a list of websites that many of the commercial vendors use to demonstrate their
    tools. An example of this is shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦网站打开，您会看到有一个区域可以发布不同的字符串并查看结果。在您这样做之前，您还会看到他们列出了许多商业供应商用来展示其工具的网站。以下是此示例的屏幕截图：
- en: '![Penetrating web application firewalls](img/477-1_09_36.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![穿透Web应用程序防火墙](img/477-1_09_36.jpg)'
- en: Screen showing a list of the websites that many of the commercial vendors use
    to demonstrate their tools (the cropped text is not important)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了许多商业供应商用来展示其工具的网站列表（裁剪的文本不重要）
- en: 'Click on the **ModSecurity CRS Evasion Testing Demo** link on the page. This
    will test the string against the **Core Rule Set** signatures of the ModSecurity
    tool, and you will find the area to enter a potential obfuscated script to see
    if it is detected. Not only does it tell you if it is detected, but it also provides
    a ranking with a numerical score of the string. For our first example, we will
    try a simple one to see how the form works. In the form box, enter the classic
    SQL injection string `'' OR 1=1 –-` and click on the **Send** button and view
    the results. An example is shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 单击页面上的**ModSecurity CRS Evasion Testing Demo**链接。这将测试该字符串是否符合ModSecurity工具的**核心规则集**签名，并且您将找到输入潜在混淆脚本以查看是否被检测到的区域。它不仅告诉您是否被检测到，还为字符串提供了一个数值分数的排名。对于我们的第一个示例，我们将尝试一个简单的示例来查看表单的工作原理。在表单框中，输入经典的SQL注入字符串`'
    OR 1=1 –-`，然后单击**发送**按钮并查看结果。以下是结果的示例屏幕截图：
- en: '![Penetrating web application firewalls](img/477-1_09_37.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![穿透Web应用程序防火墙](img/477-1_09_37.jpg)'
- en: 'As the previous screenshot shows, we have been detected! Well, we would hope
    so as we used the most common and classic string to test for. We also see that
    we have a score of a 35\. We will see if we can lower the score. Enter this string:
    `1'' AND non_existant_table =''1`. An example of the result is shown in the following
    screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们已经被检测到了！嗯，我们希望如此，因为我们使用了最常见和经典的字符串进行测试。我们还看到我们得分是35。我们将看看是否可以降低得分。输入此字符串：`1'
    AND non_existant_table ='1`。以下是结果的示例屏幕截图：
- en: '![Penetrating web application firewalls](img/477-1_09_38.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![穿透Web应用程序防火墙](img/477-1_09_38.jpg)'
- en: 'Darn! We are detected again! At least there is some good news; we have lowered
    our score to a 25\. This is the process of how we try to find a string with either
    a lower score or no detection. We will try one more string for SQL, then move
    on with one string for XSS. In the payload window, enter this string: `&#49&#39&#32&#79&#82&#32&#39&#49&#39&#61&#39&#49`.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 该死！我们又被检测到了！至少有一些好消息；我们已经将得分降低到25。这就是我们尝试找到得分更低或不被检测到的字符串的过程。我们将尝试一个SQL的字符串，然后继续尝试一个XSS的字符串。在负载窗口中，输入此字符串：`&#49&#39&#32&#79&#82&#32&#39&#49&#39&#61&#39&#49`。
- en: 'An example of the result is shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果的示例，显示在下面的屏幕截图中：
- en: '![Penetrating web application firewalls](img/477-1_09_39.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![穿透Web应用程序防火墙](img/477-1_09_39.jpg)'
- en: 'We are successful! This is a string that you find in the **SQL Inject-Me**
    tool from Security Compass. You can find the tool at their website [http://www.securitycompass.com](http://www.securitycompass.com).
    We are now ready to see whether we can find a XSS string that does not get detected.
    We will save you some time and try one that we think has a pretty good chance
    of either getting a low score or not being detected. In the payload window, enter
    this string: `prompt%28%27xss%27%29`. An example is shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功了！这是您在Security Compass的**SQL Inject-Me**工具中找到的字符串。您可以在他们的网站[http://www.securitycompass.com](http://www.securitycompass.com)找到该工具。现在我们准备看看是否可以找到一个不被检测到的XSS字符串。我们将为您节省一些时间，并尝试一个我们认为有很大机会要么得到低分，要么不被检测到的字符串。在负载窗口中，输入此字符串：`prompt%28%27xss%27%29`。以下是结果的示例屏幕截图：
- en: '![Penetrating web application firewalls](img/477-1_09_40.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![穿透Web应用程序防火墙](img/477-1_09_40.jpg)'
- en: Again we are successful. So now we have a string for XSS and SQL injections
    that is not detected. Of course, the reality is that we have submitted these strings,
    so someone might do their homework, and then we will be detected by the time you
    are reading this book. If this happens, our job is to continue to work with different
    things until we find one that works. Furthermore, this just potentially gets us
    through the WAF, from there it depends on whether the application developer has
    used secure coding guidelines or best practices. Welcome to the world of professional
    security testing!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次成功了。现在我们有一个不被检测到的XSS和SQL注入字符串。当然，现实情况是我们已经提交了这些字符串，所以有人可能会做功课，然后在您阅读本书时我们将被检测到。如果发生这种情况，我们的工作就是继续尝试不同的方法，直到找到一个有效的方法。此外，这只是潜在地让我们通过WAF，接下来就取决于应用程序开发人员是否使用了安全编码准则或最佳实践。欢迎来到专业安全测试的世界！
- en: Tools
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: So far in the book, we have not specifically set a topic point on tools. We
    have, for the most part, remained process-centric and discussed some tools within
    each chapter. For web application testing, this is a different matter. As you
    have seen throughout this chapter, there are many varieties of input and ways
    to interact with web applications, and this is the challenge with this form of
    testing. Therefore, it is usually best handled with tools to get the bulk data
    and then manually go and investigate areas of interest for the bulk data. There
    are a large number of tools out there, and we will not go through them here.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们并没有专门设置关于工具的主题点。在大多数情况下，我们保持了过程中心，并在每个章节中讨论了一些工具。对于网页应用程序测试来说，情况就不同了。正如您在本章中看到的那样，有许多种输入和与网页应用程序交互的方式，这就是这种测试的挑战所在。因此，最好使用工具来获取大量数据，然后手动去调查感兴趣的领域。市面上有大量的工具，我们在这里不会逐一介绍。
- en: 'One of the tools that we like to use that has both a free version and a commercial
    version is **Burp Suite**. We like it because it allows us to do a wide variety
    of things when we are testing, and we also like the fact that the commercial version
    is a very reasonable price. You can find information about the tool at [http://www.portswigger.net](http://www.portswigger.net).
    The free version can also be found in the Kali Linux distribution. To access it,
    navigate to **Applications** | **Web Applications** | **Web Application Fuzzers**
    | **burpsuite** to open the tool. An example of the menu from the tool is shown
    in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢使用的工具之一是**Burp Suite**，它有免费版本和商业版本。我们喜欢它，因为它允许我们在测试时做各种各样的事情，而且我们也喜欢商业版本的价格非常合理。您可以在[http://www.portswigger.net](http://www.portswigger.net)找到有关该工具的信息。免费版本也可以在Kali
    Linux发行版中找到。要访问它，请导航至**应用程序** | **Web应用程序** | **Web应用程序模糊器** | **burpsuite**以打开该工具。该工具的菜单示例如下截图所示：
- en: '![Tools](img/477-1_09_41.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![工具](img/477-1_09_41.jpg)'
- en: As the previous screenshot shows, the tool has many features that can assist
    us when it comes to web application testing.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，该工具具有许多功能，可以在进行网页应用程序测试时帮助我们。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the assessment of web servers and web applications.
    We started the chapter with a discussion on the OWASP Top Ten. Following the discussion,
    we used the WebGoat tool and performed a number of lessons that show the concepts
    and techniques for web application testing.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了对Web服务器和Web应用程序的评估。我们从讨论OWASP十大漏洞开始了本章。在讨论之后，我们使用了WebGoat工具，并进行了一些课程，展示了网页应用程序测试的概念和技术。
- en: Following the work with the OWASP Top Ten, we looked at methods to identify
    a web application firewall between us and the target. We used the wafw00f tool
    to potentially detect the type of protection that is deployed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究了OWASP十大漏洞之后，我们研究了识别我们和目标之间的网页应用程序防火墙的方法。我们使用了wafw00f工具来潜在地检测已部署的保护类型。
- en: Once we had looked at how to detect a WAF, we then discussed how to penetrate
    it. We looked at methods of obfuscation we can use to try and get past the protection
    provided by the WAF. We submitted our sample strings to the ModSecurity demo site
    and we successfully evaded detection with both an SQL injection string and a XSS
    string.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们了解了如何检测WAF，我们就讨论了如何渗透它。我们研究了我们可以使用的混淆方法，以尝试绕过WAF提供的保护。我们将样本字符串提交到ModSecurity演示站点，并成功地逃避了SQL注入字符串和XSS字符串的检测。
- en: Finally, we closed the chapter with a discussion on the need for tools when
    it comes to web testing, especially web application testing.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了在进行网页测试时需要工具的必要性，特别是网页应用程序测试。
- en: This concludes the chapter. You have now practiced web application attacks and
    methods of detecting and evading a firewall.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了本章。您现在已经练习了网页应用程序攻击以及检测和规避防火墙的方法。
- en: In the next chapter, we will look at testing of flat and internal networks.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究对平面和内部网络的测试。
