- en: Chapter 4. Identifying Range Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。确定范围架构
- en: 'In this chapter, we will look at the process of creating machines to create
    our test lab architecture foundation. We will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看创建机器来构建我们的测试实验室架构基础的过程。我们将讨论以下主题：
- en: Building the machines
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建机器
- en: Selecting network connections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择网络连接
- en: Choosing range components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择范围组件
- en: This chapter will provide us with a solid foundation as we explore how to build
    environments to support the testing types that we have to perform.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供一个坚实的基础，因为我们将探讨如何构建环境来支持我们需要执行的测试类型。
- en: Building the machines
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建机器
- en: 'Now that we have planned and prepared our testing work, it is time to look
    at the building of the machines. We briefly covered this in [Chapter 3](ch03.html
    "Chapter 3. Planning a Range"), *Planning a Range*, but now we will focus on building
    an environment for our pen testing lab. There are a number of ways to build a
    testing architecture, and we will build the labs in accordance with the following
    diagram:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经规划并准备好了我们的测试工作，是时候来看看如何构建这些机器了。我们在[第3章](ch03.html "第3章。规划范围") *规划范围*中简要介绍了这一点，但现在我们将专注于为我们的渗透测试实验室构建环境。有许多构建测试架构的方法，我们将根据以下图表构建实验室：
- en: '![Building the machines](img/477-1_04_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![构建机器](img/477-1_04_01.jpg)'
- en: The previous diagram shows an architecture that provides us with multiple layers
    of defense; using this as our reference point going forward will enable us to
    carry out a wide variety of testing techniques. Furthermore, we can add machines
    and connect to the virtual switches in the architecture in the order that we need
    for our testing. The diagram provides us with the capability to emulate virtually
    any environment that you may encounter in your pen testing travels.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了一个为我们提供多层防御的架构；以此作为我们的参考点将使我们能够执行各种各样的测试技术。此外，我们可以添加机器并连接到我们测试所需的虚拟交换机中。该图表使我们能够模拟您在渗透测试中可能遇到的任何环境。
- en: Note the **Bastion Host**; this is the box that will function as our firewall
    of the architecture. We can install pretty much any software-based firewall and
    use it in the testing. An important point to note is that in most cases, the internal
    network will use **Network Address Translation** (**NAT**), and in a normal external
    testing scenario, we will not be able to route packets into the internal network.
    To do this, we would require client interaction, and this will be covered as we
    progress through the different techniques of pen testing. For now, we have the
    diagram and the information we need, so it is time to build it!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意**堡垒主机**；这是将作为我们架构防火墙的盒子。我们可以安装几乎任何基于软件的防火墙并在测试中使用。需要注意的一个重要点是，在大多数情况下，内部网络将使用**网络地址转换**（**NAT**），在正常的外部测试场景中，我们将无法将数据包路由到内部网络。要做到这一点，我们需要客户端交互，这将在我们逐步学习不同的渗透测试技术时进行讨论。现在，我们已经有了图表和所需的信息，所以是时候开始构建了！
- en: As we showed in [Chapter 3](ch03.html "Chapter 3. Planning a Range"), *Planning
    a Range*, there are a number of products we can use as our virtualization platform,
    and you are free to use any; consequently, the first stages of the lab setup may
    differ from what we show here in the book. It really does not matter which solution
    you use; once the machine is built, they all are pretty much the same when you
    boot them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ch03.html "第3章。规划范围") *规划范围*中所展示的，我们可以使用一些产品作为我们的虚拟化平台，你可以自由选择使用任何一个；因此，实验室设置的初始阶段可能与我们在书中展示的有所不同。你使用哪种解决方案并不重要；一旦机器建好，它们在启动时基本上都是一样的。
- en: For our purpose, we will use the VMware Workstation tool. We have three choices
    with the tool when it comes to creating machines. We will discuss the three choices
    in the following sections.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的目的，我们将使用VMware Workstation工具。在创建机器时，该工具有三种选择。我们将在以下部分讨论这三种选择。
- en: Building new machines
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建新机器
- en: Building new machines has been covered, and it provides us with the choice of
    booting from an ISO image as we did in [Chapter 3](ch03.html "Chapter 3. Planning
    a Range"), *Planning a Range*. Alternatively, it provides us with the choice of
    using the installation media, mounting it, and then working through the installation
    process in the same way as if you were installing the OS on a dedicated machine.
    Note the fact that the VMware Workstation tool provides us with an easy install
    wizard, and if it recognizes the OS that you are creating for the machine, then
    it will create, build, and install the OS for the most part unattended.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建新机器已经涵盖了，并且它为我们提供了从ISO映像引导的选择，就像我们在[第3章](ch03.html "第3章。规划范围") *规划范围*中所做的那样。或者，它为我们提供了使用安装媒体的选择，挂载它，然后通过与在专用机器上安装操作系统的方式进行安装过程。需要注意的是，VMware
    Workstation工具为我们提供了一个简单的安装向导，如果它识别出您为机器创建的操作系统，那么它将大部分自动创建、构建和安装操作系统。
- en: 'One word of caution: when you create the virtual machine, make sure that you
    create a machine with the version that you will need. That is, if you are using
    the latest version, which is 10 at the time of writing this book, when you create
    a machine, it will by default make it a Version 10\. If you move it to a platform
    that is prior to this version, the VM will not work. This has happened on more
    than one occasion, so ensure that you consider the environment your virtual machines
    may be used in when you are creating them.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是：在创建虚拟机时，请确保创建一个符合您需要的版本的机器。也就是说，如果您使用的是最新版本，即在撰写本书时的版本10，那么创建机器时默认会将其创建为版本10。如果将其移动到早于此版本的平台上，虚拟机将无法工作。这种情况已经发生过不止一次，因此请确保在创建虚拟机时考虑您的虚拟机可能在其中使用的环境。
- en: Conversion
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: This is another option that we briefly covered in [Chapter 2](ch02.html "Chapter 2. Choosing
    the Virtual Environment"), *Choosing the Virtual Environment*. We looked at converting
    a physical machine to a virtual one, or P2V as it is referred to; consequently,
    there is nothing new to cover here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在[第2章](ch02.html "第2章。选择虚拟环境")中简要介绍的另一个选项，*选择虚拟环境*。我们看过将物理机转换为虚拟机，或者称为P2V；因此，在这里没有新内容可覆盖。
- en: Cloning a virtual machine
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆虚拟机
- en: Until now, we have not discussed the concept of cloning our virtual machines.
    This is a valuable method to use to build our environments. It is a little bit
    more involved than the next technique we will discuss, which is snapshot. With
    cloning, we have two choices; we can create a linked clone that will be linked
    to the original machine. By selecting a linked clone, we are assuming that there
    will be access to the original machine at all times because it is required to
    start the virtual machine. An advantage of a linked clone is that it takes less
    space for storage. The other option and the one that is more common is to create
    a full clone; this is a complete copy of the original machine in its current state.
    As it is completely independent, it requires more disk space for storage.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有讨论过克隆虚拟机的概念。这是一个有价值的方法来构建我们的环境。这比我们将讨论的下一个技术——快照——更复杂。通过克隆，我们有两种选择；我们可以创建一个链接克隆，它将链接到原始机器。通过选择链接克隆，我们假设始终可以访问原始机器，因为启动虚拟机需要它。链接克隆的优势在于它占用更少的存储空间。另一个选择，也是更常见的选择，是创建完整克隆；这是原始机器在其当前状态的完全副本。由于它完全独立，因此需要更多的磁盘空间来存储。
- en: 'The advantage and power of cloning is that once we have a machine built that
    we use for our testing labs, we just clone it and make changes to the configuration
    without having to build another one. We will do this now. Start the VMware Workstation,
    and once the program opens up open a virtual machine of your choice, you can use
    the one we created in [Chapter 3](ch03.html "Chapter 3. Planning a Range"), *Planning
    a Range*, or create a new one, and navigate to **VM** | **Manage**. This will
    bring up the menu, as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆的优势和力量在于，一旦我们建立了用于测试实验室的机器，我们只需克隆它并对配置进行更改，而无需再建立另一个。我们现在就要这样做。启动VMware Workstation，一旦程序打开，打开您选择的虚拟机，您可以使用我们在[第3章](ch03.html
    "第3章。规划范围")中创建的虚拟机，或者创建一个新的虚拟机，并导航到**VM** | **管理**。这将弹出菜单，如下面的截图所示：
- en: '![Cloning a virtual machine](img/477-1_04_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![克隆虚拟机](img/477-1_04_02.jpg)'
- en: Screen showing the menu (the cropped text is not important)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 显示菜单的屏幕（裁剪的文本不重要）
- en: 'Click on **Clone** in the window that comes up and then click on **Next**.
    In the **Clone Source** selection window, accept the default setting of the current
    state in the virtual machine and click on **Next**. This will bring up the window
    to select the clone type; select **Create a full clone** and click on **Next**,
    as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 点击弹出的窗口中的**克隆**，然后点击**下一步**。在**克隆源**选择窗口中，接受虚拟机当前状态的默认设置，然后点击**下一步**。这将弹出选择克隆类型的窗口；选择**创建完整克隆**，然后点击**下一步**，如下面的截图所示：
- en: '![Cloning a virtual machine](img/477-1_04_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![克隆虚拟机](img/477-1_04_03.jpg)'
- en: In the next window, it is time to select a name for the clone and also a location
    to store it. This is another way to create the clone and then store it across
    a shared device or even to a removable drive. These are all options we might want
    to consider when creating our machine. Enter a name of your choice or accept the
    default name, and if you want to store the clone in another location, browse to
    it. Once you have entered the required information, click on **Finish**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，是时候为克隆选择一个名称和存储位置了。这是另一种创建克隆然后将其存储在共享设备甚至可移动驱动器上的方法。这些都是我们在创建机器时可能要考虑的选项。输入您选择的名称或接受默认名称，如果要将克隆存储在另一个位置，浏览到该位置。一旦输入所需信息，点击**完成**。
- en: 'If all goes well, your cloning operation should start once you click on **Finish**,
    and in a short amount of time, you should see the message that the cloning operation
    is **Done**, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，点击**完成**后，克隆操作应该开始，在短时间内，您应该看到克隆操作完成的消息，如下面的截图所示：
- en: '![Cloning a virtual machine](img/477-1_04_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![克隆虚拟机](img/477-1_04_04.jpg)'
- en: That's it! You now have a full clone of the virtual machine that will operate
    independently of the original. This is a powerful way to build our lab machines.
    It allows us to create as many machines as we need for our pen testing labs. Click
    on **Close** and your cloned virtual machine will open up in a new window. From
    this point, you can start the virtual machine or do anything you want just like
    with the original machine.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在您有了一个完整的虚拟机克隆，它将独立于原始虚拟机运行。这是构建实验室机器的强大方式。单击**关闭**，您克隆的虚拟机将在新窗口中打开。从这一点开始，您可以启动虚拟机或像原始机器一样进行任何操作。
- en: The last concept we want to talk about is snapshots. As cloning can create an
    entire machine, it is sometimes advantageous to just create a snapshot of a machine.
    A snapshot is exactly as it sounds; a snapshot of the machine at that point of
    time. We like to liberally use snapshots during development; this is in keeping
    with the concept in engineering that you always leave yourself a way back to the
    initial state. This is critical when it comes to building our machines. Before
    you write any new code, program, or anything that has a potential to cause a problem,
    ensure that you take a snapshot of the machine at its current state so that you
    can get back to a normal state if something goes wrong. This is a practice I wish
    the vendors would use with their software updates.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要谈论的最后一个概念是快照。由于克隆可以创建整个机器，有时仅创建机器的快照是有利的。快照就是它听起来的样子；在那个时间点的机器的快照。在开发过程中，我们喜欢大量使用快照；这符合工程中的概念，即您总是留下回到初始状态的方法。在构建我们的机器时，这是至关重要的。在编写任何新代码、程序或可能引起问题的任何内容之前，请确保在当前状态下对机器进行快照，以便在出现问题时返回到正常状态。这是一种做法，我希望供应商在其软件更新中使用。
- en: It is very frustrating to get a new patch, and when you install it, the message
    says that you cannot revert to the original state once the patch is installed!
    This violates all best practices of engineering and moreover, programming design!
    We always need to have a path back to the original. The process for snapshots
    is best explained with an example. One of the challenges we have when we build
    our own open sources tools is finding the right versions for all of the dependencies
    required for the software we are running. Therefore, it is imperative that we
    take snapshots before we install or update any software on a system. This will
    allow us to always return to our original state.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 得到一个新的补丁，当您安装它时，消息显示一旦安装了补丁，您将无法恢复到原始状态！这违反了所有工程最佳实践，而且，编程设计！我们总是需要有一条回到原始状态的路径。快照的过程最好通过一个例子来解释。当我们构建我们自己的开源工具时，面临的一个挑战是找到所需软件的所有依赖项的正确版本。因此，在系统上安装或更新任何软件之前，我们必须拍摄快照。这将使我们始终能够返回到原始状态。
- en: Selecting network connections
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择网络连接
- en: 'In this section, we will look at the networking choices we have when it comes
    to building our environment. It is critical that we use the networking features
    of the VMware Workstation tool and take advantage of the capabilities it provides
    for us. Open your VMware Workstation software and open a virtual machine of your
    choice. When you do this, you will see a network adapter that is a part of the
    configuration. We will look at this later. Navigate to **Edit virtual machine
    settings** | **Network Adapter**. This will bring up the configuration window
    for the adapter, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下在构建我们的环境时可以选择的网络选项。我们必须使用VMware Workstation工具的网络功能，并利用它为我们提供的功能。打开您的VMware
    Workstation软件并打开您选择的虚拟机。这样做时，您会看到一个作为配置的一部分的网络适配器。我们稍后会看到这个。导航到**编辑虚拟机设置** | **网络适配器**。这将打开适配器的配置窗口，如下面的屏幕截图所示：
- en: '![Selecting network connections](img/477-1_04_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![选择网络连接](img/477-1_04_05.jpg)'
- en: As you can see in the preceding screenshot, there are a number of settings that
    we can make on the network. What we want to do is to understand that each of these
    settings represents a switch, and when you create a network adapter with that
    setting, it is equivalent to connecting that machine to a switch. We will take
    a closer look at this once we discuss the different options and what they mean.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的屏幕截图中所看到的，我们可以在网络上进行许多设置。我们要做的是理解每个设置代表一个交换机，当您使用该设置创建网络适配器时，相当于将该机器连接到交换机。一旦我们讨论不同的选项及其含义，我们将更仔细地研究这一点。
- en: The bridged setting
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桥接设置
- en: When we configure a network adapter to use the bridged setting, it connects
    the network adapter to the actual physical network. This is the same as connecting
    a separate machine to the network. VMware indicates this as the VMware VMnet0
    interface. This can be changed, but for the most part, we do not need to do this.
    There are also a number of other settings we can use, but they are beyond the
    scope and not required for what we are building. Unless you need to access your
    virtual environment from an external machine, bridged networking is not something
    we normally will configure.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置网络适配器使用桥接设置时，它将网络适配器连接到实际物理网络。这与将单独的机器连接到网络相同。VMware将其指示为VMware VMnet0接口。这可以更改，但在大多数情况下，我们不需要这样做。还有许多其他设置可以使用，但它们超出了范围，对我们正在构建的内容并不是必需的。除非您需要从外部机器访问您的虚拟环境，否则我们通常不会配置桥接网络。
- en: 'An example of the bridged setting is shown in the next diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接设置的示例如下图所示：
- en: '![The bridged setting](img/477-1_04_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![桥接设置](img/477-1_04_06.jpg)'
- en: The bridged setting provides us with the virtual machine that has its own place
    on the network; this means it does not share the network connection with the host.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接设置为我们提供了具有自己在网络上的位置的虚拟机；这意味着它不与主机共享网络连接。
- en: Network Address Translation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络地址转换
- en: 'For the most part, NAT is the setting we will use the most. When we select
    the NAT setting, we share the host network card with the guest and do not have
    our own address but still have the capability to access the Internet. The switch
    that is reserved for NAT is VMnet8\. It is worth mentioning that when you create
    virtual machines, the default setting is NAT. As the NAT setting is a private
    network setup within the architecture, a DHCP server is provided to assign the
    addresses as required. An example of the NAT configuration is shown in the next
    diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，NAT是我们最常使用的设置。当我们选择NAT设置时，我们与客户共享主机网络卡，没有自己的地址，但仍然可以访问互联网。保留给NAT的开关是VMnet8。值得一提的是，当创建虚拟机时，默认设置是NAT。由于NAT设置是架构内的私有网络设置，提供了DHCP服务器来根据需要分配地址。NAT配置的示例如下图所示：
- en: '![Network Address Translation](img/477-1_04_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Network Address Translation](img/477-1_04_07.jpg)'
- en: In the NAT configuration, the host system has a virtual network adapter that
    is connected to the NAT network. This enables the host and virtual machines to
    communicate with each other. The process is when data is received for the VMnet8
    network, the external network identifies incoming data packets intended for each
    virtual network machine, and then it sends them to the correct destination.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在NAT配置中，主机系统有一个连接到NAT网络的虚拟网络适配器。这使得主机和虚拟机可以相互通信。当接收到VMnet8网络的数据时，外部网络会识别每个虚拟网络机器的传入数据包，并将它们发送到正确的目的地。
- en: 'While in the normal configuration, the NAT machine is not accessible from the
    external network. However, it is possible to change this and set up port forwarding
    so that the external machine can initiate connections and send traffic into the
    machine that is connected to the NAT device. For our purpose, we prefer to leave
    the default settings for NAT and not configure the port forwarding as we prefer
    to not have external machines connecting to the internal machine because this
    is how the majority of networks that we test from an external location will be
    configured. Despite the fact that we are not using this capability, it might be
    something you want to experiment with. Building virtual testing labs is all about
    experimenting and finding what works for you. Therefore, to access the port forwarding
    configuration, open VMware Workstation and navigate to **Edit** | **Virtual Network
    Editor…** | **VMnet8** | **NAT Settings…** | **Add**. This will open the port
    forwarding settings window, and there are additional settings you can customize
    here, but for the most part, the defaults work well for our purpose. An example
    of the port forwarding options is shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常配置中，NAT机器无法从外部网络访问。然而，可以改变这一点，设置端口转发，使外部机器可以发起连接并将流量发送到连接到NAT设备的机器中。对于我们的目的，我们更喜欢保留NAT的默认设置，不配置端口转发，因为我们不希望外部机器连接到内部机器，因为这是我们测试的大多数网络的配置方式。尽管我们不使用这个功能，但这可能是你想要尝试的东西。构建虚拟测试实验室就是关于实验和找到适合你的方法。因此，要访问端口转发配置，打开VMware
    Workstation，导航到**编辑** | **虚拟网络编辑器...** | **VMnet8** | **NAT设置...** | **添加**。这将打开端口转发设置窗口，这里有其他设置可以自定义，但大部分情况下，默认设置对我们的目的效果很好。端口转发选项的示例如下截图所示：
- en: '![Network Address Translation](img/477-1_04_08.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Network Address Translation](img/477-1_04_08.jpg)'
- en: One important thing to add here is the fact that with all switches you add in
    VMware, the IP address for the host will be `X.X.X.1` and the gateway will be
    `X.X.X.2`, and if you are using the DHCP server, the addresses will start at `X.X.X.100`.
    These are the default settings, but as with most things, you can modify this to
    meet the settings that you require for your environment.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要补充的一点是，无论你在VMware中添加了多少个开关，主机的IP地址都将是`X.X.X.1`，网关将是`X.X.X.2`，如果你使用DHCP服务器，地址将从`X.X.X.100`开始。这些是默认设置，但像大多数事情一样，你可以修改以满足你环境的设置要求。
- en: The host-only switch
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: The host-only switch
- en: As we mentioned in [Chapter 3](ch03.html "Chapter 3. Planning a Range"), *Planning
    a Range*, the host-only switch that is configured by default when you install
    the VMware Workstation is VMnet1\. The host-only connection means that the virtual
    machine cannot access the Internet. The switch is isolated for communication between
    the virtual machines and the host with no connection capability outside the host.
    In effect, we have an isolated network that is completely contained within the
    host. This is another great feature for us when we build our pen testing labs.
    With an isolated private network, we can force traffic to use the route that we
    want for our testing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ch03.html "第3章。规划范围")中提到的，*规划范围*，在安装VMware Workstation时默认配置的主机专用开关是VMnet1。主机专用连接意味着虚拟机无法访问互联网。该开关被隔离，用于虚拟机和主机之间的通信，没有连接到主机外部的能力。实际上，我们拥有一个完全包含在主机内的隔离网络。这对我们构建渗透测试实验室时是另一个很好的特性。通过隔离的私有网络，我们可以强制流量使用我们测试所需的路由。
- en: 'In the host-only configuration, the network connection between the virtual
    machine and the host system is provided by a virtual network adapter that is visible
    on the host OS. As with the other switches provided by the VMware workstation,
    the switch has a DHCP server associated with it that provides IP addresses for
    the machines that are connected to the network. An example of the host-only network
    configuration is shown in the following diagram:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机专用配置中，虚拟机和主机系统之间的网络连接由主机操作系统上可见的虚拟网络适配器提供。与VMware Workstation提供的其他开关一样，该开关有一个与之关联的DHCP服务器，为连接到网络的机器提供IP地址。主机专用网络配置的示例如下图所示：
- en: '![The host-only switch](img/477-1_04_09.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![The host-only switch](img/477-1_04_09.jpg)'
- en: A couple of caveats need to be mentioned here. We stated earlier that a host-only
    network is an isolated network. Well, like most things with virtualization, there
    are ways you can change this to have the isolated network not remain completely
    isolated. Again, for our purpose, this is not something we will explore, but we
    only wanted to briefly cover some of the methods of breaking or at least weakening
    the isolation. You can set up routing or a proxy to connect the network to the
    external net, and if you are using Windows Server 2003 or Windows XP, you can
    use the **Internet Connection Sharing** option to connect to an external network.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要提到一些注意事项。我们之前说过，仅主机网络是一个隔离的网络。嗯，就像虚拟化的大多数事物一样，您可以改变这一点，使得隔离的网络不再完全隔离。再次强调，出于我们的目的，这不是我们要探讨的内容，但我们只是想简要介绍一些打破或至少削弱隔离的方法。您可以设置路由或代理将网络连接到外部网络，如果您使用的是Windows
    Server 2003或Windows XP，您可以使用**Internet Connection Sharing**选项连接到外部网络。
- en: The custom settings
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义设置
- en: So far, we looked at the three switches that are included when you install the
    VMware Workstation software, and these provide us with the Bridged, NAT, and host-only
    configuration capabilities. However, building our network architecture as we have
    planned, having only these three switches limits us and does not provide us with
    what we need.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了安装VMware Workstation软件时包含的三个交换机，这些为我们提供了桥接、NAT和仅主机配置功能。然而，按照我们计划的构建网络架构，仅有这三个交换机会限制我们，并且无法提供我们所需的功能。
- en: 'It is time to put everything all together and start building our layered architecture.
    As you may recall, the architecture we displayed some time ago was at a high-level
    black box view. We now have the knowledge to present the architecture in a complete
    form. An example of this is shown in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候把所有东西都放在一起，开始构建我们的分层架构。您可能还记得，我们之前展示的架构是一个高层次的黑匣子视图。我们现在有了完整呈现架构的知识。以下图表显示了一个示例：
- en: '![The custom settings](img/477-1_04_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![自定义设置](img/477-1_04_10.jpg)'
- en: 'As the preceding diagram shows, we now have our defined switches, and this
    is the power of customization. We can build and configure these switches to our
    specifications using the techniques we have previously covered. Going forward,
    we will define the following IP addressing scheme for the switches:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图表所示，我们现在有了我们定义的交换机，这就是自定义的力量。我们可以使用我们之前介绍的技术来构建和配置这些交换机以满足我们的要求。接下来，我们将为交换机定义以下IP寻址方案：
- en: 'VMnet8: 192.168.177.0/24'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VMnet8: 192.168.177.0/24'
- en: 'VMnet1: 10.1.0.0/24'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VMnet1: 10.1.0.0/24'
- en: 'VMnet2: 10.2.0.0/24'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VMnet2: 10.2.0.0/24'
- en: 'VMnet3: 10.3.0.0/24'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VMnet3: 10.3.0.0/24'
- en: 'VMnet4: 10.4.0.0/24'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VMnet4: 10.4.0.0/24'
- en: These will be used throughout the book. You can use your own addressing schemes,
    but then the machines that are built within the book will be different from the
    ones you build. As you may have noticed, we do not have VMnet1 listed in the previous
    diagram, but we have an IP address assigned for it. This is because we want to
    have one switch dedicated for our testing. We will explain this in detail in the
    next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将在整本书中使用。您可以使用自己的寻址方案，但是在书中构建的机器将与您构建的机器不同。正如您可能已经注意到的那样，我们在先前的图表中没有列出VMnet1，但是我们为其分配了一个IP地址。这是因为我们希望有一个交换机专门用于我们的测试。我们将在下一节详细解释这一点。
- en: 'We have covered how to customize the network switches previously, but to save
    you the trouble of having to go back and look this up; we will repeat the steps
    here for the VMnet1 switch. We configured the VMnet8 switch as part of [Chapter
    3](ch03.html "Chapter 3. Planning a Range"), *Planning a Range*. Open your VMware
    Workstation and navigate to **Edit** | **Virtual Network Editor…** | **VMnet1**.
    In the Subnet IP box, enter `10.1.0.0`. Leave the rest of the settings at their
    default. You can verify whether your settings match those shown in the following
    screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经介绍了如何自定义网络交换机，但为了节省您不必回头查找这些信息的麻烦，我们将在这里重复VMnet1交换机的步骤。我们在[第3章](ch03.html
    "第3章。规划范围")中配置了VMnet8交换机，*规划范围*。打开您的VMware Workstation并导航到**编辑** | **虚拟网络编辑器…**
    | **VMnet1**。在子网IP框中，输入`10.1.0.0`。将其余设置保持为默认设置。您可以验证您的设置是否与以下截图中显示的设置相匹配：
- en: '![The custom settings](img/477-1_04_11.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![自定义设置](img/477-1_04_11.jpg)'
- en: 'Once you have verified your settings, click on **Apply** and then click on
    **OK**. Perform the same steps to configure the rest of the networks. For VMnet2
    and VMnet4, you will have to select the box to use the DHCP server; this is enabled
    by default with VMnet1, but not for the rest of the switches. Once you have completed
    configuring the networks, verify whether your settings match to those shown in
    the following screenshot before continuing to the next section:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 验证设置后，点击**应用**，然后点击**确定**。执行相同的步骤来配置其余的网络。对于VMnet2和VMnet4，您将需要选择使用DHCP服务器的框；这在VMnet1中默认启用，但对于其余的交换机则不是。在完成配置网络后，验证您的设置是否与以下截图中显示的设置相匹配，然后继续到下一节：
- en: '![The custom settings](img/477-1_04_12.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![自定义设置](img/477-1_04_12.jpg)'
- en: Screen showing the settings (the cropped text is not important)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示设置（裁剪的文本不重要）
- en: We should now have our network switches and architecture set up for the layered
    environment we want to implement. We are going to configure at least two network
    cards on all machines we create, and this is done so that we can perform our first
    round of testing against a flat network. This is because if we cannot attack it
    when the network is flat and a directly connected, then there is no reason to
    layer the architecture and then try again. The concept of this is often overlooked,
    and the networks you see in the **Capture The Flag** (**CTF**) competitions are
    all flat. They may have multiple network cards so that you can perform pivoting
    (using the compromised machine to reach the next target), but they are flat, and
    this does not represent a true testing environment. Furthermore, they have the
    firewall disabled, or it is enabled but configured to allow the traffic.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该已经为我们想要实现的分层环境设置好了网络交换机和架构。我们将在我们创建的所有机器上配置至少两张网络卡，这样我们就可以对扁平网络进行第一轮测试。这是因为如果我们在网络是扁平的并且直接连接时无法攻击它，那么就没有理由对架构进行分层然后再次尝试。这个概念经常被忽视，你在**夺旗赛**（**CTF**）比赛中看到的网络都是扁平的。它们可能有多个网络卡，以便你可以进行枢纽（使用受损的机器来到达下一个目标），但它们是扁平的，这并不代表一个真正的测试环境。此外，它们已经禁用了防火墙，或者启用了防火墙但配置为允许流量通过。
- en: Putting all this together, we will have, on all machines, a network adapter
    that is connected to the switch in the architecture where the machine is located
    and a second adapter connected to the VMnet1 network. Consequently, this will
    allow us to test all machines across the VMnet1 switch, and once that test is
    complete and successful, we will then look at it from the true architecture point
    on the network. To prevent any packet leakage that is possible within a virtual
    environment, all testing after the first test will consist of disabling or removing
    the network adapter that is connected to the VMnet1 switch. So, it is time to
    start populating our architecture with machines by choosing components!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们将在所有机器上都有一个连接到架构中的交换机的网络适配器，以及一个连接到VMnet1网络的第二个适配器。因此，这将允许我们在VMnet1交换机上测试所有机器，一旦测试完成并成功，我们将从网络的真实架构点进行查看。为了防止虚拟环境中可能发生的任何数据包泄漏，第一次测试后的所有测试都将包括禁用或移除连接到VMnet1交换机的网络适配器。因此，现在是时候通过选择组件来开始填充我们的架构了！
- en: Choosing range components
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择范围组件
- en: In this section, we want to select the components we will use throughout our
    architecture. The main point is that we have a network design diagram, so now
    all we have to do is populate it. The first and one of the most important machines
    we want to place in the architecture is the machine we will use to carry out the
    attacks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们想要选择我们将在整个架构中使用的组件。主要问题是我们有一个网络设计图，现在我们要做的就是填充它。我们想要放置在架构中的第一台也是最重要的机器是我们用来进行攻击的机器。
- en: The attacker machine
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击者机器
- en: There are a number of choices when it comes to the machine we select as our
    attacker. This is usually based on what experience the tester has with different
    tools and more importantly, operating systems. It is common to build multiple
    attacker machines and customize them to work in different environments. You can
    always create and build your own machine, but in this book, we will use one of
    the most popular distributions and that is Kali Linux. Another thing that you
    may want to do is build a Backtrack 5R3 distribution machine. It is true that
    Kali Linux is the continuation of the Backtrack distribution, but there are tools
    in Backtrack 5R3 that are no longer in Kali, such as Gerix WiFi Cracker and Nessus.
    Again, this is largely a matter of personal preference. For the purpose of this
    book, we are going to focus on the Kali distribution as our choice of platform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择我们的攻击者机器时，有很多选择。这通常基于测试人员对不同工具和更重要的是操作系统的经验。通常会构建多个攻击者机器，并对其进行定制以在不同的环境中工作。你可以随时创建和构建自己的机器，但在本书中，我们将使用最流行的发行版之一，那就是Kali
    Linux。你可能还想构建一个Backtrack 5R3发行版的机器。Kali Linux确实是Backtrack发行版的延续，但在Backtrack 5R3中有一些在Kali中不再存在的工具，比如Gerix
    WiFi Cracker和Nessus。同样，这在很大程度上是个人偏好的问题。在本书中，我们将专注于Kali发行版作为我们的平台选择。
- en: In [Chapter 3](ch03.html "Chapter 3. Planning a Range"), *Planning a Range*,
    we built a virtual machine using the Kali ISO image, and this can be used, but
    we prefer to actually use a virtual machine and not a live boot image for our
    main attacker machine. You can still keep the ISO image one we created in [Chapter
    3](ch03.html "Chapter 3. Planning a Range"), *Planning a Range*, but we want to
    get the actual distribution that is already in the VMware VMDK format. An advantage
    of this is that the VMware tools are already installed and this provides us with
    a better integration with the OS while it is in a virtual environment. To begin
    with, we need to download the virtual machine from the Kali site; you can download
    it at [http://www.kali.org/downloads/#](http://www.kali.org/downloads/#).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。规划范围")中，*规划范围*，我们使用了Kali ISO镜像构建了一个虚拟机，这可以使用，但我们更喜欢实际使用虚拟机而不是一个实时引导镜像作为我们的主要攻击者机器。你仍然可以保留我们在[第3章](ch03.html
    "第3章。规划范围")中创建的ISO镜像，但我们想要获取已经以VMware VMDK格式存在的实际发行版。这样做的一个优点是VMware工具已经安装，这在虚拟环境中为我们提供了更好的操作系统集成。首先，我们需要从Kali网站下载虚拟机；你可以在[http://www.kali.org/downloads/#](http://www.kali.org/downloads/#)下载它。
- en: For those of you who want to build your own machine, there is a reference document
    located at [http://docs.kali.org/downloading/live-build-a-custom-kali-iso](http://docs.kali.org/downloading/live-build-a-custom-kali-iso)
    that can assist you with this task.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要构建自己的机器的人，有一个位于[http://docs.kali.org/downloading/live-build-a-custom-kali-iso](http://docs.kali.org/downloading/live-build-a-custom-kali-iso)的参考文档可以帮助你完成这个任务。
- en: Once you have downloaded the virtual machine, extract it to a location of your
    choice and then open it using VMware Workstation. Once you have opened it, the
    first thing we want to do is to add another network adapter because the virtual
    machine has one adapter that is connected to the NAT-VMnet8 interface, and this
    provides us with connectivity to the external points. However, we also want our
    machine to be connected to the VMnet1 switch so that we can directly test things
    before we add filters and layers of protections.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了虚拟机，将其解压到您选择的位置，然后使用VMware Workstation打开它。一旦打开，我们要做的第一件事是添加另一个网络适配器，因为虚拟机有一个连接到NAT-VMnet8接口的适配器，这为我们提供了与外部点的连接。但是，我们也希望我们的机器连接到VMnet1开关，以便在添加过滤器和保护层之前直接测试事物。
- en: 'An example of our Kali configuration is shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Kali配置的一个示例如下截图所示：
- en: '![The attacker machine](img/477-1_04_13.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![攻击者机器](img/477-1_04_13.jpg)'
- en: Screen showing an example of our Kali configuration (the cropped text is not
    important)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 显示我们Kali配置示例的屏幕（裁剪的文本不重要）
- en: 'As the preceding screenshot shows, we now have two network cards in our Kali
    Linux machine: one connected to the VMnet8 NAT switch and the other connected
    to the VMnet1 Host-only switch. This provides us with direct access to these two
    networks without having to configure any additional settings. As we have mentioned,
    we will use the VMnet1 switch for testing, and once the testing is complete, we
    will place the target in the location required in the architecture and then carry
    out the test on this.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们现在在我们的Kali Linux机器上有两张网卡：一张连接到VMnet8 NAT开关，另一张连接到VMnet1主机专用开关。这为我们提供了直接访问这两个网络的能力，而无需配置任何额外的设置。正如我们所提到的，我们将使用VMnet1开关进行测试，一旦测试完成，我们将把目标放在架构所需的位置，然后对其进行测试。
- en: We have mentioned it before, but it is worth repeating; you have to attack the
    target on a flat network and verify whether it works. Otherwise, putting a filter
    in place will just be a waste of time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，但值得重复一下；您必须在一个平面网络上攻击目标并验证其是否有效。否则，设置过滤器只会是浪费时间。
- en: We will now look at a simple example. In your Kali virtual machine in VMware
    Workstation, click on **Power on this virtual machine** to start the virtual machine.
    Once the machine is loaded, you will log in by clicking on **Other**. This will
    bring up the login page for the machine. Enter `root` as the username and `toor`
    as the password. Once the desktop comes up, navigate to **Applications** | **Accessories**
    | **Terminal** to open a terminal window. In the window, enter `ifconfig eth1`
    to view the IP address information for the interface that is connected to the
    switch.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一个简单的例子。在VMware Workstation中的Kali虚拟机中，点击**Power on this virtual machine**启动虚拟机。一旦机器加载完成，您将通过点击**Other**来登录。这将打开机器的登录页面。输入`root`作为用户名，`toor`作为密码。一旦桌面出现，导航到**Applications**
    | **Accessories** | **Terminal**打开一个终端窗口。在窗口中，输入`ifconfig eth1`来查看连接到开关的接口的IP地址信息。
- en: 'Before we do anything else, we will update the Kali distribution. A note of
    caution here: sometimes, the update will get errors, so before we perform the
    update, it is highly recommended that we take a snapshot of the machine. In VMware
    Workstation, navigate to **VM** | **Take snapshot**. In the window that opens,
    enter a name for your snapshot and click on **Take snapshot**.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何其他操作之前，我们将更新Kali发行版。这里需要注意的是：有时更新会出现错误，因此在执行更新之前，强烈建议我们对机器进行快照。在VMware
    Workstation中，导航到**VM** | **Take snapshot**。在打开的窗口中，输入快照的名称，然后点击**Take snapshot**。
- en: 'As we have discussed, in VMware, the host will be the first IP address of the
    subnet, so the host for us is **10.1.0.1**. Now, we will conduct a small experiment.
    We are going to use the popular tool, Nmap, and scan our host. We want to ensure
    that our firewall is disabled on the host. In the terminal window, enter `nmap
    -sS 10.1.0.1` and scan the host machine. When the scan is complete, you should
    see results similar to the ones shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论过的，在VMware中，主机将是子网的第一个IP地址，所以对我们来说，主机是**10.1.0.1**。现在，我们将进行一个小实验。我们将使用流行的工具Nmap扫描我们的主机。我们要确保我们的防火墙在主机上是禁用的。在终端窗口中，输入`nmap
    -sS 10.1.0.1`并扫描主机。扫描完成后，您应该看到类似于以下截图中显示的结果：
- en: '![The attacker machine](img/477-1_04_14.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![攻击者机器](img/477-1_04_14.jpg)'
- en: As we can see, the host has a number of ports that are open on it, but now we
    want to turn the firewall on. Once you have turned the firewall on, conduct the
    same scan again. As you will see, now that the firewall is on, the results are
    different. This is the thing that many who do testing do not understand; this
    is the Windows firewall and we used to consider it easy to penetrate, but as our
    little experiment has just shown that is no longer the case. If you search around
    the Internet and look for guidance on how to penetrate a firewall, you will read
    about fragmentation scans and a number of other methods. You are encouraged to
    try all of these different techniques on your own, rather than cover each one
    of them here; we will go to the creator of the tool Nmap, Fyodor. He has some
    advanced scanning references, and one of those is actually a book. So, as we look
    around, we find that to penetrate a firewall it is recommended to use a custom
    scan. As with anything you read about, the process is to create a lab environment
    and then test and verify for yourself. In your terminal window on Kali, enter
    `nmap -sS -PE -PP -PS80,443 -PA3389 -PU40125 -A -T4 10.1.0.1`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，主机上有许多端口是开放的，但现在我们想要打开防火墙。一旦你打开了防火墙，再次进行相同的扫描。正如你所看到的，现在防火墙已经打开，结果是不同的。这是许多测试人员不理解的事情；这是Windows防火墙，我们曾经认为它很容易被渗透，但正如我们的小实验刚刚表明的那样，情况已经不再是这样了。如果你在互联网上搜索并寻找如何渗透防火墙的指导，你会读到关于分段扫描和许多其他方法。我们鼓励你自己尝试所有这些不同的技术，而不是在这里覆盖每一种；我们将去找Nmap工具的创建者Fyodor。他有一些高级扫描参考资料，其中之一实际上是一本书。因此，当我们四处寻找时，我们发现渗透防火墙建议使用自定义扫描。就像你读到的任何东西一样，过程是创建一个实验环境，然后自己测试和验证。在Kali的终端窗口中，输入`nmap
    -sS -PE -PP -PS80,443 -PA3389 -PU40125 -A -T4 10.1.0.1`。
- en: 'This will conduct a scan using a number of additional parameters that are reported
    to get through a firewall. We will not cover each one of these options here, but
    encourage you to read the man page and explore what each one of these options
    do. Additionally, you might want to run Wireshark and see what the scan is doing
    at the packet level. Once you have run the scan, was it successful? An example
    output of the scan is shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用一些额外的参数进行扫描，据说可以穿过防火墙。我们不会在这里覆盖每一个选项，但鼓励你阅读手册页面，并探索每一个选项的功能。此外，你可能想运行Wireshark并查看扫描在数据包级别上在做什么。一旦你运行了扫描，它成功了吗？扫描的一个示例输出如下截图所示：
- en: '![The attacker machine](img/477-1_04_15.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![攻击者机器](img/477-1_04_15.jpg)'
- en: As the previous screenshot shows, there really is not much information gathered
    from the scan. So, the claim that this can penetrate the firewall does not work,
    at least not against the Windows firewall. This is something that we, as testers,
    have to understand. If the environment is well configured and the firewall has
    strong rules for both ingress (inbound) and egress (outbound) traffic, it can
    present a formidable target. This is not a bad thing; in the end, we all want
    to improve the security posture for our clients. Unfortunately, from a security
    standpoint, there are always weaknesses in the majority of the architectures that
    we come up against. While this is bad for security, it is great for our testing!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，从扫描中收集的信息确实不多。因此，声称这可以渗透防火墙是行不通的，至少不适用于Windows防火墙。这是我们作为测试人员必须理解的事情。如果环境配置良好，并且防火墙对入站和出站流量都有强大的规则，它可能会成为一个难以攻破的目标。这并不是一件坏事；最终，我们都希望为我们的客户改善安全姿态。不幸的是，从安全的角度来看，我们所面对的大多数架构总是存在弱点。虽然这对安全来说是不好的，但对我们的测试来说是很好的！
- en: Router
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由器
- en: 'An example of a part of our architecture that we looked at earlier is shown
    in the following diagram:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过的架构的一部分示例如下图所示：
- en: '![Router](img/477-1_04_16.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![路由器](img/477-1_04_16.jpg)'
- en: As the previous diagram shows, in our architecture, the first level of defense
    that we encounter is the router. There are a number of different devices we can
    encounter, and if we have the luxury of a lab environment that is not mobile,
    we can use actual physical devices. A source that I am sure many of you know about
    is the auction sites such as eBay that help to pick up used equipment at a reasonable
    rate. Another site that I have personally used many times to get used Cisco devices
    is [http://www.routermall.com](http://www.routermall.com). What I like about the
    site is that you will get cables and also the IOS software when you purchase equipment
    from them. As we have said before, we are more concerned with building a pen testing
    lab that we can carry on our laptop, so a physical router will not provide us
    with that capability. Therefore, we have to look at solutions that we can place
    into a machine and either emulate or perform the functions of a router for our
    architecture.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的图表所示，在我们的架构中，我们遇到的第一层防御是路由器。我们可能会遇到许多不同的设备，如果我们有一个不是移动的实验室环境，我们可以使用实际的物理设备。我相信你们许多人都知道的一个来源是拍卖网站，比如eBay，它们可以帮助以合理的价格购买二手设备。我个人多次使用的另一个网站是[http://www.routermall.com](http://www.routermall.com)，我喜欢这个网站的原因是在购买设备时会附带电缆和IOS软件。正如我们之前所说的，我们更关心的是建立一个可以携带在笔记本电脑上的渗透测试实验室，因此物理路由器无法提供这种能力。因此，我们必须寻找可以放入机器中并模拟或执行路由器功能的解决方案。
- en: While it is true that we can make any machine into a routing device using the
    packet forward capability of the device, this is not the only thing we want to
    accomplish with our routing device. When you encounter a perimeter device in your
    testing, that device will more than likely have some form of filtering on it.
    Therefore, we want our chosen router component to have the capability to perform
    some form of filtering.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以使用设备的数据包转发功能将任何机器变成路由设备，但这并不是我们想要用我们的路由设备实现的唯一功能。当你在测试中遇到周边设备时，该设备很可能会有某种形式的过滤。因此，我们希望我们选择的路由器组件具有执行某种形式过滤的能力。
- en: The one solution we want to share with you is the Cisco router emulation software,
    Dynamips, originally written by Christophe Follet in 2005 and maintained until
    2008\. The original Dynamips software is no longer maintained, but for our purpose,
    the last release will provide all of the functionalities that we will require.
    There is one requirement to use any of the Cisco emulators and that is you have
    to have a version of the Cisco IOS to access and boot. We will offer an alternative
    solution in the next section to those who do not have the capability to obtain
    a Cisco IOS image.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想与您分享的一个解决方案是思科路由器仿真软件Dynamips，最初由Christophe Follet于2005年编写，并在2008年之前维护。原始的Dynamips软件已不再维护，但对于我们的目的，最后一个版本将提供我们所需的所有功能。要使用任何思科模拟器，有一个要求，那就是您必须有一个思科IOS版本来访问和引导。在下一节中，我们将为那些无法获得思科IOS镜像的人提供另一种解决方案。
- en: From this point forward, we will work with the **Dynamips** software and then
    the text-based frontend that is **Dynagen**. For those of you who want a GUI-based
    interface and also the latest version of Dynamips, you can go to [www.gns3.net](http://www.gns3.net)
    and get the required software there. Additionally, you can get numerous resources
    and documentation on the software, and not only does it provide for Cisco devices
    but also does for Juniper devices. It is an excellent reference to proceed with
    your development of labs to emulate a variety of devices. The software also has
    a Windows installer package and you can run the emulator within a Windows environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们将使用**Dynamips**软件，然后使用**Dynagen**作为基于文本的前端。对于那些想要基于GUI的界面和最新版本的Dynamips的人，可以访问[www.gns3.net](http://www.gns3.net)并在那里获取所需的软件。此外，您还可以获取有关该软件的大量资源和文档，它不仅适用于思科设备，还适用于Juniper设备。这是一个非常好的参考，可以帮助您开发模拟各种设备的实验室。该软件还有一个Windows安装程序包，您可以在Windows环境中运行模拟器。
- en: 'An example that explains more details about the GNS3 tool is shown in the following
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更多关于GNS3工具的详细信息的示例：
- en: '![Router](img/477-1_04_17.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_17.jpg)'
- en: Enough discussion on this, let's build a router! We want to use Ubuntu as our
    router emulations software platform. You can go to the Ubuntu website and download
    the software from [http://www.ubuntu.com/download/desktop](http://www.ubuntu.com/download/desktop).
    The latest stable version at the time of writing this book is 12.04, and this
    is what we will be using for our router platform. There can be some challenges
    with the 64-bit version; for our purpose, both the 32-or 64-bit version will work.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个问题讨论够了，让我们建立一个路由器！我们希望使用Ubuntu作为我们的路由器仿真软件平台。您可以访问Ubuntu网站并从[http://www.ubuntu.com/download/desktop](http://www.ubuntu.com/download/desktop)下载软件。在撰写本书时，最新的稳定版本是12.04，这是我们将用于路由器平台的版本。64位版本可能会有一些挑战；对于我们的目的，32位或64位版本都可以使用。
- en: Once you have downloaded the ISO image, you will create a new machine in VMware
    Workstation and mount the ISO image. We covered the steps in [Chapter 3](ch03.html
    "Chapter 3. Planning a Range"), *Planning a Range*, so you should be familiar
    with them. If not, you can refer to the chapter for the exact sequence of steps.
    VMware Workstation will more than likely recognize the ISO image and offer to
    perform the easy installation. This is something that you can accept, or not,
    depending on personal preference.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了ISO镜像后，您将在VMware Workstation中创建一个新的虚拟机并挂载ISO镜像。我们在[第3章](ch03.html "Chapter 3. Planning
    a Range")中介绍了这些步骤，*规划一个范围*，所以您应该对它们很熟悉。如果不熟悉，可以参考该章节以获取确切的步骤序列。VMware Workstation很可能会识别ISO镜像并提供执行简单安装的选项。这是可以接受的，也可以不接受，这取决于个人偏好。
- en: After you have created the machine and booted from the ISO image, you will work
    through the installation prompts and install the software into the hard drive
    of the virtual machine. For the most part, you can accept the defaults for the
    installation, but feel free to make changes as needed. Remember, this is one of
    the advantages of virtual environments. If we blow something up, we can create
    another one, or as we discussed, if we have taken a snapshot, we can restore to
    that. A great thing about Ubuntu is the ability to add packages once the installation
    has been completed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了机器并从ISO镜像引导后，您将通过安装提示安装软件到虚拟机的硬盘中。在大多数情况下，您可以接受默认安装，但随时根据需要进行更改。请记住，这是虚拟环境的优势之一。如果我们搞砸了什么，我们可以创建另一个，或者正如我们讨论过的，如果我们已经拍摄了快照，我们可以恢复到那个状态。Ubuntu的一个很棒的功能是在安装完成后添加软件包的能力。
- en: 'When the installation completes, the virtual machine, by default, will have
    one network adapter connected to the NAT switch, but as we have architected our
    design, we know that we need two interfaces on our router. This is to provide
    the connectivity as shown in the following diagram:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，默认情况下，虚拟机将有一个连接到NAT交换机的网络适配器，但是根据我们设计的架构，我们知道我们的路由器需要两个接口。如下图所示，这是为了提供连接性：
- en: '![Router](img/477-1_04_18.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_18.jpg)'
- en: 'To create our architecture with the Ubuntu machine, we have to add a network
    adapter and connect it to the VMnet2 switch. With VMware Workstation, you do not
    have to shut the virtual machine down to add a new adapter. In the software, navigate
    to **View** | **Console View** to bring up the configuration view for the virtual
    machine. Click on **Edit virtual machine settings** and add a network adapter
    and connect it to VMnet2\. An example of the required configuration is shown in
    the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ubuntu机器创建我们的架构，我们必须添加一个网络适配器并将其连接到VMnet2交换机。在VMware Workstation中，您无需关闭虚拟机即可添加新的适配器。在软件中，导航到**View**
    | **Console View**以打开虚拟机的配置视图。单击**Edit virtual machine settings**，添加一个网络适配器并将其连接到VMnet2。所需配置的示例如下截图所示：
- en: '![Router](img/477-1_04_19.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_19.jpg)'
- en: Now that we have the configuration set for our router machine, we need to get
    an IOS image and copy it into the machine. As we have mentioned, if you do not
    have access to an IOS image, you will not be able to use the Dynamips tool. In
    the next section, we will provide a solution that does not require access to an
    IOS image and provides the same functionality of filtering that we require.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为路由器机器设置了配置，我们需要获取一个IOS镜像并将其复制到机器中。正如我们所提到的，如果您无法访问IOS镜像，您将无法使用Dynamips工具。在下一节中，我们将提供一个不需要访问IOS镜像并提供我们所需的相同过滤功能的解决方案。
- en: The Dynamips software is available from the software repository for Ubuntu;
    in your Ubuntu machine, open a terminal window by clicking on the terminal icon
    on the menu bar on the left-hand side of the screen. If you do not see the terminal
    icon, you can click on **Ubuntu Software Center** and search for it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'Dynamips软件可以从Ubuntu的软件存储库中获取；在您的Ubuntu机器上，通过单击屏幕左侧菜单栏上的终端图标来打开终端窗口。如果您看不到终端图标，您可以单击**Ubuntu软件中心**并搜索它。 '
- en: In the terminal window, enter `sudo apt-get install dynamips`. This will fetch
    the Dynamips software and install it. Once we have installed it, we will then
    install the frontend application for the tool. Enter `sudo apt-get install dynagen`
    in the terminal window.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，输入`sudo apt-get install dynamips`。这将获取Dynamips软件并安装它。安装完成后，我们将安装该工具的前端应用程序。在终端窗口中输入`sudo
    apt-get install dynagen`。
- en: To stop having to type `sudo` for each command, enter `sudo –i`. The configuration
    files that we use to configure our router are copied to a rather long path, and
    we will fix this now. We will use the example configuration file, `simple1.net`.
    Enter `cp /usr/share/doc/dynagen/examples/sample_labs/simple1/simple1.net /opt/config.net`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不必为每个命令输入`sudo`，输入`sudo -i`。我们用来配置路由器的配置文件被复制到一个相当长的路径，我们现在将修复这个问题。我们将使用示例配置文件`simple1.net`。输入`cp
    /usr/share/doc/dynagen/examples/sample_labs/simple1/simple1.net /opt/config.net`。
- en: 'Now that we have the configuration file copied, let''s take a look at it. Enter
    `more /opt/config.net`. An example of the default configuration file is shown
    in the next screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经复制了配置文件，让我们来看一下它。输入`more /opt/config.net`。默认配置文件的示例如下截图所示：
- en: '![Router](img/477-1_04_20.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_20.jpg)'
- en: There are two areas we will concentrate on for our configuration. In the section
    for the router image, we have to specify the path to the IOS image on the system.
    The second area is the router section. In the example, we are going to use the
    name `R1` for the router, and as you can see, the router R1 has one serial interface
    that is connected to the serial interface of R2\. This is a two-router sample
    configuration, and for our purpose, we do not need so many routers. You are welcome
    to explore different configurations, but in this book, we will concentrate on
    just having one router as this is our perimeter device we have identified in our
    design.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于我们的配置的两个区域。在路由器镜像部分，我们必须指定系统上IOS镜像的路径。第二个区域是路由器部分。在示例中，我们将为路由器使用名称`R1`，如您所见，路由器R1有一个串行接口，连接到R2的串行接口。这是一个双路由器的示例配置，对于我们的目的，我们不需要那么多路由器。您可以探索不同的配置，但在本书中，我们将专注于只有一个路由器，因为这是我们在设计中确定的边界设备。
- en: 'We want our R1 router configuration to have two network interfaces; one will
    connect to the VMnet8 NAT switch and the other will connect to the VMnet2 switch.
    Consequently, we have two network cards on the Ubuntu machine that are configured
    in this manner, so it is just a matter of entering the configuration for the interfaces
    into the `config.net` file. We have to enter the configuration that will recognize
    the interfaces, this is what is known as a tap interface, and this is beyond the
    scope for us to discuss here; however, if you would like to find out more, refer
    to [http://www.innervoice.in/blogs/2013/12/08/tap-interfaces-linux-bridge](http://www.innervoice.in/blogs/2013/12/08/tap-interfaces-linux-bridge).
    Open your `config.net` file by entering `gedit /opt/config.net`. Change the path
    to the path of your IOS image file as required, and then in the R1 router section,
    enter the following in the place of the current serial interface:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的R1路由器配置有两个网络接口；一个将连接到VMnet8 NAT交换机，另一个将连接到VMnet2交换机。因此，我们在Ubuntu机器上配置了两张网络卡，所以只需将接口的配置输入到`config.net`文件中即可。我们必须输入能够识别接口的配置，这就是所谓的tap接口，这超出了我们在这里讨论的范围；但是，如果您想了解更多，请参考[http://www.innervoice.in/blogs/2013/12/08/tap-interfaces-linux-bridge](http://www.innervoice.in/blogs/2013/12/08/tap-interfaces-linux-bridge)。通过输入`gedit
    /opt/config.net`来打开您的`config.net`文件。根据需要更改路径为IOS镜像文件的路径，然后在R1路由器部分，输入以下内容以替换当前的串行接口：
- en: '`f0/0 = NIO_linux_eth:eth0`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`f0/0 = NIO_linux_eth:eth0`'
- en: '`f1/0 = NIO_linux_eth:eth1`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`f1/0 = NIO_linux_eth:eth1`'
- en: 'This will connect the fast Ethernet interfaces to the interfaces of the Ubuntu
    machine. One other setting you may want to change is the RAM allocation. The default
    is at 160 MB, and this is a little low, so I recommend that you increase it to
    **320**. An example of what the configuration at this step should look like is
    shown in the next screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把快速以太网接口连接到Ubuntu机器的接口。您可能想要更改的另一个设置是RAM分配。默认值为160 MB，这有点低，所以我建议您将其增加到**320**。此步骤的配置示例如下截图所示：
- en: '![Router](img/477-1_04_21.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_21.jpg)'
- en: 'It is also a good idea to comment out the router R2 as we are not using it.
    We are now ready to test our configuration. In a terminal window, enter `dynamips
    –H 7200`. This will start the Dynamips server on port 7200\. If all goes well,
    you should see an output similar to that shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，注释掉路由器R2，因为我们不使用它。现在我们准备测试我们的配置。在终端窗口中，输入`dynamips -H 7200`。这将在端口7200上启动Dynamips服务器。如果一切顺利，您应该看到类似于以下截图的输出：
- en: '![Router](img/477-1_04_22.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_22.jpg)'
- en: The next step is to start our configuration file and that will interact with
    the Cisco IOS that we have loaded on the machine. The example IOS image we are
    using in the book is for a 7200 series router, so we can configure a number of
    interfaces on it. However, for our purpose, we need just the two fast Ethernet
    interfaces to perform our routing and more importantly, as we progress the filtering
    of traffic between the segments of our architecture.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '下一步是启动我们的配置文件，并与我们在机器上加载的Cisco IOS进行交互。我们在本书中使用的示例IOS镜像是用于7200系列路由器的，因此我们可以在其上配置许多接口。但是，对于我们的目的，我们只需要两个快速以太网接口来执行我们的路由，更重要的是，随着我们在架构的各个部分之间进行流量过滤，我们需要这样做。 '
- en: 'In another terminal window, enter `dynagen /opt/config.net`. This will read
    the configuration file we have created and load the IOS image for access. Hopefully,
    you will not encounter any error here, but if you do, then it is time to troubleshoot.
    The most common error is a typo in the path. If it is a path error, you will see
    a message that says the image could not be found. An example of what you should
    see is shown in the next screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端窗口中，输入 `dynagen /opt/config.net`。这将读取我们创建的配置文件并加载IOS镜像以进行访问。希望您在这里不会遇到任何错误，但如果遇到了，那么现在是时候进行故障排除了。最常见的错误是路径错误。如果是路径错误，您将看到一条消息，说找不到镜像。应该看到的示例如下截图所示：
- en: '![Router](img/477-1_04_23.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_23.jpg)'
- en: 'At this point, we are ready to start the router R1; you accomplish this by
    entering the the `console R1` command in the Dynagen prompt. This will log you
    in to the router as if you were connecting via a console cable. You should see
    another window open. This is the access to the router. Pressing the *Enter* key
    should bring you to a login prompt as shown in the next screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们准备启动路由器R1；您可以通过在Dynagen提示符中输入 `console R1` 命令来实现这一点。这将使您登录到路由器，就好像您是通过控制台电缆连接一样。您应该会看到另一个窗口打开。这是连接到路由器的访问。按下
    *Enter* 键应该会带您到登录提示符，如下截图所示：
- en: '![Router](img/477-1_04_24.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_24.jpg)'
- en: 'From here, it is a matter of using router commands to configure the two interfaces
    for our router; enter `en` at the router prompt to enter the privileged mode on
    the router. Once you are in the privileged mode, enter `show ip int brief` to
    bring up the interface configuration of the router. You will see that there is
    no interface configuration yet, so we have to configure it. An example of the
    output of the command is shown in the next screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，就是使用路由器命令来配置我们的路由器的两个接口；在路由器提示符下输入 `en` 进入路由器的特权模式。一旦进入特权模式，输入 `show ip
    int brief` 来查看路由器的接口配置。您会看到还没有接口配置，所以我们必须进行配置。命令的输出示例如下截图所示：
- en: '![Router](img/477-1_04_25.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_25.jpg)'
- en: 'We now want to configure these interfaces (f0/0 and f1/0) as they are currently
    not set. We do this with the global configuration from the terminal option. To
    access this, enter `conf t` at the router command prompt. This will place you
    in the configuration mode. Enter `int f0/0` to access the interface configuration
    menu and enter the IP address `192.168.177.10 255.255.255.0`. This will create
    a configuration for the f0/0 interface that will connect to our VMnet8 NAT switch.
    To bring up the interface, enter the `no shut` command. Once we have done this,
    we will do the same thing for the next interface. In the prompt window, enter
    `int f1/0` to access the configuration menu for the f1/0 interface. Next, we have
    to configure the IP address that is connected to our VMnet2 switch, so enter the
    IP address `10.2.0.10 255.255.255.0`. In the interface configuration window, bring
    up the interface by entering `no shut`. We should now have the interface all configured.
    To return to the main router prompt, press *Ctrl* + *Z*. Verify your configuration
    by entering `show ip int brief`. Next, we will verify whether we have connectivity
    on the VMnet8 switch by entering `ping 192.168.177.1`. An example of the completed
    configuration is shown in the next screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要配置这些接口（f0/0和f1/0），因为它们目前还没有设置。我们可以通过终端选项的全局配置来实现这一点。要访问这个，输入 `conf t` 在路由器命令提示符下。这将使您进入配置模式。输入
    `int f0/0` 进入接口配置菜单，并输入IP地址 `192.168.177.10 255.255.255.0`。这将为f0/0接口创建一个连接到我们的VMnet8
    NAT交换机的配置。输入 `no shut` 命令来启动接口。完成后，我们将对下一个接口执行相同的操作。在提示窗口中，输入 `int f1/0` 进入f1/0接口的配置菜单。接下来，我们必须配置连接到我们的VMnet2交换机的IP地址，因此输入IP地址
    `10.2.0.10 255.255.255.0`。在接口配置窗口中，通过输入 `no shut` 来启动接口。现在我们应该已经配置好了接口。要返回到主路由器提示符，按下
    *Ctrl* + *Z*。通过输入 `show ip int brief` 来验证您的配置。接下来，我们将验证我们在VMnet8交换机上是否有连接性，输入
    `ping 192.168.177.1`。完成的配置示例如下截图所示：
- en: '![Router](img/477-1_04_26.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Router](img/477-1_04_26.jpg)'
- en: You will not be able to verify the other switch until you connect something
    to the inside virtual switch. This is because the VMnet2 switch is not an adapter
    in your host machine unless you had selected that option while creating it. The
    next thing we will do is save our configuration; this is also one of the most
    important things'. To do this, enter `write mem`. For those of you reading this,
    you might know of an alternative method, and that is the `copy run start` command.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 直到您连接某些东西到内部虚拟交换机，您将无法验证另一个交换机。这是因为VMnet2交换机在您的主机上不是一个适配器，除非您在创建时选择了该选项。接下来我们要做的是保存我们的配置；这也是最重要的事情之一。要做到这一点，输入
    `write mem`。对于阅读本文的人，您可能知道另一种方法，那就是 `copy run start` 命令。
- en: We now have a complete Cisco 7200 router on an Ubuntu machine, and we can configure
    anything within the IOS that we want, such as IPsec and other things. For now,
    we will stop with the Dynamips tool and move on for those of you who want a solution
    without having to get a Cisco IOS image. In your dynagen prompt, enter `stop R1`
    to bring the router down.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在Ubuntu机器上有一个完整的Cisco 7200路由器，我们可以在IOS中配置任何我们想要的东西，比如IPsec和其他东西。现在，我们将停止使用Dynamips工具，继续进行，对于那些不想获取Cisco
    IOS镜像的人。在您的dynagen提示符中，输入 `stop R1` 以关闭路由器。
- en: 'For those of you who do not have access to a Cisco IOS image, we can accomplish
    what we need to for our architecture with pretty much any Linux or Unix machine
    that you want to use. As we have used the Ubuntu platform for the first example,
    we will use another one here. The intent is to have the filtering capability,
    and we can achieve this by using an OS that has the iptables software installed.
    We will use a Debain distribution to accomplish this task. You can download Debian
    from the official Debian site at [www.debian.org](http://www.debian.org). Once
    you have downloaded the image, you will need to create a virtual machine and run
    the installation process. After you have installed the OS, you will need to configure
    the network. One installed network adapter will be on the VMnet8 NAT switch and
    the second one will need to be connected to the VMnet2 switch. Once you have made
    the configuration changes, your settings should match those shown in the following
    screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些没有访问Cisco IOS镜像的人，我们可以用几乎任何你想使用的Linux或Unix机器来完成我们架构所需的工作。由于我们在第一个示例中使用了Ubuntu平台，我们将在这里使用另一个。我们的目的是具有过滤功能，我们可以通过使用安装了iptables软件的操作系统来实现这一点。我们将使用Debain发行版来完成这项任务。您可以从官方Debian网站[www.debian.org](http://www.debian.org)下载Debian。下载镜像后，您需要创建一个虚拟机并运行安装过程。安装操作系统后，您需要配置网络。一个安装的网络适配器将连接到VMnet8
    NAT交换机，第二个将需要连接到VMnet2交换机。进行配置更改后，您的设置应与下一个截图中显示的设置相匹配：
- en: '![Router](img/477-1_04_27.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![路由器](img/477-1_04_27.jpg)'
- en: Our configuration for the two virtual switches we have created provides us with
    a DHCP server to assign IP addresses, but as this is going to function as a router.
    It is better to set a static address for the interfaces as this will allow us
    to have more granular filtering rules when we create them. Moreover, we don't
    have to change settings each time we boot the machine as the addressing will not
    change like it does with DHCP.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的两个虚拟交换机的配置为我们提供了一个DHCP服务器来分配IP地址，但由于这将作为路由器运行，最好为接口设置静态地址，这将允许我们在创建过滤规则时拥有更精细的过滤规则。此外，我们不必在每次启动机器时更改设置，因为地址不会像DHCP那样发生变化。
- en: 'The Debian distribution uses a configuration file to set the parameters that
    you want the network card to have once you boot it. Using an editor of your choice,
    open `/etc/network/interfaces`; we want to configure our two network interfaces,
    eth0 and eth1\. An example of the completed configuration is shown in the next
    screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Debian发行版使用一个配置文件来设置网络卡在启动时要具有的参数。使用您选择的编辑器，打开`/etc/network/interfaces`；我们要配置我们的两个网络接口，eth0和eth1。完成的配置示例如下截图所示：
- en: '![Router](img/477-1_04_28.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![路由器](img/477-1_04_28.jpg)'
- en: 'We could have configured the same addresses that we used in the Dynamips, but
    then if sometime in the future we want to run the Debian and Ubuntu machines at
    the same time, we would have an IP address conflict. Therefore, it is always a
    good design decision to plan for this possibility and configure unique addresses.
    We want to use the IP tables'' tools to execute our filtering, boot the Debian
    machine, and log in. To verify whether iptables is installed, in a terminal window,
    enter `iptables -h` to show the usage of the tool. An example of the output from
    this command is shown in the next screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以配置与Dynamips中使用的相同地址，但是如果将来我们想同时运行Debian和Ubuntu机器，我们将会遇到IP地址冲突。因此，总是一个很好的设计决策是为这种可能性做好计划并配置唯一的地址。我们想使用IP表工具来执行我们的过滤，启动Debian机器并登录。要验证是否安装了iptables，在终端窗口中输入`iptables
    -h`以显示工具的用法。这个命令的输出示例如下截图所示：
- en: '![Router](img/477-1_04_29.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![路由器](img/477-1_04_29.jpg)'
- en: We now have successfully set up the Debian machine, and the next step is to
    configure the IP tables to support the filtering that we need. This is something
    we will do when we start testing the devices.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功设置了Debian机器，下一步是配置IP表以支持我们需要的过滤。这是我们在开始测试设备时要做的事情。
- en: Firewall
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防火墙
- en: 'Now that we have configured and set a router, the next component in our architecture
    is a firewall. As with the router options, there are many options that we can
    choose. First, let''s take a look at our network architecture with respect to
    the firewall. This is shown in the next diagram:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置并设置了路由器，我们架构中的下一个组件是防火墙。与路由器选项一样，我们可以选择许多选项。首先，让我们看一下关于防火墙的网络架构。这在下一个图表中显示：
- en: '![Firewall](img/477-1_04_30.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_30.jpg)'
- en: As shown in the previous diagram, we have three interfaces on our Bastion Host
    that serves as our firewall; this will require us to connect to three switches.
    The firewall we are going to use is the free version of the **Smoothwall** firewall.
    Again, an important point here is that the firewall you put into your architecture
    is sometimes determined by the contract you are planning for. Therefore, our intent
    here is to provide a firewall so that we can test a number of different configurations
    when we are practicing against different vulnerabilities that we have found during
    our research. You can download the ISO image for the Smoothwall firewall from
    [http://www.smoothwall.org/download/](http://www.smoothwall.org/download/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个图表中显示，我们的堡垒主机有三个接口，用作我们的防火墙；这将要求我们连接三个交换机。我们将使用的防火墙是**Smoothwall**防火墙的免费版本。再次强调的一个重要点是，你放入架构中的防火墙有时取决于你计划的合同。因此，我们的意图是提供一个防火墙，以便我们在练习中测试我们在研究过程中发现的不同漏洞时可以测试多种不同的配置。您可以从[http://www.smoothwall.org/download/](http://www.smoothwall.org/download/)下载Smoothwall防火墙的ISO镜像。
- en: 'Once you have downloaded the ISO image, create a virtual machine. We want this
    machine to have three interfaces to provide us with the connectivity that we require
    to meet our network design. An example of this configuration is shown in the next
    screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下载ISO镜像后，创建一个虚拟机。我们希望这台机器有三个接口，以满足我们的网络设计所需的连接性。这种配置的示例如下截图所示：
- en: '![Firewall](img/477-1_04_31.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_31.jpg)'
- en: 'This machine requires three network cards, and each of these cards will be
    connected to the Bastion Host interfaces, which are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这台机器需要三张网卡，每张网卡都将连接到堡垒主机接口，接口如下：
- en: VMnet2—eth0—Red
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMnet2—eth0—红色
- en: VMnet3—eth1—Green
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMnet3—eth1—绿色
- en: VMnet4—eth2—Orange
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMnet4—eth2—橙色
- en: The other thing we need to do is change the hard drive type. By default, the
    installer will make it a SCSI hard disk and this causes problems with the tool.
    So to avoid this, we will change the setting to IDE. Navigate to **Edit virtual
    machines settings** | **Hard Disk** | **Remove**. Once the hard disk has been
    removed, navigate to **Edit virtual machines settings** | **Hard Disk** | **Next**
    | **IDE** | **Next** | **Next** | **Finish**.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的另一件事是更改硬盘类型。默认情况下，安装程序会将其设置为SCSI硬盘，这会导致工具出现问题。为了避免这种情况，我们将把设置更改为IDE。导航至**编辑虚拟机设置**
    | **硬盘** | **移除**。硬盘移除后，导航至**编辑虚拟机设置** | **硬盘** | **下一步** | **IDE** | **下一步**
    | **下一步** | **完成**。
- en: When you boot the machine, the installation package will start. Read the explanation
    of the different steps and accept the defaults for the installation process. Accept
    the default configuration of **half-open**. This setting will install the prudent
    approach to security, that is, nothing is allowed without explicitly defining
    it in most cases.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动机器时，安装程序将启动。阅读不同步骤的说明，并接受安装过程的默认设置。接受**半开放**的默认配置。此设置将安装谨慎的安全方法，即在大多数情况下，未明确定义的内容是不允许的。
- en: In the **Network Configuration** type, we want to change the configuration to
    match the required switch design, that is, green, orange, and red. In the network
    configuration window, select **GREEN + ORANGE + RED** and then press *Enter*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在**网络配置**类型中，我们要更改配置以匹配所需的交换机设计，即绿色、橙色和红色。在网络配置窗口中，选择**绿色 + 橙色 + 红色**，然后按*Enter*。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You cannot use a mouse, so you will need to use the arrow keys and the *TAB*
    key to move around the menu.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法使用鼠标，因此需要使用箭头键和*TAB*键在菜单中移动。
- en: 'Verify your connection settings as shown in the next screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照下一个截图中显示的连接设置进行验证：
- en: '![Firewall](img/477-1_04_32.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_32.jpg)'
- en: The next thing we need to set is the card assignments; when you select this,
    the network configuration we have created will be probed. So, each time a network
    card is detected, it will assign it to an interface. The order of the interfaces
    will be Red, Green, and then Orange. So we need to assign them in this order as
    it will match eth0, eth1, and eth2, respectively.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置的下一件事是卡分配；当您选择此选项时，我们创建的网络配置将被探测。因此，每次检测到一个网络卡，它将被分配到一个接口。接口的顺序将是红色、绿色，然后是橙色。因此，我们需要按照这个顺序进行分配，因为它将分别匹配eth0、eth1和eth2。
- en: 'Once all the cards have been assigned, the next thing to do is set the IP addresses.
    The IP addresses will be configured as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有网卡都被分配，下一步要做的是设置IP地址。IP地址将配置如下：
- en: Red—DHCP
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色—DHCP
- en: Green—10.4.0.10
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色—10.4.0.10
- en: Orange—10.3.0.10
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 橙色—10.3.0.10
- en: 'Once the network cards have been assigned, you will then be prompted to set
    two passwords: one for the remote access and the other for the root user. I recommend
    that you make them easy to remember as this is only for a testing environment.
    I usually use the name of the user followed by `pw`. So, for the root user, the
    password would be `rootpw`. You are free to set any password you like. After you
    have set the passwords, the system will reboot. Once it reboots, you will have
    to log in and verify that the three interfaces are set as we intended. Once you
    have logged in, verify that the interfaces are configured as shown in the next
    screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 分配完网卡后，您将被提示设置两个密码：一个用于远程访问，另一个用于root用户。我建议您将它们设置为易记的密码，因为这只是用于测试环境。我通常使用用户名后跟`pw`。因此，对于root用户，密码将是`rootpw`。您可以自由设置任何密码。设置密码后，系统将重新启动。重新启动后，您需要登录并验证三个接口是否按照我们的意图设置。登录后，请验证接口是否配置如下一个截图所示：
- en: '![Firewall](img/477-1_04_33.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_33.jpg)'
- en: 'The preferred method is to access the configuration from the green interface
    via a web browser. We can set up another machine on the VMnet4 switch, or another
    method is to use the host for our configuration. To have this capability, we have
    to connect the switch to the host. In VMware Workstation, navigate to **Edit**
    | **Virtual Network Editor** | **VMnet4** and select the **Connect a host virtual
    adapter to this network**. An example of the completed configuration is shown
    in the next screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首选方法是通过绿色接口从Web浏览器访问配置。我们可以在VMnet4交换机上设置另一台机器，或者另一种方法是使用主机进行配置。为了具有这种功能，我们必须将交换机连接到主机。在VMware
    Workstation中，导航至**编辑** | **虚拟网络编辑器** | **VMnet4**，并选择**连接主机虚拟适配器到此网络**。下一个截图显示了已完成的配置示例：
- en: '![Firewall](img/477-1_04_34.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_34.jpg)'
- en: 'The next step is to open a browser of your choice and enter `https://10.4.0.10:441`;
    this will open the web login interface. Enter the username of the admin with a
    password that you configured during the installation. Once you have logged in,
    you will be in the main menu of the firewall. Navigate to **Networking** | **incoming**,
    and this will show the rules that are configured for inbound traffic. An example
    is shown in the next screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是打开您选择的浏览器，并输入`https://10.4.0.10:441`；这将打开Web登录界面。输入在安装过程中配置的管理员用户名和密码。登录后，您将进入防火墙的主菜单。导航至**网络**
    | **传入**，这将显示配置的入站流量规则。下一个截图显示了一个示例：
- en: '![Firewall](img/477-1_04_35.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_35.jpg)'
- en: The previous screenshot shows that, by default, Smoothwall does not allow any
    initiated traffic to come inbound; this is the way an architecture should start.
    Then, the process is to add the protocols that an organization wants to allow
    by policy. For our purpose, when we want to test something and place it in the
    orange interface, we will have to place a rule for that here. If we want to go
    to the internal network or the green interface, then it will not let you configure
    that unless you force it. This is because from the outside, no connections should
    be allowed to the inside. By using this platform, we now have a well-configured
    Bastion Host that is closed by default. The next thing we want to look at is the
    outgoing or egress traffic. Click on **outgoing** to bring up the configuration.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示，默认情况下，Smoothwall不允许任何发起的流量进入；这是架构应该开始的方式。然后，流程是通过策略添加组织想要允许的协议。对于我们的目的，当我们想要测试某些东西并将其放置在橙色接口上时，我们将不得不在这里放置一个规则。如果我们想要进入内部网络或绿色接口，那么除非您强制它，否则它不会让您配置。这是因为从外部，不应允许连接到内部。通过使用这个平台，我们现在有一个默认关闭的良好配置的堡垒主机。我们接下来要看的是出站或出口流量。单击**出站**以打开配置。
- en: 'An example of this default configuration is shown in the next screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了此默认配置的示例：
- en: '![Firewall](img/477-1_04_36.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![防火墙](img/477-1_04_36.jpg)'
- en: The default configuration allows any machines on the green interface to access
    any of the services that most network users would need. This is the power of a
    half-open installation; it allows us to bind all of the ports we need on the inside
    interface of the firewall and then have no ports open on the outside interface,
    with the exception of the ones we require to meet the needs of our security policy.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置允许绿色接口上的任何机器访问大多数网络用户所需的任何服务。这是半开放安装的强大之处；它允许我们在防火墙的内部接口上绑定所有我们需要的端口，然后在外部接口上没有打开任何端口，除了我们需要满足安全策略需求的端口。
- en: For now, we will stop here as we have covered the main configuration of the
    firewall as a Bastion Host, and it is time to move on to another topic. You are
    encouraged to experiment with the firewall and test it as you feel necessary.
    One good way to test it is to bring up the hacking tool of your choice and set
    the target as the interface on the Bastion Host's red interface.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在这里停下，因为我们已经涵盖了防火墙作为堡垒主机的主要配置，是时候转移到另一个主题了。鼓励您根据需要对防火墙进行实验和测试。测试它的一个好方法是启动您选择的黑客工具，并将目标设置为堡垒主机红色接口上的接口。
- en: Web server
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web服务器
- en: 'We now have our architecture built, so it is time to add components to it for
    our testing. This again is something that will largely be dependent on the results
    from the testing methodology that we follow. That being said, we want to have
    a number of different web servers to test and practice against. In [Chapter 3](ch03.html
    "Chapter 3. Planning a Range"), *Planning a Range*, we downloaded and used the
    broken web application virtual machine from the OWASP group. So, we have an excellent
    web server there. Next, we will download another vulnerable web server to practice
    with. We want to download and use the virtual machine metasploitable that is provided
    for us from Rapid7\. You can download the virtual machine from the following link:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了我们的架构，所以是时候为我们的测试添加组件了。这取决于我们遵循的测试方法论的结果。也就是说，我们希望有许多不同的Web服务器进行测试和练习。在[第3章](ch03.html
    "第3章。规划范围")中，我们从OWASP组织下载并使用了破损的Web应用虚拟机。所以，我们有一个很好的Web服务器。接下来，我们将下载另一个易受攻击的Web服务器进行练习。我们想要下载并使用Rapid7提供给我们的metasploitable虚拟机。您可以从以下链接下载虚拟机：
- en: '[www.rapid7.com/metasploit](http://www.rapid7.com/metasploit)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.rapid7.com/metasploit](http://www.rapid7.com/metasploit)'
- en: You will have to register to download the application. Once you have downloaded
    it, open the virtual machine and add a network adapter that is connected to the
    VMnet1 interface. As with most virtual machines, the network adapter is set at
    the VMnet8 interface by default, and we can use this for the direct testing. Any
    time we want to move the web server to another location of our architecture, we
    just change the switch to which the adapter is connected. Additionally, we could
    take a snapshot and have one for each location we want to test with the machine;
    furthermore, we could clone the machine and have clones around our architecture.
    It really does not matter how we do it. The intent is to have machines to test
    our skills and then place obstacles around or between us and the target and learn
    methods to get past them.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要注册才能下载该应用程序。下载后，打开虚拟机并添加一个连接到VMnet1接口的网络适配器。与大多数虚拟机一样，默认情况下，网络适配器设置为VMnet8接口，我们可以将其用于直接测试。每当我们想要将Web服务器移动到我们架构的另一个位置时，我们只需更改适配器连接的交换机。此外，我们可以拍摄快照，并为我们想要测试的每个位置拍摄一个快照；此外，我们可以克隆机器，并在我们的架构周围克隆机器。我们如何做并不重要。意图是拥有机器来测试我们的技能，然后在我们和目标之间或之间放置障碍，并学习如何克服它们的方法。
- en: 'Once you have the machine running, log in to the machine with a username of
    `msfadmin` and a password of `msfadmin`. Once you are logged in, note the IP address
    and open a browser and connect to the web server on the machine. An example of
    the home page of the machine is shown in the next screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了机器，请使用用户名`msfadmin`和密码`msfadmin`登录到机器。登录后，请注意IP地址，打开浏览器并连接到机器上的Web服务器。机器主页的示例如下截图所示：
- en: '![Web server](img/477-1_04_37.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![Web服务器](img/477-1_04_37.jpg)'
- en: As shown in the previous screenshot, the metasploitable virtual machine provides
    us with multiple testing sites; we have Mutillidae, Damn Vulnerable Web App, and
    many others. This will provide us with a multitude of techniques to test on the
    network.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，metasploitable虚拟机为我们提供了多个测试站点；我们有Mutillidae，Damn Vulnerable Web App等。这将为我们提供多种测试网络的技术。
- en: For now, the metasploitable machine in combination with the virtual machine
    we downloaded will suffice for now. There are a number of components we still
    need to build into our network architecture, and we will address them in the later
    chapters throughout the book.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，metasploitable机器与我们下载的虚拟机的组合已经足够。我们仍然需要在我们的网络架构中构建一些组件，并且我们将在本书的后续章节中进行讨论。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have examined the planning and preparation required for
    us to be able to build the range. We looked at the process of creating machines
    and also a plan of placing machines on our network that allows us to emulate a
    number of different layered architectures.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经研究了建立范围所需的规划和准备工作。我们研究了创建机器的过程，以及在我们的网络上放置机器的计划，使我们能够模拟多种不同的分层架构。
- en: We then began a discussion on the range components and we identified the need
    for a routing device at the perimeter that had the capability to perform filtering.
    Additionally, we explored the options for a Bastion Host machine that could run
    our software. We concluded this section with a discussion on how to create a web
    server. For this, we downloaded the metasploitable virtual machine. As we discussed
    in the chapter, we will add more components to our range, but for now, the components
    we have added are enough to move forward. In the next chapter, we will look at
    a number of the testing methodologies that are available for us to follow when
    we perform our professional testing.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始讨论范围组件，并确定了在边界需要具有过滤功能的路由设备的需求。此外，我们探讨了一个能够运行我们软件的堡垒主机机器的选项。我们用讨论如何创建一个Web服务器结束了本节。为此，我们下载了metasploitable虚拟机。正如我们在本章中讨论的那样，我们将为我们的范围添加更多的组件，但目前，我们添加的组件已经足够继续前进。在下一章中，我们将探讨一些专业测试时可用的测试方法。
