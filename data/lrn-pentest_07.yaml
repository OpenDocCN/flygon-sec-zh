- en: Diving into the Metasploit Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Metasploit Framework
- en: The Metasploit Framework is a penetration testing platform that makes exploiting
    target machines simple. It is an intuitive tool that is an integral part of any
    penetration tester's toolkit. It is maintained by Rapid7, but there are many contributors
    in the security community.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework是一个使攻击目标机器变得简单的渗透测试平台。它是任何渗透测试人员工具包中不可或缺的直观工具。它由Rapid7维护，但在安全社区中有许多贡献者。
- en: In this chapter, we will explore the modularity and flexibility of the Metasploit
    Framework. Since there are regular exploits being developed which can be added
    into Metasploit's already large database, you will learn how to find and import
    these. We will explore the various options that exist for payloads and the difference
    between various shells. Building skills in Metasploit can enhance your penetration
    tests, making it easy by using exploits that already exist, as opposed to writing
    your own.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索Metasploit Framework的模块化和灵活性。由于定期开发新的利用并将其添加到Metasploit已经庞大的数据库中，您将学习如何查找和导入这些利用。我们将探索各种有效载荷的选项以及各种shell之间的区别。通过使用已经存在的利用，而不是编写自己的利用，可以提高您在Metasploit中的技能，使渗透测试变得简单。
- en: 'As you progress through this chapter, you will learn about the following :'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本章的进行，您将学习以下内容：
- en: Introducing Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Metasploit
- en: Finding modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找模块
- en: Adding modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加模块
- en: Metasploit options shells and payloads
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit选项shell和有效载荷
- en: Working with MSFvenom
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MSFvenom
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements are needed for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下技术要求：
- en: Kali Linux 2019.1
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux 2019.1
- en: Metasploit Framework version 5
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Framework版本5
- en: Metasploitable 3 virtual machine
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploitable 3虚拟机
- en: Introducing Metasploit
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Metasploit
- en: Metasploit is classified as the world's most used penetration testing software.
    It is a penetration platform that enables you to work with vulnerabilities by
    finding, exploiting, and validating them. It is maintained by Rapid7 and comes
    in two editions, Metasploit Pro and the community edition called the Metasploit
    Framework. Of course there are more features in the Pro edition, but the features
    available in the community edition are not to be overlooked. The features that
    are included in the Metasploit Framework will provide you with enough knowledge
    to learn how to use the Metasploit Framework and what you can achieve by leveraging
    it in your penetration tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit被归类为世界上使用最广泛的渗透测试软件。它是一个渗透平台，使您能够通过查找、利用和验证漏洞来处理漏洞。它由Rapid7维护，并分为两个版本，Metasploit
    Pro和社区版称为Metasploit Framework。当然，Pro版中有更多的功能，但不容忽视的是社区版中可用的功能。Metasploit Framework中包含的功能将为您提供足够的知识，以了解如何使用Metasploit
    Framework以及通过利用它在渗透测试中可以实现什么。
- en: Metasploit's architecture is flexible and modular, which aids developers in
    creating working exploits as vulnerabilities are announced. The interface of Metasploit
    is intuitive and offers a way to run exploit code that has been trusted by the
    security community. Using Metasploit, as opposed to trying to write your own exploit,
    can save you time during a penetration test. As you have learned in [Chapter 1](b37fecb9-6e3e-4ce0-8937-eb376e474bf9.xhtml), *Introduction
    to Penetration Testing*, penetration tests are time-bound. So, spending time on
    crafting your own exploit can waste valuable time that could be used for other
    tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的架构是灵活和模块化的，这有助于开发人员在漏洞被公布时创建可工作的利用。Metasploit的界面直观，并提供了一种运行被安全社区信任的利用代码的方式。与尝试编写自己的利用相比，使用Metasploit可以节省您在渗透测试中的时间。正如您在[第1章](b37fecb9-6e3e-4ce0-8937-eb376e474bf9.xhtml)中学到的，*渗透测试简介*，渗透测试是有时间限制的。因此，花时间编写自己的利用可能会浪费宝贵的时间，这些时间可以用于其他任务。
- en: Not all exploits will work as designed; some might do more harm than good. It
    is important to be vigilant when using exploits that are available on the internet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的利用都会按设计工作；有些可能会带来更多的危害。在使用互联网上可用的利用时，保持警惕是很重要的。
- en: 'In Kali Linux 2019.1, the version of the Metasploit Framework is version 5\.
    Version 5 has introduced some new features such as the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux 2019.1中，Metasploit Framework的版本是5。版本5引入了一些新功能，例如以下内容：
- en: Support for Go, Python, and Ruby languages, which can be used in modules
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Go、Python和Ruby语言的模块
- en: New database and automation APIs
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新数据库和自动化API
- en: New `evasion` modules and libraries
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`逃避`模块和库
- en: Multiple host capabilities in the `exploit` module using the `file://`option
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`exploit`模块中使用`file://`选项的多个主机功能
- en: You can read the full release notes at Rapid7's post: [https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Rapid7的帖子中阅读完整的发布说明：[https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/)。
- en: 'There are a few types of modules that exist in the Metasploit Framework, as
    defined in the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit Framework中存在几种类型的模块，如下所定义：
- en: '**Exploit modules**: Using the exploit module, a series of commands are executed
    on a target, leveraging a specific vulnerability. Typically, this technique uses
    an exploit that has been discovered and released publicly to obtain access to
    the objective. Examples of exploit modules include **injection of codes**, **buffer**
    **overflows**, and exploits on the web.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用模块**：使用利用模块，在目标上执行一系列命令，利用特定的漏洞。通常，这种技术使用已经被发现并公开发布的漏洞来获取对目标的访问权限。利用模块的示例包括**代码注入**、**缓冲区溢出**和网络上的利用。'
- en: '**Auxiliary modules**: There are no payloads in the `auxiliary` module. Instead,
    random measures are used that are not directly related to exploitation. For instance,
    an `auxiliary` module can perform an enumeration scan of users or shares. `Fuzzers`
    and `server capture` modules are other examples of `auxiliary` modules.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助模块**：`辅助`模块中没有有效载荷。相反，使用与利用不直接相关的随机措施。例如，`辅助`模块可以执行用户或共享的枚举扫描。`模糊器`和`服务器捕获`模块是`辅助`模块的其他示例。'
- en: '**Post-exploitation modules**: The post-exploitation module allows you to collect
    additional information or elevate your access to the target system. Some instances
    of these modules include **hash dumping** (which we will cover in [Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)*,
    Understanding Password Attacks*) and **service** and **app enumerators.**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后渗透模块**：后渗透模块允许您收集额外信息或提升对目标系统的访问权限。这些模块的一些示例包括**哈希转储**（我们将在[第6章](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)*，理解密码攻击*中介绍）和**服务**和**应用程序枚举器**。'
- en: '**Payloads**: A payload is a shellcode, executed after a system has been successfully
    compromised. The aim of the payload is to define how you want to connect to the
    target system shell and what you want to do after you obtain control. For instance,
    you can open a Meterpreter session. Meterpreter is an advanced payload with a
    DLL injection in memory, hence it never touches the disk.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**：有效载荷是在成功攻击系统后执行的shellcode。有效载荷的目的是定义您希望如何连接到目标系统shell以及在获得控制后要执行的操作。例如，您可以打开一个Meterpreter会话。Meterpreter是一个具有内存中DLL注入的高级有效载荷，因此它永远不会触及磁盘。'
- en: '**NOP generator**: Using NOP generators, you create a random byte range that
    allows you to bypass NOP sled signatures in standard intrusion detection and prevention
    devices.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOP生成器**：使用NOP生成器，您可以创建一个随机字节范围，允许您绕过标准入侵检测和预防设备中的NOP滑坡签名。'
- en: Let's get started with the Metasploit Framework, with some initial configuration
    steps. The Metasploit Framework is launched from a Terminal window within Kali
    Linux using the command: `msfconsole`**.**
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些初始配置步骤开始使用Metasploit框架。在Kali Linux中的终端窗口中使用命令启动Metasploit框架：`msfconsole`**.**
- en: Updating the Metasploit Framework
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Metasploit框架
- en: 'In the past, updating the Metasploit Framework would entail running the `msfupdate`
    command once you started the application. Now that the Metasploit Framework is
    included by default within Kali Linux, you can update it by running the following
    command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，更新Metasploit框架需要在启动应用程序后运行`msfupdate`命令。现在Metasploit框架默认包含在Kali Linux中，您可以通过运行以下命令来更新它：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install the latest release of the Metasploit Framework.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装最新版本的Metasploit框架。
- en: Linking the Metasploit Framework to a database
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Metasploit框架链接到数据库
- en: Metasploit provides support for a backend database that supports PostgreSQL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供对支持PostgreSQL的后端数据库的支持。
- en: 'You do not have to have a database if you want to simply run the Metasploit
    Framework, but it makes it useful if you would like to view the data you have
    collected. Creating a database is done using the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想运行Metasploit框架而不需要数据库，那么您不需要数据库，但如果您想查看您收集的数据，那么创建数据库将非常有用。创建数据库使用以下步骤完成：
- en: First, you need to start the PostgreSQL service using the `service PostgreSQL
    start`command from a Terminal window in Kali Linux.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要使用Kali Linux中的终端窗口使用`service PostgreSQL start`命令启动PostgreSQL服务。
- en: 'Once the service has started, we need to define the Metasploit username and
    password that will connect to the database we will create. In order to create
    a username and password for the database, we need to migrate to the PostgreSQL
    user. This is done using the `su postgres` command. You will notice that your
    prompt now changes to `postgres@kali:~#`. Now, we will create a user using the `createuser
    [name] -P` command. Follow the prompts and define a password. In my setup, I have
    used the `msf_user`username, as shown in the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务启动，我们需要定义将连接到我们将创建的数据库的Metasploit用户名和密码。为了为数据库创建用户名和密码，我们需要迁移到PostgreSQL用户。这是使用`su
    postgres`命令完成的。您会注意到您的提示现在变成了`postgres@kali:~#`。现在，我们将使用`createuser [name] -P`命令创建一个用户。按照提示并定义一个密码。在我的设置中，我使用了`msf_user`用户名，如下面的截图所示：
- en: '![](img/c7433502-287d-47d4-a96e-eed9e5dac5c1.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7433502-287d-47d4-a96e-eed9e5dac5c1.png)'
- en: 'Figure 1: Creating a user for the PostgreSQL database'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：为PostgreSQL数据库创建用户
- en: 'Now, we create the database using the `created --owner=[name] [database]` command.
    In my setup, I have used the `msf_user`username and the database is called `msf_database`, as
    shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用`created --owner=[name] [database]`命令创建数据库。在我的设置中，我使用了`msf_user`用户名，并且数据库名为`msf_database`，如下面的截图所示：
- en: '![](img/de127ba1-f830-4c6c-9a8f-03143ca52d65.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de127ba1-f830-4c6c-9a8f-03143ca52d65.png)'
- en: 'Figure 2: Creating the database and linking the user to it'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：创建数据库并将用户链接到数据库
- en: 'Next, we will open the Metasploit Framework using the `msfconsole` command.
    Once everything has loaded, we will connect to the database we have just created
    using the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`msfconsole`命令打开Metasploit框架。一切加载完成后，我们将使用以下命令连接到刚刚创建的数据库：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example, we can use `db_connect msf_user:password@127.0.0.1/msf_database`, as
    shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用`db_connect msf_user:password@127.0.0.1/msf_database`，如下面的截图所示：
- en: '![](img/3d40e73d-3bff-4bd2-bebc-618ab365e284.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d40e73d-3bff-4bd2-bebc-618ab365e284.png)'
- en: 'Figure 3: Connecting to the database that was just created'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：连接到刚刚创建的数据库
- en: To enable Metasploit to automatically connect to the database, we will need
    to edit the `database.yml` file, which is located at `/usr/share/metasploit-framework/config/`,
    as shown in the following screenshot*.*
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使Metasploit自动连接到数据库，我们需要编辑位于`/usr/share/metasploit-framework/config/`的`database.yml`文件，如下面的截图所示*.*
- en: Before editing the `database.yml` file, ensure that you exit out of the Metasploit
    Framework.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑`database.yml`文件之前，请确保退出Metasploit框架。
- en: 'If you do not have the file, you can modify the sample file and add in the
    details of the database you have created, plus the user login details. Save the
    file as `database.yml`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有该文件，可以修改示例文件并添加您创建的数据库的详细信息以及用户登录详细信息。将文件保存为`database.yml`。
- en: '![](img/8f462ef6-eb3b-4936-93e3-f2a102b7970f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f462ef6-eb3b-4936-93e3-f2a102b7970f.png)'
- en: 'Figure 4: Modifying the database.yml file'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：修改database.yml文件
- en: 'Once the file has been modified, you can launch the Metasploit Framework again
    and check the database connection using the `db_status` command. If everything
    is in order, you will see a message displaying which database Metasploit is connected
    to, as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件修改后，可以再次启动Metasploit Framework，并使用`db_status`命令检查数据库连接。如果一切正常，您将看到一条消息显示Metasploit连接到哪个数据库，如下截图所示：
- en: '![](img/31f420f4-b9a2-4eb3-89e0-555ae82be363.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31f420f4-b9a2-4eb3-89e0-555ae82be363.png)'
- en: 'Figure 5: Checking the database connection within the Metasploit Framework'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：在Metasploit Framework中检查数据库连接
- en: If you do not have the PostgreSQL service started before running the Metasploit
    Framework, then, when opening the Metasploit Framework, you will receive database
    connection errors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行Metasploit Framework之前未启动PostgreSQL服务，则在打开Metasploit Framework时，您将收到数据库连接错误。
- en: The database allows you to store information such as host data and exploit results.
    Having Metasploit store data in a database enables you to access the results for
    future reference.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库允许您存储诸如主机数据和利用结果之类的信息。让Metasploit将数据存储在数据库中使您能够在将来参考结果。
- en: Enhancing your experience within Metasploit
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强您在Metasploit中的体验
- en: 'Using the `workspaces` functionality of Metasploit enables you to organize
    your movements while performing penetration tests. For example, if you are performing
    various tasks against different departments, you can create `workspace` for each
    department, as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit的`workspaces`功能使您能够在执行渗透测试时组织您的动作。例如，如果您正在针对不同部门执行各种任务，您可以为每个部门创建一个`workspace`，如下截图所示：
- en: '![](img/f4cdd2df-d2ab-40ed-8acf-c551e45ac947.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4cdd2df-d2ab-40ed-8acf-c551e45ac947.png)'
- en: 'Figure 6: Creating and deleting workspaces'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：创建和删除工作空间
- en: The command to create `workspace` is `workspace -a [name]` and to delete it,
    we use `workspace -d [name]`**. **To switch between workspaces, you can use the `workspace
    [name]` command. Notice that you can define multiple workspaces within one line
    by separating the names with a space.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`workspace`的命令是`workspace -a [name]`，要删除它，我们使用`workspace -d [name]`**。**要在工作空间之间切换，可以使用`workspace
    [name]`命令。请注意，您可以在一行内使用空格分隔名称来定义多个工作空间。
- en: 'Metasploit enables you to import scans such as those that were run by Nmap
    or Nessus. In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing
    Information Gathering, *you would have exported the Nmap scan of Metasploitable
    3 to a `.xml` file. In order to import that into the Metasploit Framework, you
    can use the `db_import [path to file]` command, as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit使您能够导入诸如Nmap或Nessus运行的扫描之类的扫描。在[第3章](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)中，*执行信息收集*，您可能已将Metasploitable
    3的Nmap扫描导出到`.xml`文件。为了将其导入Metasploit Framework，您可以使用`db_import [文件路径]`命令，如下截图所示：
- en: '![](img/464dab05-5a33-4178-94dd-14700f03af84.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/464dab05-5a33-4178-94dd-14700f03af84.png)'
- en: 'Figure 7: Importing an Nmap scan'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：导入Nmap扫描
- en: To convert an Nmap-exported XML file into HTML, you can leverage this command: `xsltproc
    <nmap-output.xml> -o <nmap-output.html>`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Nmap导出的XML文件转换为HTML，您可以利用此命令：`xsltproc <nmap-output.xml> -o <nmap-output.html>`。
- en: Metasploit has a Nessus bridge that can allow you to connect to your Nessus
    database and import scans directly into Metasploit. Let's perform an import using
    the scan we performed in [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)*,
    Performing Information Gathering:*
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit具有一个Nessus桥，可以让您连接到Nessus数据库并直接将扫描导入Metasploit。让我们使用在[第3章](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)中执行的扫描进行导入，执行信息收集：
- en: 'From a Terminal window, open the Metasploit Framework using the `msfconsole` command.
    Once the framework has loaded, we will load the Nessus bridge plugin using the `load
    nessus` command. Next, you need to connect to your Nessus database. Ensure that
    the Nessus service is running, then connect using the `nessus_connect username:password@IP` command,
    as shown in the following screenshot. In my setup, I have the database locally
    on Kali, hence I am using the loopback address of `127.0.0.1`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端窗口，使用`msfconsole`命令打开Metasploit Framework。框架加载后，我们将使用`load nessus`命令加载Nessus桥插件。接下来，您需要连接到您的Nessus数据库。确保Nessus服务正在运行，然后使用`nessus_connect
    username:password@IP`命令进行连接，如下截图所示。在我的设置中，我将数据库本地化在Kali上，因此我使用回环地址`127.0.0.1`：
- en: '![](img/68ca7d22-06a1-4dee-a6e1-846d2527945f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68ca7d22-06a1-4dee-a6e1-846d2527945f.png)'
- en: 'Figure 8: Connecting to the Nessus database within the Metasploit Framework'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：在Metasploit Framework中连接到Nessus数据库
- en: 'Once you have connected to the Nessus database, you can view your list of scans
    by entering the `nessus_scan_list` command, as shown in the following screenshot:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到Nessus数据库后，您可以通过输入`nessus_scan_list`命令查看扫描列表，如下截图所示：
- en: '![](img/3936bb5e-723d-4a16-94b5-316eed75cbf3.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3936bb5e-723d-4a16-94b5-316eed75cbf3.png)'
- en: 'Figure 9: Viewing a list of Nessus scans'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：查看Nessus扫描列表
- en: 'Importing the scan into the Metasploit Framework is done using the `nessus_db_import scanid`
    command, as shown in the following screenshot:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`nessus_db_import scanid`命令将扫描导入Metasploit Framework，如下截图所示：
- en: '![](img/69411b21-f262-44ab-9c48-bdf61b70886e.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69411b21-f262-44ab-9c48-bdf61b70886e.png)'
- en: 'Figure 10: Importing the Nessus scan'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：导入Nessus扫描
- en: Once you have imported your scan, you are now able to view the list of vulnerabilities
    and perform searches to find out which vulnerability is covered by Metasploit.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 导入扫描后，您现在可以查看漏洞列表并进行搜索，以找出Metasploit覆盖的哪些漏洞。
- en: 'Using the `hosts -c address` command, `vulns` gives us a list of vulnerabilities
    per host and using the `vulns` command will display the full list of vulnerabilities
    and the IP address of the host that has them. You will notice, in the following
    screenshot, that the Metasploitable 3 virtual machine has a number of vulnerabilities,
    which were imported from Nessus:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`hosts -c address`命令，`vulns`会给我们列出每个主机的漏洞列表，使用`vulns`命令将显示漏洞的完整列表和具有这些漏洞的主机的IP地址。您会注意到，在下面的屏幕截图中，Metasploitable
    3虚拟机有许多漏洞，这些漏洞是从Nessus导入的：
- en: '![](img/55e6f2fa-13b8-4e3c-8eab-709551e867b7.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55e6f2fa-13b8-4e3c-8eab-709551e867b7.png)'
- en: 'Figure 11: Displaying vulnerabilities discovered by Nessus'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：Nessus发现的漏洞显示
- en: 'We can now search for a specific vulnerability against the Nessus database
    import. For example, using the `vulns -S eternalblue` command, we can search for
    a well-known vulnerability, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以针对Nessus数据库导入搜索特定漏洞。例如，使用`vulns -S eternalblue`命令，我们可以搜索一个众所周知的漏洞，如下面的屏幕截图所示：
- en: '![](img/a6c2db09-0642-4e0c-a906-8384ed90d0f7.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c2db09-0642-4e0c-a906-8384ed90d0f7.png)'
- en: 'Figure 12: Searching for vulnerabilities within the Nessus scan'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：在Nessus扫描中搜索漏洞
- en: Notice that the output displays the IP address of the host and the vulnerabilities
    related to the search query.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出显示了主机的IP地址和与搜索查询相关的漏洞。
- en: Using Metasploit to exploit a remote target
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit对远程目标进行利用
- en: Now that we have imported data from Nessus, and we understand how to use the
    features within the Metasploit Framework, let's perform an exploit to the Metasploitable
    3 virtual machine.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从Nessus导入了数据，并且了解了如何使用Metasploit Framework中的功能，让我们对Metasploitable 3虚拟机进行漏洞利用。
- en: 'We will use the `ms17_010_eternalblue` exploit. We have identified that the
    Metasploitable 3 virtual machine is vulnerable to this exploit:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ms17_010_eternalblue`漏洞。我们已经确定Metasploitable 3虚拟机对此漏洞存在漏洞：
- en: Open the Metasploit Framework from a Terminal window using the `msfconsole`
    command.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`msfconsole`命令从终端窗口打开Metasploit Framework。
- en: Once the Metasploit Framework has loaded, use the `use exploit/windows/smb/ms17_010_eternalblue`
    command and press *Enter*.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载Metasploit Framework后，使用`use exploit/windows/smb/ms17_010_eternalblue`命令并按*Enter*。
- en: Define the target (which is the IP address of your Metasploitable 3 virtual
    machine) using the `set RHOSTS [IP]` command.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`set RHOSTS [IP]`命令定义目标（即您的Metasploitable 3虚拟机的IP地址）。
- en: 'We will use the Meterpreter payload, as this will be used later in this chapter.
    Define the payload using the `set payload``windows/x64/meterpreter/reverse_tcp` command.
    Note all of the set options, as shown in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Meterpreter有效载荷，因为这将在本章后面使用。使用`set payload``windows/x64/meterpreter/reverse_tcp`命令定义有效载荷。注意所有的设置选项，如下面的屏幕截图所示：
- en: '![](img/70ffc25d-38ef-480b-98ec-50b1a3811acf.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70ffc25d-38ef-480b-98ec-50b1a3811acf.png)'
- en: 'Figure 13: Exploit options defined'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：定义的漏洞利用选项
- en: 'Once you have defined the options, you can run the exploit using the `exploit`
    command, as shown in the following screenshot:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您定义了选项，您可以使用`exploit`命令运行漏洞利用，如下面的屏幕截图所示：
- en: '![](img/aab09e49-5d4c-484c-9f36-9e47efbc69ff.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aab09e49-5d4c-484c-9f36-9e47efbc69ff.png)'
- en: 'Figure 14: Exploit has completed successfully'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：漏洞利用已成功完成
- en: You will now have a remote session established to the Metasploitable 3 virtual
    machine.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经建立了与Metasploitable 3虚拟机的远程会话。
- en: You will use this session later in this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章后面使用此会话。
- en: Finding modules
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找模块
- en: As you perform penetration tests on various targets, you might run into a case
    where Metasploit does not have an exploit that you can use. Perhaps you haven't
    encountered such a situation, but you want to keep your Metasploit database up
    to date. In either situation, having knowledge about **where to find** modules
    and **how to add** them into Metasploit is a useful skill to have. There are a
    number of public repositories that host modules that are available for download.
    These websites would be your number one resource for finding modules for Metasploit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在对各种目标进行渗透测试时，您可能会遇到Metasploit没有可用的漏洞利用的情况。也许您还没有遇到这种情况，但是您希望保持Metasploit数据库的最新状态。在任何情况下，了解**在哪里找到**模块以及**如何添加**它们到Metasploit是一项有用的技能。有许多公共存储库可供下载模块。这些网站将是您寻找Metasploit模块的首要资源。
- en: Exploit-DB
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Exploit-DB
- en: The first one we will look at is the Exploit Database (commonly known as **Exploit-DB**).
    You will recognize Exploit-DB from the previous chapter *(*[Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml),
    *Performing Information Gathering)* when we worked with Google dorks. Exploit-DB
    can be accessed directly at: [https://www.exploit-db.com](https://www.exploit-db.com).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看一下Exploit Database（通常称为**Exploit-DB**）。您会从上一章（*执行信息收集*）中认识到Exploit-DB，当时我们使用Google
    dorks进行工作。可以直接访问Exploit-DB：[https://www.exploit-db.com](https://www.exploit-db.com)。
- en: 'The website has a section called **exploits**,where you are able to find modules
    that are published by security companies and individuals. The website has features
    such as verification of the module (V), the ability to download the module (D),
    and the ability to download the vulnerable application (A) if applicable. This
    is depicted in the title bar as D, A, and V, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 网站有一个名为**exploits**的部分，您可以在其中找到由安全公司和个人发布的模块。该网站具有验证模块（V）、下载模块（D）和下载易受攻击应用程序（A）的功能（如果适用）。这在标题栏中显示为D、A和V，如下面的屏幕截图所示：
- en: '![](img/9854a591-396e-4a98-a2b7-6eef315dbed0.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9854a591-396e-4a98-a2b7-6eef315dbed0.png)'
- en: 'Figure 15: Exploit-DB showing a list of exploits'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：Exploit-DB显示漏洞列表
- en: Notice that the modules span across multiple platforms and types.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模块跨越多个平台和类型。
- en: Rapid7 exploit database
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rapid7漏洞数据库
- en: Rapid7 is another public resource where you are able to obtain modules *(*see
    *Figure 16)*. This repository is accessible at: [https://www.rapid7.com/db/modules](https://www.rapid7.com/db/modules).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Rapid7是另一个公共资源，您可以在那里获取模块（*见*图16）。 此存储库可在[https://www.rapid7.com/db/modules](https://www.rapid7.com/db/modules)访问。
- en: 'Rapid7''s exploit database is very similar to Exploit-DB; however, it does
    not contain additional features such as the Google Hacking Database:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Rapid7的漏洞利用数据库与Exploit-DB非常相似； 但是，它不包含诸如Google Hacking Database之类的其他功能：
- en: '![](img/118ef325-957e-43e3-9f36-fa57fe446f32.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/118ef325-957e-43e3-9f36-fa57fe446f32.png)'
- en: 'Figure 16: Rapid7''s exploit database'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：Rapid7的漏洞利用数据库
- en: 'Rapid7 also lists the vulnerabilities and links them to the relevant exploits.
    The following example shows the CVE-2019-8943 Wordpress vulnerability and exploit
    link:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Rapid7还列出了漏洞，并将它们链接到相关的漏洞利用。 以下示例显示了CVE-2019-8943 Wordpress漏洞和漏洞利用链接：
- en: '![](img/936cfac0-66c8-4467-96c9-9bc1da3456ed.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/936cfac0-66c8-4467-96c9-9bc1da3456ed.png)'
- en: 'Figure 17: A vulnerability tied to an exploit'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图17：与漏洞利用相关的漏洞
- en: When you click on the exploit, you are able to view the complete details about
    what the exploit does and its available options.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 单击漏洞利用后，您可以查看有关漏洞利用的完整详细信息以及其可用选项。
- en: 0day.today
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0day.today
- en: '0day.today is another repository that holds a number of modules. The difference
    with 0day.today is that there are exploits available that can be purchased, as
    shown in the following screenshot. Some of the paid exploits claim to perform
    activities such as Snapchat takeover and Facebook group theft. There are other
    exploits that are available for free:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 0day.today是另一个存储许多模块的仓库。 0day.today的不同之处在于可以购买到一些可用的漏洞利用，如下面的屏幕截图所示。 一些付费的漏洞利用声称可以执行诸如Snapchat接管和Facebook群组窃取之类的活动。
    还有其他可免费使用的漏洞利用：
- en: '![](img/8d3668c6-dc8e-4ebd-ae45-1bbbc6f6de39.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d3668c6-dc8e-4ebd-ae45-1bbbc6f6de39.png)'
- en: 'Figure 18: 0day.today exploit database'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图18：0day.today漏洞利用数据库
- en: 0day.today is accessible at [https://0day.today/](https://0day.today/).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 0day.today可在[https://0day.today/](https://0day.today/)访问。
- en: Adding modules
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模块
- en: Now that we have covered how to find modules for the Metasploit Framework, let's
    dive into adding a module. We will use the module that covers the exploit for Wordpress
    5.0.0 — Crop-image Shell Upload (Metasploit). The direct link for this exploit
    is [https://www.exploit-db.com/exploits/46662](https://www.exploit-db.com/exploits/46662).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何为Metasploit Framework查找模块，让我们深入了解如何添加模块。 我们将使用涵盖Wordpress 5.0.0的漏洞利用的模块
    - Crop-image Shell Upload（Metasploit）。 此漏洞利用的直接链接为[https://www.exploit-db.com/exploits/46662](https://www.exploit-db.com/exploits/46662)。
- en: 'Before we download the exploit, we will verify that it does not exist currently
    in the Metasploit Framework. To do this, we can use the `search` command *(*see
    *Figure 19)*. This command allows you to search for specific modules:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载漏洞利用之前，我们将验证它当前是否存在于Metasploit Framework中。 为此，我们可以使用`search`命令（*见*图19）。 此命令允许您搜索特定模块：
- en: '![](img/c559a305-4b9b-44d5-89a6-9f69793b7dff.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c559a305-4b9b-44d5-89a6-9f69793b7dff.png)'
- en: 'Figure 19: Searching for a module related to crop-image'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图19：搜索与裁剪图像相关的模块
- en: 'Since there are no results, we will exit the Metasploit Framework and download
    the module to add it. Using the preceding direct link, you can use the download
    function to download the actual module, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有结果，我们将退出Metasploit Framework并下载模块以添加它。 使用前面的直接链接，您可以使用下载功能来下载实际的模块，如下面的屏幕截图所示：
- en: '![](img/21702ef3-87a8-47c7-ac8f-abfc7049461c.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21702ef3-87a8-47c7-ac8f-abfc7049461c.png)'
- en: 'Figure 20: Downloading the exploit from Exploit-DB'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：从Exploit-DB下载漏洞利用
- en: 'All modules within the Metasploit Framework are located within `/usr/share/metasploit-framework/modules`.Since
    this is an `exploit` and it is related to `http`, I have placed it within the `/usr/share/metasploit-framework/modules/exploits/multi/http`
    path, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework中的所有模块都位于`/usr/share/metasploit-framework/modules`中。由于这是一个`exploit`，与`http`相关，我已将其放置在`/usr/share/metasploit-framework/modules/exploits/multi/http`路径中，如下面的屏幕截图所示：
- en: '![](img/f3b21810-b112-4e0f-a51f-b9d1046f478a.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3b21810-b112-4e0f-a51f-b9d1046f478a.png)'
- en: 'Figure 21: Location of the downloaded exploit'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图21：下载的漏洞利用的位置
- en: 'When you open the Metasploit Framework, performing a search will now display
    the newly added `exploit`, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开Metasploit Framework并执行搜索时，将显示新添加的`exploit`，如下面的屏幕截图所示：
- en: '![](img/ef87f807-ad79-471b-84a3-c1c3862544e3.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef87f807-ad79-471b-84a3-c1c3862544e3.png)'
- en: 'Figure 22: Exploit added to the Metasploit database'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图22：漏洞利用添加到Metasploit数据库
- en: You can also use the `loadpath` command to load a newly added module, for example, `loadpath
    /usr/share/metasploit-framework/modules`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`loadpath`命令来加载新添加的模块，例如，`loadpath /usr/share/metasploit-framework/modules`。
- en: Metasploit options, shells, and payloads
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit选项、shell和有效载荷
- en: Metasploit has a number of options, shells, and payloads that are used when
    you select various exploits.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择不同的漏洞利用时，Metasploit具有许多选项、shell和有效载荷。
- en: Covering all possible options within all exploits is not in the scope of this
    book, but I will explain how to find the options and discuss the most common options
    that are used. It's important to understand the various shells and payload options
    that exist.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖所有漏洞利用中的所有可能选项不在本书的范围内，但我将解释如何查找选项并讨论常用的选项。 了解各种shell和有效载荷选项非常重要。
- en: Options
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项
- en: 'Different modules within the Metasploit Framework make use of different options.
    For example, a login scanner module would contain options such as `userpass_file`,
    `pass_file`, and `user_file`. In the following screenshot, you will notice the
    options for the `auxiliary/scanner/ssh/ssh_login` module:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework中的不同模块使用不同的选项。 例如，登录扫描模块将包含选项，如`userpass_file`、`pass_file`和`user_file`。
    在下面的屏幕截图中，您将注意到`auxiliary/scanner/ssh/ssh_login`模块的选项：
- en: '![](img/24125090-b412-463a-89b7-31cc92643cd1.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24125090-b412-463a-89b7-31cc92643cd1.png)'
- en: 'Figure 23: SSH login scanner options'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图23：SSH登录扫描仪选项
- en: 'To view the options for a specific module, you can use `show options` command.
    To set an option, you will use the `set` command. The most common options that
    you will use often are the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定模块的选项，可以使用`show options`命令。要设置选项，您将使用`set`命令。您经常使用的最常见选项如下：
- en: '**RHOST**: This refers to the remote host that you want to exploit. This tells
    Metasploit which system you want to attack, so it''s a mandatory field that should
    be defined.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RHOST**：这指的是您想要利用的远程主机。这告诉Metasploit您想要攻击哪个系统，因此这是一个必须定义的强制性字段。'
- en: '**RPORT**: This defines the remote port that you want to target. Some modules
    might already have this field defined to the default value of the exploit. For
    example, using the `ms17_010_eternalblue` module will have the RPORT value defined
    to `445`. The only time you would really modify the RPORT value is if the target
    is using a custom port, such as using port `2222` for SSH, instead of port `22`.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RPORT**：这定义了您想要攻击的远程端口。一些模块可能已经将此字段定义为利用的默认值。例如，使用`ms17_010_eternalblue`模块将会将RPORT值定义为`445`。您真正修改RPORT值的唯一时机是如果目标使用自定义端口，例如使用端口`2222`进行SSH，而不是端口`22`。'
- en: '**LHOST**: This is the IP address that you want the target machine to connect
    to. Keep in mind where you are located; if you are traversing a public network,
    then you will need to define your public IP and configure port forwarding so that
    the return traffic from the target machine can reach your system. Do not configure
    values such as `localhost`, `0.0.0.0`, or `127.0.0.1` as this will instruct the
    target to connect to itself.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LHOST**：这是您希望目标机器连接的IP地址。请记住您所在的位置；如果您正在穿越公共网络，那么您将需要定义您的公共IP并配置端口转发，以便来自目标机器的返回流量可以到达您的系统。不要配置诸如`localhost`、`0.0.0.0`或`127.0.0.1`之类的值，因为这将指示目标连接到自身。'
- en: '**LPORT**: This is the local port on your system that you want the target to
    connect to.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LPORT**：这是您系统上希望目标连接的本地端口。'
- en: Metasploit, being as intuitive as it is, will provide you with descriptions
    for each option that exists in the various modules. You will notice this in the
    preceding screenshot.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit非常直观，会为各个模块中存在的每个选项提供描述。您将在前面的截图中注意到这一点。
- en: Shells
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell
- en: There are two types of shells that exist within the Metasploit Framework. These
    are **bind shells** and **reverse shells**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架中存在两种类型的shell，即**绑定shell**和**反向shell**。
- en: A **bind shell** opens a new service on the target machine and requires you
    to connect to it to obtain a shell. The problem with these shells is that firewalls
    by default block connections on random ports, hence making a bind shell not as
    effective as a reverse shell.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**绑定shell**在目标机器上打开一个新的服务，并需要您连接到它以获得shell。这些shell的问题在于防火墙默认会阻止随机端口的连接，因此绑定shell不如**反向shell**有效。'
- en: A **reverse shell** pushes a connection back to the attack machine instead of
    waiting for you to connect to it. It requires that a listener be set up first
    on the attack machine so that it can listen for a connection from the target machine.
    A common practice is to set up the listener on port `80` or `443`. These ports
    are directly related to `http` and `https` respectively and are linked to everyday
    web traffic. Blocking these ports is simply not feasible, therefore making them
    prime targets for reverse shell connections.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**反向shell**将连接推送回攻击机器，而不是等待您连接。它要求首先在攻击机器上设置监听器，以便它可以监听来自目标机器的连接。一个常见的做法是在端口`80`或`443`上设置监听器。这些端口分别与`http`和`https`直接相关，并与日常网络流量相关联。阻止这些端口根本不可行，因此使它们成为反向shell连接的主要目标。'
- en: Payloads
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效载荷
- en: The Metasploit Framework has a large collection of payloads, which can be used
    for all types of scenarios. Viewing the current **payloads** can be done with
    the `show payloads` command. When you run this command, some of the payloads will
    have the same name and look as if they do the same thing; however, there is a
    difference. For example, if you look at the `windows/shell/reverse_tcp` and `windows/shell_reverse_tcp` payloads,
    the forward slash `/` tells us that it is a staged payload, and the underscore
    `_` tells us that the payload is a single one.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架拥有大量的有效载荷，可用于各种场景。可以使用`show payloads`命令查看当前的**有效载荷**。运行此命令时，一些有效载荷将具有相同的名称，并且看起来好像执行相同的操作；但实际上是有区别的。例如，如果您查看`windows/shell/reverse_tcp`和`windows/shell_reverse_tcp`有效载荷，斜杠`/`告诉我们这是一个分阶段的有效载荷，下划线`_`告诉我们这是一个单一的有效载荷。
- en: 'A **staged payload** is a payload that consists of two main components. The
    components are a small loader and final stage payload. The **stagers** are responsible
    for pulling down the rest of the staged payload. Looking at the preceding example, `windows/shell/reverse_tcp`
    will perform two functions. First, it will send the loader and, once the loader
    is executed, it will request the handler (the attacker) to send over the final
    stage payload. Once that is completed, you will have a shell. An example is seen in
    the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**分阶段有效载荷**是由两个主要组件组成的有效载荷。这些组件是一个小加载程序和最终阶段有效载荷。**分阶段器**负责拉取其余的分阶段有效载荷。看前面的例子，`windows/shell/reverse_tcp`将执行两个功能。首先，它将发送加载程序，一旦加载程序被执行，它将请求处理程序（攻击者）发送最终阶段有效载荷。完成后，您将获得一个shell。示例见下图：'
- en: '![](img/1df4881f-f232-4a62-9a70-9fb46eee4088.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1df4881f-f232-4a62-9a70-9fb46eee4088.png)'
- en: 'Figure 24: An Eternalblue staged payload'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图24：一个Eternalblue分阶段有效载荷
- en: A **single payload **is a fire-and-forget type of payload. This payload contains
    both the loader and the payload. When this type of payload is used, both the loader
    and the payload are sent at once to the target.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**单一有效载荷**是一种一次性有效载荷。此有效载荷包含加载程序和有效载荷。使用此类型的有效载荷时，加载程序和有效载荷将同时发送到目标。'
- en: '**Meterpreter** is an attack payload that provides an interactive shell. Within
    this shell, the attacker can explore the target and execute code. It is deployed
    using an in-memory DLL injection. This results in Meterpreter running entirely
    in memory and not touching the target''s local disk. Meterpreter injects itself
    into other running processes, making its forensic footprint very small. It was
    designed to circumvent the drawbacks that other payloads may have, such as triggering
    alarms that might alert the target to your activities.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**Meterpreter**是一个提供交互式shell的攻击载荷。在这个shell中，攻击者可以探索目标并执行代码。它是使用内存中的DLL注入部署的。这导致Meterpreter完全在内存中运行，不会触及目标的本地磁盘。Meterpreter将自身注入到其他运行的进程中，使其取证痕迹非常小。它旨在规避其他载荷可能存在的缺点，比如可能触发警报，可能会提醒目标您的活动。'
- en: 'If you think of a reverse shell, its purpose is relatively simple: it is to
    obtain a shell. This may be your first choice, but having a good knowledge of
    the various types of payloads will help you to select the best option for your
    penetration test. For example, using the `windows/meterpreter/reverse_tcp` payload
    is stable and it works, however, using `windows/meterpreter/reverse_https` is
    the more powerful choice. How so? The `windows/meterpreter/reverse_https` payload
    provides a lot more features, such as having an encrypted channel (making it harder
    to detect).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑一个反向shell，它的目的相对简单：获得一个shell。这可能是你的首选，但对各种类型的载荷有很好的了解将有助于您选择最佳的选项进行渗透测试。例如，使用`windows/meterpreter/reverse_tcp`载荷是稳定的并且有效，但是使用`windows/meterpreter/reverse_https`是更强大的选择。为什么呢？`windows/meterpreter/reverse_https`载荷提供了更多功能，比如具有加密通道（使其更难以检测）。
- en: 'Meterpreter provides the ability to remotely control the filesystem. Using
    this functionality, you can upload file to the target and download files. In the
    following screenshot, I am using the **upload** functionality within Meterpreter
    to upload a malicious version of `procmon.exe`*. *The `getwd` command is used
    to show the current working directory on the target system. The `getlwd` command is
    used to show the working directory on the local system:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter提供了远程控制文件系统的能力。使用这个功能，你可以上传文件到目标并下载文件。在下面的截图中，我正在使用Meterpreter中的**上传**功能来上传一个恶意版本的`procmon.exe`。`getwd`命令用于显示目标系统上的当前工作目录。`getlwd`命令用于显示本地系统的工作目录。
- en: '![](img/79782167-db13-4c38-a33b-223db890ec6a.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79782167-db13-4c38-a33b-223db890ec6a.png)'
- en: 'Figure 25: Leveraging the upload functionality of Meterpreter'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图25：利用Meterpreter的上传功能
- en: 'Meterpreter has a number of post-exploitation modules that can be used. These
    can be found using the `search post` command. In the following screenshot, I am
    using the `post` module, which enumerates the logged-on users. Notice that it
    will save the results in the `loot` folder, so you can reference this again at
    a later stage:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter有许多可以使用的后渗透模块。可以使用`search post`命令找到这些模块。在下面的截图中，我正在使用`post`模块，该模块列举了已登录的用户。请注意，它将保存结果在`loot`文件夹中，因此您可以在以后再次参考这些结果。
- en: '![](img/2b665ccb-eff2-450f-8317-dc943323114a.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b665ccb-eff2-450f-8317-dc943323114a.png)'
- en: 'Figure 26: Using a post-exploitation module within Meterpreter'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图26：在Meterpreter中使用后渗透模块
- en: 'Another feature of Meterpreter is the `hashdump` command. This command dumps
    the current hashes of the system, which you can copy to a text file for offline
    password cracking, as shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter的另一个特性是`hashdump`命令。该命令会转储系统的当前哈希值，您可以将其复制到文本文件中进行离线密码破解，如下面的截图所示。
- en: '![](img/f87cf3b4-0b20-4dc1-996a-50ddf9b2475c.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f87cf3b4-0b20-4dc1-996a-50ddf9b2475c.png)'
- en: 'Figure 27: Using the hashdump command to dump the current hashes of the target
    system'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图27：使用hashdump命令转储目标系统的当前哈希值
- en: The preceding hashes were dumped from the Metasploitable 3 virtual machine.
    Keep these, as you will use them again in [Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)*,
    Understanding Password Attacks. *I saved them as `Meta3-hashes.txt`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的哈希值是从Metasploitable 3虚拟机中转储出来的。请保留这些，因为您将在[第6章](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)中再次使用它们，理解密码攻击。我将它们保存为`Meta3-hashes.txt`。
- en: Meterpreter has a long list of features. As you conduct various penetration
    tests, you will leverage different features in various scenarios.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter有很多功能。在进行各种渗透测试时，您将在不同的场景中利用不同的功能。
- en: Working with MSFvenom
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MSFvenom
- en: 'Earlier in this chapter, we focused on using the Metasploit Framework to exploit
    a vulnerability on a target system and take control of it. With MSFvenom, instead
    of relying on a vulnerability in the system, you are aiming to exploit the most
    common security issue in all organizations: users. This is a vulnerability that
    can never be fully patched.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们专注于使用Metasploit Framework来利用目标系统上的漏洞并控制它。使用MSFvenom，您不是依赖系统中的漏洞，而是旨在利用所有组织中最常见的安全问题：用户。这是一个永远无法完全修补的漏洞。
- en: MSFvenom is essentially used to build shellcode. Shellcode can be defined as
    code that, when it is run, creates a reverse remote shell back to the attacker.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: MSFvenom基本上用于构建shellcode。Shellcode可以定义为当运行时，创建一个反向远程shell返回给攻击者的代码。
- en: Shellcode can be used by inserting it into a file and then sending that file
    off to your target. This can be done using a phishing campaign, as we learned
    in [Chapter 4](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml)*, Mastering Social
    Engineering*. Once the file is run, you can obtain remote access to the target's
    computer. Real-world attackers leverage this technique too. Shellcode is not only
    limited to a file, but can also be inserted into software. This is common with
    malicious applications that you may find on app stores for mobile devices. Moving
    away from phishing and software, shellcodes can be embedded into websites that
    have been compromised. Hence, when someone browses a website, malicious software
    can be loaded onto their machine, allowing it to be compromised.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将shellcode插入文件中，然后将该文件发送到目标。这可以通过钓鱼活动来完成，就像我们在《社交工程大师》[第4章]中学到的那样。一旦运行文件，您就可以远程访问目标计算机。现实世界的攻击者也利用这种技术。Shellcode不仅限于文件，还可以插入软件中。这在您可能在移动设备应用商店中找到的恶意应用程序中很常见。远离钓鱼和软件，shellcode还可以嵌入到被入侵的网站中。因此，当有人浏览网站时，恶意软件可以加载到他们的计算机上，从而使其受到威胁。
- en: Shellcodes could be built in earlier versions of Metasploit by the `msfpayload`
    and `msfencode` commands. These services have now been combined with the `msfvenom`
    utility and replaced. If you are used to the old tools, `msfvenom` is not a problem
    because there are few modifications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本的Metasploit中可以使用`msfpayload`和`msfencode`命令构建shellcode。这些服务现在已经与`msfvenom`实用程序合并并替换。如果你习惯了旧工具，`msfvenom`不是问题，因为几乎没有修改。
- en: 'There are advantages to using MSFvenom:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MSFvenom有一些优势：
- en: There's a single tool to generate cross-platform shellcodes.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个单一的工具来生成跨平台的shellcode。
- en: Command-line options are standardized.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行选项是标准化的。
- en: The increased speed when creating shellcodes gives you the ability to use applications
    as templates.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建shellcode的速度增加，使您能够使用应用程序作为模板。
- en: 'To use MSFvenom, you will need to enter the `msfvenom` command from a Terminal
    window in Kali Linux. The application will present you with a list of available
    options. Some of the most important options are as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用MSFvenom，您需要在Kali Linux的终端窗口中输入`msfvenom`命令。该应用程序将向您呈现一系列可用选项。其中一些最重要的选项如下：
- en: '`-p` is used to select the Metasploit payload. There are a number of payloads available;
    these support Windows, Linux, Mac, and more. An example of defining a payload
    is as follows:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`用于选择Metasploit有效载荷。有许多可用的有效载荷；这些支持Windows、Linux、Mac等。定义有效载荷的示例如下：'
- en: '[PRE2]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the example, we are using the `windows/meterpreter/reverse_tcp` payload,
    the local host and IP address are defined. The output format is defined as `.exe`
    using the `-f` option, and the output file is saved as `shell.exe` using the `-o`
    option.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`windows/meterpreter/reverse_tcp`有效载荷，定义了本地主机和IP地址。使用`-f`选项定义输出格式为`.exe`，使用`-o`选项将输出文件保存为`shell.exe`。
- en: '`-e` is used to select the encoder. An encoder is an algorithm that can be
    used to re-encode payloads. This is used to obfuscate the intent of the payload.
    You can find a list of encoders by using the `msfvenom -l encoders` command.An
    example of using an encoder is as follows:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e`用于选择编码器。编码器是一种算法，可用于重新编码有效载荷。这用于混淆有效载荷的意图。您可以使用`msfvenom -l encoders`命令找到编码器列表。使用编码器的示例如下：'
- en: '[PRE3]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example, the encoder selected is `shikata_ga_nai` and the iterations
    defined is `3` using the `-i`option.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，选择的编码器是`shikata_ga_nai`，定义的迭代次数是`3`，使用了`-i`选项。
- en: '`-x` is used to define a custom executable file to use as a template. Using
    this option, you can take a legitimate file and create a malicious version of
    it, which can grant you a remote shell. An example of this is as follows:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`用于定义要用作模板的自定义可执行文件。使用此选项，您可以获取合法文件并创建其恶意版本，从而获得远程shell。使用示例如下：'
- en: '[PRE4]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, `putty.exe` is being used as the template to create a malicious
    version called `evilputty.exe`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`putty.exe`被用作模板，创建了一个恶意版本的`evilputty.exe`。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the Metasploit Framework. We defined what it can
    be used for and explored the various types of modules included. We worked on some
    of the initial tasks of Metasploit and looked at where we can obtain new modules.
    Using the flexibility of Metasploit, we imported data from other sources such
    as Nmap and Nessus and explored the core components of Metasploit. Lastly, we
    looked at using MSFvenom in the creation of shellcode.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下Metasploit框架。我们定义了它可以用来做什么，并探讨了包括的各种类型的模块。我们完成了一些Metasploit的初始任务，并看了我们可以获取新模块的地方。利用Metasploit的灵活性，我们从其他来源（如Nmap和Nessus）导入了数据，并探索了Metasploit的核心组件。最后，我们看了如何在创建shellcode时使用MSFvenom。
- en: You now have the ability to perform the initial configuration of the Metasploit
    Framework. You have learned how to perform some initial setup tasks such as updating
    the Metasploit Framework and linking it to a database. You have gained skills
    on how to enhance your experience within the Metasploit Framework by using workspaces
    and importing data from tools such as Nmap and Nessus. You have learned where
    to obtain new modules and how to install them. You have gained an understanding
    of the main options of Metasploit and the difference between shells and payloads.
    Finally, in this chapter, you have gained skills on how to leverage shellcodes
    using MSFvenom.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以执行Metasploit框架的初始配置。您已经学会了执行一些初始设置任务，如更新Metasploit框架并将其链接到数据库。您已经学会了如何通过使用工作区和从Nmap和Nessus等工具导入数据来增强在Metasploit框架中的体验。您已经学会了在哪里获取新模块以及如何安装它们。您已经了解了Metasploit的主要选项以及shell和有效载荷之间的区别。最后，在本章中，您已经学会了如何使用MSFvenom利用shellcode。
- en: In the next chapter, ([Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml),
    *Understanding Password Attacks*), we will look at the various types of password
    attacks and where to obtain password lists from. We will leverage built-in tools
    within Kali Linux and perform some password cracking and credential dumping.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（[第6章](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)，*理解密码攻击*）中，我们将探讨各种类型的密码攻击以及从哪里获取密码列表。我们将利用Kali
    Linux内置工具进行一些密码破解和凭据转储。
- en: Questions
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name one key feature that has been introduced in version 5 of the Metasploit
    Framework.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit Framework版本5中引入的一个关键特性是什么？
- en: Name at least three modules that exist in the Metasploit Framework.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少列举三个存在于Metasploit Framework中的模块。
- en: Name two external data sources that can be imported into the Metasploit Framework.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举两个可以导入Metasploit Framework的外部数据源。
- en: Name at least two public repositories where additional modules can be downloaded.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少列举两个可以下载额外模块的公共存储库。
- en: What is the difference between a bind shell and a reverse shell?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定shell和反向shell之间有什么区别？
