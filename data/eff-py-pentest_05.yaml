- en: Chapter 5. Fuzzing and Brute-Forcing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。模糊和暴力破解
- en: One of the most helpful tools that a security tester can have is a fuzzing tool
    to test a parameter of an application. Fuzzing has been very effective at finding
    security vulnerabilities, as it can be used for finding weaknesses by scanning
    an application attack surface. Fuzzers can test an application for directory traversal,
    command execution, SQL injection, and cross site scripting vulnerabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试人员最有用的工具之一是模糊测试工具，用于测试应用程序的参数。模糊测试在发现安全漏洞方面非常有效，因为它可以通过扫描应用程序的攻击面来发现弱点。模糊生成器可以测试应用程序的目录遍历、命令执行、SQL注入和跨站脚本漏洞。
- en: The best fuzzers are highly customizable, so in this chapter, we'll learn how
    to build our own fuzzers that can be used for a specific application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的模糊生成器是高度可定制的，因此在本章中，我们将学习如何构建可以用于特定应用程序的自己的模糊生成器。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Fuzzing and brute-forcing passwords
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊和暴力破解密码
- en: SSH brute-forcing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH暴力破解
- en: SMTP brute-forcing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMTP暴力破解
- en: Brute-forcing directories and file locations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解目录和文件位置
- en: Brute-force cracking password-protected zip files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解密码保护的zip文件
- en: Sulley fuzzing framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sulley模糊框架
- en: Fuzzing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊化
- en: 'In general, the fuzzing process consists of the following phases:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，模糊化过程包括以下阶段：
- en: '**Identifying the target**: For fuzzing an application, we have to identify
    the target application. For instance, a FTP server with a specific IP and running
    on port 21.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别目标**：对于模糊化应用程序，我们必须确定目标应用程序。例如，具有特定IP并在端口21上运行的FTP服务器。'
- en: '**Identifying inputs**: As we know, the vulnerability exists because the target
    application accepts a malformed input and processes it without sanitizing. So,
    we have to identify those inputs that the application accepts. For instance, the
    user name and password are input in the FTP server.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别输入**：正如我们所知，漏洞存在是因为目标应用程序接受了格式不正确的输入并在未经过消毒的情况下进行处理。因此，我们必须确定应用程序接受的输入。例如，在FTP服务器中，用户名和密码是输入。'
- en: '**Creating fuzz data**: After getting all the input parameters, we have to
    create invalid input data to send to the target application. Fuzzing data is often
    known as payloads.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建模糊数据**：在获取所有输入参数后，我们必须创建无效的输入数据发送到目标应用程序。模糊数据通常被称为有效载荷。'
- en: '**Fuzzing**: After creating the fuzz data, we have to send it to the target
    application.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模糊化**：创建模糊数据后，我们必须将其发送到目标应用程序。'
- en: '**Monitoring the exceptions and logging**: Now we have to watch the target
    application for interesting responses and crashes and save this data for manual
    analysis. Monitoring web application fuzzing is a bit different, as the fuzzing
    may not crash the target application. We have to depend on the error messages
    and responses; making sure to note down any such unexpected responses for manual
    analysis. Sometimes the application may reveal internal building blocks in the
    error messages.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监视异常和日志记录**：现在我们必须观察目标应用程序的有趣响应和崩溃，并保存这些数据以进行手动分析。监视Web应用程序的模糊测试有点不同，因为模糊测试可能不会使目标应用程序崩溃。我们必须依赖错误消息和响应；确保记下任何此类意外响应以进行手动分析。有时应用程序可能会在错误消息中透露内部构建块。'
- en: '**Determining exploitability**: After fuzzing, we have to check the interesting
    responses or the input that caused a crash. This may help to exploit the target
    application. It is not necessarily the case that all crashes may lead to an exploitable
    vulnerability.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定可利用性**：模糊化后，我们必须检查有趣的响应或导致崩溃的输入。这可能有助于利用目标应用程序。并非所有崩溃都会导致可利用的漏洞。'
- en: Classification of fuzzers
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊生成器的分类
- en: Many classifications exist for fuzzing based on target, attack vectors used,
    and fuzzing method. Fuzzing targets include file formats, network protocols, command-line
    arguments, environment variables, web applications, and many others. Fuzzing can
    be broadly categorized based on the way test cases are generated. They are mutation
    fuzzing (dump) and generation fuzzing (intelligent).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基于目标、使用的攻击向量和模糊化方法，存在许多模糊化的分类。模糊化目标包括文件格式、网络协议、命令行参数、环境变量、Web应用程序等。模糊化可以根据生成测试用例的方式进行广泛分类。它们是突变模糊化（转储）和生成模糊化（智能）。
- en: Mutation (dump) fuzzers
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突变（转储）模糊生成器
- en: A fuzzer that creates completely random input is known as a mutation or dump
    fuzzer. This type of fuzzer mutates the existing input value blindly. But it lacks
    an understandable format or structure of the data. For example, it can be replacing
    or appending a random slice of data to the desired input.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完全随机输入的模糊生成器称为突变或转储模糊生成器。这种类型的模糊生成器盲目地突变现有的输入值。但它缺乏可理解的数据格式或结构。例如，它可以替换或附加随机数据片段到所需的输入。
- en: Generation (intelligent) fuzzers
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能模糊生成器
- en: Generation fuzzers create inputs from scratch rather than mutating existing
    input. So, it requires some level of intelligence in order to generate input that
    makes at least some sense to the target application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 生成模糊生成器从头开始创建输入，而不是突变现有输入。因此，它需要一定程度的智能，以生成对目标应用程序至少有些意义的输入。
- en: In contrast to mutation fuzzers, this type will have an understanding of the
    file format, protocol, and so on. Also, this type of fuzzers are  difficult to
    create but are more efficient.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与突变模糊生成器相比，这种类型将了解文件格式、协议等。此外，这种类型的模糊生成器难以创建，但更有效。
- en: Fuzzing and brute-forcing passwords
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊和暴力破解密码
- en: Passwords can be cracked by guessing or by trying to login with every possible
    combination of words and letters. If the password is complicated, with a combination
    of numbers, characters, and special characters, this may take hours, to weeks,
    or months.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 密码可以通过猜测或尝试使用每种可能的单词和字母组合来破解。如果密码很复杂，包括数字、字符和特殊字符的组合，可能需要几小时、几周或几个月。
- en: Dictionary attack
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典攻击
- en: Tests with all possible passwords begin with words that have a higher possibility
    of being used as passwords, such as names and places. This method is the same
    as we did for injections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从可能被用作密码的单词开始，测试所有可能的密码。这种方法与我们对注入所做的方法相同。
- en: 'We can read the password from a dictionary file and try it in the application
    as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从字典文件中读取密码并在应用程序中尝试：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we read the `dictionary` file and try each password in our script. When
    a specific password works it will print it in the console.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们读取`字典`文件并在我们的脚本中尝试每个密码。当特定密码有效时，它将在控制台中打印出来。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can download the whole list of fuzz database here: [https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里下载整个模糊数据库列表：[https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb)。
- en: SSH brute-forcing
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH暴力破解
- en: We can use Python script to automate the brute-force attack to break the SSH
    login. Here we try multiple usernames and passwords to bypass SSH authentication
    with automated Python script. For brute-forcing SSH, we have to use a module named
    **paramiko**, which lets us connect to SSH.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python脚本来自动化暴力破解攻击以破解SSH登录。在这里，我们尝试多个用户名和密码以绕过SSH身份验证，使用自动化的Python脚本。对于SSH的暴力破解，我们必须使用一个名为**paramiko**的模块，它让我们连接到SSH。
- en: 'First, we import the required modules:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入所需的模块：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we initialize the static variables like password size, target IP, target
    port, and user:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们初始化静态变量，如密码大小、目标IP、目标端口和用户：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check with each password:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 检查每个密码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can make this script multi-threaded with the threading module:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用线程模块使此脚本多线程化：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here we use threading to make the fuzzing run in parallel, for speed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用线程来使模糊测试并行运行，以提高速度：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SMTP brute-forcing
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMTP暴力破解
- en: '**Simple Mail Transfer Protocol** (**SMTP**) is a standard for e-mail transmission
    across networks. E-mail servers and other mail transfer agents use SMTP to send
    and receive e-mail messages. E-mail client applications regularly use SMTP only
    for sending e-mails. To perform brute-force password auditing against SMTP, we
    can use the `smtplib` module, which helps us to connect to SMTP.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单邮件传输协议**（**SMTP**）是网络上的电子邮件传输标准。电子邮件服务器和其他邮件传输代理使用SMTP来发送和接收电子邮件。电子邮件客户端应用程序通常仅使用SMTP发送电子邮件。要对SMTP进行暴力破解密码审计，我们可以使用`smptlib`模块，它可以帮助我们连接到SMTP。'
- en: 'As usual, import the required modules:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，导入所需的模块：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set the `IP` and `USER`. You can also get these values as input parameters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`IP`和`USER`。您也可以将这些值作为输入参数获取：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check the SMTP with each and every password in the password list:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 检查SMTP中的每个密码列表中的密码：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Brute-forcing directories and file locations
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解目录和文件位置
- en: We could write a custom spider script to crawl the target website to discover
    sufficient information about the web application. However, there are often lots
    of configuration files, leftover development files, backup files, debugging scripts,
    and many other files that can provide sensitive information about the web application
    or expose some functionality that the developer of the application did not intend
    to expose.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写一个自定义的蜘蛛脚本来爬取目标网站，以发现有关Web应用程序的足够信息。然而，通常会有很多配置文件、剩余的开发文件、备份文件、调试脚本和许多其他文件，这些文件可以提供有关Web应用程序的敏感信息，或者公开一些开发人员没有打算公开的功能。
- en: The method to discover this type of content is to use brute-forcing to trace
    common filenames and directories. It is always far superior to have our own custom
    scripts, which will help us to customize the target files and to filter the results
    according to our requirements.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发现这种类型的内容的方法是使用暴力破解来追踪常见的文件名和目录。拥有我们自己的自定义脚本总是更好的，这将帮助我们自定义目标文件并根据我们的要求过滤结果。
- en: 'First, as usual we import the required modules. Here we use threading to run
    multiple requests in parallel. But make sure to keep the threads low; a large
    number of threads may cause denial of service:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像往常一样，我们导入所需的模块。这里我们使用线程来并行运行多个请求。但是请确保保持线程数量较低；大量的线程可能会导致拒绝服务：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we define a function to read the word list file and to form an array of
    words to brute-force:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义一个函数来读取单词列表文件并形成一个用于暴力破解的单词数组：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we will define the function to brute-force the URL with the possible
    extensions of the words in the wordlist, which check the words for the file extensions,
    and if it''s not a file, we append an extra slash (`/`) and create a list of attempts
    for each word with the possible extensions and directory slash. After creating
    the attempt list, check for each entry in the attempts list appended to the URL
    provided:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个函数，用于使用单词列表中单词的可能扩展名来暴力破解URL，检查文件扩展名的单词，如果不是文件，则添加额外的斜杠（`/`），并为每个单词创建一个可能扩展名和目录斜杠的尝试列表。创建尝试列表后，检查附加到提供的URL的尝试列表中的每个条目：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we initiate the brute-force in threaded mode:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们以线程模式启动暴力破解：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Brute-force cracking password protected ZIP files
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解密码保护的ZIP文件
- en: 'As we discussed, the same method can be used to crack the password in a protected
    ZIP file. For that, we use the `zipfile` module:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的，可以使用相同的方法来破解受保护的ZIP文件中的密码。为此，我们使用`zipfile`模块：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Sulley fuzzing framework
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sulley模糊测试框架
- en: By using fuzzing frameworks, we can create fuzzers in less time. A fuzzing framework
    provides a flexible and reusable development environment that helps to build fuzzers
    quickly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用模糊测试框架，我们可以更快地创建模糊器。模糊测试框架提供了一个灵活和可重用的开发环境，有助于快速构建模糊器。
- en: Sulley is a Python fuzz testing framework that consists of multiple extensible
    components that can be used to fuzz file formats, network protocols, command line
    arguments, and many more. Sulley can monitor the network and  maintain records
    systematically. It can also monitor the health of the target.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Sulley是一个Python模糊测试框架，由多个可扩展组件组成，可用于模糊文件格式、网络协议、命令行参数等。Sulley可以监视网络并系统地记录。它还可以监视目标的健康状况。
- en: Installation
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: Sulley depends on PaiMei and pcapy. PaiMei is a reverse engineering framework
    to debug the fuzzed application and `pcap` to capture packets.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Sulley依赖于PaiMei和pcapy。PaiMei是一个逆向工程框架，用于调试模糊应用程序和`pcap`捕获数据包。
- en: PaiMei has a lot of dependencies, like the MySQL database server that provides
    the Python database API, wxPython, GraphViz, Oreas GDE, uDraw, pydot, and ctypes.
    So, we have to install those dependencies first.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PaiMei有很多依赖项，如提供Python数据库API的MySQL数据库服务器，wxPython，GraphViz，Oreas GDE，uDraw，pydot和ctypes。因此，我们必须首先安装这些依赖项。
- en: 'In Debian Linux we can install pydot, ctypes, wxPython, and GraphViz from the
    `apt-get` repository:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian Linux中，我们可以从`apt-get`存储库安装pydot，ctypes，wxPython和GraphViz：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then we can download PaiMei from [http://www.openrce.org/downloads/details/208](http://www.openrce.org/downloads/details/208).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以从[http://www.openrce.org/downloads/details/208](http://www.openrce.org/downloads/details/208)下载PaiMei。
- en: 'After extracting the zip file, run the `_install_requirements.py` file to install
    its requirements. After that, install the MySql server, if it''s not installed
    in the host machine:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩zip文件后，运行`_install_requirements.py`文件以安装其要求。之后，如果主机机器上没有安装MySql服务器，则安装MySql服务器：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, configure the MySQL server with the `__setup_mysql.py` file. For that,
    run the following Python script with your MySQL server credentials as the parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`__setup_mysql.py`文件配置MySQL服务器。为此，请使用以下Python脚本运行您的MySQL服务器凭据作为参数：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then install PaiMei by running the setup script as we do for other Python modules:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行设置脚本来安装PaiMei，就像我们为其他Python模块所做的那样：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also need to install the `pcapy` library. To install the `pcapy` library,
    we can depend on the `apt-get` repository:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装`pcapy`库。要安装`pcapy`库，我们可以依赖于`apt-get`存储库：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we have installed all the prerequisites. So, we can clone the `sulley`
    library and utilize it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有的先决条件。因此，我们可以克隆`sulley`库并使用它：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, get in to the `sulley` folder:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进入`sulley`文件夹：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To verify the installation, run the `process_monitor.py` script and `network_monitor.py`
    with Python:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证安装，请使用Python运行`process_monitor.py`脚本和`network_monitor.py`：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Installation](img/image_05_001.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/image_05_001.jpg)'
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Installation](img/image_05_002.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/image_05_002.jpg)'
- en: To install in Windows, as on Linux, install the prerequisites first.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装，就像在Linux上一样，首先安装先决条件。
- en: 'To install PaiMei, download it from the link as we do for Linux and run the
    `__install_requirements.py`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装PaiMei，请像在Linux上那样从链接下载并运行`__install_requirements.py`：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will install the dependencies of PaiMei (ctypes, pydot, wxPython, MySQLdb,
    Graphviz, Oreas GDE, and uDraw).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装PaiMei的依赖项（ctypes，pydot，wxPython，MySQLdb，Graphviz，Oreas GDE和uDraw）。
- en: Then, run the MySQL setup `script.python __setup_mysql.py` hostname username
    password.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行MySQL设置`script.python __setup_mysql.py`主机名用户名密码。
- en: 'After that, install the PaiMei library by running the build and install commands:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，通过运行构建和安装命令来安装PaiMei库：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then we have to download and install `libdasm`. Download it from [http://libdasm.googlecode.com/files/libdasm-beta.zip](http://libdasm.googlecode.com/files/libdasm-beta.zip)
    and run the setup.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要下载并安装`libdasm`。从[http://libdasm.googlecode.com/files/libdasm-beta.zip](http://libdasm.googlecode.com/files/libdasm-beta.zip)下载并运行设置。
- en: 'Then, install `pcapy` from `pip`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`pip`安装`pcapy`：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, clone the `sulley` library:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，克隆`sulley`库：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can check the installation by running the `process_monitor_unix.py` and `network_monitor.py`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行`process_monitor_unix.py`和`network_monitor.py`来检查安装。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Any issues with the installation? Here is the detailed install instruction for
    Windows: [https://github.com/OpenRCE/sulley/wiki/Windows-Installation](https://github.com/OpenRCE/sulley/wiki/Windows-Installation).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装有任何问题吗？这是Windows的详细安装说明：[https://github.com/OpenRCE/sulley/wiki/Windows-Installation](https://github.com/OpenRCE/sulley/wiki/Windows-Installation)。
- en: Scripting with sulley
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用sulley进行脚本编写
- en: 'Before we start writing fuzzing scripts with sulley, we need to have a basic
    understanding of the grammar that will be used in sulley. When we write a Python
    script that uses sulley to fuzz a specific target, we need to define all the required
    objects. All sulley commands begin with an `s_` prefix. The following are several
    sections that will be used to build the scripts:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用sulley编写模糊脚本之前，我们需要对将在sulley中使用的语法有基本的了解。当我们编写一个使用sulley模糊特定目标的Python脚本时，我们需要定义所有必需的对象。所有sulley命令都以`s_`前缀开头。以下是将用于构建脚本的几个部分：
- en: '**Data model**: Defines the properties of the protocol that we are about to
    fuzz.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据模型**：定义我们将要模糊的协议的属性。'
- en: '**State model**: Defines possible interactions between different states of
    the fuzzed network protocol. For example, authenticated and unauthenticated states.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态模型**：定义模糊网络协议不同状态之间的可能交互。例如，经过身份验证和未经身份验证的状态。'
- en: '**Target**: Defines the target to fuzz. For instance, the IP and port of the
    server.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：定义要模糊的目标。例如，服务器的IP和端口。'
- en: '**Agents**: Programs that monitor the fuzzed process for crashes, intercepting
    the relevant network packets, restarting the crashed process, and so on. This
    runs on the target computer.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：监视模糊进程崩溃，拦截相关网络数据包，重新启动崩溃的进程等的程序。这在目标计算机上运行。'
- en: '**Monitoring interface**: Helps to see the result of the fuzzing process.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监视界面**：帮助查看模糊处理的结果。'
- en: Primitives
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基元
- en: To create a static un-mutating value, we can use `s_static()`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个静态的不可变值，我们可以使用`s_static()`。
- en: 'To create a four-byte word, we can use `s_int()`. For instance, to create a
    mutating integer that starts with `555` and is formatted in ASCII:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个四字节的单词，我们可以使用`s_int()`。例如，创建以`555`开头并以ASCII格式化的变异整数：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Blocks and groups
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块和组
- en: 'Primitives can be nested within blocks. Such blocks can be started with `s_block_start()`
    and end with `s_block_end()`. A group is a collection of primitives; we can start
    a group with `s_group()`. An example for a static group primitive listing the
    various HTTP methods is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 原语可以嵌套在块内。这样的块可以以`s_block_start()`开始，并以`s_block_end()`结束。一个组是原语的集合；我们可以用`s_group()`开始一个组。一个静态组原语的示例列出了各种HTTP方法如下：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Grouping allows us to attach a block to a group primitive to specify that the
    block should cycle through all possible ways. We can iterate through these static
    HTTP methods with a block as follows. This defines a new block named `"body"`
    and associates it with the preceding group:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 分组允许我们将块附加到组原语上，以指定该块应循环遍历所有可能的方式。我们可以通过块迭代这些静态HTTP方法如下。这定义了一个名为“body”的新块，并将其与前面的组关联起来：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Sessions
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会话
- en: We can tie a number of requests together to form a session. Sulley is capable
    of fuzzing *deep* within a protocol by linking requests together in a graph. Sulley
    goes through the graph structure, starting with the root node and fuzzing each
    component along the way.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将多个请求绑定在一起形成一个会话。Sulley能够通过在图中将请求链接在一起来模糊*深入*协议。Sulley通过图结构，从根节点开始，沿途模糊每个组件。
- en: Now we can write a script to fuzz the SSH connection.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写一个脚本来模糊测试SSH连接。
- en: 'First, import the modules `sulley` and `paramiko`. Make sure the script resides
    in the root of the sulley program that we downloaded from GitHub:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入模块`sulley`和`paramiko`。确保脚本位于我们从GitHub下载的sulley程序的根目录中：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, set the username and password to string primitive. Sulley provides the
    `s_string()` primitive for representing these fields to denote that the data contained
    is a fuzzable string. Strings can be anything, like e-mail addresses, hostnames,
    usernames, passwords, and many more:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将用户名和密码设置为字符串原语。Sulley提供`s_string()`原语来表示这些字段，以表示其中包含的数据是可模糊的字符串。字符串可以是任何东西，如电子邮件地址、主机名、用户名、密码等等。
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, initialize the paramiko SSH client to try connecting to SSH:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，初始化paramiko SSH客户端以尝试连接到SSH：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next we can start fuzzing:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以开始模糊测试：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will try mutating the username and password and try to connect to the server
    with paramiko.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试变异用户名和密码，并尝试使用paramiko连接到服务器。
- en: 'Similarly, we can fuzz FTP protocol. Here, we import FTP from requests and
    sulley:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以对FTP协议进行模糊测试。在这里，我们从requests和sulley导入FTP：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we instruct sulley to wait for the banner before starting fuzzing:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们指示sulley在开始模糊测试之前等待横幅：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, we intialize the session, which keeps track of our fuzzing. This allows
    us to stop and restart fuzzing where we had previously left off:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们初始化会话，这样可以跟踪我们的模糊测试。这使我们能够在先前离开的地方停止和重新开始模糊测试：
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we can define our target with the IP and port number of the target FTP
    server:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用目标FTP服务器的IP和端口号来定义我们的目标：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then we can instruct the network sniffer to set itself up on the same host
    and listening on `26300`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以指示网络嗅探器在同一主机上设置自己，并监听`26300`：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, set the target and grab the FTP banner:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置目标并获取FTP横幅：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Try authenticating the FTP connection:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试认证FTP连接：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After authenticating we can use the commands, which require authentication,
    as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 认证后，我们可以使用需要认证的命令，如下所示：
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, instruct sulley to start `fuzz`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，指示sulley开始`fuzz`：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tip
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can learn more about sulley and its usage here: [http://www.fuzzing.org/wp-content/SulleyManual.pdf](http://www.fuzzing.org/wp-content/SulleyManual.pdf).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多关于sulley及其用法：[http://www.fuzzing.org/wp-content/SulleyManual.pdf](http://www.fuzzing.org/wp-content/SulleyManual.pdf)。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have gone through the basic methods of fuzzing and password brute-forcing.
    Now we can extend the scripts to meet our own needs. There are many fuzzing and
    brute-force tools available, but a custom script will always be better to get
    our specific results. We will discuss more on debugging and reverse engineering
    with Python libraries in the next chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了模糊测试和密码暴力破解的基本方法。现在我们可以扩展脚本以满足我们自己的需求。有许多模糊测试和暴力破解工具可用，但自定义脚本总是更好以获得我们特定的结果。我们将在下一章中更多地讨论使用Python库进行调试和逆向工程。
