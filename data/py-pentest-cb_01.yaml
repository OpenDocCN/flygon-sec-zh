- en: Why Python in Penetration Testing?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要在渗透测试中使用Python？
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Why Python is a great option for security scripting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么Python是安全脚本的绝佳选择
- en: Python 3 language basics and differences
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3语言基础知识和差异
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Before going deep into the uses of Python and its modules in security scripting,
    we need to have an idea about the language basics and different versions. Also,
    it would be great if we could have an idea of why Python is an awesome option
    for security scripting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究Python及其模块在安全脚本编写中的用途之前，我们需要了解一下语言基础知识和不同版本。此外，如果我们能了解一下为什么Python是安全脚本的绝佳选择，那就太好了。
- en: Why Python is a great option for security scripting
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Python是安全脚本的绝佳选择
- en: In the wake of big security attacks and breaches, security/penetration testing
    is gaining momentum in the quality field. As a popular language in the programming
    area, it is evident from the tools, books, and scripts published in the last couple
    of years that Python has become the favorite scripting language for security researchers
    and hackers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模安全攻击和泄露之后，安全/渗透测试在质量领域日益受到重视。作为编程领域中的一种流行语言，从过去几年出版的工具、书籍和脚本来看，Python已经成为安全研究人员和黑客最喜欢的脚本语言。
- en: Getting ready
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Even though network and application security is inundated with many tools for
    automated and semi-automated tests, it may not always guarantee success. Improvisation
    of tools and scripts is the key to pen-testing, and there will always be some
    tasks that demand to be automated or to be fulfilled in another way. Becoming
    a successful real-world penetration tester involves a lot of custom scripting
    and programming tasks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管网络和应用程序安全充斥着许多自动化和半自动化测试工具，但并不总能保证成功。工具和脚本的改进是渗透测试的关键，总会有一些任务需要自动化或以其他方式完成。成为成功的现实世界渗透测试人员涉及许多自定义脚本和编程任务。
- en: How to do it...
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: These are the main reasons for Python's popularity in security scripting and
    programming.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Python在安全脚本和编程中受欢迎的主要原因。
- en: Python can be used in both  and interpreted and compiled forms
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python可以以解释和编译形式使用
- en: Python programs can be compiled in any situation where they can be used as compiled
    and not required frequent changes. This will make Python programs run much faster
    and provide a better opportunity to remove vulnerabilities and bugs. Also, interpreted
    programs run much slower than compiled programs, and are more prone to vulnerabilities
    and attacks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序可以在任何需要编译的情况下编译，并且不需要频繁更改。这将使Python程序运行得更快，并提供更好的机会来消除漏洞和错误。此外，解释程序比编译程序运行得慢得多，并且更容易受到漏洞和攻击的影响。
- en: Python code uses no compiler and can run on just about any device that runs
    the Python shell. Also, it shares a couple of other resemblances to scripting
    languages over programming languages. So, Python can be used to perform the functions
    of a scripting language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码不使用编译器，可以在几乎任何运行Python shell的设备上运行。此外，它与脚本语言有一些其他相似之处。因此，Python可以用于执行脚本语言的功能。
- en: Syntax and indented layout
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法和缩进布局
- en: The syntax and indented layout of Python makes it easy to figure out what is
    happening in a program during the review. The indentation also makes the program
    more readable and helps make the collaborative programming easier.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python的语法和缩进布局使得在审查程序时很容易弄清楚发生了什么。缩进还使程序更易读，并有助于使协作编程更容易。
- en: Simple learning curve
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的学习曲线
- en: Learning a new programming language is always a rigorous task. But Python was
    designed in such a way that it should be easily learned by even a novice programmer.
    Python's growing acceptance with the programmers is mainly due to its easiness
    to learn and its design philosophy highlights code readability that will help
    the beginner developers to learn many things by reading the code itself. Also,
    Python's **read evaluate print loop** (**REPL**) provides the developer a chance
    to play around with code and experiment with it. The standard Python library maintains
    a lot of functionalities with which we can execute complex functionalities with
    ease.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 学习一门新的编程语言总是一项艰巨的任务。但Python的设计是为了让即使是初学者程序员也能轻松学会。Python之所以得到程序员的广泛接受，主要是因为它易于学习，并且其设计理念强调代码的可读性，这将帮助初学者开发人员通过阅读代码本身学到很多东西。此外，Python的**读取评估打印循环**（**REPL**）为开发人员提供了一个机会来玩弄代码并进行实验。标准的Python库保留了许多功能，我们可以轻松地执行复杂的功能。
- en: Powerful third-party libraries
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强大的第三方库
- en: Once you have learned Python, you can leverage the platform backed with a large
    number of libraries. The **Python Package Index** (**PyPI**), is a repository
    of more than 85,000 reusable Python modules and scripts that you can use in your
    scripts. Python is the best language to learn as a security researcher, because
    of the availability of its large number of reverse engineering and exploitation
    libraries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦学会了Python，你就可以利用支持大量库的平台。**Python软件包索引**（**PyPI**）是一个存储库，其中包含超过85,000个可重用的Python模块和脚本，你可以在你的脚本中使用。Python是安全研究人员学习的最佳语言，因为它拥有大量的逆向工程和利用库。
- en: Cross-platform (code anywhere)
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台（随处编码）
- en: Python works on Linux, Microsoft Windows, macOS X, and many other operating
    systems and devices. A Python program written on a macOS X computer will run on
    a Linux system and vice versa. Also, Python programs can run on Microsoft Windows
    computers, as long as the machine has Python interpreter installed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以在Linux、Microsoft Windows、macOS X和许多其他操作系统和设备上运行。在macOS X计算机上编写的Python程序将在Linux系统上运行，反之亦然。此外，只要计算机安装了Python解释器，Python程序就可以在Microsoft
    Windows计算机上运行。
- en: Python 3 language basics and differences
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3语言基础知识和差异
- en: Python 3.0 was first released in 2008\. Even though Python 3 supposed to be
    backward incompatible with other old version, many of its features are backported
    to support older versions. It is better to have an idea of Python versions and
    its differences for better understanding of our recipes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.0首次发布于2008年。尽管Python 3被认为与旧版本不兼容，但许多其特性都被移植以支持旧版本。了解Python版本及其差异有助于更好地理解我们的配方。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: If you are new to Python, you might be confused about the different versions
    that are available. Before looking into the further details, let's have a look
    at the most recent major releases of Python and the key differences between Python
    2 and Python 3.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Python的新手，可能会对可用的不同版本感到困惑。在进一步了解细节之前，让我们先看一下Python的最新主要版本以及Python 2和Python
    3之间的主要区别。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: These are the major Python versions available.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是主要的Python版本。
- en: Python 2
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 2
- en: Published in late 2000, it has many more programmatic features including a cycle-detecting
    garbage collector that helps to automate memory management. The increased unicode
    support that helps to standardize characters, and list comprehensions that help
    to create a list based on existing lists are other features. In Python version
    2.2, the types and classes are consolidated into one hierarchy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2000年末发布，它具有许多更多的编程功能，包括帮助自动化内存管理的循环检测垃圾收集器。增加的unicode支持有助于标准化字符，列表推导有助于基于现有列表创建列表等其他功能。在Python版本2.2中，类型和类被合并为一个层次结构。
- en: Python 3
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3
- en: Python 3 was released in late 2008, to update and fix the built-in design flaws
    of the prior versions of Python. The main focus of Python 3 development was to
    clean up the code base and reduce redundancy.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3于2008年末发布，以更新和修复先前版本Python的内置设计缺陷。Python 3开发的主要重点是清理代码库并减少冗余。
- en: In the beginning, the adoption of Python 3 was a very slow process due to its
    backward incompatibility with Python 2\. Moreover, many package libraries were
    only available for Python 2\. Later, there was an increased adoption for Python
    3 as the development team announced that there will be an end of life for Python
    2 support and more libraries have been ported or migrated to Python 3.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，由于与Python 2的不兼容性，Python 3的采用过程非常缓慢。此外，许多软件包库仅适用于Python 2。后来，随着开发团队宣布将终止对Python
    2的支持，并且更多的库已被移植或迁移到Python 3，Python 3的采用率有所增加。
- en: Python 2.7
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 2.7
- en: Python 2.7 was published in 2010 and was planned as the last release for 2.x
    versions. Its intention was to make it easier for Python 2.x users to port their
    features and libraries over to Python 3 by providing compatibility between the
    two, which included a unit test to support test automation, argparse for parsing
    command-line options, and more convenient classes in collections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.7于2010年发布，并计划作为2.x版本的最后一个版本。其目的是通过提供两者之间的兼容性来使Python 2.x用户更容易将其功能和库移植到Python
    3，其中包括支持测试自动化的单元测试，用于解析命令行选项的argparse，以及更方便的collections类。
- en: Key differences between Python 2.7 and Python 3
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 2.7和Python 3之间的主要区别
- en: 'Here are some main differences between Python 2.x and Python 3:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Python 2.x和Python 3之间的一些主要区别：
- en: '**Print**: In Python 2, `print` is a statement. So, there is no need to wrap
    the text in parentheses for printing. But in Python 3 `print` is a function. So,
    you have to pass the string you need to print to the function in parentheses.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印**：在Python 2中，`print`是一个语句。因此，打印时无需用括号括起文本。但在Python 3中，`print`是一个函数。因此，您必须将要打印的字符串传递给带括号的函数。'
- en: '**Integer division**: Python 2 considers numbers without any digits after the
    decimal point as integers, which may lead to some unexpected results during division.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数除法**：Python 2将小数点后没有任何数字的数字视为整数，这可能会导致在除法过程中出现一些意外的结果。'
- en: '**List comprehension loop variables leak**: In Python 2, giving the variable
    that is iterated over in a list comprehension *leaks* the variable into surrounding
    scope, this list comprehension loop variable *leak* bug has been fixed in Python
    3.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表推导循环变量泄漏**：在Python 2中，将列表推导中迭代的变量*泄漏*到周围范围，这个列表推导循环变量*泄漏*bug已在Python 3中修复。'
- en: '**Unicode strings**: Python 2 requires you to mark the unicode string explicitly
    with the **u** prefix. But, Python 3 stores strings as unicode by default.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicode字符串**：Python 2要求您使用**u**前缀显式标记unicode字符串。但是，Python 3默认将字符串存储为unicode。'
- en: '**Raising exceptions**: Python 3 requires different syntax for raising exceptions.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引发异常**：Python 3需要不同的语法来引发异常。'
- en: The progression from Python 2.x to Python 3.x is happening slowly, but it is
    underway. It is good to be mindful that there are material differences between
    Python 2.x and Python 3 as you may need to deal with code that is written in the
    version with which you are less familiar.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python 2.x到Python 3.x的过渡正在缓慢进行，但正在进行中。要注意的是，Python 2.x和Python 3之间存在实质性差异，因此您可能需要处理在您不太熟悉的版本中编写的代码。
