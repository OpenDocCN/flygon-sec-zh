- en: Chapter 7. Assessment of Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 设备评估
- en: 'In this chapter, we will learn the techniques of assessing different types
    of devices. We will also look at the methods of testing weak filters during our
    testing engagement. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习评估不同类型设备的技术。我们还将研究在测试过程中测试弱过滤器的方法。我们将涵盖以下主题：
- en: Assessing routers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估路由器
- en: Evaluating switches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估交换机
- en: Attacking the firewall
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击防火墙
- en: Identifying firewall rules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别防火墙规则
- en: Tricks of penetrating filters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透过滤器的技巧
- en: This chapter will provide us with a methodology to assess what devices are in
    place and how they are protected; it is important to discover the level of skill
    of the administrator that we are going up against. A hardened and well-configured
    environment will present a significant challenge. However, our job as professional
    testers is to accept the challenge, see what we can discover, and draft a report
    of the findings.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供一种评估现有设备及其受保护程度的方法；发现我们要对抗的管理员的技能水平是很重要的。一个经过强化和良好配置的环境将提出重大挑战。然而，作为专业测试人员，我们的工作是接受挑战，看看我们能发现什么，并起草一份发现的报告。
- en: Assessing routers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估路由器
- en: The first thing we will encounter from the testing position of an external attacker
    is most likely a router. There is a chance it will be an appliance, but since
    we work mainly from the standpoint of building ranges for testing, it is unlikely
    we will be able to carry around a device with us. We have shown places to get
    devices earlier in the book; so, if you have the luxury of this, you can build
    your own stationary lab from the information we have provided.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从外部攻击者的测试位置开始，我们最有可能遇到的第一件事是路由器。也有可能是一个设备，但由于我们主要是从测试范围的角度出发，所以我们不太可能随身携带设备。我们在本书的早期已经展示了获取设备的地方；因此，如果您有这样的奢侈，您可以根据我们提供的信息建立自己的固定实验室。
- en: 'The external architecture we built in the last chapter is our foundation for
    all of the testing we will practice. An example of our layered architecture is
    shown in the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中构建的外部架构是我们将进行所有测试的基础。我们分层架构的一个示例如下图所示：
- en: '![Assessing routers](img/477-1_07_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07_01.jpg)'
- en: The previous diagram shows our entire external architecture, and the first thing
    that we encounter is the router; therefore, it is the first device we will use
    to perform our testing against.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了我们整个外部架构，我们遇到的第一件事是路由器；因此，它是我们将用来进行测试的第一个设备。
- en: 'As we have done in the past throughout the book, we want to concentrate on
    the area of the architecture that we will deal with at the given point of time;
    consequently, for this section, the architecture we will focus on is in the following
    diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中过去所做的一样，我们希望集中在我们在特定时间点将处理的架构领域；因此，对于本节，我们将专注于以下图表中的架构：
- en: '![Assessing routers](img/477-1_07_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07_02.jpg)'
- en: To prepare for this testing, start up your virtual machines for the Router and
    Kali Linux distributions. We will use Kali to carry out the testing of the router.
    After the machines have powered on, log in to both of them with the required usernames
    and passwords that you created.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这项测试，启动路由器和Kali Linux发行版的虚拟机。我们将使用Kali来测试路由器。在机器启动后，使用您创建的必需的用户名和密码登录到它们。
- en: 'In the Router machine, you have to start the router, open a terminal window,
    and then enter `dynamips –H 7200` to start the router. Once it starts, you need
    to load the configuration file by opening another terminal window and entering
    `dynagen config.net`. Once the configuration loads, enter `console R1` and access
    the running router and type `en` to enter the privileged mode on the router at
    the router prompt. At this point, we enter `show ip int brief` to show the configuration
    of the router interfaces. The output should be similar to that shown in the following
    screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由器机器上，您需要启动路由器，打开一个终端窗口，然后输入`dynamips –H 7200`来启动路由器。一旦它启动，您需要通过打开另一个终端窗口并输入`dynagen
    config.net`来加载配置文件。一旦配置加载完成，输入`console R1`并访问正在运行的路由器，然后在路由器提示符上输入`en`进入路由器的特权模式。在这一点上，我们输入`show
    ip int brief`来显示路由器接口的配置。输出应该类似于以下截图所示：
- en: '![Assessing routers](img/477-1_07-3.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-3.jpg)'
- en: As before, we want to make sure our interfaces are in a state of line and protocol
    `up` as shown in the previous screenshot. Once we have established this, we will
    turn our attention to other matters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们希望确保我们的接口处于线路和协议`up`的状态，就像前面的截图所示的那样。一旦我们确保了这一点，我们将把注意力转向其他事项。
- en: Within the Kali distribution, there are a number of tools we can use when we
    perform testing of our ranges; one of the most popular ones is the network mapping
    tool Nmap. Open a terminal window on Kali and conduct a scan against the router
    interface that is connected to the VMnet8; if you have configured your machine
    to match what we use in the book, you will enter `nmap -sS 192.168.177.10 –n`
    to conduct the scan.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali发行版中，有许多工具可供我们在测试范围内进行测试；其中最流行的之一是网络映射工具Nmap。在Kali上打开一个终端窗口，并对连接到VMnet8的路由器接口进行扫描；如果您已经配置您的机器以匹配我们在书中使用的内容，您将输入`nmap
    -sS 192.168.177.10 –n`进行扫描。
- en: This conducts an SYN or half-open scan of the target, which in this case is
    the f0/0 interface of the router. The `n` option tells Nmap not to do name lookups
    and helps our scan complete faster.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这对目标进行了SYN或半开放扫描，这种情况下是路由器的f0/0接口。`n`选项告诉Nmap不要进行名称查找，并帮助我们的扫描更快地完成。
- en: 'An example of the results of this scan is shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这次扫描的结果示例如下图所示：
- en: '![Assessing routers](img/477-1_07-4.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-4.jpg)'
- en: For those of you reading this, you are most likely aware that we have 65536
    possible ports and the tool Nmap is only looking at 1000 of them in the scan.
    This is the default setting for Nmap, so we can change this to scan all the ports,
    and we will do that now. Enter `nmap -sS –p 0-65535 192.168.177.10 –n` to scan
    all the ports possible. If the discovered service is the one you want to attack,
    then you can skip the scan of the entire port range.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于阅读本文的人来说，您很可能知道我们有65536个可能的端口，而Nmap工具只在扫描中查看了其中的1000个。这是Nmap的默认设置，因此我们可以将其更改为扫描所有端口，我们现在将这样做。输入`nmap
    -sS –p 0-65535 192.168.177.10 –n`来扫描所有可能的端口。如果发现的服务是您想要攻击的服务，那么您可以跳过整个端口范围的扫描。
- en: This scan will take a long time to complete; you can get a live update by pressing
    the Space bar at any time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扫描将需要很长时间才能完成；您可以随时按空格键获取实时更新。
- en: 'Once this very long scan completes, there will be only one port open on the
    router, and as such, this serves as our one vector of attack against the router
    itself. An example of the scan when it''s halfway through is shown in the following
    screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个非常长的扫描完成，路由器上只会有一个端口打开，因此这就成为我们对路由器本身的攻击向量。扫描进行到一半时的示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-5.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: 评估路由器
- en: As the previous screenshot shows, the scan takes a very long time to complete,
    and we especially do not like the fact that the total time taken is increasing.
    This is because the scan has to send packets to all 65536 ports. There are methods
    to speed up the scan, but we will not worry about that here. Since we only have
    one port open on the router, and as such, this is the one vector we have for an
    attack, we can connect to it and see what the response will be.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，扫描需要很长时间才能完成，而且我们尤其不喜欢总共花费的时间在增加。这是因为扫描必须发送数据包到所有65536个端口。有方法可以加快扫描速度，但我们在这里不会担心这个问题。由于路由器上只有一个端口打开，因此这是我们进行攻击的唯一途径，我们可以连接到它并查看响应。
- en: 'It is important to note that this is just a default configuration of a router,
    and no hardening or anything has taken place; yet, we really do not have much
    attack surface to deal with. We do have the advantage that this is an old IOS
    version of the Cisco software and that might help us going forward, but we will
    try some basic things first. Since there is a port 23 for telnet open, we can
    connect to it and see what the results of the connection are. In a terminal window
    on Kali, enter `telnet 192.168.177.10` to connect to the telnet service on the
    router; an example of this is shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这只是一个路由器的默认配置，并没有进行任何加固；然而，我们实际上并没有太多的攻击面。我们有一个优势，那就是这是Cisco软件的旧IOS版本，这可能有助于我们前进，但我们将首先尝试一些基本的东西。由于端口23用于telnet开放，我们可以连接到它并查看连接的结果。在Kali上的终端窗口中，输入`telnet
    192.168.177.10`来连接到路由器上的telnet服务；这方面的示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-6.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-6.jpg)'
- en: 'The good news is there is a service running on the port and we can connect
    to it; the bad news is the password has never been set, and as such, we cannot
    access the port for long. Another method to connect to the port is to use the
    tool Netcat, and we will try that now to see if there is any difference in the
    results. In the terminal window, enter `nc 192.168.177.10 23` to connect to the
    service with the Netcat tool and see if we have any better luck; an example of
    the result is shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是端口上有一个正在运行的服务，我们可以连接到它；坏消息是密码从未设置过，因此我们无法长时间访问该端口。连接到端口的另一种方法是使用工具Netcat，我们现在将尝试一下，看看结果是否有所不同。在终端窗口中输入`nc
    192.168.177.10 23`，使用Netcat工具连接到服务，看看我们是否有更好的运气；结果的示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-7.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-7.jpg)'
- en: Once again, we don't really get anything of value, so we move on to another
    method. First, we need to realize we are kind of cheating since we know that there
    is only a virtual router. This, of course, is not how it is going to be when you
    do an actual test; therefore, we need to look at how we can determine that we
    are dealing with a router. To do this, we have to look at the network traffic
    at the packet level.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次，我们并没有得到任何有价值的东西，所以我们继续尝试另一种方法。首先，我们需要意识到我们有点作弊，因为我们知道只有一个虚拟路由器。当然，这并不是在实际测试时的情况；因此，我们需要看看如何确定我们正在处理一个路由器。为了做到这一点，我们必须从数据包级别查看网络流量。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Anytime we want to know what we are dealing with, always look at it at the packet
    level. Fortunately, we have a great tool included in the Kali distribution, and
    that is Wireshark.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想知道我们正在处理的是什么，总是要从数据包级别查看。幸运的是，Kali发行版中包含了一个很好的工具，那就是Wireshark。
- en: 'Open a terminal window in Kali and enter `wireshark &` to start the tool. When
    the tool comes up, you start a capture on the interface that is connected to the
    VMnet8 switch, which should be eth0\. An example is shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali中打开一个终端窗口，输入`wireshark &`来启动该工具。当工具启动时，您可以在连接到VMnet8交换机的接口上启动捕获，这应该是eth0。示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-8.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-8.jpg)'
- en: 'Once you have verified your settings, click on **Start** to start the capture
    on the eth0 interface. Once the capture has started, conduct another scan against
    the router and review the results in Wireshark. An example is shown in the following
    screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您验证了您的设置，点击**开始**以在eth0接口上开始捕获。一旦捕获开始，对路由器进行另一次扫描，并在Wireshark中查看结果。示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-9.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-9.jpg)'
- en: 'As the previous screenshot shows, this is a router that has an access control
    list in place; any time you see an ICMP destination unreachable with the message
    communication administratively filtered, you know you have a router that you will
    encounter. An example of the ACL scan is shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的截图所示，这是一个有访问控制列表的路由器；任何时候你看到一个ICMP目的地不可达的消息，告诉你有一个路由器会遇到。以下截图显示了ACL扫描的一个例子：
- en: '![Assessing routers](img/477-1_07-10.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-10.jpg)'
- en: So, what do we do now? We know there is a router in place, and it has an access
    control list. You will also notice that the results returned now will have an
    ACL in place and will only show one port as being closed. Where did our telnet
    go? The telnet port was open because there was no ACL on that router, but as soon
    as you apply the ACL, the rules are set to the default deny, and as such, all
    that you will see open are the things that the administrator explicitly allowed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在我们该怎么办呢？我们知道有一个路由器，并且它有一个访问控制列表。你还会注意到，现在返回的结果将有一个ACL，并且只会显示一个端口被关闭。我们的telnet去哪了？telnet端口是开放的，因为那个路由器上没有ACL，但是一旦你应用了ACL，规则就被设置为默认拒绝，因此，你只会看到管理员明确允许的东西是开放的。
- en: This is the reality of testing. We are fortunate that this administrator has
    not blocked the ICMP reply messages, so we can at least identify that we have
    a router in place. The next thing we can attempt is to see what Nmap tells us
    about the router.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是测试的现实。我们很幸运，这个管理员没有阻止ICMP回复消息，所以我们至少可以确定我们有一个路由器。我们接下来可以尝试的是看看Nmap告诉我们关于路由器的信息。
- en: 'With the Nmap tool, we can try to do an enumeration scan. To do this, we can
    use the `–A` option, so we will try this now. In the terminal window, enter the
    `nmap –A 192.168.177.10` command to see what we can gather from the router. An
    example of the results from this scan is shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Nmap工具，我们可以尝试进行枚举扫描。为此，我们可以使用`–A`选项，所以我们现在将尝试这样做。在终端窗口中，输入`nmap –A 192.168.177.10`命令来查看我们可以从路由器那里收集到什么。以下截图显示了这次扫描的结果的一个例子：
- en: '![Assessing routers](img/477-1_07-11.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-11.jpg)'
- en: As it turns out, even the enumeration scan is not of much help. This is because
    the router does not provide much help to the tool. Again, we know that we will
    run into a router, and this is why we have started with it. We see that the port
    80 reports are being closed, so let us investigate this further. An important
    thing to maintain anytime you do your testing is to capture the traffic in Wireshark
    and see how the target responds at the packet level.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，即使是枚举扫描也没有太大帮助。这是因为路由器对工具提供的帮助不多。再次强调，我们知道我们会遇到一个路由器，这就是为什么我们从它开始的原因。我们看到端口80的报告被关闭，所以让我们进一步调查一下。在你进行测试时要保持的一个重要事情是在Wireshark中捕获流量，并查看目标在数据包级别如何响应。
- en: 'Since we know we have a port 80 response, we can use it as our next attempt
    to get information. In your terminal window, enter `nmap –sS –p 80 192.168.177.10`
    to direct the scan at the port that provides us with a response; in your Wireshark
    display, you may want to set a filter of `tcp.port == 80` to concentrate on the
    traffic that we send. An example of the results is shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道有一个端口80的响应，我们可以将其作为下一个获取信息的尝试。在你的终端窗口中，输入`nmap –sS –p 80 192.168.177.10`来将扫描定向到提供响应的端口；在你的Wireshark显示中，你可能想设置一个过滤器`tcp.port
    == 80`来集中在我们发送的流量上。以下截图显示了扫描结果的一个例子：
- en: '![Assessing routers](img/477-1_07-12.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-12.jpg)'
- en: Screen showing Wireshark display (the cropped text is not important)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显示Wireshark显示的屏幕（裁剪的文本不重要）
- en: 'This shows us that when we connect to port 80, we get an RST and ACK packet;
    this means the port is closed in accordance with **Request For Comment** (**RFC**).
    Before we continue, a word about RFCs: if you want to master the art of testing,
    especially at the packet level, you need to be familiar with them; however, as
    many of you reading this will more than likely know, they are not exciting to
    read. A site that can help you with information on RFCs is the Network Sorcery
    site; it has excellent information on all the protocols and other network data,
    and it is highly recommended that you spend some time reviewing them when you
    are not sure how something works. You can find the site at [http://www.networksorcery.com/](http://www.networksorcery.com/).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，当我们连接到端口80时，我们收到了一个RST和ACK数据包；这意味着端口根据RFC被关闭。在我们继续之前，关于RFC的一点说明：如果你想精通测试的艺术，特别是在数据包级别，你需要熟悉它们；然而，正如你们中的许多人可能知道的那样，它们并不令人兴奋。一个可以帮助你获取RFC信息的网站是Network
    Sorcery网站；它提供了关于所有协议和其他网络数据的优秀信息，强烈建议你在不确定某些东西如何工作时花一些时间去审阅它们。你可以在[http://www.networksorcery.com/](http://www.networksorcery.com/)找到这个网站。
- en: 'The area you want to focus on is the RFC Sourcebook; an example of the information
    is shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要关注的区域是RFC源书；以下截图显示了信息的一个例子：
- en: '![Assessing routers](img/477-1_07-13.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-13.jpg)'
- en: Ok, it is time to get back to the task at hand. Why is it that Nmap shows only
    port 80, and no other ports, as closed? We used Wireshark to determine that the
    port responds with RST and ACK flag when a SYN packet is sent to it, so what shall
    we do next?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是时候回到手头的任务了。为什么Nmap只显示端口80，而没有其他端口被关闭？我们使用Wireshark确定当向其发送SYN数据包时，端口会以RST和ACK标志响应，那么接下来我们该怎么办呢？
- en: 'This is where we can try a few other things to see what the response to the
    port is. We know that the port reports as closed; so, let''s try the HTTPS port
    and see what kind of response we get. In your Wireshark filter, you enter `tcp.port
    == 443`, and it is also a good idea to restart your packet capture. Navigate to
    **Capture** | **Restart** to clean up all the traffic you have collected. In your
    terminal window, enter `nmap –sS –p 443 192.168.177.10` to probe the HTTPS port
    443\. Once the scan reaches completion, note the results. An example of the results
    is shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以尝试一些其他事情来查看端口的响应。我们知道端口报告为关闭；因此，让我们尝试HTTPS端口，看看我们会得到什么样的响应。在你的Wireshark过滤器中，输入`tcp.port
    == 443`，同时重新启动数据包捕获也是一个好主意。导航到**捕获** | **重新启动**来清理你收集到的所有流量。在你的终端窗口中，输入`nmap –sS
    –p 443 192.168.177.10`来探测HTTPS端口443。一旦扫描完成，注意结果。以下是结果的示例：
- en: '![Assessing routers](img/477-1_07-14.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-14.jpg)'
- en: 'As you can see from the previous screenshot, the port is not reported in a
    closed state, but in a filtered state; why the difference? First, let''s look
    at the results in Wireshark. An example of the results from Wireshark is shown
    in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从之前的屏幕截图中看到的，端口报告的状态不是关闭，而是被过滤；为什么会有这种差异？首先，让我们看一下Wireshark中的结果。以下是Wireshark结果的示例：
- en: '![Assessing routers](img/477-1_07-15.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-15.jpg)'
- en: As we see from the previous screenshot, there is no response from the target
    now, and that is why Nmap reports it as filtered; so, we see that port 80 generates
    a response and port 443 does not, which tells us that there is some form of rule
    for the port 80 traffic and not for the port 443 traffic. These are the things
    we should be documenting so that when we see it again, we have an idea of what
    is going on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从之前的屏幕截图中看到的，目标现在没有响应，这就是为什么Nmap报告它为被过滤的原因；因此，我们看到端口80生成了响应，而端口443没有，这告诉我们端口80的流量有某种规则，而端口443的流量没有。这些是我们应该记录的事情，这样当我们再次看到它时，我们就知道发生了什么。
- en: 'We have one more attempt to make, and then we will move on to try and get more
    results to go against a router. According to RFC 793, when a port sends a packet
    that contains an illegal flag combination, it should not respond if it is open,
    and it should respond with a packet with the RST flag set if it is closed. We
    will attempt this now. In your terminal window, enter `nmap –sX –p 80 192.168.177.10`
    to send an illegal flag packet to the port; in this case, this is a Christmas
    tree scan. Once the scan is complete, do the same scan again to port 443; enter
    `nmap –sX –p 80 192.168.177.10` and compare the results. An example of the result
    is shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一次尝试要做，然后我们将继续尝试针对路由器获取更多的结果。根据RFC 793，当一个端口发送一个包含非法标志组合的数据包时，如果它是开放的，它不应该做出响应，如果它是关闭的，它应该做出一个带有RST标志的数据包响应。我们现在将尝试这样做。在你的终端窗口中，输入`nmap
    –sX –p 80 192.168.177.10`来向端口发送一个非法标志的数据包；在这种情况下，这是一种圣诞树扫描。扫描完成后，再次对端口443进行相同的扫描；输入`nmap
    –sX –p 80 192.168.177.10`并比较结果。以下是扫描结果的示例：
- en: '![Assessing routers](img/477-1_07-16.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-16.jpg)'
- en: So, what have we been able to determine? From the previous screenshot, we see
    that the machine that serves as a router does appear to follow RFC 793; this can
    help reduce the possible devices since some vendors such as Microsoft and OpenBSD
    UNIX do not follow RFC. We could also make the assumption that since the majority
    of the market runs Cisco routers, this is probably what we deal with. Unfortunately,
    thus far, we really do not know much about the device flavor, but we do know that
    it runs an ACL and it has a rule in it for port 80.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们能够确定什么？从之前的屏幕截图中，我们看到作为路由器的机器似乎遵循RFC 793；这可以帮助减少可能的设备，因为一些供应商如微软和OpenBSD
    UNIX不遵循RFC。我们还可以假设，由于市场上大多数设备都是运行Cisco路由器，这可能是我们要处理的设备。不幸的是，到目前为止，我们对设备的型号还不太了解，但我们知道它运行着ACL，并且对端口80有一个规则。
- en: We have pretty much exhausted the Nmap scan options to go directly against the
    router interface. We will attempt more with the tool when we go through the device;
    for now we will just test the device, and of course, document the results.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经基本上用尽了Nmap扫描选项，直接针对路由器接口。当我们通过设备进行更多尝试时，我们将尝试更多的工具；目前我们只是测试设备，并当然，记录结果。
- en: 'We have one more thing to do before we move on to the next step, and that is
    to verify our assumptions. When we scan with Nmap, port 80 shows as closed, and
    when we try the port 443, we get a filtered report. We assumed that this is because
    there must be some rule in place for port 80 in the ACL. Well, we never want to
    assume, we want to make sure our assumptions are right; therefore, our best option
    is to add a rule for another port and see what happens. We will do that now. In
    your router, enter the following commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续下一步之前，我们还有一件事要做，那就是验证我们的假设。当我们用Nmap扫描时，端口80显示为关闭，当我们尝试端口443时，我们得到一个被过滤的报告。我们假设这是因为ACL中必须有一些规则来关闭端口80。好吧，我们永远不想假设，我们想确保我们的假设是正确的；因此，我们最好的选择是为另一个端口添加一个规则，然后看看会发生什么。我们现在就来做这件事。在你的路由器上，输入以下命令：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Press *Ctrl* + *Z*, and then enter the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *Z*，然后输入以下命令：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是示例的屏幕截图：
- en: '![Assessing routers](img/477-1_07-17.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-17.jpg)'
- en: As the previous screenshot shows, we now have a rule to allow both our port
    80 traffic as well as our port 22 traffic. It is worth noting that since we have
    just entered the rule, there are no matches for it like the others.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的屏幕截图所示，我们现在有一个规则允许我们的端口80流量和端口22流量。值得注意的是，由于我们刚刚输入了规则，所以没有像其他规则那样的匹配。
- en: 'We are now ready to test our theory. In your Kali distribution, enter `nmap
    192.168.177.10 –n` in the terminal window to conduct a default scan with Nmap.
    As has been discussed earlier, the `n` option will hopefully speed up our scan.
    Once the scan is over, review the results; an example is shown in the following
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备测试我们的理论。在您的Kali发行版中，在终端窗口中输入`nmap 192.168.177.10 –n`进行默认扫描。正如之前讨论的，`n`选项有望加快我们的扫描速度。扫描结束后，审查结果；一个示例如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-18.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-18.jpg)'
- en: Mission successful! We have now proven that when a router (in this case, a Cisco
    router) has a rule in place for a port, it will respond for that port. We now
    have the information that in this instance there are two ports open; therefore,
    we have two potential vectors to provide us access to the router for our attack.
    We are now ready to move on and try and find ways to attack the router device.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任务成功！我们现在已经证明，当路由器（在这种情况下是思科路由器）有一个端口规则时，它将响应该端口。我们现在知道，在这种情况下有两个开放的端口；因此，我们有两个潜在的向量可以让我们访问路由器进行攻击。我们现在准备继续并尝试找到攻击路由器设备的方法。
- en: Since the Kali distribution is a penetration testing toolkit, and more than
    likely, someone has come across Cisco routers before, we can turn to it and see
    what it may have to assist us with continuing our testing of the router. In fact,
    not only are there tools within the distribution for Cisco, but it also has its
    own menu item!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kali发行版是一个渗透测试工具包，很可能有人以前遇到过思科路由器，我们可以求助于它，看看它可能有什么可以帮助我们继续测试路由器的东西。事实上，不仅在发行版中有适用于思科的工具，而且它还有自己的菜单项！
- en: 'In Kali Linux, navigate to **Applications** | **Kali Linux** | **Vulnerability
    Analysis** | **Cisco Tools**, and display the possible tools which are contained
    within the distribution that works with Cisco routers. An example is shown in
    the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中，导航到**应用程序** | **Kali Linux** | **漏洞分析** | **思科工具**，并显示包含在适用于思科路由器的发行版中的可能工具。一个示例如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-19.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-19.jpg)'
- en: Screen displaying the possible tools which are contained within the distribution
    that works with Cisco routers (the cropped text is not important)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 显示可能的工具的屏幕，这些工具包含在适用于思科路由器的发行版中（裁剪的文本不重要）
- en: As the previous screenshot shows, there are a number of tools to use when we
    encounter a Cisco device. From here, it is largely a matter of experimentation,
    or as we like to say, trial and error.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如先前的屏幕截图所示，当我们遇到思科设备时，有许多工具可供使用。从这里开始，主要是试验和错误的问题。
- en: 'The best place to start is at the top, so we will now take a look at the first
    tool, the cisco-auditing-tool. Once you select it, a window will open and provide
    the options for the tool, as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的开始地方是顶部，所以我们现在将看一下第一个工具，思科审计工具。一旦您选择它，一个窗口将打开并提供工具的选项，如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-20.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-20.jpg)'
- en: 'As you review the output from the tool, it really is not of much help; where
    is the command to run the tool? Unfortunately, this will sometimes happen in the
    Kali Linux distribution. If we get lucky, we will at least be in the directory
    so that we can figure it out. In your terminal window, enter `ls` followed by
    `pwd` to display the directory we are in, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当您审查工具的输出时，它实际上并没有太多帮助；在哪里可以运行这个工具的命令？不幸的是，这在Kali Linux发行版中有时会发生。如果我们幸运的话，至少我们会在目录中，这样我们就可以弄清楚。在您的终端窗口中，输入`ls`，然后输入`pwd`以显示我们所在的目录，如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-21.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-21.jpg)'
- en: 'As you review the previous screenshot and your output from the tool, do you
    get lucky? No, it seems the menu didn''t put us in the right directory, it left
    us in the `root` directory. So, what do we do now? Well, we can try a number of
    options, but for now we will not spend too much time on them; we will only look
    at a couple. This is Linux, so we could try the main page; we will do this now.
    In the terminal window, enter `man cisco-auditing-tool` to see if there is a main
    page available. We can probably use a better command name to find it, but we really
    do not have much to go on, so we will just try a few options. An example of this
    is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当您审查先前的屏幕截图和工具的输出时，您有幸吗？不，似乎菜单没有把我们放在正确的目录中，它把我们留在了`root`目录中。那么现在我们该怎么办？嗯，我们可以尝试一些选项，但现在我们不会花太多时间在它们上面；我们只会看一两个。这是Linux，所以我们可以尝试主页；我们现在就来试试。在终端窗口中，输入`man
    cisco-auditing-tool`来查看是否有主页可用。我们可能可以使用更好的命令名称来找到它，但我们真的没有太多线索，所以我们只会尝试一些选项。一个示例如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-22.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-22.jpg)'
- en: Well, as the previous screenshot shows, we are not doing very well here, and
    this is the reason we will go through the process because this will often be the
    case. So, what do we do now? Well, it is time to bring in the Internet, and after
    a search of the Internet, we discover that the tool in Kali Linux uses the `CAT`
    file. So, we will try that now. In your terminal window, enter `CAT` to see what
    happens.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，正如先前的屏幕截图所示，我们在这里做得并不好，这就是我们将要经历这个过程的原因，因为这经常会发生。那么现在我们该怎么办？嗯，是时候引入互联网了，在搜索互联网后，我们发现Kali
    Linux中的工具使用`CAT`文件。所以，我们现在将尝试一下。在您的终端窗口中，输入`CAT`来看看会发生什么。
- en: 'An example is shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例如下面的屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-23.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-23.jpg)'
- en: 'Finally, as the previous screenshot shows, we have found the command for the
    tool. As we review the options, we see that the first option is for a single host;
    so, since we have one device that we target, we will start with that. We will
    enter `CAT –h 192.168.177.10` and observe the output. An example is shown in the
    following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如前面的截图所示，我们已经找到了该工具的命令。当我们审查选项时，我们看到第一个选项是针对单个主机的；因此，由于我们有一个目标设备，我们将从那里开始。我们将输入`CAT
    –h 192.168.177.10`并观察输出。示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-24.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-24.jpg)'
- en: From the output of the previous screenshot, it is obvious that this tool looks
    for telnet port 23 to open, so we know that is not the case. However, we can document
    this tool as one to revisit when we have telnet open.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面截图的输出中，很明显这个工具寻找telnet端口23是否打开，所以我们知道情况并非如此。但是，我们可以记录这个工具，以便在telnet打开时重新访问。
- en: We will now move on to try another tool. This is the process when we are testing;
    we want to look at all the different tools and methods to work against the targets
    that we test; therefore, it is imperative that you document what does and does
    not work as it will save you a lot of time when you go against the actual targets.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将继续尝试另一个工具。这是我们测试时的过程；我们希望查看所有不同的工具和方法来对抗我们测试的目标；因此，您必须记录什么有效，什么无效，因为这将在您对抗实际目标时为您节省大量时间。
- en: 'The next tool we will look at, and also the next tool on the list, is the Cisco
    global exploiter. An example of the options for this tool is shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看下一个工具，也是列表中的下一个工具，即Cisco全局利用程序。此工具的选项示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-25.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-25.jpg)'
- en: As we review the options for the tool, we see that the majority of them require
    the web server or the telnet service to be available. Since we know this is not
    the case, we can move on to the next option. However, remember to document the
    tool requirements so that you can test it at another time. We could turn off our
    access list, and then turn the options on for our testing. However, in most cases,
    an administrator is not going to turn these on and they are not on by default.
    They used to be, but like most things in security, they have tightened that up
    and it is no longer the case.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们审查工具的选项时，我们发现大多数选项需要Web服务器或telnet服务可用。由于我们知道情况并非如此，我们可以转向下一个选项。但是，请记住记录工具要求，以便以后测试。我们可以关闭访问列表，然后打开测试选项。但是，在大多数情况下，管理员不会打开这些选项，默认情况下也不会打开。它们曾经是默认开启的，但是像安全领域的大多数事物一样，它们已经加强了安全性，不再是这种情况。
- en: 'We can continue trying the different tools, but we will save you the time.
    When we scanned the router, we were not able to find out much information about
    it, so the ACL is pretty much stopping us from discovering much. So, to prove
    this we will now remove the ACL and see if it helps us at all. In your Cisco router,
    enter the following commands:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续尝试不同的工具，但我们将为您节省时间。当我们扫描路由器时，我们无法找到有关它的太多信息，因此ACL基本上阻止我们发现太多。因此，为了证明这一点，我们现在将删除ACL并查看它是否有所帮助。在您的Cisco路由器中，输入以下命令：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Press *Ctrl* + *Z*, and then execute the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *Z*，然后执行以下命令：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We want to verify that the ACL is no longer on the interface. An example of
    this is shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要验证ACL是否不再在接口上。示例显示在以下截图中：
- en: '![Assessing routers](img/477-1_07-26.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-26.jpg)'
- en: 'Now that we have cleared the ACL, we can attempt another scan with Nmap. We
    can do a normal default scan, but we will start with the enumeration scan; therefore,
    in the terminal window of Kali Linux, enter `nmap –A 192.168.177.10 –n` and scan
    the target. An example of the results is shown in the next screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经清除了ACL，我们可以尝试使用Nmap进行另一次扫描。我们可以进行正常的默认扫描，但我们将从枚举扫描开始；因此，在Kali Linux的终端窗口中，输入`nmap
    –A 192.168.177.10 –n`并扫描目标。结果的示例显示在下一个截屏中：
- en: '![Assessing routers](img/477-1_07-27.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-27.jpg)'
- en: Wow! What a difference that made! Now, if we can get our targets to not have
    an ACL configured, we can uncover a wealth of information about the target, but
    you will more than likely encounter an ACL, so how do you approach it? Well, in
    the initial discovery, you can ask for the information, and they may provide it.
    You can also try at different locations; while it is very common for the external
    interface to be protected, this is much less common for the inside interface.
    So, in some cases, this will be the best option to proceed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这真是大不相同！现在，如果我们的目标没有配置ACL，我们可以发现关于目标的大量信息，但您很可能会遇到ACL，那么您该如何处理呢？嗯，在最初的发现中，您可以要求提供信息，他们可能会提供。您也可以尝试不同的位置；虽然外部接口受到保护非常常见，但内部接口却不太常见。因此，在某些情况下，这将是继续的最佳选择。
- en: From here, you will note the different results and then document what works
    and what does not work; furthermore, you will note the different configuration
    changes that you can make and how these changes impact the results. In fact, you
    should now run all of the tools in Kali, and see what the difference is without
    the ACL in place; as always, document your findings.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，您将注意到不同的结果，然后记录什么有效，什么无效；此外，您将注意到可以进行的不同配置更改以及这些更改如何影响结果。实际上，您现在应该运行Kali中的所有工具，并查看在没有ACL的情况下有何不同；如常，记录您的发现。
- en: We can always attack the router if we find something to go on, but more importantly,
    it is the fact that the router is a protection device on the inside that our way
    forward is to see how to get through the router; this is what we will do later
    in the chapter. For now, we want to discuss what the results are when we encounter
    someone using a Linux machine or another device as their router and filtering
    device.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找到攻击路由器的方法，那当然很重要，但更重要的是路由器是内部的保护设备，我们的前进方式是看如何穿越路由器；这是我们将在本章稍后进行的。现在，我们要讨论的是当我们遇到使用Linux机器或其他设备作为其路由器和过滤设备的人时的结果。
- en: Since we have pretty much exhausted working with a router that we may encounter
    as a perimeter device, it is time to look at the results if and when we encounter
    an environment that uses iptables as its router and to provide ACL capability.
    To do this, we need to bring up the virtual machine we configured iptables on
    in [Chapter 4](ch04.html "Chapter 4. Identifying Range Architecture"), *Identifying
    Range Architecture*. You may want to suspend the machine that we have been using
    as our router to avoid conflicts and system resources. We will revisit the machine
    and the router device later in the chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经基本上耗尽了与可能遇到的作为边界设备的路由器的工作，现在是时候看看如果我们遇到一个使用iptables作为其路由器并提供ACL功能的环境时的结果了。为此，我们需要启动我们在[第4章](ch04.html
    "第4章。识别范围架构")中配置了iptables的虚拟机，*识别范围架构*。您可能希望暂停我们一直在使用作为路由器的机器，以避免冲突和系统资源。我们将在本章后面再次讨论这台机器和路由器设备。
- en: 'Once your virtual machine has come up, log into it with the required credentials
    and open a terminal window. In the terminal window, enter `iptables –L` to display
    the current configuration, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的虚拟机启动，使用所需的凭据登录，并打开一个终端窗口。在终端窗口中，输入`iptables –L`以显示当前配置，如下屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-28.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-28.jpg)'
- en: 'We see that we have a rule set for the http traffic, so now we know that we
    want to scan the machine using our Kali Linux machine. In your Kali Linux machine,
    open a terminal window and enter `nmap 192.168.177.15` to scan the iptables eth0
    interface. An example of the results of this scan is shown in the next screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们为http流量设置了规则，所以现在我们知道我们要使用我们的Kali Linux机器扫描这台机器。在您的Kali Linux机器上，打开一个终端窗口，输入`nmap
    192.168.177.15`来扫描iptables eth0接口。这次扫描的结果示例如下屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-29.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-29.jpg)'
- en: From the previous screenshot that shows the results of our scan, we know that
    we have ssh and port 111 open. This is a notable difference from when we scanned
    the router because the iptables are running on the machine; therefore, the results
    will show what is open on the machine. This provides us with some avenue of attack,
    but the problem is we do not have a true test of the iptables rules. This is because
    we are not concerned with the iptables rules; this scan only scanned the interface
    of the machine and had nothing to do with our iptables rules. With the router,
    we had an interface we could scan. Since we do not have that here, we only scan
    the machine; but this is a good way to determine whether you will encounter a
    machine acting as router or an actual router device.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面显示我们扫描结果的屏幕截图中，我们知道我们有ssh和端口111开放。这与我们扫描路由器时有显著不同，因为iptables正在机器上运行；因此，结果将显示机器上开放的内容。这为我们提供了一些攻击途径，但问题是我们没有真正测试iptables规则。这是因为我们不关心iptables规则；这次扫描只扫描了机器的接口，与我们的iptables规则无关。对于路由器，我们有一个可以扫描的接口。由于我们在这里没有，我们只扫描了机器；但这是确定您是否会遇到作为路由器或实际路由器设备的机器的好方法。
- en: So, what do we do now? Well, we have a couple of options. Since ssh is open,
    we could try to brute force it, or if we know we have ports open, it will help
    Nmap do a better job with enumeration. So, we will try that now. In the terminal
    window, enter `nmap –A 192.168.177.15` to do the enumeration scan.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在我们该怎么办呢？嗯，我们有几个选择。由于ssh是开放的，我们可以尝试暴力破解，或者如果我们知道有端口开放，它将帮助Nmap更好地进行枚举。所以，我们现在尝试一下。在终端窗口中，输入`nmap
    –A 192.168.177.15`进行枚举扫描。
- en: 'An example of a portion of this output is shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一部分输出的示例，如下屏幕截图所示：
- en: '![Assessing routers](img/477-1_07-30.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-30.jpg)'
- en: Screen showing an example of a portion of the output (the cropped text is not
    important)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了输出的部分示例（裁剪的文本不重要）
- en: From the previous screenshot, we see that we do have additional information.
    Again, this is because we are just looking at the machine that iptables is on,
    and not the rules. We have a couple of things we can do to get the iptables rules
    involved, but we will save this for later in the chapter. Based on what we see
    here, is there anything else we can do? The answer is yes. We see that we have
    the OpenSSH version, so we can use the techniques we discussed throughout the
    book and try to find any vulnerabilities that may be available for this version
    of SSH. We can do a search on the Internet. As of this writing, there are a couple
    of mentions of Version 6.0 having some denial of service vulnerabilities, but
    since that is rarely asked for in a penetration testing scope of work, we will
    not address them here, and you are welcome to experiment on your own.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们看到我们有额外的信息。这是因为我们只是查看iptables所在的机器，而不是规则。我们可以做一些事情来涉及iptables规则，但我们将在本章后面再讨论。根据我们在这里看到的，还有其他事情可以做吗？答案是肯定的。我们看到我们有OpenSSH版本，所以我们可以使用本书中讨论的技术，尝试找到可能适用于这个SSH版本的任何漏洞。我们可以在互联网上搜索。截至目前，有几处提到6.0版本存在一些拒绝服务漏洞，但由于这在渗透测试范围内很少被要求，我们将不在这里讨论，欢迎您自行尝试。
- en: One last thing to do before we move on is to look at the traffic at the packet
    level. Start your Wireshark tool by entering `wireshark &` in a terminal window
    in Kali Linux. When the tool opens, start a capture on your eth0 interface by
    navigating to **eth0** | **Capture**. Once the capture has started, run your Nmap
    scan in another terminal window, and then review the results in Wireshark. Since
    we really just want to see if there are any messages to show that we encounter
    in a filter, you can enter a display filter. We will do this now. In the filter
    window, enter `icmp` to see if any ICMP traffic was sent by the target.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，还有一件事要做，那就是在数据包级别查看流量。在Kali Linux的终端窗口中输入`wireshark &`启动Wireshark工具。当工具打开时，通过导航到**eth0**
    | **Capture**来在你的eth0接口上开始捕获。一旦捕获开始，通过另一个终端窗口运行你的Nmap扫描，然后在Wireshark中查看结果。因为我们真的只想看看是否有任何消息显示我们在过滤器中遇到的，你可以输入一个显示过滤器。我们现在就来做这个。在过滤窗口中输入`icmp`来查看目标是否发送了任何ICMP流量。
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例截图：
- en: '![Assessing routers](img/477-1_07-31.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-31.jpg)'
- en: Screen showing if any ICMP traffic was sent by the target (the cropped text
    is not important)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示目标是否发送了任何ICMP流量（裁剪的文本不重要）
- en: The previous screenshot does show some ICMP, but you will notice none of these
    are the type of ICMP we would have seen if a filter was in place. The packet 1702
    is the response in accordance with the RFC for a **User Datagram Protocol** (**UDP**)
    port that is closed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的屏幕截图确实显示了一些ICMP，但你会注意到这些都不是我们如果有过滤器的话会看到的ICMP类型。数据包1702是根据RFC对关闭的**用户数据报协议**（**UDP**）端口的响应。
- en: 'We have one more filter that we will apply to close out this section. As testers,
    it is important that we get to the data as expeditiously as we can, and this is
    where the power of the Wireshark filters come in. However, before we do this,
    is there something we have missed? Hopefully, you will remember that Nmap only
    scans 1000 ports by default, and as such, we don''t scan all the ports. You have
    probably already scanned the ports; as a reminder, we use the `-p` option for
    port scanning, and you should scan all ports so that your testing results are
    more complete. Once you have completed your scan, there will be several packets
    in Wireshark that you will have to look through. So, to make our job easier, enter
    the following in the filter window in Wireshark:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个过滤器，我们将应用以结束这一部分。作为测试人员，我们尽快获取数据非常重要，这就是Wireshark过滤器的威力所在。然而，在我们这样做之前，有什么我们错过了吗？希望你还记得Nmap默认只扫描1000个端口，因此我们并没有扫描所有的端口。你可能已经扫描了端口；作为提醒，我们使用`-p`选项进行端口扫描，你应该扫描所有端口，以便你的测试结果更完整。一旦你完成了扫描，Wireshark中将会有几个数据包需要你查看。为了让我们的工作更容易，输入以下内容到Wireshark的过滤窗口中：
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you have entered the filter, click on **Apply** to apply the filter. Now,
    all the packets that have the SYN and ACK flags set will be displayed; therefore,
    you now have a quick reference of what ports are open on the target. An example
    of this is shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了过滤器，点击**Apply**应用过滤器。现在，所有设置了SYN和ACK标志的数据包将被显示；因此，你现在可以快速查看目标上开放的端口。以下是一个示例截图：
- en: '![Assessing routers](img/477-1_07-32.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-32.jpg)'
- en: Screen showing a quick reference of what ports are open on the target (the cropped
    text is not important)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示目标上有哪些端口是开放的快速参考（裁剪的文本不重要）
- en: 'If you prefer to see the port numbers and not the names of the protocol that
    is usually assigned to that port, you can change this in the settings of Wireshark.
    Navigate to **Edit** | **Preferences** | **Name Resolution** and remove the check
    mark under the **Resolve transport names**. An example of this is shown in the
    following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢看到端口号而不是通常分配给该端口的协议名称，你可以在Wireshark的设置中更改这个。导航到**Edit** | **Preferences**
    | **Name Resolution**，并取消**Resolve transport names**下的复选标记。以下是一个示例截图：
- en: '![Assessing routers](img/477-1_07-33.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![评估路由器](img/477-1_07-33.jpg)'
- en: This is all we will do with the iptables machine for now. As we mentioned, we
    will revisit this when we actually start testing against the rule set. We were
    able to do this with the router device, but we will do it in conjunction with
    our testing through the router ACL with the iptables machine.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们目前对iptables机器所做的全部。正如我们提到的，当我们实际开始针对规则集进行测试时，我们将重新访问这一点。我们能够通过路由器设备做到这一点，但我们将与iptables机器一起通过路由器ACL进行测试。
- en: Evaluating switches
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估交换机
- en: Another device we will most likely encounter is the switch. Since a switch is
    a unicast device and only floods all ports with broadcast traffic, when we are
    up against one, we want to try and create a situation where the switch will either
    forward packets incorrectly to the wrong destination that we hope is us or get
    the switch to flood all information out all ports, in effect becoming a hub.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很可能会遇到的另一个设备是交换机。由于交换机是单播设备，只会向所有端口发送广播流量，当我们面对交换机时，我们希望尝试创建一种情况，使交换机要么将数据包错误地转发到我们希望的错误目的地，要么使交换机向所有端口发送所有信息，实际上成为一个集线器。
- en: The attacks we want to look at are called layer two attacks. While it is true
    that there are switches that operate all the way up to layer seven of the **Open
    System Interconnect** (**OSI**) model, we will focus on the more traditional approach
    that operates at layer two.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的攻击称为二层攻击。虽然确实有交换机可以操作到**开放系统互连**（**OSI**）模型的七层，但我们将专注于更传统的在二层操作的方法。
- en: MAC attacks
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAC攻击
- en: For a number of years, we enjoyed the luxury of being able to flood a switch
    using an excellent tool known as **macof**. You can read more about it at [http://linux.die.net/man/8/macof](http://linux.die.net/man/8/macof).
    You may still have some success with the macof tool, but it usually only works
    when you encounter a switch that is from before the year 2006\. We want to flood
    a switch to turn it into a hub, so we can intercept traffic for a potential attack.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我们一直享受着使用一个名为**macof**的优秀工具来淹没交换机的奢侈。您可以在[http://linux.die.net/man/8/macof](http://linux.die.net/man/8/macof)上阅读更多关于它的信息。您可能仍然可以使用macof工具取得一些成功，但通常只有在遇到2006年之前的交换机时才有效。我们想淹没交换机以将其转换为集线器，以便我们可以拦截潜在的攻击流量。
- en: 'If you do encounter an older switch, macof can flood the average **Content
    Addressable Memory** (**CAM**) table in 70 seconds. Since it is quite common to
    encounter an older switch, it is important to at least look at how the tool is
    used. We have the macof tool available to us in the Kali Linux distribution. In
    the Kali machine, navigate to **Applications** | **Kali Linux** | **Stress Testing**
    | **Network Stress Testing** | **macof** to open the macof tool, as shown in the
    following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到一个较旧的交换机，macof可以在70秒内淹没平均**内容寻址内存**（**CAM**）表。由于遇到较旧的交换机是相当常见的，因此至少要了解一下该工具的使用方法是很重要的。我们在Kali
    Linux发行版中可以使用macof工具。在Kali机器上，导航到**应用程序** | **Kali Linux** | **压力测试** | **网络压力测试**
    | **macof**以打开macof工具，如下截图所示：
- en: '![MAC attacks](img/477-1_07-34.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![MAC攻击](img/477-1_07-34.jpg)'
- en: 'This will open the macof tool, and as is common in the Kali Linux distribution,
    there is an output showing the usage of the tool. An example of the tool usage
    is shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开macof工具，正如在Kali Linux发行版中通常的那样，有一个显示工具使用的输出。工具使用示例如下截图所示：
- en: '![MAC attacks](img/477-1_07-35.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![MAC攻击](img/477-1_07-35.jpg)'
- en: As the previous screenshot shows, the usage of the tool is pretty straightforward.
    Again, this is a tool you can use when you encounter an older switch. We will
    now look at another attack against the switch at layer two.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，该工具的使用非常简单。再次强调，这是您在遇到较旧的交换机时可以使用的工具。现在我们将看一下针对第二层交换机的另一种攻击。
- en: VLAN hopping attacks
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VLAN跳跃攻击
- en: The next attack we will look at is the technique of hopping across a VLAN. A
    number of administrators make mistakes when it comes to configuring their switches,
    and as a result of this, we can sometimes hop across the VLAN. We use a VLAN hop
    to access assets that are not available to the VLAN assigned to the host.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的下一个攻击是跨越VLAN的技术。许多管理员在配置交换机时会犯错误，因此我们有时可以跨越VLAN。我们使用VLAN跳跃来访问分配给主机的VLAN不可用的资产。
- en: In a VLAN hop, we take advantage of the fact that a trunk has access to all
    VLANs. To carry out the attack, we must spoof the switch with trunking protocol
    signaling. For this to work, the switch has to be configured to allow us to accomplish
    this. The default setting on this is at **auto** that will allow our attack to
    work. If the spoof works, we will have access to all of the VLANs on the network.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在VLAN跳跃中，我们利用了一个事实，即干线具有对所有VLAN的访问权限。为了执行攻击，我们必须欺骗支持干线协议的交换机。为了使其工作，交换机必须配置为允许我们执行此操作。这上的默认设置是**auto**，这将允许我们的攻击起作用。如果欺骗成功，我们将可以访问网络上的所有VLAN。
- en: GARP attacks
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GARP攻击
- en: The **Gratuitous Address Resolution Protocol** (**GARP**) attacks are carried
    out against the fact that the ARP has no authentication, and as a result of this,
    you can successfully spoof an ARP address. The process is to send out a GARP that
    is sent to the broadcast address, and some operating systems will overwrite an
    existing ARP entry even if the entry has been statically entered.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gratuitous Address Resolution Protocol**（**GARP**）攻击是针对ARP没有认证进行的，因此您可以成功地欺骗ARP地址。该过程是发送到广播地址的GARP，有些操作系统将覆盖现有的ARP条目，即使该条目已经被静态输入。'
- en: All of these attacks are possible, but we will not be able to build and test
    them on the range for the most part unless we build an actual stationary range.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些攻击都是可能的，但在大多数情况下，除非我们建立一个实际的固定范围，否则我们将无法构建和测试它们。
- en: Attacking the firewall
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击防火墙
- en: Next, we want to attack the firewall, like we did earlier when we encountered
    the router. Our success will be determined by the administrator and how they have
    configured their environment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要像之前遇到路由器时那样攻击防火墙。我们的成功将取决于管理员以及他们如何配置他们的环境。
- en: 'We will use the **Smoothwall** firewall that we created, and we will attack
    it from the red interface that is connected to the VMnet2 switch. We will use
    the same process we used against the router and see what we can discover when
    we go against the firewall. Our testing range is shown in the following diagram:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们创建的**Smoothwall**防火墙，并将从连接到VMnet2交换机的红色接口对其进行攻击。我们将使用与我们对路由器使用的相同过程，并查看我们在对防火墙进行攻击时可以发现什么。我们的测试范围如下图所示：
- en: '![Attacking the firewall](img/477-1_07_36.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07_36.jpg)'
- en: As the previous diagram shows, we will just concentrate on the external interface
    of the Smoothwall machine. The first thing we want to do is to use our popular
    network scanning tool Nmap and see what we can discover from the machine.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的图表所示，我们将只集中在Smoothwall机器的外部接口上。我们要做的第一件事是使用我们流行的网络扫描工具Nmap，并查看我们可以从机器上发现什么。
- en: 'We need to have our Kali Linux distribution connected to the VMnet2 switch.
    An example of this is shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要将我们的Kali Linux发行版连接到VMnet2交换机。如下截图所示的示例： '
- en: '![Attacking the firewall](img/477-1_07-37.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-37.jpg)'
- en: 'Once you have verified your settings in the Kali machine, log in and enter
    `ifconfig eth0` in your Smoothwall machine to display the information for the
    IP address of the machine, since we need this to enter into our tool. An example
    is shown in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali机器中验证设置后，登录并在Smoothwall机器中输入`ifconfig eth0`以显示机器的IP地址信息，因为我们需要这个信息输入到我们的工具中。以下截图显示了示例：
- en: '![Attacking the firewall](img/477-1_07-38.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-38.jpg)'
- en: 'Now that we have the IP address, we are ready to conduct our scan. In your
    Kali Linux machine, enter `nmap –A 10.2.0.131` to scan the eth0 interface of the
    Bastion Host machine. If your IP address is different, then you will enter that
    as the target. An example of a portion of the results is shown in the following
    screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了IP地址，我们准备进行扫描。在您的Kali Linux机器上，输入`nmap –A 10.2.0.131`来扫描Bastion Host机器的eth0接口。如果您的IP地址不同，那么您将输入目标IP地址。以下截图显示了部分结果的示例：
- en: '![Attacking the firewall](img/477-1_07-39.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-39.jpg)'
- en: Once again, we really do not have much to go on. We see that there is only one
    port open on the machine, and since the case is that there is not enough for the
    Nmap tool to attempt a fingerprint of the operating system, we need to look at
    the packet level. Start Wireshark on Kali by entering `wireshark &`, and start
    a packet capture on the eth1 interface. Once you have the packet capture started,
    run the Nmap scan again, and then review the scan in Wireshark.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们确实没有太多线索。我们看到机器上只有一个端口是打开的，由于Nmap工具没有足够的信息来尝试对操作系统进行指纹识别，我们需要查看数据包级别。通过输入`wireshark
    &`在Kali上启动Wireshark，并在eth1接口上开始数据包捕获。一旦数据包捕获开始，再次运行Nmap扫描，然后在Wireshark中查看扫描结果。
- en: 'An example of a portion of the scan is shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了扫描的部分示例：
- en: '![Attacking the firewall](img/477-1_07-40.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-40.jpg)'
- en: Screen showing an example of a portion of the scan (the cropped text is not
    important)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了扫描部分的示例（裁剪的文本不重要）
- en: As you review the previous screenshot, you see that the **ident** port does
    respond as being closed. Virtually, all of the other ports do not respond, so
    at least we have something to go on. This is because the Smoothwall installation
    is registered if there is an Internet connection, and the identity is controlled
    over port 113.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看前面的截图时，您会看到**ident**端口确实响应为关闭状态。实际上，几乎所有其他端口都没有响应，所以至少我们有一些线索。这是因为如果有Internet连接，Smoothwall安装就会注册，并且身份受到端口113的控制。
- en: As we worked through this chapter, there was one thing that we discovered during
    our scan of the router; it is the use of ICMP error messages, so we want to see
    if there are any ICMP messages being returned by the Smoothwall machine. It is
    always a good idea to start with a fresh capture, so in Wireshark, navigate to
    **Capture** | **Restart** to start a new capture on the interface. To make your
    task easier, enter a filter of ICMP and click on **Apply**. Then, return to your
    terminal window, run the Nmap scan again, and observe the results in Wireshark.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成本章的工作时，我们发现了一件事，即在扫描路由器时使用了ICMP错误消息，因此我们想看看Smoothwall机器是否返回了任何ICMP消息。始终从新捕获开始是一个好主意，因此在Wireshark中，导航到**捕获**
    | **重新启动**以在接口上开始新的捕获。为了使您的任务更容易，输入ICMP过滤器并单击**应用**。然后返回到您的终端窗口，再次运行Nmap扫描，并观察Wireshark中的结果。
- en: 'An example of the results is shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果的示例：
- en: '![Attacking the firewall](img/477-1_07-41.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-41.jpg)'
- en: 'We do have the ICMP traffic, and this could assist us in determining whether
    we will encounter a firewall. Next, we will want to know what port is responding
    with the ICMP message. We know that according to RFC 793, this is a valid response
    for a UDP port that is closed. So, we need to determine if this is a UDP port
    that responds, or if it is a TCP. We will run our scan again and only look at
    TCP traffic, and we will do that by entering `nmap –sS 10.2.0.131` and observing
    Wireshark during the scan. An example of the results is shown in the following
    screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有ICMP流量，这可能有助于我们确定是否会遇到防火墙。接下来，我们将想知道哪个端口响应了ICMP消息。根据RFC 793，这是关闭的UDP端口的有效响应。因此，我们需要确定这是响应的UDP端口，还是TCP端口。我们将再次运行我们的扫描，并仅查看TCP流量，方法是输入`nmap
    –sS 10.2.0.131`并在扫描期间观察Wireshark。以下截图显示了结果的示例：
- en: '![Attacking the firewall](img/477-1_07-42.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![攻击防火墙](img/477-1_07-42.jpg)'
- en: Screen showing an example of the results (the cropped text is not important)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了结果的示例（裁剪的文本不重要）
- en: From the previous screenshot, we see that the TCP port causes the response,
    and therefore, it does not follow the RFC. We can now conclude that we have a
    firewall in place, and we can try to attack it or get through it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们看到TCP端口引起了响应，因此它不遵循RFC。我们现在可以得出结论，我们有了一个防火墙，并且我们可以尝试攻击它或穿过它。
- en: This again is the reality of testing; we can find a firewall, and unless we
    gain something about the firewall, it can be difficult, if not impossible, to
    successfully attack it. In this case, if we did not have the advantage of knowing
    this is the Smoothwall firewall, we would pretty much be in the dark as to what
    type of firewall we encountered.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这再次是测试的现实；我们可能会发现一个防火墙，除非我们对防火墙有所了解，否则成功攻击它可能会很困难，甚至不可能。在这种情况下，如果我们没有知道这是Smoothwall防火墙的优势，我们对所遇到的防火墙类型几乎一无所知。
- en: You are welcome to continue to try and get information about the firewall so
    that you can attack it, but we will move on because having worked with the Smoothwall
    firewall for a number of years, it is much easier to discover ways through it
    or use some form of social engineering to get access behind it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续尝试获取有关防火墙的信息，以便攻击它，但我们将继续前进，因为在使用Smoothwall防火墙多年后，发现通过它或使用某种社会工程学方法来获取其后面的访问权限要容易得多。
- en: Identifying the firewall rules
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别防火墙规则
- en: In this chapter, we earlier identified what port had a rule on it for the router;
    this is a technique you want to continue to practice with on your ranges, but
    we have not looked specifically at the firewall itself. We need to see what the
    firewall allows and blocks if we want to be able to get through it successfully.
    As has been mentioned before, this can be a significant challenge, and more often
    than not, we are limited to using the ports that are open to get through the firewall.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们早些时候确定了路由器上有规则的端口；这是您希望继续在您的范围内练习的技术，但我们还没有具体看防火墙本身。如果我们想成功地穿过它，我们需要看看防火墙允许和阻止什么。正如之前提到的，这可能是一个重大挑战，而且往往我们只能使用已打开的端口来穿过防火墙。
- en: We mentioned that a router is a form of a stateless firewall, and we showed
    that an Nmap scan of the router that has an ACL applied on it will show the ports
    that have a rule set. We not only discussed it, but we went on and proved it.
    We will take this one step further, first with our router, and then with our iptables
    and Smoothwall firewall.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到路由器是无状态防火墙的一种形式，并且我们展示了对应用了ACL的路由器进行Nmap扫描将显示已设置规则的端口。我们不仅讨论了这一点，而且还证明了它。我们将进一步进行这一步骤，首先是我们的路由器，然后是我们的iptables和Smoothwall防火墙。
- en: 'We want to look at what traffic is allowed to pass through the stateless firewall.
    Since we have already done this with the scan earlier, we will just briefly look
    at another method of testing the rules. We will work with the design shown in
    the following screenshot in this section:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想看看哪些流量被允许通过无状态防火墙。由于我们之前已经用扫描做过了，所以我们只是简要地看一下测试规则的另一种方法。在本节中，我们将使用以下屏幕截图中显示的设计：
- en: '![Identifying the firewall rules](img/477-1_07_43.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07_43.jpg)'
- en: 'As the previous screenshot shows, we have the second network that is represented
    by the VMnet2 switch, so start up the required machines and log in to them. In
    your router machine, open a terminal window and enter the following commands to
    get your dynamips machine running:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的屏幕截图所示，我们有第二个网络，由VMnet2交换机表示，因此启动所需的机器并登录到它们。在您的路由器机器上，打开一个终端窗口并输入以下命令来运行您的dynamips机器：
- en: '[PRE5]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you open a terminal window for each command and also navigate to the
    `/opt` directory.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您为每个命令打开一个终端窗口，并导航到`/opt`目录。
- en: 'Once your router starts, enter the following commands:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的路由器启动，输入以下命令：
- en: '[PRE6]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify your settings as shown. There is an access list on the interface; if
    there isn''t one, then you have to put one on. We covered the steps earlier in
    this chapter, in case you need help. An example is shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您的设置如图所示。接口上有一个访问列表；如果没有，那么您必须放上一个。如果需要帮助，我们在本章的前面已经覆盖了这些步骤。以下是一个示例：
- en: '![Identifying the firewall rules](img/477-1_07-44.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-44.jpg)'
- en: We see from the previous screenshot that we do have an ACL on this interface,
    so we are ready to do some testing. The first thing we have to do is to verify
    our routing. If it is not set up, then we need to create the routes. Again, this
    is something we have already done, so we will not cover the steps here.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的屏幕截图中，我们看到这个接口上有ACL，所以我们准备做一些测试。我们首先要做的是验证我们的路由。如果没有设置，那么我们需要创建路由。同样，这是我们已经做过的事情，所以我们不会在这里覆盖这些步骤。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You have to set the route on the Kali machine and OWASP machines.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在Kali机器和OWASP机器上设置路由。
- en: 'If your routing is set up, you should be able to access the web server of the
    **OWASP** machine. Use Netcat or telnet to verify you can connect to the machine;
    here, we will use Netcat. In the Kali Linux machine, enter `nc 10.3.0.132 80`
    in a terminal window and verify you can connect to the port; if you are successful,
    then the routing is configured and working. Once you have connected, enter the
    following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的路由设置好了，您应该能够访问**OWASP**机器的Web服务器。使用Netcat或telnet验证您是否可以连接到该机器；在这里，我们将使用Netcat。在Kali
    Linux机器上，输入`nc 10.3.0.132 80`并在终端窗口中验证您是否可以连接到该端口；如果成功了，那么路由配置正确并且工作正常。连接后，输入以下内容：
- en: '[PRE7]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An example of this is shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果的示例：
- en: '![Identifying the firewall rules](img/477-1_07-45.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-45.jpg)'
- en: 'Once the routing is set up, we are ready to start testing the rules. We will
    start with an Nmap scan. Enter `nmap 10.2.0.132` and review the results; we will
    now scan across the router so the ACL is in play. An example of the results is
    shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦路由设置好了，我们就准备开始测试规则。我们将从Nmap扫描开始。输入`nmap 10.2.0.132`并查看结果；现在我们将扫描路由器，所以ACL起作用了。以下是结果的示例：
- en: '![Identifying the firewall rules](img/477-1_07-46.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-46.jpg)'
- en: 'From the previous screenshot, we see that since we are now going across the
    ACL, we actually get a result of the port that''s allowed through the stateless
    firewall. We will look at one more, and then move on to testing the others. We
    can also use the tool **Hping** to look at a rule. In the terminal window on Kali,
    enter `hping3 –S –p 80 10.2.0.132` and note the results. Now, we want to enter
    the command for a port we know is not open. Enter `hping3 –S –p 22 10.2.0.132`
    and note the results. An example is shown in the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的屏幕截图中，我们看到，由于我们现在要穿过ACL，我们实际上得到了通过无状态防火墙允许的端口的结果。我们将再看一个，然后继续测试其他的。我们还可以使用工具**Hping**来查看规则。在Kali的终端窗口中，输入`hping3
    –S –p 80 10.2.0.132`并注意结果。现在，我们要输入一个我们知道没有打开的端口的命令。输入`hping3 –S –p 22 10.2.0.132`并注意结果。以下是一个示例：
- en: '![Identifying the firewall rules](img/477-1_07-47.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-47.jpg)'
- en: Based on what we have seen, it is quite easy to determine the rules of a stateless
    filter, but what about an actual firewall? We will look at the iptables reaction
    first. Shut down or suspend your router, and bring up your iptables machine.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们所看到的，很容易确定无状态过滤器的规则，但实际防火墙呢？我们将首先看一下iptables的反应。关闭或挂起您的路由器，并启动您的iptables机器。
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have to tweak our routing to point to the right interface, and we also have
    to enable IP forwarding if it is not on in the iptables machine.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须调整我们的路由以指向正确的接口，并且如果iptables机器上没有打开IP转发，我们还必须启用IP转发。
- en: 'Once you have your routing and forwarding set up, you are ready to test the
    rules across the iptables. In your Kali machine, perform the test with either
    Netcat or Nmap to see if you have routing to port 80 of the OWASP machine. Alternatively,
    you can open a browser and try it that way too. An example of the browser method
    is shown in the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置好了路由和转发，就可以开始测试iptables规则。在您的Kali机器上，可以使用Netcat或Nmap进行测试，看看是否可以路由到OWASP机器的80端口。或者，您也可以打开浏览器尝试。浏览器方法的示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-48.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-48.jpg)'
- en: 'Once again, now that we have the routing set up, we are ready to test across
    the iptables rule set. As we have done before, we will start our testing with
    Nmap. In Kali, enter `nmap 10.2.0.132` and review the results. An example of the
    results is shown in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了路由，我们准备测试iptables规则集。与之前一样，我们将从Nmap开始测试。在Kali中，输入`nmap 10.2.0.132`并查看结果。结果的示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-49.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-49.jpg)'
- en: 'Next, we should do the same thing as we did before using the Hping tool, but
    we will save you the trouble. Iptables is not going to respond in the same way
    the router did; iptables will not respond at all when it is filtering something.
    As we have stated many times, this is what testing is all about: you create a
    lab environment, apply different settings and configurations, and see what works
    and does not work.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该使用Hping工具做与之前相同的事情，但我们会为您省去麻烦。Iptables不会像路由器那样做出响应；当它在过滤某些东西时，iptables根本不会做出响应。正如我们多次所述，这就是测试的全部意义：您创建一个实验环境，应用不同的设置和配置，然后查看哪些有效，哪些无效。
- en: 'Now, we are ready to look at the Smoothwall firewall. Since we are testing
    across the firewall, we have a couple of options based on our design. We can test
    across the router, and then across the firewall. However, during testing, we want
    to make things as simple as possible. So, we will test directly across the firewall;
    an example of our network design for this is shown in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备查看Smoothwall防火墙。由于我们正在测试防火墙，根据我们的设计，我们有几个选项。我们可以先测试路由器，然后再测试防火墙。但是，在测试过程中，我们希望尽可能简单。因此，我们将直接测试防火墙；我们的网络设计示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07_50.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07_50.jpg)'
- en: Once again, we have to establish our routing. We now target the VMnet3 switch,
    and as such, we have to route to that network.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须再次建立我们的路由。现在我们的目标是VMnet3交换机，因此我们必须路由到该网络。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are not required to turn on IP forwarding here since the Smoothwall machine
    takes care of it for us.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要在这里打开IP转发，因为Smoothwall机器会为我们处理。
- en: 'We need to note the IP address of the metasploitable machine. When we set the
    machine up earlier in the book, we set a DHCP server on the VMnet3 switch; therefore,
    the machine should have picked up an address at the time of the boot. To determine
    the IP address, you need to log in to the machine and enter `msfadmin` and a password
    of `msfadmin`. Once logged in, enter `ifconfig` and display the interface information.
    An example is shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注意metasploitable机器的IP地址。在本书之前设置机器时，我们在VMnet3交换机上设置了DHCP服务器；因此，该机器应该在启动时获取了一个地址。要确定IP地址，您需要登录到机器上，输入`msfadmin`和`msfadmin`作为密码。登录后，输入`ifconfig`并显示接口信息。示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-51.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-51.jpg)'
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the address is different from what you created, then you may have to modify
    it to match the address that is on the target machine. Again, we covered this
    earlier, so we will not cover it again here. To prevent this, you can configure
    the address to be static and assigned at boot.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果地址与您创建的地址不同，那么您可能需要修改它以匹配目标机器上的地址。同样，我们之前已经涵盖了这一点，因此在这里不再涵盖。为了避免这种情况，您可以将地址配置为静态地址，并在启动时分配。
- en: 'A reminder: you will have to add the route in the metasploitable machine; to
    do this, you will need to use the `sudo` command. The command to add the route
    is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒：您需要在metasploitable机器上添加路由；为此，您需要使用`sudo`命令。添加路由的命令如下：
- en: '[PRE8]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once your routing is set, you can test it using any of the methods discussed
    previously. An example of testing using telnet is shown in the next screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置好了路由，就可以使用之前讨论过的任何方法进行测试。使用telnet进行测试的示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-52.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-52.jpg)'
- en: 'We are now ready to test across the firewall with the target as the destination.
    As we have done before, the easiest way to do it is to use our tool Nmap. Additionally,
    we want to run Wireshark and make a comparison to see if there are any differences
    from what we saw when we scanned the machine directly. In your Kali machine, enter
    `nmap 10.3.0.128` to scan the target. Remember that if you have a different IP
    address, you will need to enter that. An example of the Nmap scan is shown in
    the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好通过防火墙测试目标。与之前一样，最简单的方法是使用我们的工具Nmap。此外，我们还想运行Wireshark，并进行比较，看看与直接扫描机器时是否有任何不同。在您的Kali机器上，输入`nmap
    10.3.0.128`来扫描目标。请记住，如果您有不同的IP地址，您需要输入该地址。Nmap扫描的示例如下截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-53.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-53.jpg)'
- en: 'As the previous screenshot shows, there really is not much difference between
    the tests done on Wireshark and the Smoothwall machine. As you may recall, when
    we examined the results at the packet level, we discovered that the Smoothwall
    machine responded at times with an ICMP message; it was a destination-unreachable
    type of message and the code was port unreachable. An example of the ICMP messages
    from the scan is shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们在 Wireshark 和 Smoothwall 机器上进行的测试并没有太大的区别。你可能还记得，当我们在数据包级别检查结果时，我们发现
    Smoothwall 机器有时会以 ICMP 消息做出响应；它是一种目标不可达类型的消息，代码是端口不可达。扫描中 ICMP 消息的示例如下屏幕截图所示：
- en: '![Identifying the firewall rules](img/477-1_07-54.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![识别防火墙规则](img/477-1_07-54.jpg)'
- en: Screen showing an example of the ICMP messages from the scan (the cropped text
    is not important)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示了扫描中 ICMP 消息的示例（裁剪的文本不重要）
- en: As the previous screenshot shows, we do have the ICMP messages, so this is something
    we can make a note of. In the discovery phase, if we find a client with the Smoothwall
    firewall, we will have data on how to proceed against it. You are welcome to continue,
    test data, and see what you can discover; as always, remember to document everything.
    For our purposes, we have achieved the objective of this section, and we are ready
    to move on to the next section.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们确实有 ICMP 消息，所以这是我们可以做个记录的事情。在发现阶段，如果我们找到一个使用 Smoothwall 防火墙的客户端，我们将有关于如何对其进行操作的数据。欢迎继续、测试数据，并看看你能发现什么；一如既往，请记得记录一切。对于我们的目的，我们已经实现了本节的目标，我们准备继续进行下一节。
- en: Tricks to penetrate filters
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透过滤器的技巧
- en: Based on what we discovered in this chapter, you saw that when we encounter
    a device, our success at targeting it or even targeting through it is limited
    by the amount of work the administrator has taken to make the device as restrictive
    as possible.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在本章中发现的内容，你会发现当我们遇到一个设备时，我们成功瞄准它甚至穿透它的能力受到管理员为使设备尽可能受限所付出的工作量的限制。
- en: Despite this, there are times when administrators make mistakes, and that is
    part of our job as professional security testers. We have to find these existing
    mistakes and document them so that the client can fix them.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，有时管理员会犯错误，这是我们作为专业安全测试人员的工作的一部分。我们必须找到这些现有的错误并记录下来，以便客户可以修复它们。
- en: One of the things that we continue to see is weak filtering rules, and this
    is something that has been around for a long time. Despite the new products, we
    can still find weak filtering rules when we are testing; therefore, the last section,
    before we end this chapter, will deal with detecting these.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续看到的一件事是弱的过滤规则，这是一个长期存在的问题。尽管有了新产品，我们在测试时仍然可以找到弱的过滤规则；因此，在结束本章之前的最后一节将处理如何检测这些规则。
- en: 'The first weak filters we will create and then test, so that we can document
    the results, will be those that are often encountered in a stateless filter, and
    that is a router. We will use our Dynamips virtual machine, and the target will
    be the OWASP machine. In your router machine, open a terminal window and enter
    the following commands to get your Dynamips machine running:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建并测试第一个弱过滤规则，以便记录结果，这些规则通常在无状态过滤器和路由器中遇到。我们将使用我们的 Dynamips 虚拟机，目标将是 OWASP
    机器。在你的路由器机器上，打开一个终端窗口，并输入以下命令来运行你的 Dynamips 机器：
- en: '[PRE9]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you see, this time we run the command in the background to avoid having
    to open another terminal window; it is up to you if you want to use separate windows.
    We need to create a weak rule, then we will carry out a number of techniques and
    see which one we can use to get additional information from the target that is
    behind the filter. Once your router starts, enter the following commands:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这次我们在后台运行命令，以避免打开另一个终端窗口；如果你想使用单独的窗口，那就由你决定。我们需要创建一个弱规则，然后进行一系列技术测试，看看我们可以使用哪一种来从过滤器后面的目标获取额外的信息。一旦你的路由器启动，输入以下命令：
- en: '[PRE10]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Press *Ctrl* + *Z*, and then enter the following command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Ctrl* + *Z*，然后输入以下命令：
- en: '[PRE11]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'An example of the configuration is shown in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 配置示例如下屏幕截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-55.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![渗透过滤器的技巧](img/477-1_07-55.jpg)'
- en: We now have a weak filter rule in place, and this is quite common when testing.
    Some administrators will add a rule for the return traffic and allow all traffic
    coming from a certain port to get through. We use port 80 here, but it is most
    commonly found on port 20, 53, and 67\. Microsoft has had weaknesses in its firewall
    and has been known to allow all traffic with port 88 (Kerberos) as a source port
    to get through the filter.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了一个弱的过滤规则，这在测试时相当常见。一些管理员会添加一个用于返回流量的规则，并允许所有来自某个端口的流量通过。我们在这里使用的是端口
    80，但最常见的是在端口 20、53 和 67 上找到。微软的防火墙存在漏洞，已知允许所有源端口为 88（Kerberos）的流量通过过滤器。
- en: 'We added a new rule to our router, and if we do some research, we see that
    there are techniques to penetrate a firewall, so we will try one of them now.
    The first one we want to try is the fragmentation scan, so enter `nmap –f 10.2.0.132`
    in Kali to direct a fragmented scan at the target. An example of the results is
    shown in the following screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在路由器上添加了一个新规则，如果我们进行一些研究，我们会发现有渗透防火墙的技术，所以我们现在将尝试其中一种。我们想尝试的第一种是分段扫描，所以在 Kali
    中输入 `nmap –f 10.2.0.132` 来对目标进行分段扫描。结果的示例如下屏幕截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-56.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![渗透过滤器的技巧](img/477-1_07-56.jpg)'
- en: Well, this scan has not even detected the one port that is open, so we can document
    that and move on. As has been mentioned, there are a number of scans that can
    be attempted, and your success will vary depending on the administrator you are
    up against. We will look at one more, and you are encouraged to explore other
    methods on your own. You can find a listing of a number of techniques at [http://pentestlab.wordpress.com/2012/04/02/nmap-techniques-for-avoiding-firewalls/](http://pentestlab.wordpress.com/2012/04/02/nmap-techniques-for-avoiding-firewalls/).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这次扫描甚至没有检测到一个开放的端口，所以我们可以记录下来并继续。正如前面提到的，可以尝试许多不同的扫描，您的成功将取决于您所面对的管理员。我们将再看一个，鼓励您自行探索其他方法。您可以在[http://pentestlab.wordpress.com/2012/04/02/nmap-techniques-for-avoiding-firewalls/](http://pentestlab.wordpress.com/2012/04/02/nmap-techniques-for-avoiding-firewalls/)找到许多技术的列表。
- en: 'The next one we will look at is the technique that will usually provide you
    the most success, and it is the one we mentioned earlier. A common weakness in
    filters is a rule that allows return traffic from a certain port. Fortunately,
    with Nmap, we have a source port scan option, so we can always direct our traffic
    from a specific port. We want to conduct our scan and use this option. In your
    Kali terminal window, enter `nmap –g 80 10.2.0.132`. The `g` option will direct
    the traffic to come from the port entered, in this case, port 80\. An example
    of this is shown in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下通常会为您提供最大成功的技术，这也是我们之前提到的技术。过滤器中的一个常见弱点是允许从某个端口返回流量的规则。幸运的是，使用Nmap，我们有一个源端口扫描选项，所以我们总是可以从特定端口发送我们的流量。我们想要进行扫描并使用这个选项。在您的Kali终端窗口中，输入
    `nmap –g 80 10.2.0.132`。`g` 选项将指示流量来自输入的端口，这种情况下是端口80。示例如下截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-57.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![穿透过滤器的技巧](img/477-1_07-57.jpg)'
- en: Success! We now have additional detail about the target that is behind the filter;
    therefore, we can carry out our normal testing methodology against it now, as
    long as we generate our traffic from source port 80.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！我们现在对过滤器后面的目标有了更多的细节；因此，我们现在可以按照我们的正常测试方法对其进行测试，只要我们从源端口80生成我们的流量。
- en: Since we can reach all of the ports open on the machine behind the filter, let
    us investigate this further. We could try a vulnerability scanner, but for the
    most part they are not designed to go through filters, so we will have to manually
    pull the information from the services running on the target, and see if we can
    find something that might be a vector for us to attack, assuming we can send our
    attack from port 80\. This is something we will have to research further.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以访问过滤器后面的机器上打开的所有端口，让我们进一步调查一下。我们可以尝试使用漏洞扫描程序，但在大多数情况下，它们并不是设计用来穿过过滤器的，所以我们将不得不手动从目标上运行的服务中提取信息，并查看是否能找到一些可能成为我们攻击向量的东西，假设我们可以从端口80发送我们的攻击。这是我们需要进一步研究的事情。
- en: First, we want to see what is running on these ports, so we can use Nmap to
    grab the banner from these ports.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要查看这些端口上运行了什么，所以我们可以使用Nmap从这些端口获取横幅。
- en: Note
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use Netcat to get past the filter and reach the target with the
    option `-p` to come from a specific source port. This is left as an exercise for
    the reader.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用Netcat来绕过过滤器并使用 `-p` 选项来从特定源端口到达目标。这留作读者的练习。
- en: 'We could use a number of different scan techniques to get the service information
    from the target; we will use one of the older ones that is still effective and
    faster than some of the newer ones. In your Kali machine terminal window, enter
    `nmap -g 80 –sV 10.2.0.132` to grab the banner of the services. An example is
    shown in the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用许多不同的扫描技术来从目标获取服务信息；我们将使用其中一种较老但仍然有效且比一些新技术更快的技术。在您的Kali机器终端窗口中，输入 `nmap
    -g 80 –sV 10.2.0.132` 来获取服务的横幅。示例如下截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-58.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![穿透过滤器的技巧](img/477-1_07-58.jpg)'
- en: Of interest in the previous screenshot is the fact that the scan shows that
    port 139 and 145, which are normally found on the Windows platforms, are open.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，有趣的是扫描显示端口139和145是开放的，这些端口通常在Windows平台上找到。
- en: From here, the process is to look for vulnerable versions of services, or even
    the operating system, and then try to leverage the vulnerability with an exploit.
    To carry this out, we will use another machine for testing, and that machine is
    the Kioptrix distribution from [http://www.kioptrix.com/blog/](http://www.kioptrix.com/blog/).
    There are a number of distributions we can download from the site. We will use
    the **Level 1** version. The process is to open the virtual machine and connect
    it to the VMnet2 network in the settings; by doing this, we have a machine we
    can test against.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，流程是寻找服务或操作系统的易受攻击版本，然后尝试利用漏洞进行攻击。为了执行这个过程，我们将使用另一台用于测试的机器，那台机器是来自[http://www.kioptrix.com/blog/](http://www.kioptrix.com/blog/)的Kioptrix发行版。我们可以从该网站下载许多发行版。我们将使用
    **Level 1** 版本。流程是打开虚拟机并在设置中将其连接到VMnet2网络；通过这样做，我们有一台可以进行测试的机器。
- en: 'An example of the virtual machine settings is shown in the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机设置的示例如下截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-59.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![穿透过滤器的技巧](img/477-1_07-59.jpg)'
- en: Once the machine boots up, we need to determine the IP address assigned by the
    DHCP server. We can do this by scanning the VMnet2 subnet.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器启动，我们需要确定DHCP服务器分配的IP地址。我们可以通过扫描VMnet2子网来做到这一点。
- en: 'Enter `nmap –g 20 –sP 10.2.0.100-200` in the terminal window on your Kali machine
    to conduct a ping sweep scan against the VMnet2 network. We have the luxury of
    knowing the start and end IP range for the DHCP server, so we will use that here
    to speed up the scan. An example of the scan is shown in the following screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Kali机器终端窗口中输入 `nmap –g 20 –sP 10.2.0.100-200` 进行针对VMnet2网络的ping扫描。我们有幸知道DHCP服务器的起始和结束IP范围，所以我们将在这里使用它来加快扫描速度。扫描的示例如下截图所示：
- en: '![Tricks to penetrate filters](img/477-1_07-60.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![穿透过滤器的技巧](img/477-1_07-60.jpg)'
- en: We see that we have three targets in our results, and we know that the 132 machine
    is the OWASP, and the 135 machine is our Kali machine; therefore, our target of
    interest is the 140 machine. This again is all possible because of the weak filter
    configuration on the router. Once we find a way through it, we will continue to
    use it. We need to know what services are running on our target, so enter `nmap
    –g 80 –sV 10.2.0.140` to display the service information from the target. We know
    that this target machine is not a Windows machine, but we have what looks like
    Windows ports open on the target.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们的结果中有三个目标，我们知道132号机器是OWASP，135号机器是我们的Kali机器；因此，我们感兴趣的目标是140号机器。这一切都是因为路由器上的弱过滤器配置。一旦我们找到了突破口，我们将继续使用它。我们需要知道目标上运行的服务，所以输入`nmap
    –g 80 –sV 10.2.0.140`来显示目标的服务信息。我们知道这个目标机器不是Windows机器，但我们在目标上看到了类似Windows端口的开放。
- en: Since this is the case, we can draw the conclusion that samba is running on
    the machine. There have been a number of samba vulnerabilities; we can conduct
    a research on them and try to see if we are successful.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种情况，我们可以得出结论，samba正在运行在这台机器上。有许多samba漏洞；我们可以对它们进行研究，并尝试看看我们是否成功。
- en: 'We covered a number of techniques for finding vulnerabilities, and we will
    save you some trouble by looking at some of the samba exploits that are available.
    If you enter `msfconsole` to bring up the metasploit tool, it will take some time
    to get the program to come up, and once it does, we want to use the excellent
    search capability; enter `search samba`. An example of a portion of the results
    is shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了许多发现漏洞的技术，我们将为您节省一些麻烦，看看一些可用的samba利用程序。如果输入`msfconsole`来启动metasploit工具，程序启动需要一些时间，一旦启动，我们想使用出色的搜索功能；输入`search
    samba`。以下截图显示了部分结果的示例：
- en: '![Tricks to penetrate filters](img/477-1_07-61.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![渗透过滤器的技巧](img/477-1_07-61.jpg)'
- en: 'As the previous screenshot shows, we have a number of exploits that are available;
    we want to select the ones that have a rating of great or better as that will
    provide the most chance of success. Having said that, there is no guarantee of
    success, but that is the reality of exploitation. So, which one do you pick? Well,
    we have discussed the concept of research, and that is how you find out which
    one will work best for you. We will save you time for this one; enter the following
    in your metasploit window:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们有许多可用的利用程序；我们希望选择评级为“优秀”或更高的那些，因为这将提供最大的成功机会。话虽如此，成功并不保证，但这就是利用的现实。那么，你会选择哪一个？好吧，我们已经讨论了研究的概念，这就是你找出哪一个对你最有效的方法。我们将为您节省时间；在您的metasploit窗口中输入以下内容：
- en: '[PRE12]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We use the Kali machine as the connection for the reverse shell, and we use
    the port 123 for it to come to us on. It is often not checked as it egresses out,
    and as such, will usually work very well. This exploit will fail because there
    is no source port that the traffic is coming from. An example is shown in the
    following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Kali机器作为反向shell的连接，并使用端口123让它到达我们这里。通常不会被检查，因此通常会非常有效。这个利用将失败，因为没有流量来自的源端口。以下截图显示了一个示例：
- en: '![Tricks to penetrate filters](img/477-1_07-62.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![渗透过滤器的技巧](img/477-1_07-62.jpg)'
- en: 'As the previous screenshot shows, the exploit cannot get to the target. Well,
    we know that we have a way to get to the target and that involves setting the
    traffic to come from a specific source port, so what do we do? Well, fortunately
    the creators of metasploit provide us a method to do this, but it is not well
    known, and in fact is not well documented, so it could disappear anytime; therefore,
    it is always good to keep old virtual machines around in case something that we
    liked disappears. The option we are referring to is the `CPORT` option; so enter
    the following command in the metasploit tool to send all of the traffic to the
    target from a source port of 80:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，利用程序无法到达目标。好吧，我们知道我们有办法到达目标，这涉及将流量设置为来自特定源端口，那么我们该怎么办？幸运的是，metasploit的创建者为我们提供了一种方法来做到这一点，但这并不为人所知，实际上也没有很好的文档记录，因此它随时可能消失；因此，最好保留旧的虚拟机，以防我们喜欢的东西消失。我们指的是`CPORT`选项；因此，在metasploit工具中输入以下命令，将所有流量从源端口80发送到目标：
- en: '[PRE13]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, enter the exploit to attempt it again. An example is shown in the following
    screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入利用程序再次尝试。以下截图显示了一个示例：
- en: '![Tricks to penetrate filters](img/477-1_07-63.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![渗透过滤器的技巧](img/477-1_07-63.jpg)'
- en: Again, if your exploit fails, it is not uncommon, and an option is to set the
    network flat and then try the exploit. Unfortunately, there is nothing guaranteed
    here. The main thing is you know the technique to discover when a filter is present,
    and know methods to try and penetrate the filter.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您的利用程序失败，这并不罕见，一个选择是设置网络平面，然后尝试利用程序。不幸的是，这里没有什么保证。最重要的是，您知道如何发现过滤器的存在，并知道如何尝试渗透过滤器的方法。
- en: The next thing to do is to attempt the same process and methodology against
    the iptables machine. The results are very similar; therefore, we will leave that
    as a homework assignment for those of you who want to practice it. As always,
    document all of your findings and continue to experiment and learn.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情是尝试相同的过程和方法来攻击iptables机器。结果非常相似；因此，我们将把这留作一个作业任务，供那些想要练习的人。一如既往，记录下你的所有发现，并继续实验和学习。
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a systematic step-by-step process for when we performed
    assessments against a variety of devices. We started the chapter with the router
    device, and then we moved on to the switches. Following the routers and switches,
    we moved on to a discussion on what to do when we encounter firewalls.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们建立了一个系统化的逐步过程，用于对各种设备进行评估。我们从路由器设备开始这一章，然后转向交换机。在路由器和交换机之后，我们转向讨论遇到防火墙时该怎么办。
- en: Once we learned how to deal with a number of different devices, we moved on
    to methods to identify the filtering rules that are in place. We discovered how
    and when a scan is conducted against certain devices, they will respond not in
    accordance with the standards as set forth in the RFC; furthermore, we were able
    to discover that when there is a rule in place on a device, it is common for that
    one port to have a response that provides us with additional details on how to
    proceed against that device.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们学会了处理多种不同的设备，我们就转向了识别现有过滤规则的方法。我们发现了何时以及如何对某些设备进行扫描时，它们的响应不符合RFC中规定的标准；此外，我们能够发现，当设备上存在规则时，通常会有一个端口的响应为我们提供了针对该设备进一步操作的额外细节。
- en: Finally, we closed the chapter with a discussion on tricks to penetrating filters,
    and we looked at using a fragmentation scan; however, this did not provide much
    success. Then, we looked at the powerful technique of source port scanning, and
    in fact, this was very successful in allowing us to enumerate additional information
    about the target; furthermore, we showed how if the source port weakness is found,
    we have options to carry an attack coming out from a specific source port.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了渗透过滤器的技巧，并研究了使用分段扫描；然而，这并没有取得太大的成功。然后，我们研究了强大的源端口扫描技术，事实上，这在允许我们枚举有关目标的额外信息方面非常成功；此外，我们展示了如果找到源端口的弱点，我们有选择从特定源端口发起攻击的选项。
- en: This concludes the chapter. You now have a sound process and methodology for
    when you encounter devices. As we discussed in the chapter, there will be many
    times when you will struggle to find ways through the devices, but this is part
    of professional security testing, and it is the time when you will learn the most.
    In fact, the more you struggle the more you will learn, in most cases. Always
    remember to document all the things that you observe. This is a habit that a prudent
    and professional tester will deploy when building and testing their virtual labs.
    In the next chapter, we will take a look at how we architect an IDS/IPS range.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了本章。现在你已经有了一个处理设备时的完整流程和方法。正如我们在本章中讨论的，你将会有很多时候会在设备上寻找突破的方法，但这是专业安全测试的一部分，也是你学到最多的时候。事实上，在大多数情况下，你挣扎得越多，学到的就越多。始终记得记录你观察到的所有事情。这是一个谨慎和专业的测试人员在构建和测试他们的虚拟实验室时会采用的习惯。在下一章中，我们将看看如何设计一个IDS/IPS范围。
