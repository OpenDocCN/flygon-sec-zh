- en: IoT Penetration Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IoT渗透测试
- en: Although the term **IoT** is known to have been coined in 1999 by MIT's Auto-ID
    Labs, embedded devices have been long-standing in technology for decades. The
    difference between new IoT and the embedded device world pertains to the legacy
    of design decisions and configurations that were never intended to be made public
    on the internet. Without manufacturing companies considering the consequences,
    widespread exploitation of IoT devices is now taking place, causing some of the
    world's biggest **Distributed Denial of Service** (**DDoS**) attacks ever recorded.
    We will cover various aspects of IoT pen testing and practical security guidance
    to provide preventative measures against the attacks we are currently seeing in
    the market.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管**IoT**这个术语据信是由麻省理工学院的Auto-ID实验室于1999年创造的，嵌入式设备在技术领域已经存在了几十年。新IoT和嵌入式设备世界之间的区别在于设计决策和配置的遗留问题，这些决策和配置从未打算公开在互联网上。由于制造公司没有考虑后果，目前正在发生对IoT设备的广泛利用，导致了有史以来一些最大的**分布式拒绝服务**（**DDoS**）攻击。我们将涵盖IoT渗透测试的各个方面和实际的安全指导，以提供针对当前市场上出现的攻击的预防措施。
- en: 'To understand the origin of IoT you can visit this link:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解IoT的起源，您可以访问此链接：
- en: '[http://autoid.mit.edu/iot_research_initiative](http://autoid.mit.edu/iot_research_initiative)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://autoid.mit.edu/iot_research_initiative](http://autoid.mit.edu/iot_research_initiative)'
- en: 'Details on the aforementioned DDoS attacks can be found via the following link:
    [https://www.us-cert.gov/ncas/alerts/TA16-288A](https://www.us-cert.gov/ncas/alerts/TA16-288A)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有关上述DDoS攻击的详细信息可以通过以下链接找到：[https://www.us-cert.gov/ncas/alerts/TA16-288A](https://www.us-cert.gov/ncas/alerts/TA16-288A)
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining the IoT ecosystem and pen testing life cycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义IoT生态系统和渗透测试生命周期
- en: Firmware 101
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固件101
- en: Web applications in IoT
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoT中的Web应用程序
- en: Mobile applications in IoT
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoT中的移动应用程序
- en: Device basics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备基础知识
- en: Introduction to IoT's wireless communications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoT无线通信简介
- en: Setting up an IoT pen testing lab
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立IoT渗透测试实验室
- en: The goal of this chapter is to set a foundation for IoT penetration testing,
    which will then be used in the subsequent chapters ahead.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是为IoT渗透测试奠定基础，然后将在接下来的章节中使用。
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter focuses on the foundational knowledge that is required when performing
    an IoT penetration test. It provides basic concepts about the many attack surfaces
    within IoT and lays the groundwork to assist testers with jump-starting an IoT
    testing lab.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍进行IoT渗透测试时所需的基础知识。它提供了关于IoT内部许多攻击面的基本概念，并为协助测试人员启动IoT测试实验室奠定了基础。
- en: We will discuss the current state of IoT penetration testing and each area of
    possible attack surface to address how testing has advanced over the years. Then
    we will go over the basics of firmware security, web application security, mobile
    application security, hardware security, and radio communication.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论当前IoT渗透测试的状态以及可能的攻击面的每个领域，以解决测试在多年来的进展。然后我们将介绍固件安全、Web应用程序安全、移动应用程序安全、硬件安全和无线通信的基础知识。
- en: Finally, we will walk you through how to set up the software tools and hardware
    tools required for testing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将指导您如何设置所需的软件工具和硬件工具进行测试。
- en: Defining the IoT ecosystem and penetration testing life cycle
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义IoT生态系统和渗透测试生命周期
- en: Over the last few years, the spotlight has been on IoT devices due to the sheer
    amount being deployed, the conveniences they provide, their ease of use, and the
    potential security risks they pose in our society. With the IoT boom taking place
    before our eyes, we as a people are closer to a technology singularity. The dependence
    on IoT and the internet, which powers them raises concerns about safety, privacy,
    and security. Due to the spread of devices infiltrating all industry verticals,
    such as consumers, entertainment, commercial, medical, industrial, energy, and
    manufacturing, it has been proven that consumers, as well as commercial technology
    operators and owners, are unable to properly ensure the security of these devices.
    The reliance on device manufacturers to provide the proper assurance that devices
    are built with methodologies such as security-by-design is heavily dependent on
    the industry in which the device was made for.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，由于部署的设备数量庞大、提供的便利性、易用性以及它们在我们社会中可能带来的潜在安全风险，人们对IoT设备格外关注。随着IoT的蓬勃发展，我们作为一个社会正逐渐接近技术的奇点。对IoT和支撑它们的互联网的依赖引发了对安全、隐私和安全性的担忧。由于设备渗透到消费者、娱乐、商业、医疗、工业、能源和制造等所有行业领域，已经证明消费者以及商业技术运营商和所有者无法适当地确保这些设备的安全。依赖设备制造商提供适当保证，即设备采用诸如安全设计等方法，严重依赖于设备所属的行业。
- en: Each industry vertical and region has its own respective regulations for testing
    devices. It is important to do your own due diligence prior to testing in order
    to ensure laws are not being broken. In some regions, such as the United States,
    security research for consumer devices is allowed and exempt from the **Digital
    Millennium Copyright Act** (**DMCA**), so long as the research is acting in good
    faith, is lawfully acquired, conducted in a controlled environment, and does not
    violate the **Computer Fraud and Abuse Act** (**CFAA**) of October 2016\. This
    means security research for connected vehicles, cameras, various smart home devices,
    video game consoles, and jailbreaking mobile devices are now legal. After a long
    road of battles with the DMCA and the security community, this is a big win.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个行业垂直领域和地区都有各自的测试设备法规。在测试之前进行尽职调查以确保不违反法律非常重要。在一些地区，如美国，对消费者设备进行安全研究是允许的，并且不受**数字千禧年版权法**（**DMCA**）的限制，只要研究是出于善意，合法获取的，是在受控环境中进行的，并且不违反2016年10月的**计算机欺诈和滥用法**（**CFAA**）。这意味着对连接的车辆、摄像头、各种智能家居设备、视频游戏主机和越狱移动设备进行安全研究现在是合法的。经过与DMCA和安全社区的长期斗争，这是一个重大胜利。
- en: Now that such laws have passed, this is where we come in; we will go through
    assessing device firmware, web applications, mobile applications, hardware, and
    radio communications. First, we need to understand what the full scope of IoT
    is, including penetration testing approaches, and life cycles, to recognize all
    of its attack surfaces. Let's discuss the fundamentals of each IoT component in
    order to understand the attacks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些法律已经通过，这就是我们介入的地方；我们将进行设备固件、Web应用程序、移动应用程序、硬件和无线通信的评估。首先，我们需要了解物联网的全部范围，包括渗透测试方法和生命周期，以识别所有的攻击面。让我们讨论每个物联网组件的基础知识，以便了解攻击。
- en: Penetration testing approaches
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试方法
- en: Testing applications, networks, and devices for security flaws are vital for
    keeping the internet more secure and safe. Whether testing occurs by the manufacturers,
    third-party consulting firms, enterprise security teams, or security researches,
    approaches vary depending on the information given to the testers who are performing
    the assessment. Ideally, a comprehensive test should include the entire IoT system
    as well as its infrastructure, and not just the device itself, but it is not uncommon
    for testing to include only a subset of an IoT system due to pricing or technical
    ability.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对应用程序、网络和设备进行安全漏洞测试对于保持互联网更安全更重要。无论是由制造商、第三方咨询公司、企业安全团队还是安全研究人员进行测试，方法都会根据测试人员获得的信息而有所不同。理想情况下，全面的测试应该包括整个物联网系统及其基础设施，而不仅仅是设备本身，但由于价格或技术能力的原因，测试通常只包括物联网系统的一个子集也是常见的。
- en: Black box
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 黑盒
- en: Black box assessments are common and known to be performed for a relatively
    low cost. These types of assessments are performed with no prior knowledge of
    the technology or device implementations employed. More often than not, black
    box assessments are performed by security researchers or third-party consulting
    firms, but can also be conducted by internal security teams for risk assessment
    purposes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒评估是常见的，通常以相对较低的成本进行。这些类型的评估是在没有关于所使用的技术或设备实施的先验知识的情况下进行的。往往情况下，黑盒评估是由安全研究人员或第三方咨询公司进行的，但也可以由内部安全团队进行风险评估。
- en: Note on responsible disclosure
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 负责任的披露说明
- en: If vulnerabilities are discovered through security research, it is important
    to follow disclosure policies as per the vendor's website. If the vendor does
    not have a disclosure policy, CERT can assist with disclosing the reported bugs
    appropriately. Details on CERT's vulnerability disclosure policy are located at [http://www.cert.org/vulnerability-analysis/vul-disclosure.cfm?](http://www.cert.org/vulnerability-analysis/vul-disclosure.cfm?).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过安全研究发现了漏洞，重要的是要遵循供应商网站上的披露政策。如果供应商没有披露政策，CERT可以协助适当地披露所报告的漏洞。有关CERT的漏洞披露政策的详细信息，请访问[http://www.cert.org/vulnerability-analysis/vul-disclosure.cfm?](http://www.cert.org/vulnerability-analysis/vul-disclosure.cfm?)。
- en: White box
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 白盒
- en: White box assessments are when testers are given full access to source code,
    network diagrams, architecture diagrams, data flow diagrams, and various other
    pieces of detailed information on the technology employed by the target device.
    Generally, the more information on the target device or application(s) given to
    testers beforehand, the better the test results will be. White box assessments
    are more expensive but also ensure a more thorough review of a device's security
    controls and its implementation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒评估是指测试人员被允许完全访问源代码、网络图、架构图、数据流图以及目标设备所使用的其他详细信息。通常情况下，测试人员事先获得的目标设备或应用程序的信息越多，测试结果就会越好。白盒评估成本更高，但也确保了对设备安全控制及其实施的更彻底审查。
- en: Grey box
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灰盒
- en: Grey box assessments are performed when testers have limited or partial knowledge
    that an insider of the organization is aware of. These assessments can consist
    of testers only knowing the application stack and libraries utilized, but not
    having detailed documentation on the API.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 灰盒评估是在测试人员有限或部分了解的情况下进行的，组织内部人员知道这些情况。这些评估可能包括测试人员只知道应用程序堆栈和所使用的库，但没有关于API的详细文档。
- en: 'For more information on the DMCA for security research, please visit the following
    link: [https://www.ftc.gov/news-events/blogs/techftc/2016/10/dmca-security-research-exemption-consumer-devices](https://www.ftc.gov/news-events/blogs/techftc/2016/10/dmca-security-research-exemption-consumer-devices).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安全研究的数字千年版权法（DMCA）的更多信息，请访问以下链接：[https://www.ftc.gov/news-events/blogs/techftc/2016/10/dmca-security-research-exemption-consumer-devices](https://www.ftc.gov/news-events/blogs/techftc/2016/10/dmca-security-research-exemption-consumer-devices)。
- en: Firmware 101
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固件 101
- en: Firmware is a kind of software that is written to a hardware device in order
    to control user applications and various system functions. The firmware contains
    low level programming code that enables software to access hardware functions.
    Devices that run firmware are known as embedded systems which have limited hardware
    resources, such as storage capabilities as well as memory. Examples of embedded
    devices that run firmware are smartphones, traffic lights, connected vehicles,
    some types of computers, drones, and cable set-top boxes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 固件是一种写入硬件设备以控制用户应用程序和各种系统功能的软件。固件包含低级编程代码，使软件能够访问硬件功能。运行固件的设备被称为嵌入式系统，其硬件资源有限，例如存储能力和内存。运行固件的嵌入式设备的例子包括智能手机、交通信号灯、连接的车辆、某些类型的计算机、无人机和有线机顶盒。
- en: It is apparent that embedded technology and the firmware that runs on these
    devices controls our daily lives, from the critical infrastructure cities rely
    on, to bank ATMs and the homes that consumers live in. It is important to understand
    what a firmware binary consists of as well as its associated properties. Firmware
    is comprised of a bootloader, kernel, filesystem, and various other resources.
    There are different types of firmware built upon embedded Linux, embedded Windows,
    Windows IoT core, and various **Real Time Operating Systems** (**RTOS**). This
    book will be geared toward an embedded Linux environment, however, the principles
    will remain platform agnostic.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，嵌入式技术和运行在这些设备上的固件控制着我们的日常生活，从城市依赖的关键基础设施，到银行ATM和消费者居住的住宅。了解固件二进制文件的组成及其相关属性是很重要的。固件由引导加载程序、内核、文件系统和各种其他资源组成。在嵌入式Linux、嵌入式Windows、Windows
    IoT核心和各种**实时操作系统**（**RTOS**）上构建了不同类型的固件。本书将针对嵌入式Linux环境，但原则将保持平台无关。
- en: 'You can learn more about the firmware at this link:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接了解更多关于固件的信息：
- en: '[https://wiki.debian.org/Firmware](https://wiki.debian.org/Firmware)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.debian.org/Firmware](https://wiki.debian.org/Firmware)'
- en: 'The following diagram represents what a piece of firmware contains: flash contents,
    the bootloader, the kernel, and a root filesystem:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表代表了固件包含的内容：闪存内容、引导加载程序、内核和根文件系统：
- en: '![](img/231e28db-2fd3-4dce-8a9b-da4d56f020f0.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/231e28db-2fd3-4dce-8a9b-da4d56f020f0.png)'
- en: 'Figure 1.1: Firmware contents'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：固件内容
- en: Digging deeper into firmware
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入研究固件
- en: 'Let''s first have a look at the bootloader. A bootloader''s responsibility
    is to initialize RAM for volatile data storage, initialize serial port(s), detect
    the machine type, set up the kernel tagged list, load `initramfs` (initial RAM
    filesystem), and call the kernel image. The bootloader initializes hardware drivers
    via a **Board Support Package** (**BSP**), which is usually developed by a third
    party. The bootloader resides on a separate **Electrically Erasable Programmable
    Read-only Memory** (**EEPROM**), which is less common, or directly on flash storage,
    which is more common. Think of the bootloader as a PC''s BIOS upon start up. Discussing
    each of the bootloaders'' responsibilities in detail is beyond the scope of this
    book; however, we will highlight where the bootloader works to our advantage.
    Some of the common bootloaders for ARM and MIPS architectures are: Redboot, u-boot,
    and barebox. Once the bootloader starts up the kernel, the filesystem is loaded.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看引导加载程序。引导加载程序的责任是初始化RAM以用于易失性数据存储，初始化串行端口，检测机器类型，设置内核标记列表，加载`initramfs`（初始RAM文件系统）并调用内核映像。引导加载程序通过**板支持包**（**BSP**）初始化硬件驱动程序，通常由第三方开发。引导加载程序位于单独的**可擦写可编程只读存储器**（**EEPROM**）上，这种情况较少见，或直接位于闪存存储器上，这种情况较常见。可以将引导加载程序视为PC启动时的BIOS。详细讨论每个引导加载程序的责任超出了本书的范围；但是，我们将强调引导加载程序如何对我们有利。一些常见的ARM和MIPS架构引导加载程序包括：Redboot、u-boot和barebox。一旦引导加载程序启动内核，文件系统就会被加载。
- en: There are many filesystem types employed within the firmware, and sometimes
    even proprietary file types are used depending on the device. However, some of
    most common types of filesystems are SquashFS, cramFS, JFFS2, YAFFS2, and ext2\.
    The most common filesystem utilized in devices (especially consumer devices) is
    SquashFS. There are utilities, such as `unsquashfs` and modified `unsquashfs`
    that are used to extract data from squashed filesystems. Modified `unsquashfs`
    tools are utilized when vendors change SquashFS to use non-supported compressions,
    such as LZMA (prior to SquashFS 4.0, the only officially supported compression
    was `.zlib`), and will have a different offset of where the filesystem starts
    than regular SquashFS filesystems. We will address locating and identifying offsets
    later in this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 固件中使用了许多文件系统类型，有时甚至会根据设备使用专有文件类型。然而，一些最常见的文件系统类型是SquashFS、cramFS、JFFS2、YAFFS2和ext2。在设备中（尤其是消费者设备）使用最广泛的文件系统是SquashFS。有一些实用工具，如`unsquashfs`和修改后的`unsquashfs`，用于从压缩的文件系统中提取数据。当供应商更改SquashFS以使用不受支持的压缩（例如LZMA，SquashFS
    4.0之前，唯一官方支持的压缩是`.zlib`）时，将使用修改后的`unsquashfs`工具，并且文件系统的起始偏移量将与常规SquashFS文件系统不同。我们将在本书的后面部分讨论定位和识别偏移量。
- en: 'For additional reading on filesystems for embedded Linux, please visit the
    following link: [http://elinux.org/images/b/b1/Filesystems-for-embedded-linux.pdf](http://elinux.org/images/b/b1/Filesystems-for-embedded-linux.pdf).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关嵌入式Linux文件系统的更多阅读，请访问以下链接：[http://elinux.org/images/b/b1/Filesystems-for-embedded-linux.pdf](http://elinux.org/images/b/b1/Filesystems-for-embedded-linux.pdf)。
- en: 'Sasquatch is a handy tool to utilize for extracting modified SquashFS filesystems.
    Sasquash can be found at the following link:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Sasquatch是一个方便的工具，可用于提取修改后的SquashFS文件系统。Sasquash可以在以下链接找到：
- en: '[https://github.com/devttys0/sasquatch](https://github.com/devttys0/sasquatch)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/devttys0/sasquatch](https://github.com/devttys0/sasquatch)'
- en: Similarly, there are many types of file compression utilized for firmware images,
    such as LZMA, `.gzip`, `.zip`, `.zlip`, and `.arj,` to name a few. Each has pros
    and cons such as the size after compression, compression time, decompression time,
    as well as the business needs for the device itself. For our purposes, we will
    think of the filesystem as the location that contains configuration files, services,
    account passwords, hashes, and application code, as well as start up scripts.
    In the next chapter, we will walk you through how to find the filesystem in use
    as well as the compression in use.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，固件图像使用许多类型的文件压缩，例如LZMA、`.gzip`、`.zip`、`.zlip`和`.arj`等。每种压缩方式都有其优缺点，如压缩后的大小、压缩时间、解压时间，以及设备本身的业务需求。对于我们的目的，我们将把文件系统视为包含配置文件、服务、帐户密码、哈希和应用代码以及启动脚本的位置。在下一章中，我们将指导您如何找到正在使用的文件系统以及正在使用的压缩方式。
- en: Development supply chain of firmware
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固件的开发供应链
- en: Within the filesystem, device-specific code resides, written in C, C++, or other
    programming languages, such as Lua. Device-specific code, or even all of the firmware
    itself, can be a mix of third-party developers contracted out, known as **Original
    Design Manufacturers** (**ODM**), or in-house developers working with the **Original
    Equipment Manufacturer** (**OEM**). ODMs are an important piece of the embedded
    device development supply chain. They are often small companies in Asia and are
    a dime a dozen. Some OEMs have trusted ODMs they work with on product lines, while
    others will do business with ODMs that have the lowest fees for only one product.
    Depending on the industry, an ODM can also be referred to as a supplier. It is
    important to note that ODMs are free to work with a number of different OEMs and
    can even distribute the same code base. You may be familiar with this notion or
    even wondered why a critical public advisory affects ten plus device manufactures
    for a software bug. This occurs due to a lack of secure development life cycles
    processes by the ODM and verification by the OEM. Once an ODM completes their
    application deliverables, which may be an SDK or firmware to the OEM, the OEM
    will merge its code base(s) into the firmware, which may be as small as OEM logos
    on web interfaces. The implementation varies depending on how the ODM and OEM
    merge their code; however, it is not uncommon for an ODM to provide a binary file
    to the OEM. OEMs are responsible for distributing the firmware, managing firmware,
    and supporting the device itself. This includes firmware security issues reported
    by third-party researchers, which puts a strain on OEMs if ODMs retain the source
    code and the OEM only has access to a binary image.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件系统中，特定设备的代码存放在C、C++或其他编程语言（如Lua）中。特定设备的代码，甚至整个固件本身，可以是第三方开发者承包的，称为原始设计制造商（ODM），或者是与原始设备制造商（OEM）合作的内部开发者编写的。ODM是嵌入式设备开发供应链中的重要组成部分。它们通常是亚洲的小公司，数量众多。一些OEM与他们信任的ODM合作生产产品线，而另一些则会与只有一个产品的ODM合作，费用最低。根据行业的不同，ODM也可以被称为供应商。需要注意的是，ODM可以自由地与许多不同的OEM合作，甚至可以分发相同的代码库。您可能对这个概念很熟悉，甚至想知道为什么一个关键的公共警告会影响十多个设备制造商的软件漏洞。这是由于ODM缺乏安全的开发生命周期流程，以及OEM的验证不足。一旦ODM完成他们的应用程序交付物，可能是SDK或固件，交付给OEM，OEM将把自己的代码库合并到固件中，这可能只是在Web界面上放置OEM标志。实施方式取决于ODM和OEM如何合并他们的代码；然而，ODM向OEM提供二进制文件并不罕见。OEM负责分发固件，管理固件，并支持设备本身。这包括第三方研究人员报告的固件安全问题，如果ODM保留源代码，而OEM只能访问二进制映像，这会给OEM带来压力。
- en: In [Chapter 3](f0b26a31-570b-4a51-9519-cdfb567cb1cb.xhtml), *Analyzing and Exploiting
    Firmware* we will learn how to reverse engineer firmware binary images by recognizing
    the filesystem, identifying compression, and emulating binaries for testing, to
    take advantage of common firmware issues.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](f0b26a31-570b-4a51-9519-cdfb567cb1cb.xhtml)中，《分析和利用固件》，我们将学习如何通过识别文件系统、识别压缩和模拟二进制文件进行测试，来逆向工程固件二进制映像，以利用常见的固件问题。
- en: Web applications in IoT
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网中的网络应用程序
- en: Websites, otherwise known as web applications, need no introduction. At the
    very least, web applications contain frontend HTML, JavaScript, a backend web
    server, an application server, and a database. As web applications progress, heavy
    reliance on frontend code such as JavaScript is utilized more often in order to
    take the computational load off of the backend infrastructure or device. Web applications
    on the greater internet are slightly different than the web applications that
    are served via embedded devices.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 网站，又称为网络应用程序，无需介绍。至少，网络应用程序包含前端HTML，JavaScript，后端Web服务器，应用服务器和数据库。随着网络应用程序的发展，对前端代码（如JavaScript）的重度依赖越来越多，以便将计算负载从后端基础设施或设备上卸载。在更大范围的互联网上，网络应用程序与通过嵌入式设备提供的网络应用程序略有不同。
- en: The web applications you are used to have many more dependencies including the
    separation of web servers, application servers, database servers, as well as micro
    services that run in the backend. Separating each server is due to performance
    and availability reasons. Traditionally, embedded web applications are designed
    to run in their own self-contained environment. In a broad sense, there is less
    of a focus on performance and availability for embedded web applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您所熟悉的网络应用程序有更多的依赖项，包括分离的Web服务器、应用服务器、数据库服务器，以及在后端运行的微服务。分离每个服务器是出于性能和可用性的原因。传统上，嵌入式网络应用程序被设计为在其自包含的环境中运行。从广义上讲，对于嵌入式网络应用程序，性能和可用性的关注较少。
- en: There are two different models of web applications being utilized within the
    IoT space today, such as the hybrid cloud model and the embedded server standalone
    model. The hybrid model is a mix of the vendor or manufacturer providing **Software
    as a Service** (**SaaS**) web application(s) and also connecting the embedded
    device's web application running off of the firmware. The data is then synced
    from the manufacturer's cloud with the embedded device on the device's local network.
    For some IoT devices, IoT cloud service provider SDKs are utilized, such as AWS'
    IoT SDK and Azure's IoT SDK, and are built into the device web application stack.
    Recognizing a hybrid model is important in order to stay within a company's terms
    of service as well as within the legal bounds of your region. Many IoT companies
    who do utilize a hybrid model often use a third-party software development firm
    or ODM to host their web application on behalf of the OEM. These ODMs' web applications
    are usually rebranded for the specific OEM product, which can go unnoticed without
    proxying the communication.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 今天在物联网领域使用的Web应用程序有两种不同的模型，例如混合云模型和嵌入式服务器独立模型。混合模型是供应商或制造商提供**软件即服务**（**SaaS**）Web应用程序，并连接到运行在固件上的嵌入式设备的Web应用程序的混合。然后，数据从制造商的云与设备上的设备在设备的本地网络上同步。对于一些物联网设备，会利用物联网云服务提供商的SDK，例如AWS的物联网SDK和Azure的物联网SDK，并内置到设备的Web应用程序堆栈中。识别混合模型对于遵守公司的服务条款以及您所在地区的法律范围非常重要。许多利用混合模型的物联网公司通常使用第三方软件开发公司或ODM代表OEM托管其Web应用程序。这些ODM的Web应用程序通常会为特定的OEM产品重新打包，而在没有代理通信的情况下可能不会被注意到。
- en: 'A hybrid cloud model with IoT devices that have internet capabilities may look
    like the following figure. A user accesses the device''s interface, where web
    services between the vendor''s cloud and the user''s device makes changes or collects
    data behind the scenes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 具有互联网功能的物联网设备的混合云模型可能如下图所示。用户访问设备的界面，供应商的云和用户设备之间的Web服务在幕后进行更改或收集数据：
- en: '![](img/0286ac63-5107-4f15-b80c-56ea86df7a88.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0286ac63-5107-4f15-b80c-56ea86df7a88.png)'
- en: Figure 1.2 Hybrid web model
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 混合Web模型
- en: Embedded device web applications are, as mentioned, running internally off the
    device's firmware utilizing an embedded web server such as lighttpd or nginx with
    no outside dependencies. You might be familiar with these standalone embedded
    web apps, which are known to be run on printers, VoIP phones, and home routers.
    Quite often, input is sent directly to the device firmware, and if the user input
    is not validated or sanitized, attackers can perform arbitrary command execution
    within the device's context. In some cases, embedded web applications are designed
    to operate only within the **Local Area Network** (**LAN**) to protect from outside
    attacks or for administrative purposes. This can be the case for home IoT, industrial,
    and commercial devices. Often, having devices only available locally to a LAN
    is for security purposes, but as we have learned, this is not a stopgap for mitigating
    attacks. Device makers who design products with this intent are learning that
    customers are knowingly or unknowingly putting their devices on the internet,
    posing a risk to customer networks.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式设备Web应用程序，正如前面提到的，是在设备固件内部运行的，利用嵌入式Web服务器，如lighttpd或nginx，没有外部依赖。您可能熟悉这些独立的嵌入式Web应用程序，它们通常在打印机、VoIP电话和家用路由器上运行。很多时候，输入直接发送到设备固件，如果用户输入未经验证或未经过滤，攻击者可以在设备的上下文中执行任意命令。在某些情况下，嵌入式Web应用程序设计为仅在**局域网**（**LAN**）内运行，以防止外部攻击或用于管理目的。这可能适用于家庭物联网、工业和商业设备。通常，仅在局域网内可用的设备是出于安全目的，但正如我们所了解的，这并不能阻止攻击。有意设计产品以此为目的的设备制造商正在意识到，客户有意或无意地将其设备连接到互联网，从而对客户网络构成风险。
- en: 'The following diagram demonstrates a user connecting to an embedded standalone
    web application via a web browser without outside system dependencies:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示演示了用户通过Web浏览器连接到嵌入式独立Web应用程序，而无需外部系统依赖：
- en: '![](img/48003667-51ba-4c99-a652-f1467989b9a2.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48003667-51ba-4c99-a652-f1467989b9a2.png)'
- en: 'Figure 1.3: Local embedded web application'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：本地嵌入式Web应用程序
- en: Web communication
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web通信
- en: 'The communication between browsers, embedded servers, and web application servers
    is typically done through a web service such as **Simple Object Access Protocol**
    (**SOAP**)/XML or an API which is based on **Representational State Transfer**
    (**REST**) over HTTP/HTTPS. SOAP requests consist of an envelope element, an `xmlns:soap`
    namespace, an `encodingStyle` attribute, and various elements such as the SOAP
    body element. Additional details on SOAP can be found by visiting the following
    link:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器、嵌入式服务器和Web应用程序服务器之间的通信通常通过Web服务进行，例如**简单对象访问协议**（**SOAP**）/ XML或基于**表述状态转移**（**REST**）的API，通过HTTP/HTTPS进行。SOAP请求包括一个信封元素，一个`xmlns:soap`命名空间，一个`encodingStyle`属性，以及诸如SOAP主体元素之类的各种元素。有关SOAP的更多详细信息，请访问以下链接：
- en: '[https://www.w3schools.com/xml/xml_soap.asp](https://www.w3schools.com/xml/xml_soap.asp).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.w3schools.com/xml/xml_soap.asp](https://www.w3schools.com/xml/xml_soap.asp)。'
- en: 'An example of a `HTTP SOAP` request querying for an account balance is shown
    here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个查询账户余额的`HTTP SOAP`请求示例如下所示：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: REST style APIs utilize various HTTP methods that may not be standard in traditional
    web applications, such as the PUT method, to update resource values as well as
    `DELETE` methods to remove values within an API. REST requests can utilize parameter
    calls via the URL (not recommended for sensitive data) or via the HTTP body in
    **JavaScript Object Notation** (**JSON**).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: REST风格的API利用各种HTTP方法，这些方法在传统的Web应用程序中可能不是标准的，例如PUT方法，用于更新资源值，以及`DELETE`方法，用于在API中删除值。REST请求可以通过URL进行参数调用（不建议用于敏感数据），也可以通过**JavaScript对象表示**（**JSON**）中的HTTP主体进行调用。
- en: 'An example REST request subscribing the `test@example.com` email address to
    an email distribution list is shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个订阅`test@example.com`电子邮件地址到电子邮件分发列表的REST请求示例如下所示：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In order to view SOAP or REST requests, a man-in-the-middle proxy is required.
    Tools such as Burp Suite and/or OWASP ZAP are used as web proxies to view all
    requests being made from the browser and the mobile application to the application's
    web backend infrastructure. We will go through setting up the configuration to
    proxy the application traffic later on in [Chapter 4](a0eb0fa9-d101-439e-8420-bf4dd4280c00.xhtml),
    *Exploitation of Embedded Web Applications*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看SOAP或REST请求，需要使用中间人代理。诸如Burp Suite和/或OWASP ZAP之类的工具被用作Web代理，以查看从浏览器和移动应用程序到应用程序的Web后端基础设施发出的所有请求。我们将在[第4章](a0eb0fa9-d101-439e-8420-bf4dd4280c00.xhtml)中后面的设置配置来代理应用程序流量。
- en: As it pertains to IoT, web applications are a common way to control devices
    and are just one attack entry point from both the internal and external network
    perspective. In [Chapter 4](a0eb0fa9-d101-439e-8420-bf4dd4280c00.xhtml), *Exploitation
    of Embedded Web Applications*, we will learn how to identify common IoT web application
    flaws and exploits.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就物联网而言，Web应用程序是控制设备的常见方式，也是内部和外部网络角度的攻击入口之一。在[第4章](a0eb0fa9-d101-439e-8420-bf4dd4280c00.xhtml)中，《嵌入式Web应用程序的利用》，我们将学习如何识别常见的物联网Web应用程序缺陷和漏洞。
- en: Mobile applications in IoT
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网中的移动应用程序
- en: In the IoT space, mobile applications are similar to the web application models
    previously discussed. Although discussing specific details about security models
    for mobile device platforms is beyond the scope of this book, having a foundational
    knowledge of mobile application development models will help with testing when
    moving forward.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网领域，移动应用程序与先前讨论的Web应用程序模型类似。虽然讨论移动设备平台的安全模型的具体细节超出了本书的范围，但对移动应用程序开发模型有基本的了解将有助于在前进时进行测试。
- en: Hybrid
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合
- en: Mobile applications installed on an Android, iOS, or Windows phone device can
    be hybrid or native. Although the terms hybrid and native have different meanings
    in the mobile application sense rather than web applications, the principals are
    similar. A hybrid application utilizes both web technologies, such as HTML/HTML
    5, CSS, and JavaScript, as well as some native platform hardware, such as GPS
    or Bluetooth. Access to hardware resources is only through the use of plugins
    provided by the hybrid framework. Think of hybrid apps as web applications packaged
    up into a wrapper that the native platform can use. This means that a web developer
    can now code a mobile app without having the learning curve of a new language.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 安装在Android、iOS或Windows手机设备上的移动应用程序可以是混合应用程序或本机应用程序。虽然混合和本机这两个术语在移动应用程序的意义上与Web应用程序有所不同，但原则是相似的。混合应用程序利用Web技术（如HTML/HTML
    5、CSS和JavaScript）以及一些本机平台硬件（如GPS或蓝牙）。对硬件资源的访问仅通过混合框架提供的插件。将混合应用程序视为打包到本机平台可以使用的包装器中的Web应用程序。这意味着Web开发人员现在可以编写移动应用程序，而无需学习新语言。
- en: Hybrid applications use one code base for multiple platforms, such as Windows
    Phone, Android, and iOS, which is a huge plus when thinking of the first to market
    for IoT devices. Applications are called over the web using an embedded web browser
    known as WebView. There are many hybrid frameworks that the most popular apps
    use in the market today, such as Apache Cordova, Adobe PhoneGap, and Xamarin,
    to name a few.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 混合应用程序为多个平台使用一个代码库，例如Windows Phone、Android和iOS，这在考虑首次推出物联网设备时是一个巨大的优势。应用程序通过嵌入的Web浏览器（称为WebView）在Web上调用。市场上有许多混合框架，如Apache
    Cordova、Adobe PhoneGap和Xamarin等，这些都是目前最受欢迎的应用程序使用的框架。
- en: Each of the mobile hybrid frameworks contains a third-market place which contains
    plugins for various features. Some frameworks such as Xamarin are written in one
    programming language (C#) and translated into a native language (Objective C and
    Java) for rapid development purposes. These mobile frameworks are known to have
    a number of security advisories ranging from critical remote code execution issues
    on the native platform to privacy concerns. If you happen to notice a certain
    mobile hybrid framework being utilized, it might be a good idea to have a look
    at a vulnerability database for easy wins.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个移动混合框架都包含一个第三方市场，其中包含各种功能的插件。一些框架，如Xamarin，是用一种编程语言（C#）编写的，并被翻译成本机语言（Objective
    C和Java）以实现快速开发。这些移动框架已知存在许多安全警报，从本机平台上的关键远程代码执行问题到隐私问题。如果您注意到某个特定的移动混合框架正在被使用，那么查看漏洞数据库可能是一个不错的主意。
- en: 'To give you a better idea about the architecture it takes to run a hybrid application,
    the following diagram shows the different components between the application code,
    WebViews, plugins, and the mobile device itself. Keep in mind, most of the wrapper
    code and plugins are developed by the hybrid framework or third-party developers
    who contribute to the framework:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您更好地了解运行混合应用程序所需的架构，以下图表显示了应用程序代码、WebViews、插件和移动设备本身之间的不同组件。请记住，大多数包装器代码和插件是由混合框架或为框架做出贡献的第三方开发人员开发的：
- en: '![](img/d240b6b2-0fc4-4b23-b849-336bdec75509.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d240b6b2-0fc4-4b23-b849-336bdec75509.png)'
- en: Hybrid application example
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 混合应用程序示例
- en: Native applications
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本机应用程序
- en: Native applications are built for specific operating systems and written within
    the device platform's native language, such Java, Objective C, Swift, and even
    C# for Windows phones. Native applications use their respective platform SDKs,
    which gives the app access to hardware such as the camera, Bluetooth, and GPS.
    Performance and security are better with native apps but they are dependent on
    an experienced developer who knows a native language. This may be difficult, in
    some cases, for staffing developers as platform APIs often update and deprecate
    language classes or methods. More and more, platforms such as iOS and Android
    are developing native security APIs that developers can take advantage of without
    the need for utilizing third-party libraries. This is important for secure communication
    and secure data storage.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本机应用是为特定操作系统构建的，并在设备平台的本机语言内编写，例如Java、Objective C、Swift，甚至Windows手机的C#。本机应用使用各自平台的SDK，使应用程序可以访问摄像头、蓝牙和GPS等硬件。本机应用的性能和安全性更好，但依赖于懂得本机语言的经验丰富的开发人员。在某些情况下，这可能对开发人员的人员配备造成困难，因为平台API经常更新和废弃语言类或方法。越来越多的平台，如iOS和Android，正在开发本机安全API，开发人员可以利用这些API，而无需使用第三方库。这对于安全通信和安全数据存储非常重要。
- en: 'A native architecture is much simpler than hybrid application architectures.
    The following diagram shows a native application running native code directly
    on the device without the need for third-party components to access hardware resources:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本机架构比混合应用架构简单得多。以下图表显示了本机应用在设备上直接运行本机代码，无需第三方组件来访问硬件资源：
- en: '![](img/5732b5bd-04fc-4f7c-851f-d30a85dff090.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5732b5bd-04fc-4f7c-851f-d30a85dff090.png)'
- en: Native application example
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本机应用示例
- en: It's important to understand the pros and cons of each mobile application model
    for efficient testing. As device control is delegated to mobile apps, they are
    another attack entry point into a device that can sometimes be easier than another
    entry point. In [Chapter 5](4f5f4da8-0adb-4596-925c-f90929b55915.xhtml), *Exploitation
    of IoT Mobile Applications*, we will delve into some of the most common vulnerabilities
    in IoT mobile apps as we dissect an IoT device.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每种移动应用模型的优缺点对于有效的测试非常重要。由于设备控制被委托给移动应用程序，它们是设备的另一个攻击入口点，有时比其他入口点更容易。在[第5章](4f5f4da8-0adb-4596-925c-f90929b55915.xhtml)中，*对物联网移动应用程序的利用*，我们将深入研究物联网移动应用程序中一些最常见的漏洞，同时剖析物联网设备。
- en: Device basics
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备基础
- en: Device hardware starts with the **Printed Circuit Board** (**PCB**), which is
    comprised of fiberglass, copper, the solder mask, silkscreen, traces, and pads.
    Components such as resistors, capacitors, chips for Wi-Fi, EEPROMs, and serial
    and microcontrollers are soldered onto the PCB. There are various layers of thin
    copper foil that make a PCB conductive and also insulated layers that make it
    non-conductive. It's important to identify components of interest when looking
    at a PCB. Components of interest include sources of input into the device firmware
    either directly or indirectly. Components such as the EEPROM, NAND flash, **Universal
    Asynchronous Receiver/Transmitter** (**UART**), and **Joint Test Action Group**
    (**JTAG**) are some of the most common components to focus on for testing purposes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设备硬件从**印刷电路板**（**PCB**）开始，由玻璃纤维、铜、焊膜、丝印、走线和焊盘组成。电阻、电容、Wi-Fi芯片、EEPROM和串行和微控制器等组件被焊接到PCB上。PCB有各种薄铜箔层，使其导电，也有绝缘层，使其不导电。在查看PCB时，识别感兴趣的组件非常重要。感兴趣的组件包括直接或间接成为设备固件输入源的组件。EEPROM、NAND闪存、**通用异步收发器**（**UART**）和**联合测试行动组**（**JTAG**）等组件是测试的重点。
- en: 'This is what a PCB board looks like for a **Digital Video Recorder** (**DVR**):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**数字视频录像机**（**DVR**）的PCB板的样子：
- en: '![](img/3f9d66c9-5f98-47b4-badd-596f944b93f7.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f9d66c9-5f98-47b4-badd-596f944b93f7.jpg)'
- en: PCB board
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: PCB板
- en: Hardware inputs
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件输入
- en: 'The EEPROM is a non-volatile storage location which is read and writable as
    single blocks of bytes. The EEPROM can be erased by electrical charges or UV exposure.
    Similar to other flash storage types, EEPROM allows a limited number of write
    cycles. EEPROM is a chip of interest, as firmware may be loaded on an EEPROM and
    can be removed from the PCB to an EEPROM reader for further analysis:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: EEPROM是一种非易失性存储位置，可以按字节单块读写。EEPROM可以通过电荷或紫外线曝光来擦除。与其他闪存类型类似，EEPROM允许有限次数的写入循环。EEPROM是一个值得关注的芯片，因为固件可以加载到EEPROM上，并且可以从PCB上移除到EEPROM读卡器进行进一步分析：
- en: '![](img/5cfe5ed0-19cc-44fb-b30c-d4da33185751.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cfe5ed0-19cc-44fb-b30c-d4da33185751.jpg)'
- en: EEPROM
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: EEPROM
- en: 'Image source: [https://cdn.sparkfun.com//assets/parts/3/0/5/EEPROM.jpg](https://cdn.sparkfun.com//assets/parts/3/0/5/EEPROM.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[https://cdn.sparkfun.com//assets/parts/3/0/5/EEPROM.jpg](https://cdn.sparkfun.com//assets/parts/3/0/5/EEPROM.jpg)
- en: NAND flash memory is written and read in blocks, which are commonly found in
    USB drives but are also in IoT devices as well as game consoles. The NAND flash
    typically contains a device's bootloader which follows various instructions to
    start the operating system and can be manipulated; we will walk you through this
    later on in this book.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: NAND闪存存储器以块的形式写入和读取，通常在USB驱动器中找到，但也存在于物联网设备以及游戏机中。NAND闪存通常包含设备的引导加载程序，遵循各种指令启动操作系统，并且可以被操纵；我们将在本书的后面为您详细介绍这一点。
- en: UART is one of the most common ways to gain access to devices. Manufacturers
    use UART for diagnostics, log messages, and as a debug console for verifying configurations
    when deploying devices, which makes it one of the most common sources of input
    in firmware. Since it's used for debugging, root access is commonly granted once
    connected. However, there are times when UART access is password protected, which
    may add extra time for brute-forcing. UART contains about eight data lines with
    control pins and also has two serial wires which are the receive data and transmit
    data wires (RX/TX). No external clock is needed for UART. UART pinouts on the
    PCB are TX, RX, Vcc (voltage), and GND (ground). In order to connect to a UART,
    the TX, RX, and GND must be located using a multimeter. Sometimes, a locating
    UART may be more difficult on some devices, than others. Some manufacturers may
    remove the UART header pins from the PCB, requiring soldering to take place. Manufacturers
    may also cover UART header pins with various layers of silkscreen and cover the
    headers with another integrated circuit which may be a bit of a pain.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: UART是获得设备访问权限的最常见方式之一。制造商使用UART进行诊断、日志消息，并作为验证配置的调试控制台，这使得它成为固件中最常见的输入源之一。由于它用于调试，一旦连接，通常会授予root访问权限。然而，有时UART访问受到密码保护，这可能会增加暴力破解的时间。UART包含大约八条数据线和控制引脚，还有两根串行线，即接收数据和发送数据线（RX/TX）。UART不需要外部时钟。在PCB上连接到UART时，必须使用万用表找到TX、RX和GND。有时，在某些设备上找到UART可能比其他设备更困难。一些制造商可能会从PCB上移除UART引脚，需要进行焊接。制造商还可能用各种丝网层覆盖UART引脚，并用另一个集成电路覆盖引脚，这可能有点麻烦。
- en: JTAG is another serial communication under IEEE 1149.1\. It was created for
    chip-and system level testing. Manufacturers use JTAG as a source of debugging,
    similar to UART. There is the ability to password protect JTAG access, but the
    BYPASS mode should still work. Firmware can be dumped for analysis or upgraded
    using JTAG. It provides a direct interface to hardware on the board which means
    it can access devices connected to it, such as flash or RAM. There is a TDI (data
    in), TDO (data out), TMS (test mode select), TCK (test clock), and TRST (test
    reset). JTAG connects to an on-chip test access port (TAP) which regulates a state
    when accessing registers on chips. Similar to UART, manufacturers may obfuscate
    header pins or traces.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: JTAG是IEEE 1149.1下的另一种串行通信。它是为芯片和系统级测试而创建的。制造商使用JTAG作为调试的来源，类似于UART。有能力保护JTAG访问的密码，但BYPASS模式仍然应该有效。固件可以通过JTAG进行转储以进行分析或升级。它提供了与板上硬件的直接接口，这意味着它可以访问连接到它的设备，如闪存或RAM。有TDI（数据输入）、TDO（数据输出）、TMS（测试模式选择）、TCK（测试时钟）和TRST（测试复位）。JTAG连接到芯片上的测试访问端口（TAP），在访问芯片上的寄存器时调节状态。与UART类似，制造商可能会混淆引脚或迹线。
- en: To view the PCB and locate components in an IoT device, one can either disassemble
    the device or search through third-party sites such as [https://fccid.io](https://fccid.io).
    An FCC ID is a product ID that is assigned by the FCC in order to keep track of
    wireless products in the market. Fccid.io is awesome and provides us with loads
    of detailed information on devices! The FCC publishes various design documents,
    datasheets, internal images, external images, test reports, various manuals, wireless
    frequencies, and more. In [Chapter 6](c79f9067-fbe9-4d14-8e33-4e92f5a19124.xhtml),
    *IoT Device Hacking*, we will walk you through the methodology of hardware hacking
    to locate hardware details and connect to inputs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 查看PCB并在物联网设备中找到组件，可以通过拆卸设备或搜索第三方网站如[https://fccid.io](https://fccid.io)。 FCC
    ID是由FCC分配的产品ID，以便跟踪市场上的无线产品。 Fccid.io非常棒，为我们提供了大量关于设备的详细信息！ FCC发布各种设计文件、数据表、内部图像、外部图像、测试报告、各种手册、无线频率等。在[第6章](c79f9067-fbe9-4d14-8e33-4e92f5a19124.xhtml)中，《物联网设备黑客入门》，我们将带您了解硬件黑客的方法论，以定位硬件细节并连接输入。
- en: Introduction to IoT's wireless communications
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网无线通信简介
- en: The most common way for IoT devices to connect and interact is via wireless
    **Radio Frequency** (**RF**) communication. There are loads of different wireless
    frequencies, modulations, and protocols used in today's current market. Some wireless
    protocols are proprietary and others are standard. Opening up a device will unveil
    one or multiple chips that perform wireless communication. This is definitely
    common for IoT gateways and hubs that are required to ingest a variety of different
    wireless communication protocols and frequencies. One of the advantages of wireless
    technology is the ability to be remote and still control a device. This is also
    the case when exploiting devices with wireless communication. It is important
    to understand the distance that each wireless technology is capable of. One wireless
    protocol may have a distance of 105 ft., or about 32 meters, while others can
    be as short as 20 cm. Amongst the many wireless protocols in the IoT ecosystem,
    some of the most common protocols used are Wi-Fi (802.11), ZigBee (802.15.4),
    Z-Wave, Bluetooth (802.15.1), and Bluetooth Low Energy.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备最常见的连接和交互方式是通过无线射频（RF）通信。在当今市场上使用了许多不同的无线频率、调制和协议。一些无线协议是专有的，而其他一些是标准的。打开设备将揭示一个或多个执行无线通信的芯片。这对于需要接收各种不同无线通信协议和频率的物联网网关和中心非常常见。无线技术的优势之一是能够远程控制设备。这也是利用具有无线通信的设备时的情况。重要的是要了解每种无线技术的距离能力。一个无线协议可能有105英尺（约32米）的距离，而另一些可能只有20厘米。在物联网生态系统中有许多无线协议，其中一些最常用的协议包括Wi-Fi（802.11）、ZigBee（802.15.4）、Z-Wave、蓝牙（802.15.1）和蓝牙低功耗。
- en: Wi-Fi
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wi-Fi
- en: '**Wi-Fi** has been the most common wireless technology used in many devices
    for years. It operates on 2.4 GHz and 5 GHz ISM bands. There are a number of Wi-Fi
    standards in use, such as 802.11a, 802.11b, 802.11g, 802.11n, and 802.11ac. 802.11b
    and 802.11g operate on the 2.4 GHz band while 802.11a, 802.11n, and 802.11ac use
    the 5 GHz band. There are 14 wireless channels which operate on different frequencies.
    Depending on the region, there are certain channels that Wi-Fi routers are allowed
    to broadcast on.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wi-Fi**是多年来许多设备中使用的最常见的无线技术。它在2.4 GHz和5 GHz ISM频段上运行。目前有许多正在使用的Wi-Fi标准，如802.11a、802.11b、802.11g、802.11n和802.11ac。802.11b和802.11g在2.4
    GHz频段上运行，而802.11a、802.11n和802.11ac使用5 GHz频段。有14个无线信道，它们在不同的频率上运行。根据地区，Wi-Fi路由器可以在特定信道上进行广播。'
- en: ZigBee
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZigBee
- en: '**ZigBee** is based on the IEEE 802.15.4 specification for the physical and
    media access control layers, which support low-powered wireless mesh networking.
    ZigBee operates on different ISM bands based on region, but mostly on 2.4 GHz
    worldwide with 915 MHz in the US and 868 MHz in the EU. ZigBee is comprised of
    a coordinator (ZC), router (ZR), and end devices (ZED). The coordinator automatically
    initiates the formation of the network. There is only one coordinator in a network
    and it''s generally the trust center for authenticating and validating each device
    that has joined the network and has a unique network key. The router passes data
    from other devices and associates routes to end devices.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**ZigBee**基于IEEE 802.15.4规范，支持低功率无线网状网络的物理和媒体访问控制层。ZigBee根据地区在不同的ISM频段上运行，但在全球范围内主要在2.4
    GHz上运行，美国为915 MHz，欧盟为868 MHz。ZigBee由协调器（ZC）、路由器（ZR）和终端设备（ZED）组成。协调器自动启动网络的形成。网络中只有一个协调器，通常是用于验证和验证加入网络的每个设备的信任中心，并具有唯一的网络密钥。路由器从其他设备传递数据，并将路由关联到终端设备。'
- en: Routers have to be continually powered in order to properly pass messages to
    the network. End devices are IoT devices such as light switches, sensors, cameras,
    or monitors. They cannot route data inside the network but can be put to sleep
    in a low power mode while not transmitting. ZigBee networks are based on two security
    keys known as the network key and link key. The network key is used to securely
    transport communication and is a 128-bit key shared with all devices in the network.
    The link key is used to secure the unicast communication in the application layer
    of ZigBee. The link key is also a 128-bit key which is only shared between two
    devices. Link keys can be pre-installed on devices or distributed through a key
    exchange. Vulnerable key exchanges during device pairing is a known flaw in consumer-based
    ZigBee networks, which has allowed attackers to sniff the exchange network key
    and compromise the entire network.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器必须持续供电，以便正确地将消息传递到网络。终端设备是物联网设备，如开关、传感器、摄像头或监视器。它们无法在网络内路由数据，但可以在不传输数据时进入低功耗模式。ZigBee网络基于两个安全密钥，即网络密钥和链接密钥。网络密钥用于安全传输通信，是一个与网络中所有设备共享的128位密钥。链接密钥用于安全地传输ZigBee应用层中的单播通信。链接密钥也是一个128位密钥，仅在两个设备之间共享。链接密钥可以预先安装在设备上，也可以通过密钥交换进行分发。在设备配对期间的易受攻击的密钥交换是消费者级ZigBee网络中已知的缺陷，这使得攻击者可以窃听交换网络密钥并破坏整个网络。
- en: 'A good slide deck for referencing ZigBee security flaws can be found via the
    *ZIGBEE EXPLOITED* talk given at Blackhat in 2015:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 关于ZigBee安全漏洞的良好幻灯片可以通过2015年在Blackhat上举行的*ZIGBEE EXPLOITED*演讲找到。
- en: '[https://www.blackhat.com/docs/us-15/materials/us-15-Zillner-ZigBee-Exploited-The-Good-The-Bad-And-The-Ugly-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Zillner-ZigBee-Exploited-The-Good-The-Bad-And-The-Ugly-wp.pdf).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.blackhat.com/docs/us-15/materials/us-15-Zillner-ZigBee-Exploited-The-Good-The-Bad-And-The-Ugly-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Zillner-ZigBee-Exploited-The-Good-The-Bad-And-The-Ugly-wp.pdf)。'
- en: Z-Wave
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Z-Wave
- en: '**Z-Wave** is another low-powered wireless communication protocol that supports
    mesh networks with a master-slave model. It uses the sub-1 GHz band which varies
    by region (916 MHz in the US or 868.42 in the EU). Its physical and media access
    layers are ratified under ITU as the international standard G.9959\. Z-Wave''s
    range between two devices is 328 ft. or 100 meters, but it can reach up to 600
    ft. or 200 meters when traffic traverses through Z-Wave products with in its mesh
    network. The Z-Wave network is identified by a 4 byte (32-bit) HomeID which is
    the controller or master node''s unique ID. All nodes within the same network
    share the same HomeID. Each node is identified by a 1 byte (8 bits) NodeID which
    is provided by the controller once they are joined to the network. Nodes with
    different HomeIDs cannot communicate with each other. Z-Wave can use AES encryption,
    which is supported by Z-Wave hubs, but it is purely optional for manufacturers
    to implement. Z-Wave does include a nice signal jamming detection feature that
    prevents **Denial of Service** (**DoS**) attacks.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Z-Wave**是另一种低功率无线通信协议，支持主从模式的网状网络。它使用不同地区的次1 GHz频段（美国为916 MHz，欧盟为868.42 MHz）。其物理和媒体访问层在ITU下被批准为国际标准G.9959。两个设备之间的Z-Wave范围为328英尺或100米，但当流量通过其网状网络中的Z-Wave产品时，可以达到600英尺或200米。Z-Wave网络由4字节（32位）的HomeID标识，这是控制器或主节点的唯一ID。同一网络中的所有节点共享相同的HomeID。每个节点由1字节（8位）的NodeID标识，这是控制器在加入网络后提供的。具有不同HomeID的节点无法相互通信。Z-Wave可以使用AES加密，由Z-Wave中心支持，但对于制造商来说，这纯粹是可选的。Z-Wave确实包括一个很好的信号干扰检测功能，可以防止**拒绝服务**（**DoS**）攻击。'
- en: For additional specifications on the Z-Wave protocol, please visit [http://www.z-wave.com](http://www.z-wave.com).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Z-Wave协议的其他规格，请访问[http://www.z-wave.com](http://www.z-wave.com)。
- en: Bluetooth
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝牙
- en: '**Bluetooth** is a commonly used wireless technology standard (IEEE 802.15.1)
    used for data communication over short distances. Bluetooth broadcasts at over
    2.4 to 2.485 GHz and can reach up to 100 m but is more commonly used under 10
    meters or 30 ft. This book will contain Bluetooth and **Bluetooth Low Energy**
    (**BLE**) testing techniques, as plenty of IoT devices do utilize a form of Bluetooth
    as a primary means of communication. For additional reading on Bluetooth, visit
    the following link:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**蓝牙**是一种常用的无线技术标准（IEEE 802.15.1），用于短距离数据通信。蓝牙在2.4至2.485 GHz广播，最远可达100米，但更常用于10米或30英尺以下。本书将包含蓝牙和**蓝牙低功耗**（**BLE**）测试技术，因为许多物联网设备确实使用了蓝牙作为主要通信手段。有关蓝牙的更多阅读，请访问以下链接：'
- en: '[https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works](https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works](https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works)'
- en: Setting up an IoT pen testing lab
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置物联网渗透测试实验室
- en: Now that all the foundational IoT technology has been covered, let's work on
    setting up an IoT pentesting lab. Due to the suite of technologies employed by
    IoT devices, there are several tools required for the software and hardware portions
    of testing. There is a mix of paid commercial tools, as well as free tools that
    we will use. Some upfront purchasing will be required for hardware and radio analysis
    tools. There are modest licensing fees for web application proxy tools, but we
    will try to keep the price tag as low as possible and offer free tools where possible.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有基础物联网技术都已涵盖，让我们开始设置物联网渗透测试实验室。由于物联网设备采用了一套技术，因此需要软件和硬件测试的多种工具。我们将使用一些付费商业工具以及免费工具。硬件和无线电分析工具需要一些前期购买。Web应用程序代理工具需要适度的许可费，但我们将尽量保持价格低廉，并在可能的情况下提供免费工具。
- en: Software tool requirements
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: Software tools will cover firmware, web applications, and mobile application
    testing tools. The majority of testing tools are free for each of the three categories,
    with the exception of Burp Suite for web application testing. For convenience,
    time has been taken to set up and install most of the software tools for firmware
    analysis, web testing, mobile testing (limited), and radio analysis within a virtual
    machine for this book. However, a list of all tools has been compiled and is recorded
    here.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工具将涵盖固件、Web应用程序和移动应用程序测试工具。这三类测试工具中的大多数都是免费的，除了Web应用程序测试的Burp Suite。为了方便起见，已经花费时间在本书的虚拟机中设置和安装了大部分固件分析、Web测试、移动测试（有限）和无线电分析的软件工具。但是，已经编制了所有工具的清单，并在此记录。
- en: Firmware software tools
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固件软件工具
- en: 'Fortunately, most firmware analysis tools are free and open source. Some of
    the tools are actively updated while others may be dated but still work. The following
    are a number of firmware software tools which can analyze firmware images, disassemble
    images, and attach to firmware processes during runtime:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，大多数固件分析工具都是免费且开源的。一些工具正在积极更新，而其他一些可能已经过时但仍然有效。以下是一些可以分析固件图像、反汇编图像并在运行时连接到固件进程的固件软件工具：
- en: Binwalk
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Binwalk
- en: Firmadyne
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firmadyne
- en: Firmwalker
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firmwalker
- en: Angr
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angr
- en: Firmware-mod-toolkit
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固件修改工具包
- en: Firmware analysis toolkit
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固件分析工具包
- en: GDB
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GDB
- en: Radare2
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Radare2
- en: '**Binary Analysis Tool** (**BAT**)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制分析工具**（**BAT**）'
- en: Qemu
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qemu
- en: IDA Pro (optional)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDA Pro（可选）
- en: Web application software tools
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用软件工具
- en: 'For web application testing, the most common tools of the trade are Burp Suite
    and OWASP **Zed Attack Proxy** (**ZAP**). Burp Suite has a free and pro version
    available for a modest price. ZAP is completely free and open source, which may
    be a good alternative to keep costs low. Additional plugins or add-ons may be
    used to help with web service and API testing. Unfortunately, to install plugins
    with Burp Suite, a pro license is required. All tools listed here are cross-platform,
    as they are either Java based or within your browser:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序测试，最常用的工具是Burp Suite和OWASP **Zed Attack Proxy**（**ZAP**）。Burp Suite有免费和专业版本可供选择。ZAP完全免费且开源，可能是保持成本低的一个好选择。可以使用附加插件或附加组件来帮助进行Web服务和API测试。不幸的是，要在Burp
    Suite中安装插件，需要专业许可证。这里列出的所有工具都是跨平台的，因为它们要么是基于Java的，要么是在您的浏览器中：
- en: Burp Suite
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite
- en: OWASP **Zed Attack Proxy** (**ZAP**)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP **Zed Attack Proxy**（**ZAP**）
- en: REST Easy Firefox plugin
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST Easy Firefox插件
- en: Postman Chrome extension
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postman Chrome扩展程序
- en: Mobile application software tools
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用软件工具
- en: Like firmware tools, most mobile application security tools are also free and
    open source. The mobile tools that will be used are broken down according to the
    mobile platform below.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 与固件工具一样，大多数移动应用安全工具也是免费且开源的。将使用的移动工具根据以下移动平台进行了拆分。
- en: Android
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: There are many Android testing tools and virtual machines available online as
    of the writing of this book. Some tools focus purely on statically analyzing an
    APK's code while other tools focus on app analysis during runtime. Most of the
    Android testing virtual machine distributions are free and contain the necessities
    for testing an Android app such an Android's SDK. Although Android testing tools
    are listed here, it is recommended you download an Android testing virtual machine
    distribution that suits your testing needs, and install any supplemental testing
    tools in that virtual machine.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本书撰写时，有许多Android测试工具和虚拟机可在网上找到。一些工具专注于静态分析APK的代码，而其他工具专注于运行时的应用程序分析。大多数Android测试虚拟机分发是免费的，并包含测试Android应用程序所需的必需品，如Android的SDK。尽管在这里列出了Android测试工具，但建议您下载适合您测试需求的Android测试虚拟机分发，并在该虚拟机中安装任何补充测试工具。
- en: Although not required, keeping your Android testing tools separate from your
    host computer will lead to a more stable mobile testing workbench and prevent
    dependency issues as well.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但将Android测试工具与主机计算机分开将会导致更稳定的移动测试工作台，并防止依赖问题。
- en: 'Android testing virtual machine distribution:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android测试虚拟机分发：
- en: Android SDK
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK
- en: Android emulator
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android模拟器
- en: Enjarify
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Enjarify
- en: JD-Gui
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JD-Gui
- en: Mob-SF
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mob-SF
- en: SQLite browser
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite浏览器
- en: Burp Suite
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite
- en: OWASP ZAP
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP ZAP
- en: iOS
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: '**iOS** testing tools are unique in that an OS X computer and a jailbroken
    iDevice are required for testing. Without these two prerequisites, the testing
    of iOS applications will not be possible. Here are some of the tools that may
    be utilized for iOS mobile testing:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: iOS测试工具是独特的，因为测试需要OS X计算机和越狱的iDevice。如果没有这两个先决条件，将无法测试iOS应用程序。以下是可能用于iOS移动测试的一些工具：
- en: '**OS X computer**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: OS X计算机
- en: 'The following listed items are software tools that are to be installed on your
    host computer for testing and/or assessing iOS applications:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出的项目是要安装在主机计算机上用于测试和/或评估iOS应用程序的软件工具：
- en: idb
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: idb
- en: Xcode tools
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode工具
- en: Class-dump
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Class-dump
- en: Hopper (optional)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hopper（可选）
- en: Mob-SF
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mob-SF
- en: SQLite browser
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite浏览器
- en: Burp Suite
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite
- en: OWASP ZAP
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP ZAP
- en: '**Jailbroken iDevice**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱的iDevice
- en: 'The following list includes packages that need to be installed on to your jailbroken
    device in order to start testing:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表包括需要安装到您的越狱设备上以开始测试的软件包：
- en: Cydia
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cydia
- en: openURL
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: openURL
- en: dumpdecrypted
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dumpdecrypted
- en: ipainstaller
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ipainstaller
- en: SSL Kill Switch 2
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL Kill Switch 2
- en: Clutch2
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clutch2
- en: Cycript
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cycript
- en: Hardware analysis tool requirements
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件分析工具要求
- en: 'Hardware tools vary for the specific device that is being analyzed; however,
    there are basic tools that are valid for all hardware and even electrical requirements.
    Manufactures will use different types of screws, housing, and security bits as
    a stopgap for hardware disassembly. Sometimes, the screws will be hidden under
    labels or rubber feet. It''s important to identify the screw types. We will list
    toolkits available that can bypass this obfuscation technique used by vendors.
    The following figure should assist with some of the different types of screw type:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件工具因被分析的特定设备而异；但是，对于所有硬件甚至电气要求都适用基本工具。制造商将使用不同类型的螺丝、外壳和安全位作为硬件拆卸的临时措施。有时，螺丝会隐藏在标签或橡胶脚下。识别螺丝类型很重要。我们将列出可绕过供应商使用的这种混淆技术的工具包。以下图片应该有助于了解一些不同类型的螺丝类型：
- en: '![](img/8e8de3fe-89ca-40d9-be9c-e223494ca5a6.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e8de3fe-89ca-40d9-be9c-e223494ca5a6.png)'
- en: 'Image source: http://www.instructables.com/id/When-a-Phillips-is-not-a-Phillips/'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：http://www.instructables.com/id/When-a-Phillips-is-not-a-Phillips/
- en: Listed here are the options for hardware tools and hardware analysis software
    that will be used in this book.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了本书中将使用的硬件工具和硬件分析软件的选项。
- en: Hardware tools
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件工具
- en: 'Hardware testing tools require some upfront investment to get started. Here
    are the required and optional tools needed for disassembling devices, finding
    ground, and accessing device interfaces:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件测试工具需要一些前期投资才能开始。这里列出了拆卸设备、找到接地点和访问设备接口所需的必需和可选工具：
- en: Multimeters
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 万用表
- en: IFixit classic pro tech toolkit for hardware disassembly
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IFixit经典专业技术工具包，用于硬件拆卸
- en: Bus Pirate
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总线海盗
- en: USB to serial adapters
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB转串口适配器
- en: Shikra, FTDI FT232, CP2102, PL2303, Adafruit FTDI Friend
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shikra，FTDI FT232，CP2102，PL2303，Adafruit FTDI Friend
- en: JTAG adapters
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JTAG适配器
- en: Shikra, JTAGulator, Arduino with JTAGenum, JLINK, Bus Blaster
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shikra，JTAGulator，带JTAGenum的Arduino，JLINK，Bus Blaster
- en: Logic analyzer (optional)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪（可选）
- en: Saleae Logic or others
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Saleae Logic或其他
- en: 'For more information, you can visit these following links:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以访问以下链接：
- en: '[https://www.ifixit.com/Store/Tools/Classic-Pro-Tech-Toolkit-/IF145-072-1](https://www.ifixit.com/Store/Tools/Classic-Pro-Tech-Toolkit-/IF145-072-1)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ifixit.com/Store/Tools/Classic-Pro-Tech-Toolkit-/IF145-072-1](https://www.ifixit.com/Store/Tools/Classic-Pro-Tech-Toolkit-/IF145-072-1)'
- en: '[http://int3.cc/products/the-shikra](http://int3.cc/products/the-shikra)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://int3.cc/products/the-shikra](http://int3.cc/products/the-shikra)'
- en: '[https://www.sparkfun.com/products/12942](https://www.sparkfun.com/products/12942)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sparkfun.com/products/12942](https://www.sparkfun.com/products/12942)'
- en: '[http://www.grandideastudio.com/jtagulator/](http://www.grandideastudio.com/jtagulator/)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.grandideastudio.com/jtagulator/](http://www.grandideastudio.com/jtagulator/)'
- en: '[https://www.saleae.com/](https://www.saleae.com/)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.saleae.com/](https://www.saleae.com/)'
- en: Hardware analysis software
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件分析软件
- en: 'Here are some hardware analysis tools that are all free. These tools enable
    us to access hardware interfaces for things such as console access or side-loading
    firmware onto the device:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些免费的硬件分析工具。这些工具使我们能够访问硬件接口，例如控制台访问或将固件侧加载到设备上：
- en: OpenOCD
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenOCD
- en: Spiflash
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spiflash
- en: Minicom
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minicom
- en: Baudrate
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波特率
- en: Radio analysis tool requirements
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线分析工具要求
- en: In order to start sniffing wireless technology, certain wireless chipsets are
    required. In this book, we will focus on sniffing traffic from ZigBee and Z-Wave
    protocols. Special software will be required to go along with the wireless cards
    or dongles. Suggestions on which wireless cards and analysis software to use are
    provided here.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始嗅探无线技术，需要特定的无线芯片组。在本书中，我们将专注于嗅探来自ZigBee和Z-Wave协议的流量。无线网卡或dongle需要配备特殊软件。这里提供了使用哪种无线网卡和分析软件的建议。
- en: Radio analysis hardware
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线分析硬件
- en: 'The following is a list of hardware that will be used for analyzing radio frequencies:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将用于分析无线电频率的硬件列表：
- en: Atmel RZ Raven USB (KillerBee framework)
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atmel RZ Raven USB（KillerBee框架）
- en: Attify Badge (alternatively, a combination of a C232HM-DDHSL-0 cable and Adafruit
    FTDI Breakout)
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Attify Badge（或者，C232HM-DDHSL-0电缆和Adafruit FTDI Breakout的组合）
- en: HackRF One
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HackRF One
- en: Yardstick One
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yardstick One
- en: XBee with Xbee Shield
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有Xbee Shield的XBee
- en: Ubertooth
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubertooth
- en: BLe adapter
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLe适配器
- en: Radio analysis software
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线分析软件
- en: The following is a list of common software defined radio analysis software.
    Most of the listed items will be used in this book.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常见的软件定义无线电分析软件列表。大多数列出的项目将在本书中使用。
- en: KillerBee Framework
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KillerBee Framework
- en: Attify ZigBee Framework
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Attify ZigBee Framework
- en: GNU Radio
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Radio
- en: BLEAH
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLEAH
- en: GQRX
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GQRX
- en: Ubertooth tools
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubertooth工具
- en: Blue Hydra
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blue Hydra
- en: RTL-sdr
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTL-sdr
- en: Hackrf packages
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hackrf软件包
- en: EZ-Wave
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EZ-Wave
