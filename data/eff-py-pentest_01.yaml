- en: Chapter 1. Python Scripting Essentials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Python脚本基础知识
- en: Python is still the leading language in the world of penetration testing (pentesting)
    and information security. Python-based tools include all kinds of tools (used
    for inputting massive amounts of random data to find errors and security loop
    holes), proxies, and even the exploit frameworks. If you are interested in tinkering
    with pentesting tasks, Python is the best language to learn because of its large
    number of reverse engineering and exploitation libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python仍然是渗透测试（pentesting）和信息安全领域中的主导语言。基于Python的工具包括各种工具（用于输入大量随机数据以查找错误和安全漏洞）、代理和甚至利用框架。如果您对渗透测试任务感兴趣，Python是最好的学习语言，因为它拥有大量的逆向工程和利用库。
- en: Over the years, Python has received numerous updates and upgrades. For example,
    Python 2 was released in 2000 and Python 3 in 2008\. Unfortunately, Python 3 is
    not backward compatible, hence most of the programs written in Python 2 will not
    work in Python 3\. Even though Python 3 was released in 2008, most of the libraries
    and programs still use Python 2. To do better penetration testing, the tester
    should be able to read, write, and rewrite Python scripts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Python已经接受了许多更新和升级。例如，Python 2于2000年发布，Python 3于2008年发布。不幸的是，Python 3不向后兼容，因此大部分用Python
    2编写的程序在Python 3中将无法运行。尽管Python 3于2008年发布，但大多数库和程序仍在使用Python 2。为了更好地进行渗透测试，测试人员应该能够阅读、编写和重写Python脚本。
- en: Python being a scripting language, security experts have preferred Python as
    a language to develop security toolkits. Its human-readable code, modular design,
    and large number of libraries provide a start for security experts and researchers
    to create sophisticated tools with it. Python comes with a vast library (standard
    library) which accommodates almost everything, from simple I/O to platform-specific
    API  calls. Many of the default and user-contributed libraries and modules can
    help us in penetration testing with building tools to achieve interesting tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种脚本语言，安全专家更倾向于使用Python作为开发安全工具包的语言。其易读的代码、模块化设计和大量的库为安全专家和研究人员提供了一个起点，可以用它来创建复杂的工具。Python带有一个庞大的库（标准库），几乎包含了从简单的I/O到特定于平台的API调用的所有内容。许多默认和用户贡献的库和模块可以帮助我们在渗透测试中构建工具来完成有趣的任务。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up the scripting environment in different operating systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同操作系统中设置脚本环境
- en: Installing third party Python libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装第三方Python库
- en: Working with virtual environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: Python language basics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python语言基础知识
- en: Setting up the scripting environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置脚本环境
- en: Your **scripting environment** is basically the computer you use for your daily
    work, combined with all the tools in it that you use to write and run Python programs.
    The best system to learn on is the one you are using right now. This section will
    help you to configure the Python scripting environment on your computer, so that
    you can create and run your own programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**脚本环境**基本上是您日常工作中使用的计算机，以及您用来编写和运行Python程序的所有工具。最好的学习系统就是您现在正在使用的系统。本节将帮助您在计算机上配置Python脚本环境，以便您可以创建和运行自己的程序。
- en: 'If you are using Mac OS X or Linux installation on your computer, you may have
    a Python interpreter pre-installed in it. To find out if you have one, open the
    terminal and type `python`. You will probably see something like the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在计算机上使用的是Mac OS X或Linux安装，可能已经预先安装了Python解释器。要查看是否已安装，请打开终端并输入`python`。您可能会看到类似以下内容：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From the preceding output, we can see that `Python 2.7.6` is installed in this
    system. By issuing `python` in your terminal, you started Python interpreter in
    interactive mode. Here, you can play around with Python commands, and what you
    type will run and you'll see the outputs immediately.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到在这个系统中安装了`Python 2.7.6`。通过在终端中输入`python`，您启动了交互模式下的Python解释器。在这里，您可以尝试使用Python命令，您输入的内容将立即运行并显示输出。
- en: You can use your favorite text editor to write your Python programs. If you
    do not have one, then try installing Geany or Sublime Text and it should be perfect
    for you. These are simple editors and offer a straightforward way to write as
    well as run your Python programs. In Geany, output is shown in a separate terminal
    window, whereas Sublime Text uses an embedded terminal window. Sublime Text is
    not free, but it has a flexible trial policy that allows you to use the editor
    without any stricture. It is one of the few cross-platform text editors that is
    quite apt for beginners and has a full range of functions targeting professionals.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用您喜欢的文本编辑器来编写Python程序。如果没有的话，可以尝试安装Geany或Sublime Text，它们非常适合您。这些都是简单的编辑器，提供了编写和运行Python程序的简单方式。在Geany中，输出显示在单独的终端窗口中，而Sublime
    Text使用嵌入式终端窗口。Sublime Text是收费的，但它有灵活的试用政策，允许您在没有任何限制的情况下使用编辑器。它是为初学者设计的少数跨平台文本编辑器之一，具有针对专业人士的全套功能。
- en: Setting up in Linux
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux中设置
- en: The Linux system is built in a way that makes it smooth for users to get started
    with Python programming. Most Linux distributions already have Python installed.
    For example, the latest versions of Ubuntu and Fedora come with Python 2.7\. Also,
    the latest versions of Redhat Enterprise (RHEL) and CentOS come with Python 2.6\.
    Just for the record, you might want to check this, though.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Linux系统的构建方式使用户可以轻松开始Python编程。大多数Linux发行版已经预装了Python。例如，最新版本的Ubuntu和Fedora都预装了Python
    2.7。此外，最新版本的Redhat Enterprise（RHEL）和CentOS都预装了Python 2.6。不过，您可能还是想要检查一下。
- en: 'If it is not installed, the easiest way to install Python is to use the default
    package manager of your distribution, such as `apt-get`, `yum`, and so on. Install
    Python by issuing this command in the terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未安装Python，安装Python的最简单方法是使用发行版的默认包管理器，如`apt-get`，`yum`等。通过在终端中输入以下命令来安装Python：
- en: 'For Debian / Ubuntu Linux / Kali Linux users, use the following command:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Debian / Ubuntu Linux / Kali Linux用户，请使用以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Red Hat / RHEL / CentOS Linux users, use the following command:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Red Hat / RHEL / CentOS Linux用户，请使用以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install Geany, leverage your distribution''s package manager:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Geany，请利用您的发行版软件包管理器：
- en: 'For Debian / Ubuntu Linux / Kali Linux users, use the following command:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Debian / Ubuntu Linux / Kali Linux用户，请使用以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Red Hat / RHEL / CentOS Linux users, use the following command:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Red Hat / RHEL / CentOS Linux用户，请使用以下命令：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Setting up in Mac
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac中设置
- en: Even though Macintosh is a good platform to learn Python, many people using
    Macs actually run some Linux distribution or other on their computer, or run Python
    within a virtual Linux machine. The latest version of Mac OS X, Yosemite, comes
    with Python 2.7 pre-installed. Once you verify that it is working, install Sublime
    Text.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Macintosh是学习Python的好平台，但实际上使用Mac的许多人在计算机上运行某些Linux发行版，或者在虚拟Linux机器中运行Python。最新版本的Mac
    OS X，Yosemite，预装了Python 2.7。验证它是否正常工作后，安装Sublime Text。
- en: For Python to run on your Mac, you have to install GCC, which can be obtained
    by downloading XCode, the smaller command-line tool. Also, we need to install
    Homebrew, a package manager.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Mac上运行Python，您必须安装GCC，可以通过下载XCode，较小的命令行工具来获得。此外，我们需要安装Homebrew，一个软件包管理器。
- en: 'To install Homebrew, open terminal and run the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Homebrew，请打开终端并运行以下命令：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After installing Homebrew, you have to insert the Homebrew directory into your
    `PATH` environment variable. You can do this by including the following line in
    your `~/.profile` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Homebrew后，您必须将Homebrew目录插入到您的`PATH`环境变量中。您可以通过在您的`~/.profile`文件中包含以下行来实现：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we are ready to install Python 2.7\. Run the following command in your
    Terminal, which will do the rest:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备安装Python 2.7。在终端中运行以下命令，其余的将由命令完成：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To install Sublime Text, go to Sublime Text's downloads page at [http://www.sublimetext.com/3](http://www.sublimetext.com/3),
    and click on the **OS X** link. This will get you the Sublime Text installer for
    your Mac.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Sublime Text，请转到Sublime Text的下载页面[http://www.sublimetext.com/3](http://www.sublimetext.com/3)，然后单击**OS
    X**链接。这将为您的Mac获取Sublime Text安装程序。
- en: Setting up in Windows
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows中设置
- en: Windows does not have Python pre-installed on it. To check if it is installed,
    open a command prompt and type the word `python`, and press *Enter*. In most cases,
    you will get a message that says Windows does not recognize `python` as a command.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Windows上没有预先安装Python。要检查是否已安装，请打开命令提示符，输入单词`python`，然后按*Enter*。在大多数情况下，您将收到一条消息，指出Windows不认识`python`作为命令。
- en: We have to download an installer that will set Python for Windows. Then we have
    to install and configure Geany to run Python programs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须下载一个安装程序，将Python设置为Windows。然后我们必须安装和配置Geany以运行Python程序。
- en: Go to Python's download page at [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
    and download the Python 2.7 installer that is compatible with your system. If
    you are not aware of your operating system's architecture, then download 32-bit
    installers, which will work on both architectures, but 64-bit will only work on
    64-bit systems.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Python的下载页面[https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)，并下载与您的系统兼容的Python
    2.7安装程序。如果您不知道您的操作系统架构，请下载32位安装程序，它将适用于两种架构，但64位只适用于64位系统。
- en: To install Geany, go to Geany's download page at [http://www.geany.org/Download/Releases](http://www.geany.org/Download/Releases)
    and download the full installer variant, which has a description **Full Installer
    including GTK 2.16**. By default, Geany doesn't know where Python resides on your
    system. So we need to configure it manually.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Geany，请转到Geany的下载页面[http://www.geany.org/Download/Releases](http://www.geany.org/Download/Releases)，并下载包含描述**Full
    Installer including GTK 2.16**的完整安装程序变体。默认情况下，Geany不知道Python在系统中的位置。因此，我们需要手动配置它。
- en: For that, write a `Hello world` program in Geany, and save it anywhere in your
    system as `hello.py` and run it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在Geany中编写一个`Hello world`程序，并将其另存为`hello.py`，然后运行它。
- en: 'There are three methods you can use to run a Python program in Geany:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用三种方法在Geany中运行Python程序：
- en: Select **Build** | **Execute**
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**构建** | **执行**
- en: Press **F5**
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下**F5**
- en: Click the icon with three gears on it
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击带有三个齿轮图标的图标
- en: '![Setting up in Windows](img/image_01_001.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows中设置](img/image_01_001.jpg)'
- en: 'When you have a running `hello.py` program in Geany perform the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Geany中运行`hello.py`程序时，请执行以下步骤：
- en: Go to **Build** | **Set Build Commands**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**构建** | **设置构建命令**。
- en: Then enter the python commands option with `C:\Python27\python -m py_compile
    "%f"`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用`C:\Python27\python -m py_compile "%f"`输入python命令选项。
- en: Execute the command with `C:\Python27\python "%f"`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`C:\Python27\python "%f"`执行命令。
- en: Now you can run your Python programs while coding in Geany.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在Geany中编写代码时运行Python程序。
- en: It is recommended to run a Kali Linux distribution as a virtual machine and
    use this as your scripting environment. Kali Linux comes with a number of tools
    pre-installed and is based on Debian Linux, so you'll also be able to install
    a wide variety of additional tools and libraries. Also, some of the libraries
    will not work properly on Windows systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将Kali Linux发行版作为虚拟机运行，并将其用作脚本编写环境。Kali Linux预装了许多工具，基于Debian Linux，因此您还可以安装各种其他工具和库。此外，一些库在Windows系统上可能无法正常工作。
- en: Installing third-party libraries
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方库
- en: We will be using many Python libraries throughout this book, and this section
    will help you to install and use third-party libraries.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用许多Python库，本节将帮助您安装和使用第三方库。
- en: Setuptools and pip
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Setuptools和pip
- en: One of the most useful pieces of third-party Python software is **Setuptools**.
    With Setuptools, you can download and install any compliant Python libraries with
    a single command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的第三方Python软件之一是**Setuptools**。使用Setuptools，您可以使用单个命令下载和安装任何符合条件的Python库。
- en: The best way to install Setuptools on any system is to download the `ez_setup.py`
    file from [https://bootstrap.pypa.io/ez_setup.py](https://bootstrap.pypa.io/ez_setup.py)
    and run this file with your Python installation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何系统上安装Setuptools的最佳方法是从[https://bootstrap.pypa.io/ez_setup.py](https://bootstrap.pypa.io/ez_setup.py)下载`ez_setup.py`文件，并使用您的Python安装运行此文件。
- en: 'In Linux, run this in the terminal with the correct path to `ez_setup.py` script:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，在终端中运行以下命令，正确路径指向`ez_setup.py`脚本：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For Windows 8, or old versions of Windows with PowerShell 3 installed, start
    the PowerShell with administrative privileges and run the following command in
    it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安装了PowerShell 3的Windows 8或旧版本的Windows，以管理员权限启动PowerShell，并在其中运行以下命令：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For Windows systems without PowerShell 3 installed, download the `ez_setup.py`
    file from the preceding link using your web browser and *run* that file with your
    Python installation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未安装PowerShell 3的Windows系统，请使用Web浏览器从上述链接下载`ez_setup.py`文件，并使用您的Python安装运行该文件。
- en: 'Pip is a package management system used to install and manage software packages
    written in *Python*. After successful installation of Setuptools, you can install
    `pip` by simply opening a command prompt and running the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Pip是一个包管理系统，用于安装和管理用Python编写的软件包。成功安装Setuptools后，您可以通过简单地打开命令提示符并运行以下命令来安装`pip`：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Alternatively, you could also install `pip` using your default distribution
    package managers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您还可以使用默认的发行版包管理器安装`pip`：
- en: 'On Debian, Ubuntu, and Kali Linux:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Debian、Ubuntu和Kali Linux上：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On Fedora:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Fedora上：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you could run `pip` from command line. Try installing a package with `pip`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以从命令行运行`pip`。尝试使用`pip`安装一个软件包：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Working with virtual environments
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: Virtual environments help to separate dependencies required for different projects,
    by working inside a virtual environment it also helps to keep our global site-packages
    directory clean.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境有助于分离不同项目所需的依赖项，通过在虚拟环境中工作，还有助于保持全局site-packages目录的清洁。
- en: Using virtualenv and virtualwrapper
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用virtualenv和virtualwrapper
- en: '**Virtualenv** is a Python module which helps to create isolated Python environments
    for our scripting experiments, which creates a folder with all necessary executable
    files and modules for a basic Python project.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Virtualenv**是一个Python模块，用于为我们的脚本实验创建隔离的Python环境，它会创建一个包含所有必要可执行文件和模块的文件夹，用于基本的Python项目。'
- en: 'You can install `virtualenv` with the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装`virtualenv`：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To create a new virtual environment, create a folder and enter the folder from
    the command line:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的虚拟环境，请创建一个文件夹，并从命令行进入该文件夹：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will initiate a folder with the provided name in your current working directory
    with all Python executable files and `pip` library, which will then help to install
    other packages in your virtual environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前工作目录中使用提供的名称初始化一个文件夹，其中包含所有Python可执行文件和`pip`库，然后将帮助在您的虚拟环境中安装其他软件包。
- en: 'You can select a Python interpreter of your choice by providing more parameters,
    such as the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过提供更多参数来选择您选择的Python解释器，例如以下命令：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will create a virtual environment with Python 2.7\. We have to activate
    it before starting to use this virtual environment:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个使用Python 2.7的虚拟环境。在开始使用此虚拟环境之前，我们必须激活它：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Using virtualenv and virtualwrapper](img/image_01_002.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用virtualenv和virtualwrapper](img/image_01_002.jpg)'
- en: Now, on the left side of the command prompt, the name of the active virtual
    environment will appear. Any package that you install inside this prompt using
    `pip` will belong to the active virtual environment, which will be isolated from
    all other virtual environments and global installation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在命令提示符的左侧，将显示活动虚拟环境的名称。在此提示符中使用`pip`安装的任何软件包都将属于活动虚拟环境，该环境将与所有其他虚拟环境和全局安装隔离开来。
- en: 'You can deactivate and exit from the current virtual environment using this
    command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令退出当前虚拟环境：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Virtualenvwrapper** provides a better way to use `virtualenv`. It also organizes
    all virtual environments in one place.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Virtualenvwrapper**提供了一种更好的使用`virtualenv`的方法。它还将所有虚拟环境组织在一个地方。'
- en: To install, we can use `pip`, but let's make sure we have installed `virtualenv`
    before installing `virtualwrapper`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装，我们可以使用`pip`，但在安装`virtualwrapper`之前，让我们确保已安装了`virtualenv`。
- en: 'Linux and OS X users can install it with the following method:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和OS X用户可以使用以下方法安装它：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Also, add these three lines to your shell startup file, such as `.bashrc` or
    `.profile`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还要将以下三行添加到您的shell启动文件，例如`.bashrc`或`.profile`：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will set `Devel` folder in your home directory as the location of your
    virtual environment projects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把您的主目录中的`Devel`文件夹设置为您的虚拟环境项目的位置。
- en: 'For Windows users, we can use another package: `virtualenvwrapper-win`. This
    can also be installed with `pip`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，我们可以使用另一个软件包：`virtualenvwrapper-win`。这也可以使用`pip`安装：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To create a virtual environment with `virtualwrapper`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`virtualwrapper`创建一个虚拟环境：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This creates a folder with the provided name inside `~/Envs`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`~/Envs`中创建一个以提供的名称命名的文件夹。
- en: 'To activate this environment, we can use the `workon` command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活此环境，我们可以使用`workon`命令：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This two commands can be combined with the single one as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令可以组合成一个单一的命令，如下所示：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can deactivate the virtual environment with the same deactivate command
    in `virtualenv`. To delete a virtual environment, we can use the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`virtualenv`中的相同deactivate命令来停用虚拟环境。要删除虚拟环境，可以使用以下命令：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Python language essentials
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python语言基础知识
- en: In this section we will go through the idea of variables, strings, data types,
    networking, and exception handling. For an experienced programmer, this section
    will be just a summary of what you already know about Python.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍变量、字符串、数据类型、网络和异常处理的概念。对于有经验的程序员，本节将是对您已经了解的Python知识的总结。
- en: Variables and types
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量和类型
- en: Python is brilliant in case of variables. Variables point to data stored in
    a memory location. This memory location may contain different values, such as
    integers, real numbers, Booleans, strings, lists, and dictionaries.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python在变量方面非常出色。变量指向存储在内存位置中的数据。这个内存位置可能包含不同的值，比如整数、实数、布尔值、字符串、列表和字典。
- en: Python interprets and declares variables when you set some value to this variable.
    For example, if we set *a = 1* and *b = 2*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您给变量设置某个值时，Python会解释并声明变量。例如，如果我们设置*a = 1*和*b = 2*。
- en: 'Then we print the sum of these two variables with:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用以下代码打印这两个变量的和：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The result will be `3` as Python will figure out that both *a* and *b* are numbers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是`3`，因为Python会判断*a*和*b*都是数字。
- en: However, if we had assigned *a = "1"* and *b = "2"*. Then the output will be
    `12`, since both *a* and *b* will be considered as strings. Here, we do not have
    to declare variables or their type before using them as each variable is an object.
    The `type()` method can be used to get the variable type.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们赋值*a = "1"* 和 *b = "2"*。那么输出将是`12`，因为*a*和*b*都将被视为字符串。在这里，我们不需要在使用变量之前声明变量或其类型，因为每个变量都是一个对象。`type()`方法可用于获取变量类型。
- en: Strings
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: As with any other programming language, strings are one of the important things
    in Python. They are immutable. So, they cannot be changed once defined. There
    are many Python methods which can modify strings. They do nothing to the original
    one, but create a copy and return after modifications. Strings can be delimited
    with single quotes, double quotes, or in case of multiple lines, we can use triple
    quotes syntax. We can use the `\` character to escape additional quotes which
    come inside a string.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何编程语言一样，字符串是Python中的重要内容之一。它们是不可变的。因此，一旦定义，它们就无法更改。有许多Python方法可以修改字符串。它们不会对原始字符串进行任何操作，而是创建一个副本并在修改后返回。字符串可以用单引号、双引号或在多行的情况下，我们可以使用三引号语法进行分隔。我们可以使用`\`字符来转义字符串中的额外引号。
- en: 'Commonly used string methods are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的字符串方法如下：
- en: '`string.count(''x'')`: This returns the number of occurrences of `''x''` in
    the string'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.count(''x'')`: 这将返回字符串中`''x''`的出现次数'
- en: '`string.find(''x'')`: This returns the position of character `''x''` in the
    string'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.find(''x'')`: 这将返回字符串中字符`''x''`的位置'
- en: '`string.lower()`: This converts the string into lowercase'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.lower()`: 这将把字符串转换为小写'
- en: '`string.upper()`: This converts the string into uppercase'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.upper()`: 这将把字符串转换为大写'
- en: '`string.replace(''a'', ''b'')`: This replaces all `a` with `b` in the string'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.replace(''a'', ''b'')`: 这将用`b`替换字符串中的所有`a`'
- en: 'Also, we can get the number of characters, including white spaces, in a string
    with the `len()` method:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`len()`方法获取字符串中字符的数量，包括空格：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can read more about the string function here: [https://docs.python.org/2/library/string.html](https://docs.python.org/2/library/string.html).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读更多关于字符串函数的内容：[https://docs.python.org/2/library/string.html](https://docs.python.org/2/library/string.html)。
- en: Lists
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists allow us to store more than one *variable* inside it and provide a better
    method for sorting arrays of objects in Python. They also have methods which help
    to manipulate the values inside them:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 列表允许我们在其中存储多个*变量*，并提供了一种更好的方法来对Python中的对象数组进行排序。它们还有一些方法可以帮助我们操作其中的值：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will print `2`, as Python index starts from 0\. To print out the whole
    list, use the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`2`，因为Python索引从0开始。要打印整个列表，请使用以下代码：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will loop through all elements and print them.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将循环遍历所有元素并将它们打印出来。
- en: 'Useful list methods are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的列表方法如下：
- en: '`.append(value)`: This appends an element at the end of the list'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.append(value)`: 这将在列表末尾添加一个元素'
- en: '`.count(''x'')`: This gets the number of `''x''` in the list'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.count(''x'')`: 这将获取列表中`''x''`的数量'
- en: '`.index(''x'')`: This returns the index of `''x''` in the list'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.index(''x'')`: 这将返回列表中`''x''`的索引'
- en: '`.insert(''y'',''x'')`: This inserts `''x''` at location `''y''`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.insert(''y'',''x'')`: 这将在位置`''y''`插入`''x''`'
- en: '`.pop()`: This returns the last element and also removes it from the list'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pop()`: 这将返回最后一个元素并将其从列表中删除'
- en: '`.remove(''x'')`: This removes first `''x''` from the list'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.remove(''x'')`: 这将从列表中删除第一个`''x''`'
- en: '`.reverse()`: This reverses the elements in the list'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.reverse()`: 这将颠倒列表中的元素'
- en: '`.sort()`: This sorts the list alphabetically in ascending order, or numerical
    in ascending order'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.sort()`: 这将按字母顺序或数字顺序对列表进行排序'
- en: Dictionaries
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: 'A Python dictionary is a storage method for key:value pairs. Python dictionaries
    are enclosed in curly braces, `{}`. For example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python字典是一种存储键值对的方法。Python字典用大括号`{}`括起来。例如：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will output `20`. We cannot create multiple values with the same key. This
    will overwrite the previous value of the duplicate keys. Operations on dictionaries
    are unique. Slicing is not supported in dictionaries.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出`20`。我们不能使用相同的键创建多个值。这将覆盖重复键的先前值。字典上的操作是唯一的。字典不支持切片。
- en: 'We can combine two distinct dictionaries to one by using the update method.
    Also, the update method will merge existing elements if they conflict:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用update方法将两个不同的字典合并为一个。此外，如果存在冲突，update方法将合并现有元素：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will return the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下内容：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To delete elements from a dictionary we can use the `del` method:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字典中删除元素，我们可以使用`del`方法：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will return the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下内容：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Networking
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: Sockets are the basic blocks behind all network communications by a computer.
    All network communications go through a socket. So, sockets are the virtual endpoints
    of any communication channel that takes place between two applications which may
    reside on the same or different computers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字是计算机网络通信的基本组成部分。所有网络通信都通过套接字进行。因此，套接字是任何通信渠道的虚拟端点，这些通信渠道发生在两个应用程序之间，这两个应用程序可能位于同一台计算机上，也可能位于不同的计算机上。
- en: 'The socket module in Python provides us a better way to create network connections
    with Python. So to make use of this module, we have to import this in our script:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的socket模块为我们提供了一种更好的方式来创建Python网络连接。因此，要使用这个模块，我们必须在脚本中导入它：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This script will get the response header from the server. We will discuss more
    about networking in our later chapters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将从服务器获取响应标头。我们将在后面的章节中更多地讨论网络。
- en: Handling exceptions
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理异常
- en: 'Even though we wrote syntactically correct scripts, there will be some errors
    while executing them. So, we have to handle the errors properly. The simplest
    way to handle exceptions in Python is by using `try-except`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们编写了语法正确的脚本，但在执行它们时可能会出现一些错误。因此，我们必须正确处理这些错误。在Python中处理异常的最简单方法是使用`try-except`：
- en: 'Try to divide a number by zero in your Python interpreter:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在Python解释器中将一个数字除以零：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'So, we can rewrite this script with `try-except` blocks:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用`try-except`块重写这个脚本：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will return the error `integer division or modulo by zero`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回错误`整数除法或取模为零`。
- en: Tip
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了这本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给您。
- en: 'You can download the code files by following these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register to our website using your e-mail address and password.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录或注册到我们的网站。
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在顶部的**支持**选项卡上。
- en: Click on **Code Downloads & Errata**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**代码下载和勘误**。
- en: Enter the name of the book in the **Search** box.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入书名。
- en: Select the book for which you're looking to download the code files.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要下载代码文件的书籍。
- en: Choose from the drop-down menu where you purchased this book from.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您购买此书的地点。
- en: Click on **Code Download**.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**代码下载**。
- en: You can also download the code files by clicking on the `Code Files` button
    on the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the **Search** box. Please note that you need to
    be logged in to your Packt account.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过单击书的网页上的`代码文件`按钮来下载代码文件，该网页位于Packt Publishing网站上。可以通过在**搜索**框中输入书名来访问此页面。请注意，您需要登录到您的Packt帐户。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，请确保使用以下最新版本的软件解压或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR / 7-Zip for Windows
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg / iZip / UnRarX for Mac
- en: 7-Zip / PeaZip for Linux
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip / PeaZip for Linux
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Effective-Python-Penetration-Testing](https://github.com/PacktPublishing/Effective-Python-Penetration-Testing).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Effective-Python-Penetration-Testing](https://github.com/PacktPublishing/Effective-Python-Penetration-Testing)。我们还有其他丰富的图书和视频代码包可供下载，网址为[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)。快去看看吧！
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now we have an idea about basic installations and configurations that we have
    to do before coding. Also, we have gone through the basics of the Python language,
    which may help us to speed up scripting in our later chapters. In the next chapter
    we will discuss more investigating network traffic with Scapy, packet sniffing,
    and packet injection.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了编码前必须进行的基本安装和配置。此外，我们已经学习了Python语言的基础知识，这可能有助于我们在后面的章节中加快脚本编写的速度。在下一章中，我们将讨论使用Scapy进行更多的网络流量调查、数据包嗅探和数据包注入。
