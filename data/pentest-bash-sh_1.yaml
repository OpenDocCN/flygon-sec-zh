- en: Chapter 1. Getting to Know Bash
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。了解Bash
- en: The **Bourne Again SHell** (**bash**) is arguably one of the most important
    pieces of software in existence. Without bash shell's many utilities and the problem-solving
    potential it gives its users by integrating and interfacing system utilities in
    a programmable way (called **bash scripting**), many of the very important security-related
    problems of the modern world would be very tedious to solve. Utilities such as
    `grep`, `wget`, `vi`, and `awk` enable their users to do very powerful string
    processing, data mining, and information management. System administrators, developers,
    security engineers, and penetration testers all across the world for many years
    have sworn by its sheer problem-solving potential and effectiveness in enabling
    them to tackle their day-to-day technical challenges.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bourne Again SHell**（bash）可以说是存在的最重要的软件之一。没有bash shell的许多实用程序和它通过可编程方式集成和接口系统实用程序给予用户的问题解决潜力（称为**bash脚本**），现代世界的许多非常重要的安全相关问题将会非常繁琐。诸如`grep`、`wget`、`vi`和`awk`等实用程序使其用户能够进行非常强大的字符串处理、数据挖掘和信息管理。多年来，全世界的系统管理员、开发人员、安全工程师和渗透测试人员都发誓其强大的问题解决潜力和使他们能够应对日常技术挑战的有效性。'
- en: Why are discussing the bash shell? Why is it so popular among system administrators,
    penetration testers, and developers? Well, there may be other reasons, but fundamentally
    the bash shell is the most standardized and is usually, with regard to most popular
    operating systems, implemented from a single code base—one source for the official
    source code. This means one can guarantee a certain base set of execution behaviors
    for a bash script or collection of commands regardless of the operating system
    hosting the bash implementation. Operating systems popularly have unique implementations
    of the **Korn Shell** (**ksh**) and other terminal emulator software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要讨论bash shell？为什么它在系统管理员、渗透测试人员和开发人员中如此受欢迎？嗯，可能还有其他原因，但基本上bash shell是最标准化的，通常情况下，关于最流行的操作系统，它是从单一代码库实现的——官方源代码的一个来源。这意味着可以保证一定的基本执行行为集合，无论托管bash实现的操作系统是什么。操作系统通常具有**Korn
    Shell**（ksh）和其他终端仿真器软件的独特实现。
- en: The only disadvantage, if any, of the Linux or Unix environment that bash is
    native to is that for most people, especially those accustomed to the **Graphical
    User Interface** (**GUI**), the learning curve may be a little steep. This is
    mainly because the way information is represented. The general Linux/Unix culture
    and conventions can often be difficult to appreciate for newcomers and possibly
    due to the lack of tooltips, hints, and rich graphical interaction design and
    user experience engineering GUIs often benefit from. This book and especially
    this chapter will introduce some of the witty but brilliant Linux/Unix culture
    and conventions so that you can get comfortable enough with the bash shell and
    eventually find your own way around and follow the more advance topics later on
    in the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Linux或Unix环境的唯一缺点（如果有的话）是，对于大多数人，特别是那些习惯于图形用户界面（GUI）的人来说，学习曲线可能会有点陡峭。这主要是因为信息呈现的方式。对于新手来说，通常很难欣赏到Linux/Unix文化和惯例，可能是因为缺少工具提示、提示和丰富的图形交互设计和用户体验工程GUI的缘故。本书特别是本章将介绍一些巧妙但精彩的Linux/Unix文化和惯例，以便您可以对bash
    shell感到足够舒适，并最终找到自己的方式，并在本书的后面跟随更高级的主题。
- en: Throughout the book, the bash environment or the host operating system that
    will be discussed will be Kali Linux. Kali Linux is a distribution adapted from
    Debian, and it is packed with utilities focused purely on technical security problem
    solving and testing. Because knowing how to wield your terminal is strongly associated
    with knowing your operating system and its various nuances, this chapter and the
    following chapters will introduce some topics related to the Kali Linux operating
    system, its configuration setup, and default behavior to enable you to properly
    use your terminal utilities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，将讨论的bash环境或主机操作系统将是Kali Linux。Kali Linux是从Debian改编的发行版，它装载了专注于技术安全问题解决和测试的实用程序。因为熟练使用终端与了解您的操作系统及其各种细微差别密切相关，本章和接下来的章节将介绍一些与Kali
    Linux操作系统相关的主题，其配置设置和默认行为，以便您能够正确使用您的终端实用程序。
- en: If you're already a seasoned "basher", feel free to skip this chapter and move
    on to the more security-focused topics in this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经是一个经验丰富的“basher”，请随意跳过本章，转而阅读本书中更加关注安全的主题。
- en: Getting help from the man pages
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从man页面获取帮助
- en: Bash shells typically come bundled with a very useful utility called man files,
    short for manual files. It's a utility that gives you a standardized format to
    document the purpose and usage of most of the utilities, libraries, and even system
    calls available to you in your Unix/Linux environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bash shell通常捆绑了一个非常有用的实用程序，称为man文件，简称手册文件。这是一个实用程序，为您提供了一个标准化的格式，用于记录Unix/Linux环境中大多数实用程序、库甚至系统调用的目的和用法。
- en: In the following sections, we will frequently make use of the conventions and
    descriptive style used in man files so that you can comfortably switch over to
    using the man pages to support what you've learnt in the following sections and
    chapters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将经常使用man文件中使用的惯例和描述风格，以便您可以舒适地切换到使用man页面来支持您在接下来的章节和章节中学到的内容。
- en: 'Using man files is pretty easy; all you need to do is fire off the following
    command from your terminal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用man文件非常容易；您只需要从终端中发出以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the previous command, `[SECTION NUMBER]` is the number of the man page section
    to be referenced and `[MAN PAGE NAME]` is, well, the name of the man page. Usually,
    it is the name of the command, system call, or library itself. For example, if
    you want to look up the man page for the man command itself, you would execute
    the following command from your terminal:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，`[SECTION NUMBER]`是要引用的手册页部分的编号，`[MAN PAGE NAME]`是手册页的名称。通常，它是命令、系统调用或库本身的名称。例如，如果您要查找man命令本身的手册页，您将从终端执行以下命令：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous command, `1` tells man to use section 1 and the `man` argument
    suffixing the command is the name of the man page, which is also the name of the
    command to which the page is dedicated.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，`1`告诉man使用第1部分，后面跟着的`man`参数是手册页的名称，也是页面专用的命令的名称。
- en: 'Man page sections are numbered according to a specification of their own. Here''s
    how the numbers are appropriated:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 手册页的各个部分按照它们自己的规范编号。以下是这些数字的分配方式：
- en: '**General commands**: You usually use this section to look up the information
    about commands used on the command line. In a previous example in this section,
    we used it to look up information about the man file.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常用命令：通常使用此部分查找有关命令行使用的命令的信息。在本节的前一个示例中，我们使用它来查找有关手册文件的信息。
- en: '**System calls**; This section documents the arguments and purpose of common
    system calls facilitated by the host operating system.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统调用：本节记录了主机操作系统支持的常见系统调用的参数和目的。
- en: '**C library functions**: This section is very useful for C developers and developers
    who use languages developed as C derivatives such as Python. It will give you
    information about the arguments, defining header files, behavior, and purpose
    of certain fundamental C library function calls.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C库函数：对于C开发人员和使用C衍生语言（如Python）的开发人员来说，这一部分非常有用。它将为您提供有关某些基本C库函数调用的参数、定义头文件、行为和目的的信息。
- en: '**Special files**: This section documents special-purpose files, typically
    those in the `/dev/` directory, for instance, character devices, pseudo terminals,
    and so on. Try picking a couple files in the `/dev/` directory of your operating
    system and executing the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特殊文件：本节记录了特殊用途的文件，通常位于`/dev/`目录中，例如字符设备、伪终端等。尝试选择操作系统`/dev/`目录中的一些文件，并执行以下命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For instance:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**File formats and conventions**: This section documents common file formats
    used to structure information about the system, for instance, logfile formats,
    the password file formats, and so on. Usually, any file is used to document the
    information generated by common operating system utilities.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件格式和约定：本节记录了用于构造有关系统信息的常见文件格式，例如日志文件格式、密码文件格式等。通常，任何文件都用于记录常见操作系统实用程序生成的信息。
- en: '**Games and Screensavers**: This section contains information about games and
    screensavers.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏和屏幕保护程序：本节包含有关游戏和屏幕保护程序的信息。
- en: '**Miscellanea**: This section contains information about miscellaneous commands
    and other information. It is reserved for documentation of anything that does
    not fit into the other categories.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 杂项：本节包含有关杂项命令和其他信息的信息。它用于记录任何不适合其他类别的文档。
- en: '**System administration commands and daemons**: This section is dedicated to
    administration commands and information about system daemons.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统管理命令和守护进程：本节专门介绍管理命令和系统守护进程的信息。
- en: 'For a synopsis and full description of these sections, try checking out the
    intro man files for each of them. You can reach these files by executing the following
    command for each section number:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些部分的概要和完整描述，请尝试查看每个部分的介绍手册文件。您可以通过执行以下命令来访问这些文件的每个部分编号：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I've documented all the man page section numbers and their traditional purpose
    here. Of course, it is up to developers to uphold these conventions, but generally
    all you will be interested in is section 1, and if you're going to do some reverse
    engineering, section 2, 3, and 4 will also be of great help.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里记录了所有手册页部分编号及其传统用途。当然，开发人员要遵守这些约定，但通常您只会对第1部分感兴趣，如果您要进行一些逆向工程，第2、3和4部分也将非常有帮助。
- en: 'The man page layout is standardized to contain a certain collection of sections.
    Each section of the man page describes a given property of the command, system
    call, or library being discussed. The following list explains the purpose of the
    common sections in man file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 手册页布局标准化，包含一定的部分集合。手册页的每个部分描述了所讨论的命令、系统调用或库的特定属性。以下列表解释了手册文件中常见部分的目的：
- en: '**Name**: This is the name of the command, function, system call, or file format.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：这是命令、函数、系统调用或文件格式的名称。
- en: '**Synopsis**: This is a formal description of the command, system call, file
    format, or what have you describing the usage specification. The way the syntax
    or usage specifications for commands are specified takes a little understanding
    to appreciate properly. You may notice the braces in the specification, these
    are not to be interpreted as literal parts of the command invocation. In fact,
    they indicate that whatever appears inside the brackets is an optional argument.
    Also, the "|" character indicates that either the symbols preceding it or following
    it can be specified as part of the command invocation but not both; think of it
    as a logical OR.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概要：这是对命令、系统调用、文件格式等的正式描述，描述了使用规范。命令的语法或使用规范的指定方式需要一些理解才能正确理解。您可能会注意到规范中的大括号，这些不应被解释为命令调用的文字部分。实际上，它们表示括号内出现的任何内容都是可选参数。此外，"|"字符表示命令调用中可以指定其前面或后面的符号，但不能同时指定；将其视为逻辑或。
- en: '**Description**: This is an informal description and discussion of the man
    page topic, detailing its purpose and more information about the options and possible
    arguments mentioned in the Synopsis section.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这是man页面主题的非正式描述和讨论，详细说明了其目的以及在概要部分提到的选项和可能的参数的更多信息。'
- en: '**Examples**: This is a collection of examples for the usage of the man page
    topic.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：这是man页面主题用法的示例集合。'
- en: '**See also**: This is a collection of references, web pages, and other resources
    containing further information about the topic being discussed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**另请参阅**：这是包含有关正在讨论的主题的更多信息的参考资料、网页和其他资源的集合。'
- en: For more about the Linux manual pages, please see the *Further reading* section
    at the end of this chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Linux手册页面的更多信息，请参阅本章末尾的*进一步阅读*部分。
- en: Navigating and searching the filesystem
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航和搜索文件系统
- en: Navigating and searching the Linux filesystem is one of the most essential skills
    the developers, system administrators, and penetration testers will need to master
    in order to realize the full potential of their bash consoles and utilities. To
    properly master this skill, you will need a good understanding of the organization
    of your host operating system though it is a little out of context of this book
    to have a thorough discussion of the Kali Linux operating system's inner workings
    and organization.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 导航和搜索Linux文件系统是开发人员、系统管理员和渗透测试人员需要掌握的最基本技能之一，以实现其bash控制台和实用程序的全部潜力。要正确掌握这项技能，您需要对主机操作系统的组织有很好的理解，尽管在这本书的上下文中，对Kali
    Linux操作系统的内部工作和组织进行深入讨论有点脱离了主题。
- en: 'Navigating a filesystem requires the use of a sample collection of the tools
    and utilities. Here''s a breakdown of these tools:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 导航文件系统需要使用一系列工具和实用程序的样本集。以下是这些工具的分解：
- en: '| Command name | Common name | Purpose |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 命令名称 | 通用名称 | 目的 |'
- en: '| --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cd` | Change Directory | This changes your current working directory |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `cd` | 更改目录 | 更改当前工作目录 |'
- en: '| `ls` | List | This lists the contents of the current working directory |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `ls` | 列表 | 列出当前工作目录的内容 |'
- en: '| `pwd` | Print Working Directory | This displays the current working directory
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `pwd` | 打印工作目录 | 显示当前工作目录 |'
- en: '| `find` | Find | This locates or verifies the existence of a file based on
    a the values of certain attributes |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `find` | 查找 | 根据某些属性的值定位或验证文件的存在 |'
- en: Navigating directories
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航目录
- en: Navigating directories is popularly done by using the `cd` command, which is
    probably one of the simplest commands to use. All you need to do is supply the
    directory you wish to change to and `cd` will do the rest. It also has very useful
    shorthands to speed up the most common tasks users perform when navigating their
    filesystems.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 导航目录通常使用`cd`命令完成，这可能是最简单的命令之一。您只需要提供要更改的目录，`cd`将完成其余工作。它还具有非常有用的快捷方式，可以加快用户在导航文件系统时执行的最常见任务。
- en: 'The following is what the command usage specification looks like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是命令使用规范的样子：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the syntax specification, `[directory]` is the directory you wish to change
    your current working directory to and `[-L|-P]` may be any one of the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在语法规范中，`[directory]`是您希望将当前工作目录更改为的目录，`[-L|-P]`可以是以下任何一个：
- en: '`-L`: When changing directory, symbolic links should not be respected. The
    current directory will be changed to include the name of the symbolic link and
    not its target. This is described in documentation as making the symbolic link
    logical, since it forces the name of the symbolic link to be treated as logical
    element in the path being set as the working directory.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-L`：更改目录时，不应尊重符号链接。当前目录将更改为包括符号链接的名称，而不是其目标。这在文档中被描述为使符号链接逻辑，因为它强制符号链接的名称被视为路径中的逻辑元素。'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Symbolic links are constructs on a filesystem that allow one file or directory
    to act purely as a reference to another file. These links affect the way path
    resolution occurs, since in some situations when a symbolic link is followed,
    it will allow one path to direct the current directory to a file represented by
    another name, as opposed to a pathname resolving strictly as it is named.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 符号链接是文件系统上的构造，允许一个文件或目录纯粹作为对另一个文件的引用。这些链接会影响路径解析的方式，因为在某些情况下，当跟随符号链接时，它将允许一个路径将当前目录指向由另一个名称表示的文件，而不是严格按照路径名解析。
- en: '`-P`: This is the opposite of the `-L` command. This specifies that should
    the file being set as the current directory be symbolic link, it should be resolved
    completely before being set as the current directory. This means if you visit
    a symbolic link, your current path will not reflect the name of the symbolic link
    you used to reach it, unless of course if the link has the same name as its target.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`：这是`-L`命令的相反。这指定如果要设置为当前目录的文件是符号链接，则应在设置为当前目录之前完全解析它。这意味着如果您访问符号链接，您的当前路径将不会反映您用于到达它的符号链接的名称，除非当然该链接与其目标具有相同的名称。'
- en: 'The following is a typical usage example of the `cd` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`cd`命令的典型用法示例：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding command will change your current directory to the root directory,
    which is named `/`; everything hosted on your filesystem is usually reachable
    from this directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将更改您的当前目录到根目录，即名为`/`；通常情况下，您的文件系统上托管的所有内容都可以从此目录访问。
- en: 'The following are some more examples:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些更多的例子：
- en: '`cd ~`: This command is used to navigate to the current user''s home directory'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd ~`：此命令用于导航到当前用户的主目录'
- en: '`cd ../`: This command is used to navigate to the directory directly above
    the current one'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd ../`：此命令用于导航到当前目录直接上面的目录'
- en: 'In the preceding command, one can have `cd` navigate an arbitrary number of
    directories above the current one, for instance, by supplying it a command as
    follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，可以通过提供以下命令使`cd`导航到当前目录上面的任意数量的目录，例如：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following are some other commands that can be used to navigate to different
    directories:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以用于导航到不同目录的一些其他命令：
- en: '`cd .`: This command is used to navigate to the current directory'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd .`：这个命令用于导航到当前目录'
- en: '`cd –`: This command is used to navigate to the previous directory'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd –`：这个命令用于导航到上一个目录'
- en: '`cd --`: This command is used to navigate to the second-last directory'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd --`：这个命令用于导航到倒数第二个目录'
- en: 'To see whether you have indeed changed your current working directory to the
    one you''ve specified, you can invoke the `pwd` command that will print your working
    directory. The syntax for the `pwd` command is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您是否确实将当前工作目录更改为指定的目录，可以调用`pwd`命令，该命令将打印您的工作目录。`pwd`命令的语法如下：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `–L` or `--logical` and `–P` or `--physical` invocation options serve the
    same purpose as in the `cd` command.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`–L`或`--logical`和`–P`或`--physical`调用选项与`cd`命令中的作用相同。'
- en: Listing directory contents
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出目录内容
- en: It's not enough to just move between directories. You will eventually want to
    find out what's inside these directories. You can do this by using the `ls` command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅在目录之间移动是不够的。最终，您会想要找出这些目录里面有什么。您可以使用`ls`命令来做到这一点。
- en: 'The following is the usage specification for the `ls` command—adapted from
    its man page:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ls`命令的用法规范——改编自其man页面：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous command specification is another popular Linux/Unix convention.
    It''s a shorthand to specify that any of the letters appearing in the brackets
    can be specified as part of the command invocation. Also, any number of them may
    be specified at the same time. For instance, consider the following commands:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令规范是另一个流行的Linux/Unix约定。这是一种简写，指定括号中出现的任何字母都可以作为命令调用的一部分。同时可以指定任意数量。例如，考虑以下命令：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: According to the command specification, they are all acceptable ways to use
    the `ls` command. Whether or not any of these will actually do something useful
    depends on how each switch affects the `ls` command's behavior. You should keep
    in mind that some options may have opposing effects or certain combinations may
    have no effect, like a general note when reading usage specifications such as
    the one for `ls`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据命令规范，它们都是使用`ls`命令的可接受方式。这些是否会真正做一些有用的事情取决于每个开关如何影响`ls`命令的行为。您应该记住，某些选项可能具有相反的效果，或者某些组合可能没有效果，例如阅读`ls`的用法规范时的一般注意事项。
- en: The `[FILE]` or `[DIRECTORY]` argument would be any path or file at which you
    wish to fire `ls`. Without any arguments, `ls` will list the current working directory's
    entries.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`[FILE]`或`[DIRECTORY]`参数将是您希望触发`ls`的任何路径或文件。没有任何参数，`ls`将列出当前工作目录的条目。'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A **switch** is a popular jargon for the options, that is, anything directly
    following the hyphen, specified as part of the command invocation. For example,
    `–l` is a switch.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 开关是指命令调用的一部分，即紧随连字符后面的任何选项的流行行话。例如，`-l`是一个开关。
- en: Here's what some of the switches do—we will only discuss some of the most important
    switches here for the sake of brevity. Keep in mind that the `ls` command lists
    directory contents, so all its options will be focused on organizing and presenting
    a given directory's contents in a specified way.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些开关的作用——为了简洁起见，我们只讨论一些最重要的开关。请记住，`ls`命令列出目录内容，因此它的所有选项都将专注于以指定的方式组织和呈现给定目录的内容。
- en: 'The following are some of the `ls` command''s invocation options:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些`ls`命令的调用选项：
- en: '`-a –-all`: This displays all the directory entries and does not omit directories
    or file starting with "." in their names.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a –-all`：这会显示所有目录条目，并且不会省略以“.”开头的目录或文件。'
- en: '`-d –directory`: This lists the directory entries and not their contents. This
    will also force `ls` not to dereference symbolic links.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d –directory`：这会列出目录条目而不是它们的内容。这也会强制`ls`不解引用符号链接。'
- en: '`-h`: This prints sizes in human-readable format, for instance, instead of
    the number of bytes only it will display file sizes in gigabytes, kilobytes, or
    megabytes where applicable.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`：这会以人类可读的格式打印大小，例如，而不仅仅是字节的数量，它将显示以GB、KB或MB为单位的文件大小。'
- en: '`-i`: This prints the **inode** number of each file.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：这会打印每个文件的**inode**号码。'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Inodes or `i-nodes` are data structures assigned to files that represent detailed
    information about their access rights, access times, sizes, owners, and the location
    of the file on the actual block devices—the physical medium hosting the file—as
    well as other important housekeeping-orientated details.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 索引节点或`i-nodes`是分配给文件的数据结构，表示有关它们的访问权限、访问时间、大小、所有者以及文件在实际块设备上的位置的详细信息——物理介质托管文件——以及其他重要的维护导向的细节。
- en: '`-l`: This lists the entries in long format.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：这以长格式列出条目。'
- en: '`-R –-recursive`: This recursively lists directory contents. This tells `ls`
    to nest down all the levels of the specified path and enumerate all the reachable
    file paths, instead of stopping once the working directory is listed—as is the
    default.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-R –-recursive`：这会递归列出目录内容。这告诉`ls`嵌套所有指定路径的级别，并枚举所有可达的文件路径，而不是一旦列出工作目录就停止——这是默认行为。'
- en: '`-S`: This lists the entries sorted by file size.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-S`：这会按文件大小列出条目。'
- en: '`-x`: This sorts entries alphabetically by extension, for example, all PDFs
    after MP3s.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`：这会按扩展名按字母顺序对条目进行排序，例如，所有PDF文件在MP3文件之后。'
- en: 'The following are some examples of these options in action. For instance, if
    you''d like to say sort a bunch of files by their size, while displaying human-readable
    file sizes and all the access rights and creation times—which seems like a lot
    of work—you would run the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些选项在实际操作中的一些示例。例如，如果您想要按文件大小对一堆文件进行排序，同时显示人类可读的文件大小和所有访问权限和创建时间——这似乎是很多工作——您将运行以下命令：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You''re output could look something like the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出可能看起来像下面的截图：
- en: '![Listing directory contents](img/5107OT_01_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![列出目录内容](img/5107OT_01_05.jpg)'
- en: 'Another very useful example would be checking the volume of logins to the system.
    This can be done by looking at the output of the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的例子是检查系统的登录量。这可以通过查看以下命令的输出来完成：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Generally, keeping track of the contents of the `/var/log/` directory will always
    be a good way to grab a good synopsis of the activity on a system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，跟踪`/var/log/`目录的内容将始终是抓取系统活动的良好概要的好方法。
- en: Searching the filesystem
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索文件系统
- en: 'Another important skill is being able to find resources on your filesystem
    in a compact yet powerful way. One of the ways you can do this is by using the
    aptly named `find` command. The following command is how `find` works:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的技能是以一种紧凑而强大的方式在文件系统中查找资源。其中一种方法是使用名为`find`的命令。以下命令是`find`的工作方式：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can find out more about the `find` command by checking out the man file
    on it. This can be done by executing the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看有关`find`命令的man文件来了解更多信息。这可以通过执行以下命令来完成：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This was discussed in the *Getting help from the man pages* section earlier
    in this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这在本章的*从man页面获取帮助*部分中已经讨论过。
- en: 'Moving on, the first three switches, namely, `-H`, `-L`, and `–P`, all control
    the way symbolic links are treated. The following list tells what they do:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，前三个开关，即`-H`，`-L`和`-P`，都控制符号链接的处理方式。以下列表告诉它们的作用：
- en: '`-H`: This tells `find` not to follow symbolic links. Symbolic links will be
    treated as normal files and will not resolve them to their targets. Putting it
    simply, if a directory contains a symbolic link, the symbolic link will be treated
    as any other file. This does not affect symbolic links that form part of the selection
    criteria; these will be resolved.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-H`：这告诉`find`不要跟随符号链接。符号链接将被视为普通文件，不会将其解析为其目标。简单地说，如果目录包含符号链接，则符号链接将被视为任何其他文件。这不会影响作为选择标准一部分的符号链接；这些将被解析。'
- en: '`-L`: This forces `find` to follow symbolic links in the directories being
    processed.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-L`：这会强制`find`跟随正在处理的目录中的符号链接。'
- en: '`-P`: This forces `find` to treat symbolic links as normal files. If a symbolic
    link is encountered during execution, `find` will inspect the properties of the
    symbolic link itself and not its target.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`：这会强制`find`将符号链接视为普通文件。如果在执行过程中遇到符号链接，`find`将检查符号链接本身的属性，而不是其目标。'
- en: The `–D` switch is used to allow `find` to print debug information if you need
    to know a little about what `find` is up to while it's searching for the files
    you want. `-0level` controls how `find` optimizes tests and it also allows you
    to reorder some tests. The `level` part can be specified as any number between
    0 and 3 (inclusive).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D`开关用于允许`find`在搜索所需文件时打印调试信息，如果您需要了解`find`正在进行的操作。`-0level`控制`find`如何优化测试，还允许您重新排序一些测试。`level`部分可以指定为0到3之间的任何数字（包括0和3）。'
- en: The `[path...]` part of the argument is used to tell find where to look for
    files. You can also use the `.` and `..` shorthands to specify the current and
    directory one level up respectively, as with the `cd` command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 参数中的`[path...]`部分用于告诉`find`在哪里查找文件。您还可以使用`.`和`..`的简写来指定当前目录和上一级目录，就像`cd`命令一样。
- en: 'The next argument, or rather group of arguments, is quite an important one:
    the `[expression]`. It consists of all the arguments that control the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数，或者说一组参数，是非常重要的：`[expression]`。它包括控制以下内容的所有参数：
- en: '**Options**: This tells what kind of files `find` should look for'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：这告诉`find`应该寻找什么类型的文件'
- en: '**Tests**: This tells how to identify the files it is looking for'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：这告诉如何识别它正在寻找的文件'
- en: '**Actions**: This tells what `find` should do with the files once they are
    found'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：这告诉`find`在找到文件后应该做什么'
- en: 'The following is the structural breakdown of the `find` expression:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`find`表达式的结构分解：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The previous code only serves as information about the structure of the expression,
    to let you know which options go where. Many of the switches for each section
    have been omitted for brevity. The `:=` characters mean that whatever is on the
    left-hand side is defined by whatever is defined on the right-hand side.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码仅用作有关表达式结构的信息，以便让您知道哪些选项放在哪里。为简洁起见，每个部分的许多开关都已被省略。`:=`字符意味着左侧的任何内容都由右侧定义。
- en: So now that you know where everything goes, let's look at what some of these
    arguments do. The `find` command has quite a number of very powerful options and
    operational modes, and one could quite literally write an entire book about `find`
    itself. So to make sure you don't get short changed—buying a book about "command
    line hacking" and instead learning only about `find`—we will only discuss some
    of the most common options and arguments penetration testers, system administrators,
    and developers use. The rest of the `find` command's power can be learned from
    the Linux manual files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道所有内容的位置，让我们看看其中一些参数的作用。`find`命令具有许多非常强大的选项和操作模式，一个人可以完全写一本关于`find`本身的书。因此，为了确保您不会因为购买一本关于“命令行黑客”的书而只了解`find`，我们将仅讨论一些最常见的选项和参数，渗透测试人员、系统管理员和开发人员使用。`find`命令的其余功能可以从Linux手册文件中学习。
- en: The following is a summary of some of the `find` command's possible arguments
    for options, tests, and actions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`find`命令可能的选项、测试和操作的摘要。
- en: Directory traversal options
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录遍历选项
- en: 'The following are some of the options arguments you can use with `find`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以与`find`一起使用的一些选项参数：
- en: '`-maxdepth n`: This specifies that tests must only be applied to entries in
    directories at most `n` levels below the current directory. This option is useful
    if you''re searching through directories that have a similar structure. For instance,
    if each directory below the one you''re searching has something like a `lib` directory
    that contains uninteresting files, you can skip all such directories by specifying
    this option.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-maxdepth n`：这指定测试必须仅应用于当前目录下最多*n*级的目录中的条目。如果你正在搜索具有类似结构的目录，这个选项很有用。例如，如果你正在搜索的每个目录下都有一个类似`lib`目录，其中包含不感兴趣的文件，你可以通过指定这个选项来跳过所有这样的目录。'
- en: '`-mindepth n`: This specifies that tests should only be applied to files at
    depth of at least `n` directories lower than the specified path.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-mindepth n`：这指定测试应该仅应用于深度至少为*n*的目录低于指定路径的文件。'
- en: '`-daystart`: This forces any `–amin`, `-atime`, `-cmin`, `-ctime`, or equivalent
    time-related tests to use the time starting from the beginning of the current
    day, rather than 24 hours ago—as is the default behavior.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-daystart`：这会强制任何`-amin`、`-atime`、`-cmin`、`-ctime`或等效的与时间相关的测试使用从当前日期开始的时间，而不是24小时前的时间，这是默认行为。'
- en: '`-mount`: This forbids `find` from traveling into other filesystems.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-mount`：这禁止`find`进入其他文件系统。'
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `find` command allows you to specify numeric arguments using convenient
    shorthands to indicate an "at least" or "at most" type comparison with the specified
    time:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`命令允许你使用方便的简写来指示使用指定时间进行“至少”或“至多”类型的比较的数值参数：'
- en: '`+n`: This indicates the specified argument is to be compared as greater than,
    or at least `n`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+n`：这表示指定的参数要比*n*大，或至少是*n*'
- en: '`-n`: This indicates the specified argument is to be compared as less than
    or at most `n`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`：这表示指定的参数要比*n*小，或至多是*n*'
- en: '`n`: This forces find to compare `n` as is, and the attribute must have the
    exact value of `n`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：这会强制find将`n`作为原样比较，属性必须具有精确的值`n`'
- en: File testing options
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件测试选项
- en: 'Tests are applied to a file and either return `true` or `false`: either the
    file being tested has the desired attribute or it doesn''t. More than one test
    can also be supplied, in which case a logical combination—which can also be specified—is
    applied. By default, if no Boolean is supplied to combined to tests, a logical
    AND is assumed. This means both tests must be true for the file to be *found*
    or *reported*. The following are some of the file testing options:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 测试被应用于一个文件，要么返回`true`，要么返回`false`：要么被测试的文件具有所需的属性，要么没有。也可以提供多个测试，这种情况下将应用逻辑组合，也可以指定。默认情况下，如果没有提供布尔值来组合测试，将假定逻辑AND。这意味着文件必须同时满足两个测试才能被*找到*或*报告*。以下是一些文件测试选项：
- en: '`-amin n`: This specifies that the last access time of the file should be *n*
    minutes ago. For example:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-amin n`：这指定文件的最后访问时间应该是*n*分钟前。例如：'
- en: '`-amin 20`: This means the file must have been accessed exactly 20 minutes
    ago'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-amin 20`：这意味着文件必须在20分钟前被访问过'
- en: '`-amin +35`: This means the file must have been accessed at most 35 minutes
    ago'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-amin +35`：这意味着文件最多在35分钟前被访问过'
- en: '`-atime n`: This specifies that the file should have been access *n*24* hours
    ago, meaning *n* days. Any fractional part of this number is ignored.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-atime n`：这指定文件应该在*n*24*小时前被访问，也就是*n*天。这个数字的小数部分将被忽略。'
- en: '`-mmin n`: This specifies that the file should have been modified *n* minutes
    ago.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-mmin n`：这指定文件应该在*n*分钟前被修改。'
- en: '`-mtime n`: This is the same as `–atime`, except it matches against the files
    modified time.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-mtime n`：这与`-atime`相同，只是匹配文件的修改时间。'
- en: '`-executable | -readable | -writable`: This matches any file that has access
    rights indicating that the file is executable, readable, or writable, respectively.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-executable | -readable | -writable`：这匹配任何具有访问权限的文件，表明文件是可执行的、可读的或可写的。'
- en: '`-perm`: This mode specifies that the file group should be name. The `–perm`
    option offers a myriad of different ways to specify the access mode being tested,
    here''s how it works.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-perm`：这个模式指定文件组应该是名称。`-perm`选项提供了许多不同的方式来指定正在测试的访问模式，下面是它的工作原理。'
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The access mode bits can be prefixed with anyone of the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 访问模式位可以以以下任何一种为前缀：
- en: '`mode`: This means no prefix and the mode must be matched exactly.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`：这意味着没有前缀，模式必须完全匹配。'
- en: '`-mode`: This means the file''s mode must have at least the specified bits
    set. This will match files with other bits set as long as the specified bits are
    set as well.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-mode`：这意味着文件的模式必须至少设置了指定的位。这将匹配具有其他位设置的文件，只要指定的位也设置了。'
- en: '`/mode`: This means that any of the specified bits must be set for the file.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/mode`：这意味着文件必须设置任何指定的位。'
- en: The mode itself can also be specified in two different ways, symbolically using
    characters to indicate user types and access modes or the octal decimal mode specification.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 模式本身也可以用两种不同的方式来指定，一种是使用字符来表示用户类型和访问模式，另一种是使用八进制十进制模式规范。
- en: '`-iname nAmE`: This specifies that the name of the file should match `nAmE`
    if the case is ignored; in other words, case-insensitive name matching.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-iname nAmE`：这指定文件的名称应该与`nAmE`匹配，如果忽略大小写；换句话说，是不区分大小写的名称匹配。'
- en: '`-regex pattern`: This matches the specified pattern as a regular expression
    against the file''s pathname. Your regular expression must describe the entire
    pathname.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-regex pattern`：这将指定的模式与文件的路径名作为正则表达式进行匹配。你的正则表达式必须描述整个路径名。'
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Regular expressions are merely ways to describe a set of strings with a specified
    number of properties in common. If you want to describe a string, you must be
    able to detail all the properties of the string from beginning to the end. If
    you don't describe a single character in some or other way, the regular expression
    won't match!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式只是描述具有指定数量共同属性的一组字符串的方式。如果你想描述一个字符串，你必须能够从头到尾详细说明字符串的所有属性。如果你没有以某种方式描述单个字符，正则表达式就不会匹配！
- en: Regular expression are in themselves a language, for instance, you could write
    a regular expressions to describe regular expressions! This means you will need
    to know how to speak this language in order to use regular expressions properly.
    To find out how to do this, see the *Further reading* section at the end of this
    chapter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式本身就是一种语言，例如，您可以编写一个正则表达式来描述正则表达式！这意味着您需要知道如何使用这种语言才能正确使用正则表达式。要了解如何做到这一点，请参阅本章末尾的*进一步阅读*部分。
- en: 'The following are a few simple examples of the `–regex` option''s usage:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`-regex`选项使用的一些简单示例：
- en: 'Find all the files directly under the `/etc/` directory that start with the
    letter `p` and end in anything using the following command:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找所有直接位于`/etc/`目录下以字母`p`开头并以任何内容结尾的文件，使用以下命令：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Find all the files on the filesystem that are called configuration, ignoring
    case, and accommodating abbreviations such as `confg`, `cnfg`, and `cnfig` using
    the following command:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找文件系统上称为配置的所有文件，忽略大小写，并使用以下命令适应缩写，如`confg`、`cnfg`和`cnfig`：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'See the following screenshot for a practical example of the previous command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图，以了解先前命令的实际示例：
- en: '![File testing options](img/5107OT_01_06.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![文件测试选项](img/5107OT_01_06.jpg)'
- en: 'The regular expression used here must describe the entire file''s path! For
    instance, consider the difference in results between the following two regular
    expressions:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的正则表达式必须描述整个文件的路径！例如，考虑以下两个正则表达式之间的结果差异：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Bash script comments**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bash脚本注释**'
- en: Any bash command or text fed to the bash interpreter and preceded by a hash
    character is considered a comment, and it will not interpreted.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 任何传递给bash解释器并在井号字符之前的bash命令或文本都被视为注释，并且不会被解释。
- en: File action options
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件操作选项
- en: 'The following are some of the action arguments you can use with `find`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以与`find`一起使用的一些操作参数：
- en: '`-delete`: This action forces `find` to delete any file for which the specified
    test returns `true`. For instance, consider the following command:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-delete`：此操作强制`find`删除指定测试返回`true`的任何文件。例如，考虑以下命令：'
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will find and delete anything reachable one level from the root
    that has a name such as 'virus'—case-insensitive.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将查找并删除从根目录可达的任何名称为'virus'的文件——不区分大小写。
- en: '`-exec`: This allows you to specify an arbitrary command to execute on all
    files that match.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-exec`：这允许您指定要在所有匹配文件上执行的任意命令。'
- en: The way this argument works is to build a command line—which is probably passed
    to some `exec*` type system call—using the results of the `find` operation for
    every result. The `find` command will use any argument after the `–exec` switch
    as a literal argument to the command being executed and any instance of the `{}`
    chars as a placeholder for the name of the file, until a `;` character is encountered.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个论点的工作方式是构建一个命令行——这可能会传递给一些`exec*`类型的系统调用——使用`find`操作的结果。`find`命令将使用`-exec`开关后的任何参数作为要执行的命令的文字参数，并将`{}`字符的任何实例作为文件名的占位符，直到遇到`;`字符为止。
- en: 'For instance, consider the following as the `–exec` argument:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下作为`-exec`参数：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The actual command line(s) that will be run will look something like the following
    command, since the only file that will match will be `/etc/passwd`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的命令行将看起来像以下命令，因为唯一匹配的文件将是`/etc/passwd`：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'See the following screenshot for a comparison of the `stat` and `find –exec`
    commands:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图，以比较`stat`和`find -exec`命令：
- en: '![File action options](img/5107OT_01_07.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![文件操作选项](img/5107OT_01_07.jpg)'
- en: '`-execdir`: This works the same way `–exec` does, except it will isolate execution
    of the specified command to the directory of the match file. This works great
    if you''d like to execute commands based on the contents of a directory that has
    certain files. For instance, you may want to edit all the `.bashrc` files for
    users that don''t have `.vimrc`, which is a configuration script for the VIM text
    editor. We will discuss more about the `.bashrc` code later.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-execdir`：这与`-exec`的工作方式相同，只是它将指定的命令的执行隔离到匹配文件的目录中。如果您想要根据具有某些文件的目录的内容执行命令，这将非常有效。例如，您可能希望编辑所有没有`.vimrc`的用户的`.bashrc`文件，这是VIM文本编辑器的配置脚本。我们稍后将讨论更多关于`.bashrc`代码的内容。'
- en: '`-print0`: This prints the file''s full name to standard output. This argument
    also has the added benefit of terminating filenames with a NULL character, or
    `0x0` character, so as to allow filenames to contain newlines. It also helps make
    sure that any program interpreting the output of find will be able to determine
    the separation between filenames, as they will be strictly separated by NULL characters.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-print0`：这将文件的完整名称打印到标准输出。此参数还具有终止文件名的NULL字符或`0x0`字符的附加好处，以便允许文件名包含换行符。它还有助于确保任何解释find输出的程序能够确定文件名之间的分隔，因为它们将严格由NULL字符分隔。'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: NULL characters are traditionally used to mark the end of a character string.
    The NULL character itself is represented at memory level as a `0` value so that
    compilers and operating systems can clearly recognize the delimitation between
    strings appearing in memory.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: NULL字符传统上用于标记字符字符串的结尾。NULL字符本身在内存级别表示为`0`值，以便编译器和操作系统可以清楚地识别内存中出现的字符串之间的分隔。
- en: '`-ls`: This lists the current file by executing `ls –dils`, and the output
    is printed to standard output. The `–dils` option makes sure that the directory
    entries are printed. If the matched file is a directory, then inode is printed,
    and the entry appears in the `ls` command''s long listing format as well as the
    size of the file.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ls`：这通过执行`ls -dils`列出当前文件，并将输出打印到标准输出。`-dils`选项确保打印目录条目。如果匹配的文件是目录，则打印inode，并且该条目以`ls`命令的长列表格式以及文件的大小出现。'
- en: There are a couple more actions you can specify. For the rest of them, please
    see the manual file on the `find` command, which you can access using the man
    `find` command.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他操作可以指定。有关其余操作，请参阅`find`命令的手册文件，您可以使用`man find`命令访问该手册文件。
- en: So as far as searching your filesystem for files, directories, or generally
    any other interesting things, that's pretty much it. The next fundamental skill
    you'll need to master is redirecting output from one command to another.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 所以就搜索文件系统中的文件、目录或其他任何有趣的东西而言，基本上就是这样。您需要掌握的下一个基本技能是将一个命令的输出重定向到另一个命令。
- en: Using I/O redirection
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用I/O重定向
- en: I/O redirection is one of the easiest things to master when it comes to the
    bash scripting. It's as simple as knowing where you want your input to go and
    where it's coming from. It may seem like this is a very interesting topic and
    you might not see why you need to know this, but redirecting output—if you truly
    get to understand what it's all about—will be what you're doing on your command
    line almost 80 percent of the time! It's essentially the one thing that allows
    you to combine different utilities and have them work together quite effectively
    on the command line in a compact and simple way. For instance, you may want to
    search through the output from `nmap` or `tcpdump` or a key-logger by feeding
    its output to another file or program to analyze.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到bash脚本时，I/O重定向是最容易掌握的事情之一。只需知道您希望将输入发送到何处以及它来自何处即可。这可能看起来是一个非常有趣的话题，您可能不明白为什么需要了解这一点，但是重定向输出——如果您真正理解了它的全部意义——将是您在命令行上几乎80%的时间所做的事情！这本质上是唯一的事情，它允许您以一种紧凑而简单的方式在命令行上组合不同的实用程序并使它们相当有效地一起工作。例如，您可能希望通过将其输出传递给另一个文件或程序来分析来自`nmap`、`tcpdump`或键盘记录器的输出。
- en: Redirecting output
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重定向输出
- en: To redirect the output of one program that is invoked from the command line
    into a file, all you need to do is add a `>` symbol at the end of the command
    line for the said program and proceed this with a filename.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要将从命令行调用的一个程序的输出重定向到文件中，您只需要在该程序的命令行末尾添加一个`>`符号，然后跟上文件名即可。
- en: 'For instance, using the most recent example, if you want to redirect the output
    of the `find` command to a file named something like `writeable-files.txt`, this
    is how it would be done:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用最近的示例，如果您想将`find`命令的输出重定向到名为`writeable-files.txt`的文件中，可以这样做：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There is one small detail about this kind of I/O redirection though, as with
    many of the common bash shorthands: there''s usually quite a bit going on under
    the hood. If used as demonstrated previously, the only output that will actually
    appear in the chosen file (for the previous example it is `writeable-files.txt`)
    would be the output actually printed to the standard output file that is commonly
    referred to as file descriptor 0, which is the default destination for normal
    output.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，关于这种I/O重定向有一个小细节，就像许多常见的bash简写一样：在幕后通常有很多事情发生。如果像之前演示的那样使用，实际上只有输出到通常称为文件描述符0的标准输出文件的输出才会出现在所选择的文件中（对于上一个示例，它是`writeable-files.txt`），这是正常输出的默认目的地。
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: File descriptors are constructs in operating systems that represent access to
    an actual section of the physical storage mechanism or a file. File descriptors
    are nothing more than numbers that are associated to other data structures managed
    by the kernel that represent open files. Each process has its own "private" set
    of file descriptors.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符是操作系统中的构造，表示对物理存储机制或文件的实际部分的访问。文件描述符只不过是与内核管理的表示打开文件的其他数据结构相关联的数字。每个进程都有自己的“私有”文件描述符集。
- en: Whenever you open a file using a text editor or generally perform any editing
    of a resource stored on a physical medium, a file descriptor representing the
    involved file is passed to the kernel through a system call. The kernel then uses
    this number to look up other details about the file in a data structure only the
    kernel should have access to.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您使用文本编辑器打开文件或通常对存储在物理介质上的资源进行任何编辑时，表示所涉及文件的文件描述符将通过系统调用传递给内核。然后内核使用这个数字来查找关于文件的其他细节，这些细节只有内核才能访问的数据结构中。
- en: The file descriptor's primary purpose is to help abstract and logically isolate
    details about the actual process involved with accessing the storage mechanism.
    After all, reading and writing to files is quite an essential operation to computer
    systems and it would be quite tedious—and error-prone—to do many things if writing
    to a file meant accommodating actions such as spinning/stopping the hard drive
    disk, interpreting different filesystems' organization, and handling read/write
    errors!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符的主要目的是帮助抽象和逻辑上隔离有关访问存储机制的实际过程的细节。毕竟，读写文件对计算机系统来说是非常重要的操作，如果写入文件意味着需要执行旋转/停止硬盘驱动器盘、解释不同文件系统的组织以及处理读/写错误等操作，那将会非常繁琐和容易出错！
- en: 'Output destined for or coming from any file descriptor can be redirected, provided
    that you have the correct access rights from your bash shell! Here''s the code
    to do that:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重定向任何文件描述符的输出，只要您从bash shell具有正确的访问权限！以下是执行此操作的代码：
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the previous command, `a` and `b` are both file descriptors. If `a` or `b`
    are not explicitly set, then they default to 1, which is standard output.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，`a`和`b`都是文件描述符。如果`a`或`b`没有明确设置，那么它们默认为1，即标准输出。
- en: 'What about output destined for the standard error file? How do you redirect
    that? Well as it turns out this is pretty easy too, and here''s the code to do
    it:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 那么输出到标准错误文件的输出怎么重定向呢？事实证明这也很简单，以下是执行此操作的代码：
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can see in the previous example, we specified the redirection symbol
    as `2>`, which simply means the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，我们指定了重定向符号`2>`，它的意思很简单：
- en: Redirect everything from file descriptor 1 to the file called `writeable-files.txt`.
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将文件描述符1的所有内容重定向到名为`writeable-files.txt`的文件中。
- en: 'You can also combine or bond the two standard output files, namely send the
    output of both input and output to a single file if there is anything interesting
    being printed to the standard error output. It is done using the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以组合或绑定两个标准输出文件，即如果标准错误输出中有任何有趣的内容被打印出来，可以将输入和输出的输出发送到单个文件中。使用以下命令完成：
- en: '[PRE25]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There''s also a simpler abbreviation for this and here''s what it looks like:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有一个更简单的缩写，看起来像这样：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This means the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以下内容：
- en: Redirect everything from file descriptor 1 to file descriptor 0 and then redirect
    everything from file descriptor 0 to `[output file]`.
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将所有从文件描述符1重定向到文件描述符0，然后将所有从文件描述符0重定向到`[output file]`。
- en: 'The previous redirection commands will all assume that the specified file does
    not exist; if it does, the output being directed will overwrite whatever is currently
    in the file. What will you do if you''d like to append text to a file? Well, the
    following command shows how that works:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的重定向命令都假定指定的文件不存在；如果存在，被重定向的输出将覆盖文件中当前的内容。如果您想要将文本附加到文件中，您会怎么做呢？以下命令展示了如何实现：
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As before, the `&`, `n`, and `m` notations are all optional parameters and work
    exactly the same as they did in previous examples.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，`&`、`n`和`m`标记都是可选参数，与以前的示例完全相同。
- en: Redirecting input
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重定向输入
- en: 'If you can redirect output, you should also be able to redirect input using
    the following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以重定向输出，那么您也应该能够使用以下命令重定向输入：
- en: '[PRE28]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Its pretty straightforward really: if `>` means redirect output, then `<` means
    redirect the ''output'' of the right operand, which from the perspective of the
    left operand is input.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上非常简单：如果`>`表示重定向输出，那么`<`表示重定向右操作数的“输出”，从左操作数的角度来看，这是输入。
- en: 'As with output redirection, you can also control which file descriptors you''d
    like to include in the redirection using the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 与输出重定向一样，您还可以使用以下命令控制要包括在重定向中的文件描述符：
- en: '[PRE29]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the previous command, `[n]` is the file descriptor number, as with output
    redirection. The following are a few examples you can test out on your terminal
    console:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，`[n]`是文件描述符号码，与输出重定向一样。以下是您可以在终端控制台上测试的一些示例：
- en: '`keylogs.txt < /dev/`tty``'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keylogs.txt < /dev/`tty``'
- en: The preceding command redirects all the input written to the terminal into the
    file called `keylogs.txt`. It achieves this by getting the current `tty` device
    associated to the terminal console using the `tty` command.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将所有写入终端的输入重定向到名为`keylogs.txt`的文件中。它通过使用`tty`命令获取与终端控制台关联的当前`tty`设备来实现这一点。
- en: '`wc –l < /etc/passwd`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wc -l < /etc/passwd`'
- en: The preceding command redirects input from the `/etc/passwd` file that contains
    all the usernames and other user account-orientated details to the `wc` command,
    which is used to count lines, file sizes, and other file attributes. Using the
    `–l` switch causes the `wc` command to count all the lines, or more specifically
    all the new line characters it encounters, until an end of file (`EOF`) sentinel
    is reached.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将输入重定向到包含所有用户名和其他用户账户相关详细信息的`/etc/passwd`文件，以便使用`wc`命令来计算行数、文件大小和其他文件属性。使用`-l`开关会导致`wc`命令计算所有行，或者更具体地说，直到达到文件结束（`EOF`）标记为止，遇到的所有换行符。
- en: Using pipes
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管道
- en: All we've been discussing in this section is redirecting output command to another
    file; what about redirecting output from one command to another? Well that's exactly
    what the next section is for.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们讨论的所有内容都是将输出命令重定向到另一个文件；那么将一个命令的输出重定向到另一个命令呢？下一节正是为此而设。
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pipes are interprocess communication mechanisms, which are mechanisms that allow
    processes to communicate with one another, in operating systems that allow output
    from one process to be funneled from to another process as input. In other words,
    you can turn the standard output of one program into the standard input of another.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是进程间通信机制，允许进程在允许一个进程的输出被传送到另一个进程作为输入的操作系统中相互通信的机制。换句话说，您可以将一个程序的标准输出转换为另一个程序的标准输入。
- en: In fact, many pipes work exactly this way by duplicating file descriptor 0 for
    one process and allowing another process to write to it.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，许多管道的工作方式都是通过复制文件描述符0来为一个进程工作，并允许另一个进程向其写入。
- en: 'The following command shows how to use a pipe in bash speak:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何在bash中使用管道：
- en: '[PRE30]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Please note that this time the `|` character, referred to literally as a pipe
    if used this way, is an actual part of the command invocation. Of course, `[command
    line]` would be the command you would like to invoke. The pipe will feed output
    from the first command line as input to the second command line argument. You
    can actually specify as many pipes as you your machine will accommodate, which
    would look something like the following syntax:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次`|`字符，如果以这种方式使用，被称为管道，实际上是命令调用的实际部分。当然，`[command line]`将是您想要调用的命令。管道将把第一个命令行的输出作为第二个命令行参数的输入。您实际上可以指定尽可能多的管道，看起来会像以下语法：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following are a few examples:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '`cat /etc/passwd | wc –l`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat /etc/passwd | wc -l`'
- en: 'This is equivalent to the following:'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这相当于以下内容：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot shows the output of the previous commands:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了上一个命令的输出：
- en: '![Using pipes](img/5107OT_01_08.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![使用管道](img/5107OT_01_08.jpg)'
- en: 'Count the number of files in the operating system''s `root` directory using
    the following command:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令计算操作系统的`root`目录中的文件数：
- en: '[PRE33]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'List all available usernames using the following command:'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令列出所有可用的用户名：
- en: '[PRE34]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following screenshot shows the output of the previous command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一个命令的输出：
- en: '![Using pipes](img/5107OT_01_09.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![使用管道](img/5107OT_01_09.jpg)'
- en: 'List all the open services from an `nmap` scan using the following command:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令列出`nmap`扫描的所有开放服务：
- en: '[PRE35]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Getting to know grep
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解grep
- en: The **Global Regular Expression Print** (**grep**) utility is a staple for all
    command-line jockeys. The `grep` utility in its most basic functionality gives
    its users the ability to run regular expressions on a given input file or stream
    and prints the matching results. More advanced features of `grep` allow you to
    specify which attributes of the matching text you'd like to print, whether you'd
    like the output colorized, or even how many lines around the matching output you
    should print. It's packed with many very useful features, and once mastered they
    become an essential part of any penetration tester, developer, or system administrator's
    arsenal.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**全局正则表达式打印**（**grep**）实用程序是所有命令行专家的基本工具。`grep` 实用程序在其最基本的功能中使用户能够在给定的输入文件或流上运行正则表达式，并打印匹配的结果。`grep`
    的更高级功能允许您指定您想要打印的匹配文本的哪些属性，是否要对输出进行着色，甚至您应该打印匹配输出周围的多少行。它充满了许多非常有用的功能，一旦掌握，它们将成为任何渗透测试人员、开发人员或系统管理员工具箱的重要组成部分。'
- en: Tip
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To properly make use of `grep`, you will need at least basic understanding and
    practice with regular expressions. Regular expressions will not be covered in
    their entirety here, though simple examples and basic elements of regular expression
    language will be covered. For more extensive reading on regular expressions and
    how they work, see the *Further reading* section at the end of the chapter.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确使用 `grep`，您至少需要基本的理解和实践正则表达式。正则表达式不会在这里完全涵盖，但会涵盖简单的示例和正则表达式语言的基本元素。有关正则表达式及其工作原理的更广泛阅读，请参阅本章末尾的
    *进一步阅读* 部分。
- en: Regular expression language – a crash course
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式语言 - 速成课程
- en: Regular expressions are merely strings that describe a collection of strings
    using a special language—in formal language theory terms, any collection or set
    of strings is termed as language. Being able to wield this language to your disposal
    is an invaluable skill. It will help you do many things from static code source
    analysis, reverse engineering, malware fingerprinting and larger vulnerability
    assessment, and exploit development.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式只是描述使用特殊语言的字符串的集合 - 在形式语言理论术语中，任何字符串的集合或集合被称为语言。能够运用这种语言是一项无价的技能。它将帮助您从静态代码源分析、逆向工程、恶意软件指纹识别和更大的漏洞评估以及利用开发等许多方面。
- en: The regular expression language supported by `grep` is filled with useful shorthands
    to simplify the description of a set of common strings, for instance, describing
    a string consisting of any decimal number, any lowercase or uppercase alphabetic
    character or even any printable character. So given that any string or collection
    of strings must be composed of a collection of smaller strings, if you know how
    to match or describe any alphabetic character or any decimal number, you should
    be able to describe anything composed of characters from those character classes.
    A character class is simply a language composed of length 1 strings from a specific
    collection of characters.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep` 支持的正则表达式语言充满了有用的简写，以简化一组常见字符串的描述，例如，描述由任何十进制数、任何小写或大写字母字符或甚至任何可打印字符组成的字符串。因此，鉴于任何字符串或字符串集合必须由一组较小的字符串组成，如果您知道如何匹配或描述任何字母字符或任何十进制数，您应该能够描述由这些字符类中的字符组成的任何内容。字符类只是由特定字符集合中的长度为
    1 的字符串组成的语言。'
- en: 'First of all, we need to define some "control" characters. Given that you will
    be describing strings using other strings, there needs to be a way to designate
    special meaning to given characters or substrings in your regular expression.
    Otherwise, all you''d be able to do is compare one string to another, character
    by character. You can do that as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义一些 "控制" 字符。鉴于您将使用其他字符串描述字符串，需要一种方法来指定正则表达式中给定字符或子字符串的特殊含义。否则，您只能逐个字符地比较一个字符串与另一个字符串。您可以这样做：
- en: '`^`: The following regular expression must be matched at the beginning of a
    line, for example, `^this is the start of the line`.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^`: 以下正则表达式必须在行的开头匹配，例如，`^this is the start of the line`。'
- en: '`$`: The preceding regular expression must be matched at the end of a line,
    for example, `this is the end of the line$`.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`: 前面的正则表达式必须在行的末尾匹配，例如，`this is the end of the line$`。'
- en: '`[]`: The description of a character class, or a list of characters, is contained
    within the brackets, and strings that match contain characters in the specified
    list. Certain character classes can be described using shorthands. We will see
    some of them throughout the rest of the chapter.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[]`: 字符类的描述，或者字符列表，包含在方括号中，匹配的字符串包含指定列表中的字符。某些字符类可以使用简写来描述。我们将在本章的其余部分中看到其中一些。'
- en: '`()`: This logically groups regular expressions together.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`()`: 这将正则表达式逻辑分组在一起。'
- en: '|: This is a logical OR of two regular expressions, for instance, `([expression])
    | ([expression])`.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '|: 这是两个正则表达式的逻辑或，例如，`([expression]) | ([expression])`。'
- en: '`?`: This matches the preceding regular expression at least once. For example,
    `keith?` will match any string that either contains "keith" or doesn''t at all.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`: 这匹配前面的正则表达式至少一次。例如，`keith?` 将匹配包含 "keith" 或根本不包含的任何字符串。'
- en: '`+`: This matches the preceding regular expression at least once.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`: 这匹配前面的正则表达式至少一次。'
- en: '`{n}`: This matches the preceding regular expression exactly *n* times.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{n}`: 这匹配前面的正则表达式恰好 *n* 次。'
- en: '`{n,m}`: This matches the preceding regular expression at least *n* times and
    at most `m` times. For example `[0-9]{0,10}` will match any decimal number containing
    between 0 and 10 digits.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{n,m}`: 这匹配前面的正则表达式至少 *n* 次，最多 `m` 次。例如 `[0-9]{0,10}` 将匹配包含 0 到 10 位数字的任何十进制数。'
- en: 'The following is a small collection of some of the shorthands `grep` supports
    as an extended regular expression language:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `grep` 支持的一些简写的小集合，作为扩展的正则表达式语言：
- en: '`[:alnum:]`: This matches alphanumeric characters, any decimal digit, or alphabetical
    character'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:alnum:]`: 这匹配字母数字字符，任何十进制数字，或字母字符'
- en: '`[:alpha:]`: This matches strictly alphabetical characters a-z'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:alpha:]`: 这严格匹配字母字符a-z'
- en: '`[:digit:]`: This strictly matches decimal numbers 0-9'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:digit:]`: 这严格匹配十进制数字0-9'
- en: '`[:punt:]`: Any punctuation character will be matched'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:punt:]`: 任何标点符号都将被匹配'
- en: There are a number of other character class shorthands available; see the manual
    page for `grep` for more information.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他字符类速记可用；有关更多信息，请参阅`grep`的man页面。
- en: Regular expressions are simply collections of these control characters and character
    classes. For example, you could combine them in any way you like as long as all
    the brackets, braces, and parenthesis are balanced.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式只是这些控制字符和字符类的集合。例如，只要所有的括号、大括号和括号都是平衡的，您可以以任何您喜欢的方式组合它们。
- en: 'Now that you have some basic background in regular expressions, let''s look
    at the `grep` utility''s usage specification using the following command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对正则表达式有了一些基本背景，让我们看一下`grep`实用程序的使用规范，使用以下命令：
- en: '[PRE36]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Please remember this is a mere summary of the structure of the command and does
    not mention all possible options. For more information about the `grep` utility's
    regular expression syntax, please see the *Further reading* section at the end
    of this chapter, as well as the man page for Perl regular expressions, which can
    be reached by executing the command `man 3 pcresyntax`. You can also learn more
    about regular expression by checking out the man page on POSIX.2 regular expressions,
    Kali Linux might not have the man page mentioned in the previous command. You
    can get the regex manual page using the command `man 7 regex`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这只是对命令结构的简单总结，并未提及所有可能的选项。有关`grep`实用程序的正则表达式语法的更多信息，请参阅本章末尾的*进一步阅读*部分，以及Perl正则表达式的man页面，可以通过执行命令`man
    3 pcresyntax`来查看。您还可以通过查看POSIX.2正则表达式的man页面来了解更多关于正则表达式的信息，Kali Linux可能没有前面命令中提到的man页面。您可以使用命令`man
    7 regex`获取正则表达式手册页。
- en: Building on this specification, let's look at some of the options in detail.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在此规范的基础上，让我们详细了解一些选项。
- en: Regular expression matcher selection options
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式匹配选择选项
- en: Part of the invocation of `grep` requires you to let `grep` know what method
    you would like to use to match your pattern with the contents of the file. This
    is because `grep` is capable of more than just running regular expressions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`grep`的一部分需要让`grep`知道您想要使用什么方法来将模式与文件内容进行匹配。这是因为`grep`不仅能够运行正则表达式。
- en: 'The following are the options for matcher selection:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是匹配选择的选项：
- en: '`-E` or `–-extended-regexp`: This interprets the `PATTERN` argument as an extended
    regular expression'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-E`或`--extended-regexp`: 这将解释`PATTERN`参数作为扩展的正则表达式'
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Extended regular expression language is pretty much what everyone uses today,
    but this wasn't always the case. Way back in Unix's heyday, regular expressions
    were represented using something called **POSIX** (**Portable Operating System
    Interface**) basic regular expression language. Some years later, Unix developers
    added some functionality to the regular expression language and a new standard
    for representing this new, more shorthand-laden language was created called the
    **Extended Regular Expression** (**ERE**) language standard.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的正则表达式语言几乎是今天每个人都在使用的，但这并不总是这样。在Unix的鼎盛时期，正则表达式是使用一种称为**POSIX**（**可移植操作系统接口**）基本正则表达式语言表示的。几年后，Unix开发人员为正则表达式语言添加了一些功能，并创建了一种新的标准来表示这种新的、更简短的语言，称为**扩展正则表达式**（**ERE**）语言标准。
- en: '`-F or –-fixed-strings`: This tells `grep` to interpret `PATTERN` as a list
    of fixed strings separated by newlines to look for in the given file list'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-F或--fixed-strings`: 这告诉`grep`将`PATTERN`解释为由换行符分隔的固定字符串列表，以便在给定文件列表中查找'
- en: 'For example, the following screenshot shows the output of this command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下屏幕截图显示了此命令的输出：
- en: '![Regular expression matcher selection options](img/5107OT_01_10.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![正则表达式匹配选择选项](img/5107OT_01_10.jpg)'
- en: '-`P or –-perl-regexp`: This allows `grep` to interpret `PATTERN` as a Perl
    regular expression'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-`P`或`--perl-regexp`: 这允许`grep`将`PATTERN`解释为Perl正则表达式'
- en: Regular expression matching control options
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式匹配控制选项
- en: The following options allow you to control a little about how the data being
    matched should be treated, whether you'd like to match whole words in your input
    or whole lines or funnel in a number of patterns from a given file.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项允许您控制数据匹配的处理方式，无论您想要匹配输入中的整个单词、整行或从给定文件中引入多个模式。
- en: 'The following are the options for matching control:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是匹配控制的选项：
- en: '`-e PATTERN` or `–-regexp=PATTERN`: This forces the `PATTERN` argument supplied
    here to be used as `PATTERN` to match against the input files.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e PATTERN`或`--regexp=PATTERN`: 这将强制使用此处提供的`PATTERN`参数作为匹配输入文件的`PATTERN`。'
- en: 'The following command is an example of the usage for the preceding option:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令是前述选项的用法示例：
- en: '[PRE37]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding example matches the line that starts with the word `root`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例匹配以单词`root`开头的行。
- en: '`-f` or `–-file=FILE`: This grabs a list of patterns to use from the supplied
    file.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`或`--file=FILE`: 这从提供的文件中获取要使用的模式列表。'
- en: 'For example, consider a file containing the following text:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个包含以下文本的文件：
- en: '[PRE38]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This file can be used with the `–f` option as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件可以与`-f`选项一起使用，如下所示：
- en: '[PRE39]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`-v` or `–-invert-match`: This inverts the matching, which means select or
    report only file contents that don''t match.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`或`--invert-match`: 这反转匹配，意味着只选择或报告不匹配的文件内容。'
- en: '`-w` or `–-word-regexp`: This report lines from the input files that have whole
    matching words.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-w`或`--word-regexp`: 报告输入文件中具有完全匹配单词的行。'
- en: 'For example, see the output of the following commands:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看以下命令的输出：
- en: '[PRE40]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see from the previous output, and maybe some of your own testing,
    the first two runs did not describe a complete word of the contents of the `/etc/passwd`
    file. However, the last run does; so it's the only one that actually produces
    output.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的输出和您自己的一些测试中看到的，前两次运行没有描述`/etc/passwd`文件内容的完整单词。然而，最后一次运行做到了；所以它是唯一实际产生输出的运行。
- en: '`-x` or `–-line-regexp`: This reports or prints lines from the input file that
    have whole lines matching.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`或`–-line-regexp`：这会报告或打印输入文件中整行匹配的行。'
- en: Output control options
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出控制选项
- en: The `grep` utility also allows you to control how it reports information about
    successful matches. You can also specify which attributes of the matches to report
    on.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`实用程序还允许您控制其报告有关成功匹配的信息的方式。您还可以指定要报告的匹配的属性。'
- en: 'The following are the some of the output control options:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些输出控制选项：
- en: '`-c` or `–-count`: This doesn''t report on the matched data, instead prints
    the number of matches.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`或`–-count`：这不会报告匹配的数据，而是打印匹配的次数。'
- en: '`-L` or `–-files-without-match`: This prints only the names of files that contain
    no matches.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-L`或`–-files-without-match`：这只会打印不包含匹配的文件名。'
- en: '`-l` or `–-files-with-matches`: This prints only the names of files that contain
    matches.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`或`–-files-with-matches`：这只会打印包含匹配的文件名。'
- en: '`-m` or `–max-count=NUM`: This stops processing input after `NUM` number of
    matches. If input comes from standard input or using an input redirection, the
    processing will stop after `NUM` lines are read.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`或`–max-count=NUM`：这会在`NUM`次匹配后停止处理输入。如果输入来自标准输入或使用输入重定向，则在读取`NUM`行后处理将停止。'
- en: '`-o` or `–only-matching`: This prints the matching parts of the input data,
    each on a separate line.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`或`–only-matching`：这会打印输入数据的匹配部分，每个部分占一行。'
- en: File selection options
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件选择选项
- en: The following options allow you to specify where the input files should come
    from and also control some of the attributes of the input data as a whole.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项允许您指定输入文件的来源，并控制整体输入数据的一些属性。
- en: 'The following are the options for the file selection:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 文件选择的选项如下：
- en: '`-a` or `–-text`: This forces binary files to be processed as text. This allows
    you to operate `grep` much like the strings utility, which returns all the printable
    strings from a given file with the added benefit of being able to match the strings
    using regular expressions.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`或`–-text`：这会强制处理二进制文件作为文本。这使您可以像使用strings实用程序一样操作`grep`，它返回给定文件中的所有可打印字符串，并且能够使用正则表达式匹配这些字符串。'
- en: 'For example:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE41]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The which command**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**which命令**'
- en: The `which` command prints the canonical file path of the supplied argument.
    Here, it appears in back-ticks so that the bash shell will substitute this command
    for the value it produces, which effectively means `grep` will be running through
    the binary for the `echo` command.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`which`命令会打印所提供参数的规范文件路径。在这里，它出现在反引号中，这样bash shell将用它产生的值替换这个命令，这实际上意味着`grep`将通过`echo`命令的二进制文件运行。'
- en: 'The output of the previous command is as shown in the following screenshot:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令的输出如下截图所示：
- en: '![File selection options](img/5107OT_01_11.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![文件选择选项](img/5107OT_01_11.jpg)'
- en: '`--binary-files=TYPE`: This checks if a file supplied as input is a binary
    file. If yes, then it treats the file as the specified `TYPE`.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--binary-files=TYPE`：这会检查输入的文件是否是二进制文件。如果是，它会将文件视为指定的`TYPE`。'
- en: '`-D ACTION` or `–-devices=ACTION`: This processes the input file as a device
    and uses the `ACTION` parameter to siphon input from it. By default, `ACTION`
    is read.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-D ACTION`或`–-devices=ACTION`：这会将输入文件处理为设备，并使用`ACTION`参数从中提取输入。默认情况下，`ACTION`是读取。'
- en: '`--exclude=GLOB`: This skips any files whose name matches GLOB; wild cards
    are honored in the matching.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--exclude=GLOB`：这会跳过与GLOB匹配的任何文件；通配符在匹配中受到尊重。'
- en: '`-R`, `–r`, or `–-recursive`: This processes all the reachable file entries
    in nested directories from the current directory.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-R`，`–r`或`–-recursive`：这会处理当前目录中嵌套目录中的所有可达文件条目。'
- en: Well that's pretty much it as far as `grep` goes. Hopefully, you'll be able
    to make use of these options to find what you're looking for. It takes a little
    practice and getting used to but once mastered, `grep` is an invaluable utility.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是`grep`的全部内容了。希望您能够利用这些选项找到您要找的内容。这需要一些练习和适应，但一旦掌握，`grep`就是一个非常有价值的实用程序。
- en: Summary
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got to know some of the basics of the bash shell. We covered
    man pages, a very important resource for everyone, from seasoned system administrators
    and kernel developers to newbie penetration testers and security engineers. We
    also use powerful and efficient ways to find certain files using very descriptive
    attributes and regular expressions. We covered another very important tool called
    `grep`, which allowed us to make effective use of regular expressions to find
    files based on their content and also pinpoint them in fine detail.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了bash shell的一些基础知识。我们介绍了man页面，这是一个非常重要的资源，适用于经验丰富的系统管理员和内核开发人员，也适用于新手渗透测试人员和安全工程师。我们还使用了强大而高效的方法，通过非常描述性的属性和正则表达式来查找特定文件。我们介绍了另一个非常重要的工具叫做`grep`，它允许我们有效地使用正则表达式来查找文件的内容，并以细节的方式定位它们。
- en: The next chapter will focus on customizing your bash terminal and enabling powerful
    features to make using your terminal a more information-rich and convenient experience.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍如何自定义您的bash终端，并启用强大的功能，使使用终端更加丰富和便利。
- en: Further reading
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following references were accessed by the author on April 22, 2014:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在2014年4月22日访问了以下参考资料：
- en: Linux Manual Pages at [http://www.tldp.org/manpages/man.html](http://www.tldp.org/manpages/man.html)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux手册页面[http://www.tldp.org/manpages/man.html](http://www.tldp.org/manpages/man.html)
- en: Linux man pages online [http://man7.org/linux/man-pages/index.html](http://man7.org/linux/man-pages/index.html)
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux man页面在线[http://man7.org/linux/man-pages/index.html](http://man7.org/linux/man-pages/index.html)
- en: 15 Practical Grep Command Examples at [http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/](http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/)
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15个实用的grep命令示例在[http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/](http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/)
- en: Examples using grep at [http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_02.html)
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用grep的示例在[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_02.html)
- en: Regular expressions at [http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_01.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_01.html)
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式在[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_01.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_01.html)
- en: Linux Programmer's Manual, Man 1 intro at [http://www.man7.org/linux/man-pages/man1/intro.1.html](http://www.man7.org/linux/man-pages/man1/intro.1.html)
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux程序员手册，Man 1介绍在[http://www.man7.org/linux/man-pages/man1/intro.1.html](http://www.man7.org/linux/man-pages/man1/intro.1.html)
- en: Linux Programmer's Manual, Man 2 intro at [http://www.man7.org/linux/man-pages/man1/intro.2.html](http://www.man7.org/linux/man-pages/man1/intro.2.html)
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux程序员手册，Man 2介绍在[http://www.man7.org/linux/man-pages/man1/intro.2.html](http://www.man7.org/linux/man-pages/man1/intro.2.html)
