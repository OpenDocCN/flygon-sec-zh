- en: Attacking Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击Web应用程序
- en: Web applications are the most targeted methods of compromise. Today, we have
    web applications that provide e-commerce services, a prized target for attackers
    since they can obtain details such as credit cards and personal identifiable information.
    Businesses that have an internet presence are bound to have a web application
    that is accessible by the public. Web penetration testing demands both skill and
    time, and understanding the components of a web application, the types of attacks,
    and the tools that can be used will help you to focus on the exploitable vulnerabilities
    within a short time frame.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序是最受攻击的妥协方法。今天，我们有提供电子商务服务的Web应用程序，这是攻击者的目标，因为他们可以获取信用卡和个人可识别信息等详细信息。拥有互联网存在的企业必定拥有一个可以被公众访问的Web应用程序。Web渗透测试需要技能和时间，了解Web应用程序的组件、攻击类型和可以使用的工具将帮助您在短时间内专注于可利用的漏洞。
- en: In this chapter, you will learn about web applications and their components.
    You will learn about the different types of web application security testing and
    how penetration testing fits in. You will also understand the basics of the HTTP
    protocol and how various aspects of it will be of interest during penetration
    testing. Finally, you will learn about some of the common web application attacks
    and how to perform various attacks using intuition by leveraging some of the tools
    within Kali Linux.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关Web应用程序及其组件的知识。您将了解不同类型的Web应用程序安全测试以及渗透测试的相关知识。您还将了解HTTP协议的基础知识，以及在渗透测试过程中各个方面的相关内容。最后，您将学习一些常见的Web应用程序攻击以及如何利用Kali
    Linux中的一些工具通过直觉执行各种攻击。
- en: 'As you progress through this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本章的进行，您将学习以下主题：
- en: Preparing your environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备您的环境
- en: Types of web application security testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序安全测试的类型
- en: The components of a web application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序的组件
- en: Understanding the HTTP protocol
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解HTTP协议
- en: Common web application attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的Web应用程序攻击
- en: Attacking web applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击Web应用程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples and instructions in this chapter, please
    ensure that you have the following technical requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的示例和说明，请确保您具备以下技术要求：
- en: Kali Linux 2019.1
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux 2019.1
- en: Metasploitable 2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploitable 2
- en: Preparing your environment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备您的环境
- en: In this chapter, we will work with various web applications and tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用各种Web应用程序和工具。
- en: In the previous chapter, you learned about using Burp Suite; we will leverage
    some parts of Burp Suite in this chapter, too.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何使用Burp Suite；在本章中，我们也将利用Burp Suite的一些部分。
- en: Please take note of your Metasploitable 2 virtual machine IP address. We will
    actively use this during various parts of this chapter. To recap, the IP address
    can be obtained by logging in to the virtual machine (the default username and
    password is `msfadmin`) and typing in the `ifconfig` command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意您的Metasploitable 2虚拟机的IP地址。在本章的各个部分，我们将积极使用这个IP地址。回顾一下，可以通过登录虚拟机（默认用户名和密码为`msfadmin`）并输入`ifconfig`命令来获取IP地址。
- en: Types of web application security testing
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序安全测试的类型
- en: 'There are three types of web application testing, and these are defined as
    follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的Web应用程序测试，定义如下：
- en: '**Dynamic testing**: This type of testing doesn''t require the source code
    of the web application. The aim is to find vulnerabilities that could be exploited
    by an attacker from an untrusted location such as the internet.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态测试**：这种测试不需要Web应用程序的源代码。其目的是查找可能被攻击者从不受信任的位置（如互联网）利用的漏洞。'
- en: '**Static testing**: This type of testing uses the web application''s source
    code. It works by looking for vulnerabilities from within the web application
    as opposed to trying to breach the web application from an untrusted location.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态测试**：这种测试使用Web应用程序的源代码。它通过从Web应用程序内部寻找漏洞来工作，而不是试图从不受信任的位置攻击Web应用程序。'
- en: '**Penetration testing**: This type of testing is what we will focus on in this
    chapter. It entails using the human element to imitate how an attacker might exploit
    a web application. It makes use of skill, intuition, and a variety of tools.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渗透测试**：这是本章将重点关注的测试类型。它涉及使用人为因素来模拟攻击者可能如何利用Web应用程序。它利用技能、直觉和各种工具。'
- en: The components of a web application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序的组件
- en: Web applications have evolved from being static web pages to complex applications
    that provide a multitude of functionality. You can think of a web application
    as a normal computer application that simply operates over the internet.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序已经从静态网页发展为提供多种功能的复杂应用程序。您可以将Web应用程序视为一个简单地在互联网上运行的普通计算机应用程序。
- en: In this section, we will discuss the various components of web applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论Web应用程序的各个组件。
- en: Web application architecture
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序架构
- en: 'Web application architecture is the interaction between various components.
    The three primary types of web application architecture are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序架构是各种组件之间的交互。Web应用程序架构的三种主要类型如下：
- en: '**Single-Page Applications (SPA)**: These are common now, with **minimalism**
    being the in thing for web applications. These work by dynamically updating content
    to the current page. **Asynchronous Javascript and XML** (**AJAX**) is used to
    provide the dynamic content. These types of applications are still vulnerable
    to attacks.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单页应用程序（SPA）**：这些现在很常见，**极简主义**是Web应用程序的潮流。它们通过动态更新内容到当前页面来工作。**异步JavaScript和XML**（**AJAX**）用于提供动态内容。这些类型的应用程序仍然容易受到攻击。'
- en: '**Microservices**: These are lightweight and focus on a single function. Microservices
    leverage various coding languages, and so there are vulnerabilities in this architecture.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：这些是轻量级的，专注于单一功能。微服务利用各种编程语言，因此在这种架构中存在漏洞。'
- en: '**Serverless**: This makes use of cloud providers that handle the server and
    infrastructure management. This allows applications to work without worrying about
    the infrastructure. Vulnerabilities such as broken authentication, inadequate
    logging, insecure application storage, and more exist here.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无服务器**：这利用处理服务器和基础架构管理的云提供商。这使应用程序可以在不必担心基础架构的情况下工作。这里存在诸如破损的身份验证、不充分的日志记录、不安全的应用程序存储等漏洞。'
- en: In all three models, there are security risks that exist. Therefore, the need
    for penetration testing exists no matter what model is being used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三种模型中，存在安全风险。因此，无论使用哪种模型，都需要进行渗透测试。
- en: Web application languages
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序语言
- en: Since web applications are so diverse and dynamic, there are several languages
    that are used for writing web applications. These languages can sometimes interact
    in ways that can have serious implications on the security of the overall web
    application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Web应用程序如此多样和动态，有几种语言用于编写Web应用程序。这些语言有时会以可能严重影响整个Web应用程序安全性的方式进行交互。
- en: These commonly used languages are Python, Ruby, and Java. Let's look at some
    of the caveats of these languages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些常用的语言是Python、Ruby和Java。让我们看看这些语言的一些注意事项。
- en: Python
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python
- en: Python is a language that is used often due to its simplicity and power. It
    creates an ecosystem that works across many different applications that are not
    only related to web applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种经常使用的语言，因为它简单而强大。它创建了一个生态系统，可以在许多不仅与Web应用程序相关的不同应用程序中运行。
- en: Python makes use of a serialization mechanism known as **pickles**. Serialization
    is the process of creating data in a structure that can be stored and later restored
    to its original form. Using **pickles** allows an object to be converted into
    a byte stream and then converted back. Using pickles can be used for a variety
    of things, such as cookie values, and `auth` tokens.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Python使用一种称为**pickles**的序列化机制。序列化是创建可以存储并稍后恢复到其原始形式的数据的过程。使用**pickles**允许将对象转换为字节流，然后再转换回来。使用pickles可以用于各种事情，如cookie值和`auth`令牌。
- en: 'A sample pickle looks as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例pickle如下所示：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function is taking an `AuthToken`, which is base64 encoded, decoding it,
    and checking its value. Of course, this `AuthToken` can be decoded if it's intercepted
    by an attacker. Alternatively, the attacker could write an exploit to create a
    modified `AuthToken`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数正在接受一个base64编码的`AuthToken`，对其进行解码并检查其值。当然，如果被攻击者拦截，`AuthToken`可以被解码。或者，攻击者可以编写一个利用程序来创建修改后的`AuthToken`。
- en: This is just one aspect of a security flaw that web application developers might
    overlook.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Web应用程序开发人员可能忽视的安全漏洞的一个方面。
- en: Ruby
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby
- en: Ruby is a popular language that is used for web applications due to Ruby on
    Rails. Ruby on Rails is a framework that includes everything a developer would
    need to create a web application that leverages a database. The framework is free
    to use and the community actively contributes to it, which makes it a popular
    choice.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby是一种流行的语言，用于Web应用程序，因为Ruby on Rails。 Ruby on Rails是一个框架，包括开发人员创建利用数据库的Web应用程序所需的一切。该框架可免费使用，社区积极为其做出贡献，这使其成为一种受欢迎的选择。
- en: Ruby is also vulnerable to attacks, for example, vulnerabilities that use `string
    interpolation`. String interpolation allows you to substitute the result of Ruby
    code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby也容易受到攻击，例如使用`字符串插值`的漏洞。字符串插值允许您替换Ruby代码的结果。
- en: 'For example, the following code would write out `Hello User!` since anything
    defined within `#{}` will be evaluated:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将输出`Hello User!`，因为`#{}`中定义的任何内容都将被评估：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Modifying the field to `#{%x['ls']}` would trick the server into listing its
    directory structure.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 修改字段为`#{%x['ls']}`将欺骗服务器列出其目录结构。
- en: Since Ruby is used for the rapid deployment of web applications, there might
    be cases where vulnerabilities such as the one we've just discussed is present.
    There are many more exploits that can be leveraged by poor coding within Ruby.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ruby用于快速部署Web应用程序，可能会出现我们刚讨论过的漏洞。在Ruby中存在许多其他可以利用的漏洞，这些漏洞是由于Ruby内部的糟糕编码而产生的。
- en: Java
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java
- en: 'Java is a programming language that has been around for a long time. It is
    used extensively and not only in web applications. That being said, it is known
    for having security vulnerabilities. These vulnerabilities affect various aspects
    of the programming language, as well as applications that leverage it. To get
    an idea of the amount of vulnerabilities that exist within Java and how it spans
    multiple applications or operating systems, just perform a search on Rapid 7''s
    Vulnerability and Exploit database for **Java**. As shown in the following screenshot, the
    results are astonishing:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种存在已久的编程语言。它被广泛使用，不仅用于Web应用程序。也就是说，它以存在安全漏洞而闻名。这些漏洞影响编程语言的各个方面，以及利用它的应用程序。要了解Java中存在的漏洞数量以及它如何跨多个应用程序或操作系统，只需在Rapid
    7的漏洞和利用数据库中搜索**Java**。如下截图所示，结果令人震惊：
- en: '![](img/9db334e7-abc4-41c4-a04c-9d9cec836879.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9db334e7-abc4-41c4-a04c-9d9cec836879.png)'
- en: 'Figure 1: List of Java vulnerabilities that exist'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：存在的Java漏洞列表
- en: You can access the latest search results by going to [https://www.rapid7.com/db/?q=Java&type=nexpose](https://www.rapid7.com/db/?q=Java&type=nexpose).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://www.rapid7.com/db/?q=Java&type=nexpose](https://www.rapid7.com/db/?q=Java&type=nexpose)来获取最新的搜索结果。
- en: There are a lot more web application languages that exist today, and none of
    them are without vulnerabilities. When performing a penetration test, identifying
    the underlying programming language will help you to focus on the vulnerabilities
    that can exist for it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 今天存在许多其他Web应用程序语言，没有一种是没有漏洞的。在进行渗透测试时，识别基础编程语言将帮助您专注于可能存在的漏洞。
- en: Understanding the HTTP protocol
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解HTTP协议
- en: '**Hypertext Transfer Protocol** (**HTTP**) is a client-server protocol. The
    web browser is classified as the client, which makes requests to the server, who
    will provide a response to the request. By default, HTTP uses port `80`, but this
    port can be configured if desired.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本传输协议**（**HTTP**）是一种客户端-服务器协议。Web浏览器被归类为客户端，它向服务器发出请求，服务器将对请求进行响应。默认情况下，HTTP使用端口`80`，但如果需要，可以配置此端口。'
- en: 'HTTP is stateless, which means that the server doesn''t store any information
    related to the various users that make requests to it. For example, you can send
    multiple requests to a web application and they will be treated separately. HTTP
    is also a clear text protocol, and so any sensitive information that''s sent over
    HTTP can be sniffed using tools such as Wireshark:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是无状态的，这意味着服务器不会存储与向其发出请求的各个用户相关的任何信息。例如，您可以向Web应用程序发送多个请求，它们将被单独处理。HTTP也是明文协议，因此通过HTTP发送的任何敏感信息都可以使用诸如Wireshark之类的工具进行嗅探：
- en: '![](img/a0fc8086-ff09-4c14-bfc0-903507b66812.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0fc8086-ff09-4c14-bfc0-903507b66812.png)'
- en: 'Figure 2: Clear text credentials transmitted via HTTP'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '图2: 通过HTTP传输的明文凭据'
- en: SSL is used to secure the data, and the protocol that's used is **Hypertext
    Transfer Protocol Secure** (**HTTPS**). HTTPS operates on port `443` by default,
    and this too can be reconfigured if desired.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SSL用于保护数据，使用的协议是**超文本传输安全协议**（**HTTPS**）。默认情况下，HTTPS在端口`443`上运行，如果需要，也可以重新配置。
- en: Let's take a look at some HTTP requests and responses.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些HTTP请求和响应。
- en: HTTP requests and responses
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP请求和响应
- en: When a client sends a request to the server, this is called an HTTP request.
    Within this HTTP request, we have the header and a body. The header contains information
    such as the request, cookies, and encoding information. The body contains the
    actual data that will be exchanged.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端向服务器发送请求时，这称为HTTP请求。在此HTTP请求中，我们有标头和正文。标头包含请求、cookie和编码信息等信息。正文包含将要交换的实际数据。
- en: 'In the following screenshot, we have a sample of an HTTP request header:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们有一个HTTP请求头的示例：
- en: '![](img/0a8e03ee-4b10-4862-83b4-82a861a4e6ad.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a8e03ee-4b10-4862-83b4-82a861a4e6ad.png)'
- en: 'Figure 3: HTTP request header'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '图3: HTTP请求头'
- en: The first line begins with the `GET` request method, and then we have the `/download.html` resource
    that was requested, as well as the HTTP version, that is, `HTTP/1.1`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行以`GET`请求方法开始，然后是所请求的`/download.html`资源，以及HTTP版本，即`HTTP/1.1`。
- en: 'There are a few other request methods that can be found in an HTTP request
    header. These are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP请求头中还可以找到一些其他请求方法。这些如下：
- en: '| `POST` | This is used to send data to the server. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 用于向服务器发送数据。 |'
- en: '| `DELETE` | This is used to delete a file. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 用于删除文件。 |'
- en: '| `PUT` | This is used to upload a file.  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | 用于上传文件。  |'
- en: '| `HEAD` | This is used to `GET` the HTTP headers only. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `HEAD` | 用于仅`GET` HTTP标头。 |'
- en: 'There are a few fields within this header. Let''s take a look at the relevant
    fields:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此标头中有一些字段。让我们看看相关字段：
- en: '**Host**: A web server may have multiple sites being hosted. This field is
    used to define the host that we are trying to access.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**: Web服务器可能托管多个站点。此字段用于定义我们要访问的主机。'
- en: '**User-agent**: This field defines the client that is being used to access
    the host.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户代理**: 此字段定义用于访问主机的客户端。'
- en: '**Cookie**: This is exchanged in order to track session information.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie**: 这是为了跟踪会话信息而交换的。'
- en: '**Referer**: This field will show whether you have been redirected from another
    URL. Attackers will manipulate the referrer field to redirect users to a malicious
    website. This manipulation can be done with XSS.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用者**: 此字段将显示您是否已从另一个URL重定向。攻击者将操纵引用字段以将用户重定向到恶意网站。可以使用XSS进行此操纵。'
- en: 'When the server responds, it will respond with an HTTP response, which shares
    a similar structure to the HTTP request. In the following screenshot, we have
    a sample of the HTTP response:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器响应时，它将以HTTP响应方式响应，其结构与HTTP请求类似。在以下屏幕截图中，我们有一个HTTP响应的示例：
- en: '![](img/03b7682b-1553-4b30-b8d9-f145f5e612c2.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03b7682b-1553-4b30-b8d9-f145f5e612c2.png)'
- en: 'Figure 4: Sample of an HTTP Response'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '图4: HTTP响应示例'
- en: 'In the first line, we have a status code of `200`. The various codes that could
    appear are defined as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们有一个状态码为`200`。可能出现的各种代码定义如下：
- en: '| **Status code** | **Definition** | **Example** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **状态码** | **定义** | **示例** |'
- en: '| `1xx` | Information | `100`: Server agrees to handle a client request |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `1xx` | 信息 | `100`: 服务器同意处理客户端请求 |'
- en: '| `2xx` | Success | `200`: Request succeeded |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `2xx` | 成功 | `200`: 请求成功 |'
- en: '| `3xx` | Redirection | `301`: Page moved |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `3xx` | 重定向 | `301`: 页面已移动 |'
- en: '| `4xx` | Client error | `403`: Forbidden page |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `4xx` | 客户端错误 | `403`: 禁止页面 |'
- en: '| `5xx` | Server error | `500`: Internal server error |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `5xx` | 服务器错误 | `500`: 内部服务器错误 |'
- en: 'For a complete list of status codes, please visit the following URL: [https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关状态代码的完整列表，请访问以下网址：[https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。
- en: 'In the response, we have a few interesting fields:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，我们有一些有趣的字段：
- en: '**Server**: This field defines the server version of the web server. Immediately,
    we can see that we have a piece of reconnaissance information that can be used
    in a penetration test.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**: 此字段定义Web服务器的服务器版本。立即，我们可以看到一些可以在渗透测试中使用的侦察信息。'
- en: '**Set-cookie**: This is not set in the preceding screenshot. This field will
    be populated with a cookie value that will be used by the server to identify the
    client.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Set-cookie**: 在前面的屏幕截图中未设置此项。此字段将填充一个cookie值，服务器将使用该值来识别客户端。'
- en: Common web application attacks
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的Web应用程序攻击
- en: Web application attacks and vectors are progressing at a rapid pace. With the
    volume of people using the internet, businesses have to adapt and leverage complex
    web applications to provide services to customers or even employees. Having these
    on the internet obviously exposes them to risks. Most businesses take security
    seriously and, with the use of various software development life cycles, there
    are some really secure web applications out there.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序的攻击和向量正在迅速发展。随着使用互联网的人数增加，企业必须适应并利用复杂的网络应用程序为客户甚至员工提供服务。将这些应用程序放在互联网上显然会使它们面临风险。大多数企业都认真对待安全问题，并且通过使用各种软件开发生命周期，有一些真正安全的网络应用程序存在。
- en: Nevertheless, as security measures become stronger, so do the attacks. Over
    and above the attacks becoming more sophisticated, there is human error that comes
    into the equation. All it takes is a piece of poorly written code to exploit the
    web application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着安全措施变得更加严格，攻击也变得更加强大。除了攻击变得更加复杂之外，还存在人为错误的因素。只需要一小段编写不良的代码就可以利用网络应用程序。
- en: In this section, we will consider a few of the common web application attacks
    that exist today.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑一些今天存在的常见网络应用程序攻击。
- en: Inclusion attacks (LFI/RFI)
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含攻击（LFI/RFI）
- en: File inclusion vulnerabilities exist within web applications that are poorly
    written. This type of vulnerability allows the attack to submit data into files
    on the server or even upload files.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含漏洞存在于编写不良的网络应用程序中。这种类型的漏洞允许攻击者向服务器上的文件提交数据，甚至上传文件。
- en: '**Local File Inclusion** (**LFI**) vulnerabilities involve files that are local
    on the web application and the underlying operating system. If this vulnerability
    is exploited, the attacker would be able to read and execute files or code.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地文件包含**（**LFI**）漏洞涉及网络应用程序和底层操作系统上的本地文件。如果利用了这种漏洞，攻击者将能够读取和执行文件或代码。'
- en: '**Remote File Inclusion** (**RFI**) vulnerabilities involve executing code
    that is remote to the web application. In this attack, the attacker can host vulnerable
    code on a server in a remote location. The attacker can then exploit the web application
    to access the remote server and execute the code.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程文件包含**（**RFI**）漏洞涉及执行远程到网络应用程序的代码。在这种攻击中，攻击者可以在远程位置的服务器上托管易受攻击的代码。然后攻击者可以利用网络应用程序访问远程服务器并执行代码。'
- en: Cross-Site Request Forgery (CSRF)
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站请求伪造（CSRF）
- en: To understand CSRF, let's take a step back and talk about how web applications
    handle sessions. When HTTP is in use, keeping track of a user's authentication
    is done using a cookie. Cookies should generally be secure by having a strong
    cryptographic strength and entropy and should be transmitted over a secure channel
    such as HTTPS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解CSRF，让我们退一步来谈谈网络应用程序如何处理会话。在使用HTTP时，跟踪用户身份验证是通过cookie来完成的。Cookie通常应该是安全的，具有强大的加密强度和熵，并且应该通过安全通道传输，如HTTPS。
- en: When a browser submits that cookie to a website without checking the origin
    of the request, this leaves a gap, which CSRF takes advantage of. CSRF involves
    an attacker using malicious code that makes a request to the target website, which
    looks as if it originated from the original sender. The legitimate cookie is used
    and a forged request will be made to the target web application. The web application
    will find and accept this forged request since it has a valid cookie, and the
    actions defined in the request will be handled.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器提交该cookie到一个网站而不检查请求的来源时，这就留下了一个漏洞，CSRF就利用了这个漏洞。CSRF涉及攻击者使用恶意代码向目标网站发出请求，看起来好像是从原始发送者发出的。合法的cookie被使用，并且伪造的请求将被发送到目标网络应用程序。网络应用程序将找到并接受这个伪造的请求，因为它有一个有效的cookie，并且请求中定义的操作将被处理。
- en: 'In order for CSRF to work, there are a few things that need to be in place:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使CSRF起作用，需要满足一些条件：
- en: The web application that is being attacked should not check the referrer in
    the HTTP header.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被攻击的网络应用程序不应该检查HTTP头中的引用者。
- en: This allows the web application to accept requests from external pages.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这允许网络应用程序接受来自外部页面的请求。
- en: The web application will accept data modifications from URLs or forms.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用程序将接受来自URL或表单的数据修改。
- en: The attacker must be able to determine all of the input values that the web
    application would expect. For example, when resetting a password, the web application
    would look for values of the password and probably password confirmation.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者必须能够确定网络应用程序所期望的所有输入值。例如，当重置密码时，网络应用程序会寻找密码和可能的密码确认的值。
- en: The user who is being attacked must load the malicious page.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被攻击的用户必须加载恶意页面。
- en: An example of a CSRF attack would be a malicious page that has multiple images.
    When the unsuspecting user is directed to this page, the images load. Some images
    might be an **action**, causing the browser to perform some request to a targeted
    web application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击的一个例子是一个恶意页面，其中包含多个图片。当无意中的用户被引导到这个页面时，图片会加载。一些图片可能是一个**动作**，导致浏览器向目标网络应用程序发出某些请求。
- en: Cross-site scripting (XSS)
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）
- en: XSS is one of the most common vulnerabilities that's found within web applications.
    This type of attack has been on the **OWASP Top 10** list of vulnerabilities for
    a while. This attack leverages injection techniques that allow the attacker to
    execute scripts that can perform various purposes. The browser will execute the
    script because it believes that the script originated from the web application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: XSS是在网络应用程序中发现的最常见的漏洞之一。这种类型的攻击已经在**OWASP十大**漏洞列表上存在了一段时间。这种攻击利用注入技术，允许攻击者执行可以执行各种目的的脚本。浏览器会执行这个脚本，因为它认为这个脚本来自网络应用程序。
- en: 'Cross-site scripting can be split into three different types. These are defined
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本可以分为三种不同类型。这些类型定义如下：
- en: '**Persistent (Type 1)**: In this type of XSS, the malicious input is stored
    within the target server. For example, it can be stored in its database, forums,
    and comment fields.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持久型（类型1）**：在这种XSS类型中，恶意输入被存储在目标服务器中。例如，它可以存储在其数据库、论坛和评论字段中。'
- en: '**Reflected XSS (Type II)**: In this type of XSS, the data is immediately returned
    by the web application. This can be via an error message, search query, or any
    other response. The main point here is that the data is returned by a request.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反射型XSS（类型II）**：在这种XSS类型中，数据立即由Web应用程序返回。这可以通过错误消息、搜索查询或任何其他响应来实现。这里的主要点是数据是由请求返回的。'
- en: '**DOM-based XSS (Type 0)**: In this type of XSS, the vulnerability resides
    on the client side instead of the server side. For example, the server side HTML
    page won''t change, but on the client side, the page executes differently due
    to modifications in the **Document Object Model** (**DOM**) environment.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**基于DOM的XSS（类型0）**：在这种XSS类型中，漏洞存在于客户端而不是服务器端。例如，服务器端的HTML页面不会改变，但在客户端，由于**文档对象模型**（**DOM**）环境的修改，页面会以不同的方式执行。'
- en: When an attacker leverages an XSS attack, access to components such as cookies,
    session keys, and other sensitive information is attainable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击者利用XSS攻击时，可以访问诸如cookies、会话密钥和其他敏感信息之类的组件。
- en: SQL injection (SQLi)
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入（SQLi）
- en: SQLi attacks have been around for a long time, and yet they are still effective
    in poorly written web applications today. This type of attack works on web applications
    that use backend databases such as Microsoft SQL, and MySQL.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: SQLi攻击已经存在很长时间了，但它们在今天编写不良的Web应用程序中仍然有效。这种攻击适用于使用后端数据库的Web应用程序，如Microsoft SQL和MySQL。
- en: When this attack is successful, sensitive information can be accessed. Data
    within the database can be modified (deleted, updated, and added), and it's possible
    to bypass authentication and authorization controls.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种攻击成功时，可以访问敏感信息。可以修改数据库中的数据（删除、更新和添加），并且可以绕过身份验证和授权控制。
- en: 'There are various types of SQL injection attacks. Some of these are defined
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种类型的SQL注入攻击。其中一些定义如下：
- en: '**Error-based attacks**: This type of attack works by feeding invalid commands
    to the database. This is usually done through pieces of the web application that
    require input, for example, a user input. When these invalid commands are fed,
    we are hoping that the server will reply with an error that contains details that
    will provide us with information. For example, the server may reply with its operating
    system, version, or even full query results.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于错误的攻击**：这种攻击通过向数据库提供无效的命令来实现。这通常是通过需要输入的Web应用程序的部分完成的，例如用户输入。当输入这些无效的命令时，我们希望服务器会以包含详细信息的错误回复。例如，服务器可能会回复其操作系统、版本，甚至完整的查询结果。'
- en: '**Union-based attacks**: This type of attack leverages the `UNION` operator
    to extend the results of the query, ultimately allowing the attacker to run multiple
    statements. The key is that the structure must remain the same as the original
    statement.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于联合的攻击**：这种攻击利用`UNION`运算符来扩展查询的结果，最终允许攻击者运行多个语句。关键是结构必须与原始语句保持一致。'
- en: '**Blind injection attacks**: This type of attack is dubbed **blind** because
    there are no error messages being displayed. In this attack, the database is queried
    using a series of true and false queries to gain information that can be used
    for an attack.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盲注入攻击**：这种攻击之所以被称为**盲**，是因为没有显示错误消息。在这种攻击中，通过一系列的真假查询来查询数据库，以获取可用于攻击的信息。'
- en: Understanding these attacks is beneficial since they will help you to use the
    correct type of attack during your penetration test. We will leverage a tool known
    as `sqlmap` to perform some SQL injection attacks later in this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些攻击是有益的，因为它们将帮助您在渗透测试期间使用正确类型的攻击。我们将利用一个名为`sqlmap`的工具，在本章后面执行一些SQL注入攻击。
- en: Command execution
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令执行
- en: Command execution is an attack in which commands destined for the operating
    system can be executed via the vulnerable web application. This is made possible
    by an application that passes unsafe user input to the server.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行是一种攻击，通过这种攻击可以执行面向操作系统的命令，通过易受攻击的Web应用程序实现。这是由一个将不安全的用户输入传递给服务器的应用程序实现的。
- en: Command execution attacks can lead to serious compromise, depending on what
    kind of system commands you can execute and the privilege level of the web application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行攻击可能导致严重的妥协，这取决于您可以执行什么类型的系统命令以及Web应用程序的特权级别。
- en: Attacking web applications
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击Web应用程序
- en: As a penetration tester, you shouldn't rely solely on tools that can be used
    for web application attacks. Being well-versed about them will certainly help
    during your penetration test as you may be pressed for time.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，您不应该仅仅依赖于可以用于Web应用程序攻击的工具。对它们有很好的了解肯定会在您的渗透测试中有所帮助，因为您可能会时间紧迫。
- en: In this section, we will discuss various tools and look at how to use them to
    perform attacks against various web applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论各种工具，并看看如何使用它们来对抗各种Web应用程序。
- en: Nikto
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nikto
- en: 'Nikto is a web server scanner that is included with Kali Linux by default.
    It is able to extract or identify information such as the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto是默认包含在Kali Linux中的Web服务器扫描程序。它能够提取或识别以下信息：
- en: Server version
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器版本
- en: Potentially dangerous programs or files
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 潜在危险的程序或文件
- en: Server configuration items
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器配置项
- en: Installed web servers
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装的Web服务器
- en: 'Some of the main features of Nikto are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto的一些主要特点如下：
- en: Support for SSL
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL支持
- en: HTTP proxy support
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP代理支持
- en: Ability to scan multiple targets using an input file
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输入文件扫描多个目标的能力
- en: Ability to tune the scanning engine
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整扫描引擎的能力
- en: Nikto was not designed to be stealthy. Using this tool in a penetration test
    will likely lead to detection by an IPS/IDS.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto并不是设计为隐秘的。在渗透测试中使用这个工具很可能会被IPS/IDS检测到。
- en: Using Sqlmap
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sqlmap
- en: Sqlmap is an open source tool that is included with Kali Linux by default. It
    is used to automate the detection and exploitation of SQL injection flaws, as
    well as to take over the databases of web applications. It makes use of a wide
    range of options that allow for fingerprinting, data access, execution, and more.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Sqlmap是一个默认包含在Kali Linux中的开源工具。它用于自动检测和利用SQL注入漏洞，以及接管Web应用程序的数据库。它利用了一系列选项，允许指纹识别、数据访问、执行等。
- en: The syntax for `sqlmap` is `sqlmap <options>`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlmap`的语法是`sqlmap <options>`。'
- en: 'The features of `sqlmap` are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlmap`的特点如下：'
- en: There's support for multiple SQL products, such as MySQL, PostgreSQL, Microsoft
    SQL, Oracle, and SQLite.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种SQL产品，如MySQL、PostgreSQL、Microsoft SQL、Oracle和SQLite。
- en: It supports SQL injection techniques such as Boolean and time-based blind, stacked
    queries, error-based, UNION query, and out of band.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持SQL注入技术，如布尔盲注、基于时间的盲注、堆叠查询、基于错误的注入、UNION查询和带外带。
- en: It has the ability to enumerate users, password hashes, privileges, and more.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有能力枚举用户、密码哈希、权限等。
- en: It has the ability to identify the type of password hash and provides support
    for cracking it using dictionary attacks.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有能力识别密码哈希的类型，并支持使用字典攻击来破解它。
- en: It has the ability to interact with the database's underlying operating system.
    This can be used to download or upload files, create a reverse shell using an
    interactive command prompt or Meterpreter session, or execute commands.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有能力与数据库的底层操作系统进行交互。这可以用于下载或上传文件，使用交互式命令提示符或Meterpreter会话创建反向shell，或执行命令。
- en: It supports dumping the database as a whole, or specific pieces of it, such
    as specific columns or a range of entries or characters.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持将整个数据库或其中的特定部分，如特定列或一系列条目或字符，导出为文件。
- en: It has the ability to leverage the Meterpreter `getsystem` command for privilege
    escalation.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有能力利用Meterpreter `getsystem`命令进行权限提升。
- en: Now that we have covered a brief overview of Sqlmap, let's take a look at this
    tool in action. We will use this tool to perform a few attacks against the **Damn
    Vulnerable Web Application** (**DVWA**) that is built into Metasploitable 2.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要概述了Sqlmap，让我们看看这个工具的实际操作。我们将使用这个工具对内置在Metasploitable 2中的**Damn Vulnerable
    Web Application**（DVWA）执行一些攻击。
- en: Performing attacks using Sqlmap
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sqlmap执行攻击
- en: Let's take a look at how we can use Sqlmap to perform various attacks against
    the DVWA that is installed by default in Metasploitable 2.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Sqlmap对默认安装在Metasploitable 2中的DVWA执行各种攻击。
- en: Information gathering
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息收集
- en: 'The first thing we will do is some information gathering. Let''s look at what
    information we can obtain before performing any attacks:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先进行一些信息收集。在执行任何攻击之前，让我们看看我们可以获得什么信息：
- en: 'Using Firefox ESR within Kali Linux, navigate to your Metasploitable 2 IP virtual
    machine''s IP address. Click on DVWA and log in with the following credentials:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux中使用Firefox ESR，导航到您的Metasploitable 2 IP虚拟机的IP地址。点击DVWA，并使用以下凭据登录：
- en: '**Username**: `admin`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**：`admin`'
- en: '**Password**: `password`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：`password`'
- en: 'Click on DVWA Security on the left-hand navigation pane and select low under
    Script Security. Then, click on Submit:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航窗格上点击DVWA Security，并在脚本安全下选择低。然后，点击提交：
- en: '![](img/ea837aa3-f3c7-4724-accc-49ed01664e39.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea837aa3-f3c7-4724-accc-49ed01664e39.png)'
- en: 'Figure 5: Setting DVWA security level to low'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：将DVWA安全级别设置为低
- en: Next, click on SQL Injection and put in the number 1 in the User ID: field.
    Before clicking on Submit, make sure that you have the Burp Suite proxy enabled
    and that your browser is configured to use the Burp Suite proxy. Once you have
    the proxy enabled, click on Submit.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击SQL注入，并在用户ID字段中输入数字1。在点击提交之前，请确保您已启用Burp Suite代理，并且您的浏览器已配置为使用Burp Suite代理。一旦代理启用，点击提交。
- en: Take note of the fields that were intercepted. We are interested in `cookie`
    and `PHPSESSID`*:*
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意被拦截的字段。我们对`cookie`和`PHPSESSID`感兴趣*:*。
- en: '![](img/a8520b58-ae1f-4cc2-a61f-f2ab2a73aae3.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8520b58-ae1f-4cc2-a61f-f2ab2a73aae3.png)'
- en: 'Figure 6: DVWA SQLi intercept'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：DVWA SQLi拦截
- en: 'The first thing we will do is try to enumerate all databases using the `--dbs`
    option. To do this, we will use the `cookie` and `PHPSESSID` values that we have
    captured. The command we will use is as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先尝试使用`--dbs`选项枚举所有数据库。为此，我们将使用我们捕获的`cookie`和`PHPSESSID`值。我们将使用的命令如下：
- en: '[PRE2]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this command, we are defining the target URL with the `-u` parameter. This
    URL is the IP address of the DVWA web server (Metasploitable 2) with the `GET`
    request (`/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`). We specify the `cookie`
    and `PHPSESSID` values and use the `--dbs` option to list all databases.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们使用`-u`参数定义目标URL。这个URL是DVWA Web服务器（Metasploitable 2）的IP地址，带有`GET`请求(`/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`)。我们指定`cookie`和`PHPSESSID`值，并使用`--dbs`选项列出所有数据库。
- en: 'Take note of the following output. Sqlmap was able to identify the database
    and asked us whether we wanted to continue with tests for other databases:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下输出。Sqlmap能够识别数据库，并询问我们是否要继续测试其他数据库：
- en: '![](img/69be8112-5d0e-4367-93ca-58da308cf533.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69be8112-5d0e-4367-93ca-58da308cf533.png)'
- en: 'Figure 7: Sqlmap database identification'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：Sqlmap数据库识别
- en: 'We will select *Y* to skip test payloads that are specific for other DMBSes
    and *N* for the questions that are prompted afterward. Once `sqlmap` is done,
    it will provide you with some valuable information. Here, we have some injection
    points identified, information about the underlying operating system, and the
    database names that exist:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择*Y*跳过特定于其他DMBS的测试有效负载，*N*用于之后提示的问题。一旦`sqlmap`完成，它将为您提供一些有价值的信息。在这里，我们已经确定了一些注入点，有关底层操作系统的信息，以及存在的数据库名称：
- en: '![](img/aab8d639-0c59-46dd-8034-e020b607e1f7.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aab8d639-0c59-46dd-8034-e020b607e1f7.png)'
- en: 'Figure 8: Sqlmap output with valuable information'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：具有有价值信息的Sqlmap输出
- en: 'We can use the `-f` option to fingerprint the databases, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-f`选项来对数据库进行指纹识别，如下所示：
- en: '[PRE3]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We get the following output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/0f2eb51a-1563-4ece-a8fe-7514d06d9c58.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f2eb51a-1563-4ece-a8fe-7514d06d9c58.png)'
- en: 'Figure 9: Determining the software versions'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：确定软件版本
- en: Now that we have obtained information related to the DVWA, let's go further
    and perform some additional attacks.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了与DVWA相关的信息，让我们进一步进行一些额外的攻击。
- en: Dumping user details from SQL tables
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从SQL表中转储用户详细信息
- en: 'The next attack we will perform is obtaining information about users from SQL
    databases. For this, we will target the `dvwa` database. Let''s get started:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行的下一个攻击是从SQL数据库中获取用户信息。为此，我们将针对`dvwa`数据库。让我们开始吧：
- en: 'Use the following command to obtain the current tables within the DB:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取DB中的当前表：
- en: '[PRE4]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this command, we are looking for columns (`--columns`) that are related
    to the `dvwa` database (`-D dvwa`). Notice that, in the output, we have an interesting
    table, which is listed as `users` with columns such as `firstname`*,* `lastname`*,*
    `userid`, and `password`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们正在寻找与`dvwa`数据库（`-D dvwa`）相关的列（`--columns`）。请注意，在输出中，我们有一个有趣的表，列出为`users`，列如`firstname`，`lastname`，`userid`和`password`：
- en: '![](img/23bb7147-1dae-41e9-a9db-24fae21e5e17.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23bb7147-1dae-41e9-a9db-24fae21e5e17.png)'
- en: 'Figure 10: Columns for the users table within the `dvwa` database'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：`dvwa`数据库中用户表的列
- en: Now that we have identified an interesting table, let's proceed and dump the
    table to see whether we are able to crack the hashes using a dictionary attack.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了一个有趣的表，让我们继续转储表，看看我们是否能够使用字典攻击破解哈希。
- en: 'By using the following command, we will dump the table entries for all tables:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令，我们将转储所有表的表条目：
- en: '[PRE5]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this command, we are using the `--dump` option to look at all of the entries
    for all of the tables within the `dvwa` database. When the command runs, `sqlmap`
    will ask whether it should use a dictionary attack to attempt to crack the passwords.
    By choosing the `yes` option, `sqlmap` will prompt for a dictionary file. Using
    a built-in dictionary file will suffice for this demo. Take note of the output; you
    will see that we have the table of the user that was dumped, along with all of
    its details, including the passwords for each user in its hashed form and in clear
    text:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们使用`--dump`选项来查看`dvwa`数据库中所有表的所有条目。当命令运行时，`sqlmap`将询问是否应该使用字典攻击来尝试破解密码。选择`yes`选项，`sqlmap`将提示输入字典文件。对于这个演示来说，使用内置的字典文件就足够了。注意输出；您将看到我们已经转储的用户表，以及其中所有的详细信息，包括每个用户的密码的哈希形式和明文形式：
- en: '![](img/23b1e9dd-7073-456b-9b67-3a5873a460ad.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23b1e9dd-7073-456b-9b67-3a5873a460ad.png)'
- en: 'Figure 11: User details dumped using Sqlmap'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：使用Sqlmap转储的用户详细信息
- en: In this section, we have looked at the effectiveness of Sqlmap. Using this tool
    allows you to automate a few attacks when you have time constraints during a penetration
    test. We specifically looked at how to perform information gathering, enumerate
    tables, and extract user credentials. Sqlmap has a lot more features, and so it
    is a must-have in your penetration testing toolkit.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经看到了Sqlmap的有效性。使用这个工具可以在渗透测试中有时间限制时自动化一些攻击。我们特别看了如何进行信息收集，枚举表格和提取用户凭据。Sqlmap还有很多其他功能，所以它是您渗透测试工具包中必不可少的工具。
- en: Creating a backdoor using PHP
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP创建后门
- en: Let's take a look at using a malicious `php` file to create a backdoor into
    the underlying operating system of a web application. Here, we will use DVWA since
    it allows us to upload files.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用恶意的`php`文件来创建一个对web应用程序的基础操作系统的后门。在这里，我们将使用DVWA，因为它允许我们上传文件。
- en: Ensure that DVWA's security level is set to low. The default username to log
    in is `admin` and the password is `password`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 确保DVWA的安全级别设置为低。默认的用户名是`admin`，密码是`password`。
- en: 'We will use MSFvenom to create a PHP file that will provide us with a reverse
    shell. The handler that is used to listen for a connection will be set up within
    Metasploit. The steps are outlined as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用MSFvenom创建一个PHP文件，该文件将为我们提供一个反向shell。用于监听连接的处理程序将在Metasploit中设置。步骤如下所示：
- en: 'From a Terminal window within Kali Linux, enter the following command to create
    a malicious PHP backdoor:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux的终端窗口中，输入以下命令创建一个恶意的PHP后门：
- en: '[PRE6]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this command, we are defining the payload (`-p`) as `php/meterpreter_reverse_tcp`,
    and then we define the attacking machine's IP address (`LHOST`) and port that
    the reverse shell will be established on (`LPORT`). We aren't using any encoders;
    we simply want the raw `php` file (`-f raw`). The filename should be `msfv-shell.php`
    ( `> msfv-shell.php`).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们将payload（`-p`）定义为`php/meterpreter_reverse_tcp`，然后我们定义攻击机器的IP地址（`LHOST`）和反向shell将建立的端口（`LPORT`）。我们不使用任何编码器；我们只想要原始的`php`文件（`-f
    raw`）。文件名应该是`msfv-shell.php`（`> msfv-shell.php`）。
- en: 'Once the PHP file has been generated, we will upload it to DVWA. Log in to
    DVWA and navigate to the Upload section on the left-hand side. Click on Browse...
    and navigate to the location where you created the `msfv-shell.php` file. Then,
    select it. Once the file has been uploaded, take note of the location it was uploaded
    to:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成PHP文件后，我们将把它上传到DVWA。登录到DVWA，然后导航到左侧的上传部分。点击浏览...，然后导航到创建`msfv-shell.php`文件的位置。然后，选择它。文件上传后，注意上传的位置：
- en: '![](img/876555ff-ef13-4388-a779-5c047f645c44.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/876555ff-ef13-4388-a779-5c047f645c44.png)'
- en: 'Figure 12: MSFVenom malicious PHP file uploaded'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：上传了MSFVenom恶意PHP文件
- en: Before we connect to the location of the uploaded PHP page, we need to set up
    a handler in Metasploit. To do this, we will open the Metasploit Framework using
    the `msfconsole` command.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接到上传的PHP页面的位置之前，我们需要在Metasploit中设置一个处理程序。为此，我们将使用`msfconsole`命令打开Metasploit
    Framework。
- en: 'Once the Metasploit Framework has loaded, we will create the handler using
    the following commands:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit Framework加载后，我们将使用以下命令创建处理程序：
- en: '[PRE7]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the handler has been created, we can navigate to the upload location and
    click on the msfv-shell.php file:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理程序创建后，我们可以导航到上传位置，然后点击msfv-shell.php文件：
- en: '![](img/7d0b0ee3-bc19-4500-a314-aee181e06003.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d0b0ee3-bc19-4500-a314-aee181e06003.png)'
- en: 'Figure 13: Accessing the malicious PHP file'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：访问恶意的PHP文件
- en: 'Once the file has been accessed, on the Metasploit console, you will have a
    Meterpreter session:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件被访问，在Metasploit控制台上，你将拥有一个Meterpreter会话：
- en: '![](img/958b3e80-c178-400e-93d1-9b8af210611f.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/958b3e80-c178-400e-93d1-9b8af210611f.png)'
- en: 'Figure 14: Reverse Meterpreter shell established'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：建立反向Meterpreter shell
- en: From here, you have the option to drop into the system shell, upload/download
    files, and more.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以选择进入系统shell，上传/下载文件等。
- en: Performing XSS attacks
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行XSS攻击
- en: Here, we will use DVWA and look at how to perform a reflective and stored XSS
    attack. We will keep the security level of DVWA on the low setting.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用DVWA并查看如何执行反射型和存储型XSS攻击。我们将保持DVWA的安全级别设置为低。
- en: Performing a reflective XSS attack
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行反射型XSS攻击
- en: 'In this scenario, we will perform a reflective XSS attack. In this attack,
    we will send a request to the web application, forcing it to display some sensitive
    information. We will perform the attack as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将执行反射型XSS攻击。在这种攻击中，我们将向Web应用程序发送一个请求，迫使它显示一些敏感信息。我们将按照以下方式执行攻击：
- en: Log in to the DVWA and click on XSS Reflected. The default action for this page
    is to simply `echo` any input that you put into the field. Therefore, we will
    try to force the application to provide us with information such as`cookie` and
    `PHPSESSID`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到DVWA并点击XSS Reflected。这个页面的默认操作是简单地`echo`你放入字段中的任何输入。因此，我们将尝试强制应用程序为我们提供诸如`cookie`和`PHPSESSID`之类的信息。
- en: 'In the Whats your name? field, we will put in a simple script that will provide
    us with the `cookie` and `PHPSESSID` data that we are looking for. Enter the following
    command:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“你叫什么名字？”字段中，我们将输入一个简单的脚本，它将为我们提供我们正在寻找的`cookie`和`PHPSESSID`数据。输入以下命令：
- en: '[PRE8]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this script, we are telling the web application to **alert** us by providing
    a popup. Here, we are calling `document.cookie`, which will provide the current
    `cookie` and `PHPSESSID` values. Take note of the output; we now have the `cookie`
    and `PHPSESSID` values that we were after:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们告诉Web应用程序通过提供弹出窗口来**警报**我们。在这里，我们调用`document.cookie`，它将提供当前的`cookie`和`PHPSESSID`值。注意输出；我们现在有了我们想要的`cookie`和`PHPSESSID`值：
- en: '![](img/1f023b4e-9cb3-49bb-93f6-4ceba811090b.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f023b4e-9cb3-49bb-93f6-4ceba811090b.png)'
- en: 'Figure 15: Using reflective XSS to provide sensitive data'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：使用反射型XSS提供敏感数据
- en: 'Now that we have all of the required details, we will attempt to inject a form
    into this page to trick a user into entering their credentials. We will also force
    the web application to send the output elsewhere instead of popping up on screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了所有必需的细节，我们将尝试在这个页面中注入一个表单，以欺骗用户输入他们的凭据。我们还将强制Web应用程序将输出发送到其他地方，而不是在屏幕上弹出：
- en: Open a Terminal window within Kali Linux. We will create a `netcat` simple web
    server on port `80` by using the `nc -lvp 80` command.In this command, we are
    starting `netcat` using the `nc` command. The `-l` switch is used to enable listen
    mode, `v` is for verbose output, and `p` defines the port number that we will
    listen on. Once the command has been executed, `netcat` will listen for connections.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux中打开一个终端窗口。我们将使用`nc -lvp 80`命令在端口`80`上创建一个`netcat`简单的Web服务器。在这个命令中，我们使用`nc`命令启动`netcat`。`-l`开关用于启用监听模式，`v`用于详细输出，`p`定义我们将监听的端口号。一旦命令被执行，`netcat`将监听连接。
- en: 'Using the same XSS Reflected page, enter the following script:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的XSS Reflected页面上，输入以下脚本：
- en: '[PRE9]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this script, we are creating a simple form that's asking for a `username`
    and `password`. Take note of the `form action=` field. Here, we are using the
    IP address of the attacker PC (Kali Linux) where we started the `netcat` listener.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们创建了一个简单的表单，要求输入`username`和`password`。注意`form action=`字段。在这里，我们使用了攻击者PC（Kali
    Linux）的IP地址，我们在那里启动了`netcat`监听器。
- en: 'Now, we have a form being displayed. Enter a random `username` and `password`
    and hit Logon:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一个表单被显示出来。输入一个随机的`username`和`password`，然后点击Logon：
- en: '![](img/9f1f6f03-dd12-4183-8afe-125bb73b021c.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f1f6f03-dd12-4183-8afe-125bb73b021c.png)'
- en: 'Figure 16: Malicious form injected using XSS'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：使用XSS注入恶意表单
- en: 'Once you hit Logon, take a look at the output on the Terminal where you started
    the `netcat` listener. The web application has sent the login request to our listener,
    and the credentials are visible in clear text:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击Logon，看一下你在启动`netcat`监听器的终端上的输出。Web应用程序已经将登录请求发送到我们的监听器，并且凭据以明文形式可见：
- en: '![](img/c6e6d6ab-1349-4075-85be-8482b66bce46.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6e6d6ab-1349-4075-85be-8482b66bce46.png)'
- en: 'Figure 17: Login request captured on netcat listener'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图17：在netcat监听器上捕获的登录请求
- en: There are many more attacks that can be done by leveraging reflective XSS, but
    the point is the criticality of this vulnerability. As we have seen, it is possible
    to obtain sensitive data, which can be detrimental to any organization that has
    vulnerable web applications.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用反射型XSS可以进行许多其他攻击，但关键是这种漏洞的严重性。正如我们所看到的，可能获取敏感数据，这可能对任何具有易受攻击的Web应用程序的组织造成损害。
- en: Performing a stored XSS attack
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行存储型XSS攻击
- en: 'Let''s take a look at how we can perform a stored XSS attack. Here, we will
    use the XSS Stored section of DVWA. We will attempt to obtain `cookie` and `PHPSESSID`
    again:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何执行存储型XSS攻击。在这里，我们将使用DVWA的XSS Stored部分。我们将尝试再次获取`cookie`和`PHPSESSID`：
- en: Log in to the DVWA and click on XSS stored. Here, we have a guestbook that people
    can sign. We will attempt to input some code into the message field.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到DVWA并点击XSS stored。在这里，我们有一个人们可以签名的留言簿。我们将尝试在消息字段中输入一些代码。
- en: 'Enter any value for the name, and then use the same script we used earlier:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为名称输入任何值，然后使用我们之前使用的相同脚本：
- en: '[PRE10]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once you click on Sign guestboo, the `cookie` and `PHPSESSID` details will
    be displayed:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击“Sign guestboo”，`cookie`和`PHPSESSID`的详细信息将被显示：
- en: '![](img/eef38e48-0464-4749-b3d9-239176c672a5.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eef38e48-0464-4749-b3d9-239176c672a5.png)'
- en: 'Figure 18: Using stored XSS to provide sensitive data'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图18：使用存储的XSS提供敏感数据
- en: Since this is a stored XSS attack, if you navigate to another section of the
    DVWA web application and return to XSS stored, the popup will automatically appear,
    as the malicious script is stored in the database.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是存储的XSS攻击，如果您导航到DVWA Web应用程序的另一部分并返回到XSS存储，弹出窗口将自动出现，因为恶意脚本存储在数据库中。
- en: Performing a file inclusion attack
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行文件包含攻击
- en: Let's perform a local and remote file inclusion attack. Both of these attacks
    will be done on DVWA, and we will keep the security level of DVWA on the low setting.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行本地和远程文件包含攻击。这两种攻击都将在DVWA上进行，我们将保持DVWA的安全级别设置为低。
- en: 'For the LFI attack, we will attempt to browse a local file on the web server.
    A valuable file that resides on Linux operating systems is the `/etc/passwd` file.
    Let''s get started:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于LFI攻击，我们将尝试在Web服务器上浏览本地文件。在Linux操作系统上存在的有价值的文件是`/etc/passwd`文件。让我们开始：
- en: Once we're logged in to DWVA, click on File Inclusion on the left-hand side.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们登录到DWVA，点击左侧的文件包含。
- en: 'Let''s attempt to navigate to the `/etc/passwd` file. Since we don''t know
    what the local working directory that the web application is operating in is,
    we will use a sequence of characters to perform directory traversal. In the address
    bar, add in `../../../../../etc/passwd` after `?page=`, as shown in the following
    screenshot. The use of `../` is used in directory traversal to go back to the
    previous directory. Experimentation is needed here as you may not know the location
    of the target web application within the directory structure of the server:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试导航到`/etc/passwd`文件。由于我们不知道Web应用程序正在操作的本地工作目录是什么，我们将使用一系列字符来执行目录遍历。在地址栏中，在`?page=`后添加`../../../../../etc/passwd`，如下面的屏幕截图所示。在目录遍历中使用`../`用于返回到上一个目录。这里需要进行实验，因为您可能不知道服务器的目录结构中目标Web应用程序的位置：
- en: '![](img/5e149484-82fa-4648-aaca-e7720038d9c7.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e149484-82fa-4648-aaca-e7720038d9c7.png)'
- en: 'Figure 19: Using directory traversal with LFI'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图19：使用LFI进行目录遍历
- en: 'Once you hit *Enter*, you will have a lot of output. Within the output, you
    will find the contents of the `/etc/passwd` file:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您按下*Enter*，您将获得大量输出。在输出中，您将找到`/etc/passwd`文件的内容：
- en: '![](img/0aa54e4e-bfcf-4db5-b7c0-33d46dedbbc8.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aa54e4e-bfcf-4db5-b7c0-33d46dedbbc8.png)'
- en: 'Figure 20: Contents of the /etc/passwd file exposed'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：暴露的/etc/passwd文件内容
- en: By using LFI attacks, you can do a lot more than expose system files. You can
    upload files to the web server and initiate reverse shells.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用LFI攻击，您可以做的不仅仅是暴露系统文件。您还可以上传文件到Web服务器并启动反向shell。
- en: Performing a command execution attack
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行命令执行攻击
- en: 'We will use DVWA and look at how to perform a command execution attack. We
    will keep the security level of DVWA on the low setting:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用DVWA并查看如何执行命令执行攻击。我们将保持DVWA的安全级别设置为低：
- en: Log in to the DVWA application and click on Command Execution on the left-hand
    side.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到DVWA应用程序，然后单击左侧的命令执行。
- en: Let's attempt to perform a simple command, such as listing the current directory.
    Since the form requires an IP address, we will define an IP but add in the additional
    command using an append character, `&&`. To list the directory, we will use `-ls
    -la`. The full comment will be `192.168.34.153 && ls -la`.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试执行一个简单的命令，比如列出当前目录。由于表单需要IP地址，我们将定义一个IP，但使用附加命令使用附加字符`&&`。为了列出目录，我们将使用`-ls
    -la`。完整的注释将是`192.168.34.153 && ls -la`。
- en: 'In this command, we are defining a random IP (I am using the IP of my Kali
    virtual machine) and appending an additional command using the `&&`. This command
    is listing the `ls` directory. We can view these files by using a long listing,
    `-l`, and include all files, `a`. Here''s the output we receive:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们正在定义一个随机IP（我正在使用我的Kali虚拟机的IP）并使用`&&`附加一个额外的命令。这个命令正在列出`ls`目录。我们可以通过使用长列表`-l`查看这些文件，并包括所有文件`a`。这是我们收到的输出：
- en: '![](img/986bf30d-3560-49c5-ba52-4949593087c5.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/986bf30d-3560-49c5-ba52-4949593087c5.png)'
- en: 'Figure 21: Command execution attack'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图21：命令执行攻击
- en: Here, we have the actual ping command, but at the bottom, we have the listing
    of the current directory. Now, we know that command execution is possible. Let's
    see if we can obtain a remote shell using Metasploit.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有实际的ping命令，但在底部，我们有当前目录的列表。现在，我们知道命令执行是可能的。让我们看看是否可以使用Metasploit获得远程shell。
- en: From a Terminal window, we will start the Metasploit Framework by using the `msfconsole` command.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端窗口，我们将使用`msfconsole`命令启动Metasploit框架。
- en: 'We will use the script delivery exploit. Enter the `use exploit/multi/script/web_delivery` command
    and then `show options` to view the available options:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用脚本交付利用。输入`use exploit/multi/script/web_delivery`命令，然后`show options`查看可用选项：
- en: '![](img/73085fa5-692d-4823-a007-991288763c2f.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73085fa5-692d-4823-a007-991288763c2f.png)'
- en: 'Figure 22: Loading the exploit in Metasploit'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图22：在Metasploit中加载利用
- en: 'Now, we need to define the target. By using the `show targets` command, we
    can see what targets this exploit will work with. In our case, we will use `PHP`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要定义目标。通过使用`show targets`命令，我们可以看到这个利用将适用于哪些目标。在我们的情况下，我们将使用`PHP`：
- en: '![](img/2f7b5ad8-d91d-4eea-b7f5-6083a2c4d058.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f7b5ad8-d91d-4eea-b7f5-6083a2c4d058.png)'
- en: 'Figure 23: Targets that are available with the exploit'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图23：利用可用的目标
- en: 'Now, we will configure the exploit. Set the following options:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将配置利用。设置以下选项：
- en: '[PRE11]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Remember that `LHOST` is your Kali virtual machine IP, and that `LPORT` can
    be any random port number. The payload we are using is a reverse TCP `meterpreter`
    shell. You can confirm your options by using the `show options` command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`LHOST`是您的Kali虚拟机IP，`LPORT`可以是任意随机端口号。我们使用的有效载荷是反向TCP `meterpreter` shell。您可以使用`show
    options`命令确认您的选项：
- en: '![](img/fc3fd8c5-35e0-4610-8ab1-2aa9c0c394a3.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc3fd8c5-35e0-4610-8ab1-2aa9c0c394a3.png)'
- en: 'Figure 24: Configuring the exploit options'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图24：配置利用选项
- en: 'Once you have configured these options, run the exploit using the `run` command.
    Take note of the output. The highlighted code is what we will use in the command
    execution attack to spawn a reverse shell to our attacking system. Copy that code,
    and don''t close the Terminal window or exit out of Metasploit:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置这些选项后，使用`run`命令运行利用。注意输出。突出显示的代码是我们将在命令执行攻击中使用的，用于将反向shell生成到我们的攻击系统。复制该代码，并且不要关闭终端窗口或退出Metasploit：
- en: '![](img/b4cbfdb6-84d4-4849-b5f9-029fb75bf700.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4cbfdb6-84d4-4849-b5f9-029fb75bf700.png)'
- en: 'Figure 25: Exploit running with reverse PHP script defined'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图25：使用反向PHP脚本定义的利用正在运行
- en: 'Return to the Command Execution page in DVWA. Now, type in an IP address and
    append it by using `&&` and the code that was generated by Metasploit:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到DVWA中的命令执行页面。现在，输入一个IP地址，并使用`&&`和Metasploit生成的代码进行追加：
- en: '![](img/fa118290-8fbf-4227-8363-b205bb730082.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa118290-8fbf-4227-8363-b205bb730082.png)'
- en: 'Figure 26: Running the malicious script using a command execution attack'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图26：使用命令执行攻击运行恶意脚本
- en: Once you click on submit, you will start a `meterpreter` session. Return back
    to the Terminal window where you have configured the exploit.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击提交，您将启动一个`meterpreter`会话。返回到您配置利用的终端窗口。
- en: 'You will now see that you have the `meterpreter` session up and running. Hitting
    *Enter* will take you back to the exploit configuration page, but your session
    will still be established. You can check this by using the `sessions -i` command.
    To access this session, use the `sessions -i [session ID]` command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在会看到您已经启动并运行了`meterpreter`会话。按下*Enter*将带您返回到利用配置页面，但您的会话仍将保持建立状态。您可以使用`sessions
    -i`命令来检查这一点。要访问此会话，请使用`sessions -i [会话ID]`命令：
- en: '![](img/ae2950e6-16e0-4cc1-b319-701435ba7e97.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae2950e6-16e0-4cc1-b319-701435ba7e97.png)'
- en: 'Figure 27: Meterpreter sessions established'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图27：Meterpreter会话已建立
- en: 'From here, you will be able to leverage the full functionality of Meterpreter.
    You can access the operating system shell by using the `shell` command. From here,
    you will be able to take your attack further:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，您将能够利用Meterpreter的全部功能。您可以使用`shell`命令访问操作系统shell。从这里，您将能够进一步发动攻击：
- en: '![](img/0d255447-bcbe-4085-8805-819d11f9c162.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d255447-bcbe-4085-8805-819d11f9c162.png)'
- en: 'Figure 28: Accessing the operating system shell'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图28：访问操作系统shell
- en: As we have seen, with this attack, you have a number of options available to
    take the exploitation further. Command execution vulnerabilities can be easily
    exploited using tools such as the Metasploit Framework.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，通过这次攻击，您有许多选项可用于进一步利用。使用Metasploit Framework等工具可以轻松利用命令执行漏洞。
- en: Summary
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned about web applications and their architecture,
    as well as their components. You have learned about the different types of web
    application testing, and we focused specifically on penetration testing. You gained
    insight into the HTTP protocol and what is detailed in the request and response
    headers. Finally, you learned about the various web application attacks and how
    to perform them in a testing environment.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了Web应用程序及其架构，以及它们的组件。您已经了解了不同类型的Web应用程序测试，我们专门关注了渗透测试。您深入了解了HTTP协议以及请求和响应头中的详细信息。最后，您学习了各种Web应用程序攻击以及如何在测试环境中执行它们。
- en: In [Chapter 9](297a1e63-5c9b-4871-a46b-e4f2b25da48c.xhtml),* Getting Started
    with Wireless Attacks*, we will discuss wireless architecture, their attacks,
    and how to perform them.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](297a1e63-5c9b-4871-a46b-e4f2b25da48c.xhtml)中，*开始无线攻击*，我们将讨论无线架构、它们的攻击以及如何执行它们。
- en: Questions
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name one of the three types of web application architecture.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举三种Web应用程序架构中的一种。
- en: What is the difference between HTTP and HTTPS?
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP和HTTPS之间有什么区别？
- en: What can be manipulated in an HTTP response header to perform an XSS attack?
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTTP响应头中可以操纵什么来执行XSS攻击？
- en: Name two types of web application attacks.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举两种Web应用程序攻击类型。
- en: What tool can be used to create a PHP backdoor payload?
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么工具可以用来创建PHP后门有效负载？
