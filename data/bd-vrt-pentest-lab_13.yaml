- en: Chapter 13. Building a Complete Cyber Range
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。构建完整的网络范围
- en: 'In this chapter, we will put all of the components together and discuss the
    architecture that can support the scenarios we have covered throughout the book.
    In this chapter, we will be discussing the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把所有组件放在一起，并讨论可以支持我们在整本书中涵盖的场景的架构。在本章中，我们将讨论以下主题：
- en: Creating the layered architecture
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分层架构
- en: Integrating decoys and honeypots
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成诱饵和蜜罐
- en: Attacking the cyber range
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击网络范围
- en: Recording the attack data for further training and analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录攻击数据以进行进一步的培训和分析
- en: This chapter will provide us with a complete architecture that we can use to
    preform our testing. This design will allow us to plug in any required components
    that we might have. Furthermore, it will provide you with the capability to test
    all types of testing that you might need.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为我们提供一个完整的架构，我们可以用来进行测试。这个设计将允许我们插入可能需要的任何组件。此外，它将为您提供测试可能需要的所有类型的测试的能力。
- en: Creating the layered architecture
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建分层架构
- en: As we have discussed throughout the book, the goal of the ranges we create is
    to provide the capability to hone and improve our skills so that when we go on
    the site, we have already practiced against as many similar environments as the
    client might have.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在整本书中讨论的那样，我们创建的范围的目标是提供能力，以磨练和提高我们的技能，这样当我们上线时，我们已经在客户可能拥有的许多类似环境中进行了练习。
- en: Architecting the switching
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构交换
- en: With VMware Workstation, we can take advantage of its capability to create a
    number of different switches that will allow us to perform a variety of scenarios
    when we build or test ranges.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 利用VMware Workstation，我们可以利用其创建多个不同交换机的能力，这将允许我们在构建或测试范围时执行各种场景。
- en: Segmenting the architecture
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分割架构
- en: 'Our approach is to create a segmented architecture that takes advantage of
    the switch options within the virtualization framework. Furthermore, we want to
    build different types of segments so that we can test a combination of flat and
    layered networks. We have discussed these architectures a number of times throughout
    the book. An example of our proposed range of architecture is shown in the following
    diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法是创建一个分段架构，利用虚拟化框架内的交换机选项。此外，我们希望构建不同类型的段，以便我们可以测试平面和分层网络的组合。我们在整本书中多次讨论了这些架构。我们提出的架构范围的示例如下图所示：
- en: '![Segmenting the architecture](img/477-1_13_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![分割架构](img/477-1_13_1.jpg)'
- en: A public DMZ
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 公共DMZ
- en: A review of the previous diagram shows that we have a number of different architectures
    that we can explore with our design. The first one that we will discuss is that
    of a public DMZ; this is created when we have a buffer zone between our internal
    network and the external Internet. We consider it public as it will be, for the
    most part, accessible to anyone who wants to use the services that are running
    there. The location of the public DMZ is between the perimeter or screening router
    and the Bastion Host that is usually running our firewall software. For our example,
    this would be connected to the VMnet2 subnet.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对前面的图表进行审查，我们可以看到我们的设计可以探索多种不同的架构。我们将讨论的第一个是公共DMZ；当我们的内部网络和外部互联网之间有一个缓冲区时，就会创建这种情况。我们认为它是公共的，因为大部分时间都可以让任何想使用那里运行的服务的人访问。公共DMZ的位置位于周界或筛选路由器和通常运行我们防火墙软件的堡垒主机之间。对于我们的示例，这将连接到VMnet2子网。
- en: 'An example of this configuration is shown in the following diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置的示例如下图所示：
- en: '![A public DMZ](img/477-1_13_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![公共DMZ](img/477-1_13_2.jpg)'
- en: The problem with this approach is that the public DMZ is only protected by a
    screening router and, as such, is at risk of an attack; so, a potential solution
    to this problem is to move the DMZ.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的问题在于公共DMZ只受筛选路由器保护，因此容易受到攻击；因此，解决这个问题的一个潜在解决方案是移动DMZ。
- en: A private DMZ
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 私人DMZ
- en: As a solution to the protection problem of the public DMZ, we can use a private
    DMZ or a separate subnet DMZ, as it is sometimes referred to. The concept of having
    a separate subnet DMZ is to provide an extra layer of protection over that of
    the public DMZ. Furthermore, this configuration also has an added benefit; if
    communications are compromised in the DMZ, then the only thing that is compromised
    is the data that is passed in that DMZ. This is not the case in a public DMZ,
    because the communications between the internal and external networks traverse
    through the public DMZ, so if anything is compromised in that DMZ, then the data
    is compromised as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决公共DMZ保护问题的解决方案，我们可以使用私人DMZ或单独的子网DMZ，有时也称为。拥有单独子网DMZ的概念是为公共DMZ提供额外的保护层。此外，这种配置还有一个额外的好处；如果在DMZ中通信被
    compromise，那么被 compromise 的只是通过该DMZ传递的数据。在公共DMZ中情况并非如此，因为内部和外部网络之间的通信经过公共DMZ，因此如果在该DMZ中有任何问题，那么数据也会受到影响。
- en: 'An example of this configuration is shown in the following diagram:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置的示例如下图所示：
- en: '![A private DMZ](img/477-1_13_3.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![私人DMZ](img/477-1_13_3.jpg)'
- en: As the previous diagram shows, we now have two layers of defense protecting
    the machines that are placed in the private DMZ. Having said that, there is one
    disadvantage of this approach, and that is the fact that we are allowing our public
    services all the way in through our firewall. Consequently, the bandwidth is shared
    by all the traffic to and from the Internet. We will look at a potential solution
    to this in the following section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图表所示，我们现在有两层防御来保护放置在私人DMZ中的机器。话虽如此，这种方法也有一个缺点，那就是我们允许我们的公共服务通过防火墙进入。因此，带宽被所有来自互联网的流量共享。我们将在下一节中探讨这个问题的潜在解决方案。
- en: Decoy DMZ
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 诱饵DMZ
- en: As we mentioned earlier, with the subnet configuration of private or separate
    services, we have to allow the traffic into our second layer of defense. We will
    now discuss the concept of a decoy DMZ. With this concept, we leave the public
    DMZ as originally discussed, and then, we only place monitoring devices within
    that segment as we want to configure rules to alert us on any unwanted traffic
    that is received. For example, if we see any port 80 destination traffic, then
    we know that it is malicious, and as such, we generate alerts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，对于私有或独立服务的子网配置，我们必须允许流量进入我们的第二层防御。现在我们将讨论诱饵DMZ的概念。通过这个概念，我们将公共DMZ保持原样，然后只在该段内放置监控设备，因为我们希望配置规则以警报我们接收到的任何不需要的流量。例如，如果我们看到任何80端口的目标流量，那么我们知道这是恶意的，因此我们会生成警报。
- en: 'Another benefit of this configuration is the fact that we can bind ports inside
    the firewall for the users and then only bind the bare minimum of the ports on
    the external interface. An example of this is shown in the following diagram:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置的另一个好处是，我们可以在防火墙内部为用户绑定端口，然后只在外部接口上绑定最少的端口。这种示例如下图所示：
- en: '![Decoy DMZ](img/477-1_13_4.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![诱饵DMZ](img/477-1_13_4.jpg)'
- en: 'An advantage of the architecture in the previous diagram is that the performance
    of the network tends to improve as the main traffic to and from the Internet is
    not shared with the traffic to and from the services in the public DMZ. As we
    have concentrated on attacking throughout the book, we will not cover the advantages
    from a defense standpoint. However, for those of you who want to learn more, you
    can check out the **Advanced Network Defense** course in the **Center of Advanced
    Security Training** section that I have created. You can read more at the following
    link: [http://www.eccouncil.org/Training/advanced-security-training/courses/cast-614](http://www.eccouncil.org/Training/advanced-security-training/courses/cast-614).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图表中的架构的一个优势是，由于与公共DMZ中的服务之间的流量不与来自互联网的主要流量共享，因此网络的性能往往会提高。正如我们在整本书中都集中攻击一样，我们不会从防御的角度来讨论这些优势。然而，对于那些想要了解更多的人，可以查看我创建的**高级安全培训中心**部分中的**高级网络防御**课程。您可以在以下链接阅读更多：[http://www.eccouncil.org/Training/advanced-security-training/courses/cast-614](http://www.eccouncil.org/Training/advanced-security-training/courses/cast-614)。
- en: Integrating decoys and honeypots
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成诱饵和蜜罐
- en: One of the things that continues to grow in popularity is the deployment of
    honeypots and decoys on networks. Therefore, we want to deploy these in our architecture
    so that we can see how they react and what indications we can use to identify
    them when we encounter them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上部署蜜罐和诱饵的流行度不断增长。因此，我们希望在我们的架构中部署这些，以便我们可以看到它们的反应以及我们在遇到它们时可以使用的指示。
- en: There are a number of different honeypots that we might encounter, so we need
    to look at the characteristics that they exhibit. The best way to think of these
    is that there will be a number of ports that are shown as open; however, when
    you connect to them, they will not respond as expected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会遇到许多不同的蜜罐，因此我们需要查看它们所表现出的特征。最好的想法是，将会有一些端口显示为打开；然而，当您连接到它们时，它们将不会如预期般响应。
- en: 'The first honeypot that we will look at was created by **Marcus Ranum** many
    years ago when the Back Orifice tool was infecting machines around the Internet.
    The tool is no longer available, but you can search around on the Internet and
    you should be able to discover it. The tool is called **BackOfficer Friendly**,
    and it has a small footprint, but it is very effective in the role of a honeypot.
    The tool allows you to select a number of ports that it will listen on for connections.
    An example of these options is shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的第一个蜜罐是由**Marcus Ranum**多年前创建的，当时Back Orifice工具正在感染互联网上的机器。该工具现在已不再可用，但您可以在互联网上搜索，应该能够找到它。该工具称为**BackOfficer
    Friendly**，它的占用空间很小，但在蜜罐的角色中非常有效。该工具允许您选择一些端口，它将监听连接。这些选项的示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_5.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_5.jpg)'
- en: As the previous screenshot shows, we have all of the ports set to listen on
    the honeypot. We do not have the **Fake Replies** option selected; this is because
    if this option is set, the banner will give the honeypot away. Now that we have
    the honeypot listening on this range of ports, we will scan it and see what it
    looks like when scanned.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们已经将所有端口设置为蜜罐监听。我们没有选择**Fake Replies**选项；这是因为如果设置了此选项，横幅将暴露蜜罐。现在我们已经让蜜罐监听这一系列端口，我们将扫描它并看看在扫描时它是什么样子。
- en: 'An example of the results after scanning the machine with Nmap is shown in
    the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Nmap扫描机器后的结果示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_6.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_6.jpg)'
- en: 'As the previous screenshot shows, we have these ports open on the machine,
    so we would want to explore this further. The preferred method is to connect to
    the ports manually and grab the banner of these ports, because if we scan the
    ports, they will report back as `tcpwrapped`; therefore, we will look at the ports
    manually. We have a number of methods we could use to connect to this port, and
    for the example in the book, we will use `netcat`. In the terminal window, enter
    `nc <target> 21` to connect to the FTP server; an example of this result is shown
    in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们在机器上打开了这些端口，因此我们希望进一步探索。首选的方法是手动连接到端口并获取这些端口的横幅，因为如果我们扫描这些端口，它们将报告为`tcpwrapped`；因此，我们将手动查看这些端口。我们有许多方法可以用来连接到这个端口，在本书的示例中，我们将使用`netcat`。在终端窗口中，输入`nc
    <target> 21`以连接到FTP服务器；这个结果的示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_7.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_7.jpg)'
- en: 'As the previous screenshot shows, the `netcat` command does nothing but returns
    a command prompt, which means that the connection was not successful; yet, when
    we use telnet, the connection is made and then closed immediately. These are the
    types of things you want to look for in your testing, that is, look for things
    that are not behaving as they should be. When we scan the machine, we see that
    there are open ports; yet, when we attempt to connect to these identified open
    ports, we are not successful. This should not happen and, as such, is suspicious.
    It is important to remember that if it does not behave normal even though it has
    open ports, there is a good chance that you have encountered a honeypot. What
    about the honeypot itself? An example of this is shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，`netcat`命令什么也没做，只是返回一个命令提示符，这意味着连接不成功；然而，当我们使用telnet时，连接建立然后立即关闭。这些都是您在测试中要寻找的类型，也就是说，寻找那些表现不正常的事物。当我们扫描机器时，我们看到有开放的端口；然而，当我们尝试连接到这些已识别的开放端口时，我们并不成功。这不应该发生，因此是可疑的。重要的是要记住，如果它即使有开放的端口也不表现正常，那么您很有可能遇到了一个蜜罐。那蜜罐本身呢？以下屏幕截图显示了一个示例：
- en: '![Integrating decoys and honeypots](img/477-1_13_8.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_8.jpg)'
- en: As the previous screenshot shows, the tool shows the connection attempts; even
    though the user does not get a connection, the honeypot still records it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，该工具显示了连接尝试；即使用户没有获得连接，蜜罐仍然记录了它。
- en: The next honeypot we will look at is the **Labrea** honeypot. Labrea provides
    a number of mechanisms that can be used if a malware communicates with the machine.
    The Labrea tool is available as a Debian package. As we have used Debian a number
    of times throughout the book, we will use it now to configure and set up the Labrea
    honeypot so that we can identify what it will look like if we encounter it when
    we are doing our testing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下的下一个蜜罐是**Labrea**蜜罐。Labrea提供了许多机制，可用于恶意软件与机器通信。Labrea工具作为Debian软件包提供。由于我们在本书中多次使用了Debian，因此我们现在将使用它来配置和设置Labrea蜜罐，以便在测试时识别它的外观。
- en: In the terminal window of the Debian machine, enter `apt-get install labrea`
    to install the package. Once the software has installed, you can view the configuration
    file if you like. As it might not be located in the same place when you install
    the package, you can enter `find / -name labrea.conf` to locate the file and then
    open it in the editor of your choice. There is no need to change any configuration
    as it is set and ready to run once you install the package.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian机器的终端窗口中，输入`apt-get install labrea`来安装软件包。软件安装完成后，您可以查看配置文件。由于安装软件包后可能不在同一位置，您可以输入`find
    / -name labrea.conf`来定位文件，然后在您选择的编辑器中打开它。无需更改任何配置，因为一旦安装软件包，它就已经设置好并准备运行了。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a note of caution, the Labrea tool will take up any IP address that is not
    used on the network. Therefore, you might want to configure a range of IP addresses
    as being excluded from the configuration file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Labrea工具将占用网络上未使用的任何IP地址。因此，您可能希望将一系列IP地址配置为在配置文件中排除的IP地址。
- en: 'Once you are ready to run the tool in the terminal window, enter `labrea –v
    –i eth0 -sz -d -n <target> -o`. We will not review the options, but you are encouraged
    to review them on your own. We have set the output to be written to the screen,
    so we will see the output of anything that the Labrea tool intercepts. An example
    of the output of the command is shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备在终端窗口中运行该工具时，输入`labrea –v –i eth0 -sz -d -n <target> -o`。我们不会复习这些选项，但鼓励您自行复习。我们已将输出设置为写入屏幕，因此我们将看到Labrea工具拦截的任何输出。以下屏幕截图显示了该命令的输出的一个示例：
- en: '![Integrating decoys and honeypots](img/477-1_13_9.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_9.jpg)'
- en: One thing to note in the previous screenshot is the fact that the configuration
    file has been set to only respond to `1-3000` ports. Next, we need to see how
    the honeypot will respond on the network. We will use the Kali Linux machine;
    in a terminal window in Kali, enter `ping –c 7 <target>` where the target is any
    IP address of your target network.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中需要注意的一点是，配置文件已设置为只响应`1-3000`端口。接下来，我们需要看一下蜜罐在网络上的响应。我们将使用Kali Linux机器；在Kali的终端窗口中，输入`ping
    –c 7 <target>`，其中目标是您的目标网络的任何IP地址。
- en: 'An example of this for the `192.168.177` network is shown in the following
    screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于`192.168.177`网络的示例如下屏幕截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_10.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_10.jpg)'
- en: 'As the previous screenshot shows, the first ping request comes back as unreachable.
    Therefore, there is no host there. The machine responds on the fourth ping; this
    is a response that is coming from the Labrea honeypot. We can verify this by referring
    to the terminal window where we started the program. An example of this is shown
    in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，第一个ping请求返回为不可达。因此，那里没有主机。机器在第四个ping时做出响应；这是来自Labrea蜜罐的响应。我们可以通过查看我们启动程序的终端窗口来验证这一点。以下屏幕截图显示了一个示例：
- en: '![Integrating decoys and honeypots](img/477-1_13_11.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_11.jpg)'
- en: 'To see the real power of the Labrea honeypot, we will use one of the tools
    in the Kali Linux distribution to ping a range of IP addresses. In the Kali Linux
    terminal, enter `fping –g <target IP block>`. An example of a portion of the results
    of this command is shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到Labrea蜜罐的真正威力，我们将使用Kali Linux发行版中的一个工具来ping一系列IP地址。在Kali Linux终端中，输入`fping
    –g <target IP block>`。以下屏幕截图显示了该命令部分结果的一个示例：
- en: '![Integrating decoys and honeypots](img/477-1_13_12.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_12.jpg)'
- en: This shows that the Labrea honeypot has created a decoy presence of all of the
    possible machines on the `192.168.177` subnet; these machines will appear to be
    live machines. This is to solicit connections to these IP addresses as they would
    be malicious.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明Labrea蜜罐已经在`192.168.177`子网上创建了所有可能机器的诱饵存在；这些机器将看起来是活动的机器。这是为了引诱对这些IP地址的连接，因为它们可能是恶意的。
- en: The Labrea honeypot uses a technique called **tarpitting**, which causes the
    connections to take a very long time. As we have shown that there are a number
    of decoy machines out there, we will scan one of them now. In the Kali machine,
    enter `nmap –sS <target ip address> -Pn`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Labrea蜜罐使用一种称为**tarpitting**的技术，这会导致连接花费很长时间。正如我们已经展示的，有许多诱饵机器，我们现在将扫描其中一个。在Kali机器上，输入`nmap
    –sS <目标IP地址> -Pn`。
- en: 'An example of the results of a scan of one of the decoy machines is shown in
    the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描其中一个诱饵机器的结果示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_13.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_13.jpg)'
- en: 'Another response that we want to note is that of connecting to the machine
    using `netcat`; we will attempt this now. In the Kali machine, enter `nc <target
    IP address> 445`. An example of the results when we manually connect is shown
    in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要注意的另一个反应是使用`netcat`连接到机器；我们现在将尝试这样做。在Kali机器上，输入`nc <目标IP地址> 445`。当我们手动连接时的结果示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_14.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_14.jpg)'
- en: As the previous screenshot shows, every connection is detected by the honeypot
    and placed into the tarpit, making it take more time and trapping the communications
    to the machine. To research and learn more about Labrea, refer to [http://sourceforge.net/projects/labrea/](http://sourceforge.net/projects/labrea/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，每个连接都被蜜罐检测到并放入了tarpit，使其花费更多时间并将通信困住。要了解更多关于Labrea的信息，请参考[http://sourceforge.net/projects/labrea/](http://sourceforge.net/projects/labrea/)。
- en: 'The next honeypot we will look at is the commercial product **KFSensor**. You
    can find out more about it at [http://www.keyfocus.net/kfsensor/](http://www.keyfocus.net/kfsensor/).
    The site will require that you register on it to download the tool. Once you have
    downloaded it, you need to install it on a Windows system. An example of the interface
    of the tool is shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的下一个蜜罐是商业产品**KFSensor**。您可以在[http://www.keyfocus.net/kfsensor/](http://www.keyfocus.net/kfsensor/)了解更多信息。该网站将要求您在上面注册以下载该工具。下载后，您需要将其安装在Windows系统上。该工具的界面示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_15.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_15.jpg)'
- en: As the previous screenshot shows, we have numerous ports that are open via the
    honeypot, so the next step is to check and see what it would return once it is
    scanned. Remember that we want to perform our testing so that we know what to
    expect when we encounter a network with this honeypot. Furthermore, we want to
    ensure that we note the artifacts that can help us identify whether KFSensor is
    deployed on the network.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有许多端口通过蜜罐是开放的，所以下一步是检查并查看一旦被扫描会返回什么。记住，我们希望进行测试，以便在遇到这个蜜罐的网络时知道可以期待什么。此外，我们希望确保记录可以帮助我们确定网络上是否部署了KFSensor的工件。
- en: 'An example of an `Nmap` scan directed at the honeypot is shown in the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 针对蜜罐的`Nmap`扫描的示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_16.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_16.jpg)'
- en: 'As the previous screenshot shows, we have the ports open, but `Nmap` is reporting
    them as `tcpwrapped`. This is what it looks like when we do the `Nmap` scan, so
    what does it look like on the target? Moreover, what does the honeypot show? An
    example of this is shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，我们有端口开放，但`Nmap`报告它们为`tcpwrapped`。这是我们进行`Nmap`扫描时的情况，那么在目标上是什么样子呢？此外，蜜罐显示的又是什么样子呢？这方面的示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_17.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_17.jpg)'
- en: 'An added benefit of the tool is the fact that it also has numerous UDP ports
    open, and as such provides a very effective honeypot. An example of the UDP ports
    is shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的另一个好处是它还有许多UDP端口开放，因此提供了一个非常有效的蜜罐。UDP端口的示例如下截图所示：
- en: '![Integrating decoys and honeypots](img/477-1_13_18.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![集成诱饵和蜜罐](img/477-1_13_18.jpg)'
- en: This is just a look at some of the many different honeypots that are available,
    and as such, you should practice with the different ones on your testing range
    and document how each of them behave once they are deployed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一些可用的许多不同蜜罐的样子，因此，您应该在测试范围内练习不同的蜜罐，并记录它们部署后的行为。
- en: Attacking the cyber range
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击网络范围
- en: As we have mentioned earlier, the goal of building our pentesting ranges is
    to practice our skills. Therefore, we need to approach the architecture that we
    created and attack it at every location and entry point. Furthermore, it is very
    important that we practice attacking the targets directly, that is, on a flat
    network. Once we have attacked and identified the reactions of the targets from
    the different types of attacks, we change the approach and attack through the
    layered architecture to see what the reactions are and make a comparison of the
    results from the different locations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，建立我们的渗透测试范围的目标是练习我们的技能。因此，我们需要以攻击我们创建的架构的每个位置和入口为目标。此外，非常重要的是我们练习直接攻击目标，也就是说，在一个扁平的网络上。一旦我们攻击并确定了来自不同类型攻击的目标的反应，我们改变方法，通过分层架构进行攻击，看看反应是什么，并比较不同位置的结果。
- en: Recording the attack data for further training and analysis
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录攻击数据以进行进一步的培训和分析
- en: 'Once you have built and attacked the range, it is highly recommended that you
    record the attacks so that you can use them to practice with and, more importantly,
    for training purposes. Each time you carry out attacks, you are creating extremely
    valuable data that should be captured and used again. One of the easiest ways
    to capture the data is to use Wireshark. Once you have captured the data, save
    it, and then you can use a tool to replay the captured traffic. There are a number
    of ways in which you can accomplish this. One of the easiest ways is to use the
    **tcpreplay** tool; it is part of the Kali Linux distribution. Additionally, there
    are a number of packet traces you can download that cover many different attacks
    if you prefer to not create your own. An example of the command used to replay
    the file from one of the earlier DEFCON conferences is shown in the following
    screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您建立并攻击了范围，强烈建议您记录攻击，以便您可以用它们来练习，更重要的是用于培训目的。每次进行攻击时，您都在创建非常有价值的数据，应该捕获并再次使用。捕获数据的最简单方法之一是使用Wireshark。一旦捕获了数据，请保存它，然后您可以使用工具重放捕获的流量。有多种方法可以实现这一点。其中最简单的方法之一是使用**tcpreplay**工具；它是Kali
    Linux发行版的一部分。此外，如果您不想创建自己的数据，还可以下载许多不同攻击的数据包跟踪。以下是用于重放来自早期DEFCON会议之一的文件的命令的示例截图：
- en: '![Recording the attack data for further training and analysis](img/477-1_13_19.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![记录攻击数据以供进一步训练和分析](img/477-1_13_19.jpg)'
- en: 'For those of you who want to use a GUI tool, there are a number of them to
    choose from. A free one that works very well is Colasoft Packet Player from Colasoft;
    you can download it from [http://www.colasoft.com](http://www.colasoft.com). An
    example of this tool being used to replay the DEFCON packet capture is shown in
    the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要使用GUI工具的人，有许多选择。一个非常好用的免费工具是Colasoft的Colasoft Packet Player；您可以从[http://www.colasoft.com](http://www.colasoft.com)下载。以下是使用该工具重放DEFCON数据包捕获的示例截图：
- en: '![Recording the attack data for further training and analysis](img/477-1_13_20.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![记录攻击数据以供进一步训练和分析](img/477-1_13_20.jpg)'
- en: As the previous screenshot shows, you can set a number of different playback
    speeds, and in the **Burst** mode, the playback will be as fast as the network
    card can handle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，您可以设置多种不同的播放速度，在**Burst**模式下，播放速度将尽可能快地处理网络卡的速度。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed the creation of a layered architecture and
    the need for building segmented networks in our testing. Following the discussion
    of creating a layered architecture, we looked at the integration of decoys and
    honeypots to include the BackOfficer Friendly tool, Labrea tarpit, and KFSensor.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了分层架构的创建以及在我们的测试中构建分段网络的必要性。在讨论创建分层架构之后，我们看了一下如何集成诱饵和蜜罐，包括BackOfficer
    Friendly工具，Labrea tarpit和KFSensor。
- en: Following this, we looked at the process of attacking our architecture and expressed
    the technique of attacking the targets directly and on a flat network before we
    add protections and layers to penetrate them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看了一下攻击我们架构的过程，并表达了在添加保护和层之前直接攻击目标的技术，以及在扁平网络上渗透它们的技术。
- en: Finally, we closed the chapter and looked at recording the attack data and also
    replaying the files that we created or downloaded from the Internet on our network
    using the tcpreplay command-line tool and the Colasoft Packet Player GUI tool.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们结束了本章，并讨论了记录攻击数据以及使用tcpreplay命令行工具和Colasoft Packet Player GUI工具在我们的网络上重放我们创建或从互联网上下载的文件。
- en: This concludes the chapter and the book. Remember that the testing you do is
    all about being prepared. When you build your pen testing labs, you are creating
    an environment that you can use for many years to practice your skills. Once the
    architecture is developed, it is just a matter of adding different devices to
    your architecture to serve as your targets for practice. Good luck in your **pwning**
    of networks and systems!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了本章和本书。请记住，您所做的测试都是为了做好准备。当您建立您的渗透测试实验室时，您正在创建一个可以多年使用来练习技能的环境。一旦架构建立，只需向架构添加不同的设备，作为您练习的目标。祝您在攻陷网络和系统方面好运！
