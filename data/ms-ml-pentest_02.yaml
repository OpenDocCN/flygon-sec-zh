- en: Phishing Domain Detection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钓鱼域名检测
- en: Social engineering is one of the most dangerous threats facing every individual
    and modern organization. Phishing is a well-known, computer-based, social engineering
    technique. Attackers use disguised email addresses as a weapon to target large
    companies. With the huge number of phishing emails received every day, companies
    are not able to detect all of them. That is why new techniques and safeguards
    are needed to defend against phishing. This chapter will present the steps required
    to build three different machine learning-based projects to detect phishing attempts,
    using cutting-edge Python machine learning libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程是每个个人和现代组织面临的最危险的威胁之一。钓鱼是一种众所周知的基于计算机的社会工程技术。攻击者使用伪装的电子邮件地址作为武器来瞄准大公司。由于每天收到大量的钓鱼邮件，公司无法检测到所有这些邮件。这就是为什么需要新的技术和防护措施来防御钓鱼。本章将介绍构建三个不同基于机器学习的项目以检测钓鱼尝试所需的步骤，使用尖端的Python机器学习库。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: A social engineering overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程概述
- en: The steps for social engineering penetration testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程渗透测试的步骤
- en: 'Building a real-time phishing attack detector using different machine learning
    models:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的机器学习模型构建实时钓鱼攻击检测器：
- en: Phishing detection with logistic regression
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逻辑回归进行钓鱼检测
- en: Phishing detection with decision trees
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用决策树进行钓鱼检测
- en: Spam email detection with **natural language processing** (**NLP**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**自然语言处理**（**NLP**）进行垃圾邮件检测。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to use the following Python libraries:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下Python库：
- en: scikit-learn Python (≥ 2.7 or ≥ 3.3)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scikit-learn Python（≥2.7或≥3.3）
- en: NumPy  (≥ 1.8.2)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy（≥1.8.2）
- en: NLTK
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLTK
- en: If you have not installed them yet, please make sure that they are installed
    before moving forward with this chapter. You can find the code files at [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装它们，请确保在继续本章之前安装它们。您可以在[https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02)找到代码文件。
- en: Social engineering overview
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程概述
- en: Social engineering, by definition, is the psychological manipulation of a person
    to get useful and sensitive information from them, which can later be used to
    compromise a system. In other words, criminals use social engineering to gain
    confidential information from people, by taking advantage of human behavior.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程，根据定义，是对一个人的心理操纵，以从他们那里获取有用和敏感的信息，这些信息以后可以用来破坏系统。换句话说，罪犯利用社会工程从人们那里获取机密信息，利用人类行为。
- en: Social Engineering Engagement Framework
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程参与框架
- en: 'The **Social Engineering Engagement Framework** (**SEEF**) is a framework developed
    by Dominique C. Brack and Alexander Bahmram. It summarizes years of experience
    in information security and defending against social engineering. The stakeholders
    of the framework are organizations, governments, and individuals (personals). Social
    engineering engagement management goes through three steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**社会工程参与框架**（**SEEF**）是由Dominique C. Brack和Alexander Bahmram开发的框架。它总结了信息安全和防御社会工程多年的经验。该框架的利益相关者是组织、政府和个人（个人）。社会工程参与管理经历三个步骤：'
- en: '**Pre-engagement process**: Preparing the social engineering operation'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预先参与过程：准备社会工程操作
- en: '**During-engagement process**: The engagement occurs'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在参与过程中**：参与发生'
- en: '**Post-engagement process**:Delivering a report'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在参与过程后**：提交报告'
- en: 'There are many social engineering techniques used by criminals:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 罪犯使用许多社会工程技术：
- en: '**Baiting**: Convincing the victim to reveal information, promising him a reward
    or a gift.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**诱饵**：说服受害者透露信息，承诺给他奖励或礼物。'
- en: '**Impersonation**: Pretending to be someone else.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冒充：假装成别人。
- en: '**Dumpster diving**: Collecting valuable information (papers with addresses,
    emails, and so on) from dumpsters.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾箱潜水：从垃圾箱中收集有价值的信息（包括地址、电子邮件等）。
- en: '**Shoulder surfing**: Spying on other peoples'' machines from behind them,
    while they are typing.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窥视：在别人背后窥视他们的机器，当他们在打字时。
- en: '**Phishing**: This is the most often used technique; it occurs when an attacker,
    masquerading as a trusted entity, dupes a victim into opening an email, instant
    message, or text message.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钓鱼：这是最常用的技术；当攻击者假扮成受信任的实体，欺骗受害者打开电子邮件、即时消息或短信时，就会发生这种情况。
- en: Steps of social engineering penetration testing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程渗透测试步骤
- en: 'Penetration testing simulates a black hat hacker attack in order to evaluate
    the security posture of a company for deploying the required safeguard. Penetration
    testing is a methodological process, and it goes through well-defined steps. There
    are many types of penetration testing:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试模拟黑客的攻击，以评估公司的安全姿态，以部署所需的防护措施。渗透测试是一个有方法的过程，它经过明确定义的步骤。有许多类型的渗透测试：
- en: White box pentesting
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白盒渗透测试
- en: Black box pentesting
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑盒渗透测试
- en: Grey box pentesting
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灰盒渗透测试
- en: 'To perform a social engineering penetration test, you need to follow the following
    steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行社会工程渗透测试，您需要按照以下步骤进行：
- en: '![](img/00049.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Building real-time phishing attack detectors using different machine learning
    models
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的机器学习模型构建实时钓鱼攻击检测器
- en: 'In the next sections, we are going to learn how to build machine learning phishing
    detectors. We will cover the following two methods:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何构建机器学习钓鱼检测器。我们将涵盖以下两种方法：
- en: Phishing detection with logistic regression
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逻辑回归进行钓鱼检测
- en: Phishing detection with decision trees
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用决策树进行钓鱼检测
- en: Phishing detection with logistic regression
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用逻辑回归进行钓鱼检测
- en: In this section, we are going to build a phishing detector from scratch with
    a logistic regression algorithm. Logistic regression is a well-known statistical
    technique used to make binomial predictions (two classes).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用逻辑回归算法从头开始构建一个钓鱼网站检测器。逻辑回归是一种用于进行二项预测（两类）的众所周知的统计技术。
- en: 'Like in every machine learning project, we will need data to feed our machine
    learning model. For our model, we are going to use the UCI Machine Learning Repository
    (Phishing Websites Data Set). You can check it out at [https://archive.ics.uci.edu/ml/datasets/Phishing+Websites](https://archive.ics.uci.edu/ml/datasets/Phishing+Websites):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在每个机器学习项目中一样，我们需要数据来供给我们的机器学习模型。对于我们的模型，我们将使用UCI机器学习库（钓鱼网站数据集）。您可以在[https://archive.ics.uci.edu/ml/datasets/Phishing+Websites](https://archive.ics.uci.edu/ml/datasets/Phishing+Websites)上查看它：
- en: '![](img/00050.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'The dataset is provided as an `arff` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集以`arff`文件的形式提供：
- en: '![](img/00051.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: 'The following is a snapshot from the dataset:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数据集的快照：
- en: '![](img/00052.gif)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.gif)'
- en: 'For better manipulation, we have organized the dataset into a `csv` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地操作，我们已经将数据集组织成了`csv`文件：
- en: '![](img/00053.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: 'As you probably noticed from the attributes, each line of the dataset is represented
    in the following format – *{30 Attributes (having_IP_Address URL_Length, abnormal_URL
    and so on)} + {1 Attribute (Result)}*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，从属性中，数据集的每一行都以以下格式表示 - *{30个属性（具有IP地址URL长度，异常URL等）} + {1个属性（结果）}*：
- en: '![](img/00054.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: For our model, we are going to import two machine learning libraries, NumPy
    and scikit-learn, which we already installed in [Chapter 1](part0021.html#K0RQ0-49a67f1d6e7843d3b2296f38e3fe05f5), *Introduction
    to Machine Learning in Pentesting*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的模型，我们将导入两个机器学习库，NumPy和scikit-learn，这两个库我们已经在[第1章](part0021.html#K0RQ0-49a67f1d6e7843d3b2296f38e3fe05f5)中安装了，*渗透测试中的机器学习简介*。
- en: 'Let''s open the Python environment and load the required libraries:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开Python环境并加载所需的库：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, load the data:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，加载数据：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Identify the `inputs` (all of the attributes, except for the last one) and
    the `outputs` (the last attribute):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确定`inputs`（除最后一个属性外的所有属性）和`outputs`（最后一个属性）：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the previous chapter, we discussed how we need to divide the dataset into
    training data and testing data:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何将数据集分成训练数据和测试数据：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00055.gif)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.gif)'
- en: 'Create the scikit-learn logistic regression classifier:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建scikit-learn逻辑回归分类器：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Train the classifier:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 训练分类器：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Make predictions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 进行预测：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s print out the accuracy of our phishing detector model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打印出我们的钓鱼网站检测器模型的准确率：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/00056.gif)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.gif)'
- en: The accuracy of our model is approximately 85%. This is a good accuracy, since
    our model detected 85 phishing URLs out of 100\. But let's try to make an even
    better model with decision trees, using the same data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型准确率约为85%。这是一个很好的准确率，因为我们的模型在100个中检测出了85个钓鱼网址。但让我们尝试使用相同的数据，用决策树来构建一个更好的模型。
- en: Phishing detection with decision trees
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用决策树进行钓鱼检测
- en: 'To build the second model, we are going to use the same machine learning libraries,
    so there is no need to import them again. However, we are going to import the
    decision tree classifier from `sklearn`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建第二个模型，我们将使用相同的机器学习库，因此无需再次导入它们。但是，我们将从`sklearn`导入决策树分类器：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `tree.DecisionTreeClassifier()` scikit-learn classifier:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`tree.DecisionTreeClassifier()` scikit-learn分类器：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Train the model:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 训练模型：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Compute the predictions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 计算预测：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Calculate the accuracy:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 计算准确率：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, print out the results:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打印出结果：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/00057.gif)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.gif)'
- en: The accuracy of the second model is approximately 90.4%, which is a great result,
    compared to the first model. We have now learned how to build two phishing detectors,
    using two machine learning techniques.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个模型的准确率约为90.4%，与第一个模型相比，这是一个很好的结果。我们现在已经学会了如何使用两种机器学习技术构建两个钓鱼网站检测器。
- en: NLP in-depth overview
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NLP深入概述
- en: 'NLP is the art of analyzing and understanding human languages by machines.
    According to many studies, more than 75% of the used data is unstructured. Unstructured
    data does not have a predefined data model or not organized in a predefined manner.
    Emails, tweets, daily messages and even our recorded speeches are forms of unstructured
    data. NLP is a way for machines to analyze, understand, and derive meaning from
    natural language. NLP is widely used in many fields and applications, such as:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: NLP是机器分析和理解人类语言的艺术。根据许多研究，超过75%的使用数据是非结构化的。非结构化数据没有预定义的数据模型，也没有按预定义的方式组织。电子邮件、推文、日常消息甚至我们记录的演讲都是非结构化数据的形式。NLP是机器分析、理解和从自然语言中获取含义的一种方式。NLP广泛应用于许多领域和应用程序，例如：
- en: Real-time translation
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时翻译
- en: Automatic summarization
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动摘要
- en: Sentiment analysis
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情感分析
- en: Speech recognition
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音识别
- en: Build chatbots
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建聊天机器人
- en: 'Generally, there are two different components of NLP:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，NLP有两个不同的组成部分：
- en: '**Natural Language Understanding (NLU)**: This refers to mapping input into
    a useful representation.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言理解（NLU）**：这指的是将输入映射为有用的表示。'
- en: '**Natural Language Generation (NLG)**: This refers to transforming internal
    representations into useful representations. In other words, it is transforming
    data into written or spoken narrative. Written analysis for business intelligence
    dashboards is one of NLG applications.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言生成（NLG）**：这指的是将内部表示转换为有用的表示。换句话说，它是将数据转换为书面或口头叙述。商业智能仪表板的书面分析是NLG应用之一。'
- en: Every NLP project goes through five steps. To build an NLP project the first
    step is identifying and analyzing the structure of words. This step involves dividing
    the data into paragraphs, sentences, and words. Later we analyze the words in
    the sentences and relationships among them. The third step involves checking the
    text for  meaningfulness. Then, analyzing the meaning of consecutive sentences.
    Finally, we finish the project by the pragmatic analysis.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每个NLP项目都经历五个步骤。构建NLP项目的第一步是识别和分析单词的结构。这一步涉及将数据分成段落、句子和单词。然后我们分析句子中的单词以及它们之间的关系。第三步涉及检查文本的意义。然后，分析连续句子的含义。最后，我们通过实用分析完成项目。
- en: '![](img/00058.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: Open source NLP libraries
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源NLP库
- en: 'There are many open source Python libraries that provide the structures required
    to build real-world NLP applications, such as:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源的Python库提供了构建实际NLP应用所需的结构，例如：
- en: Apache OpenNLP
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache OpenNLP
- en: GATE NLP library
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GATE NLP库
- en: Stanford NLP
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stanford NLP
- en: And, of course, **Natural Language Toolkit** (**NLTK**)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然，**自然语言工具包**（**NLTK**）
- en: In the previous chapter, we learned how to install many open source machine
    learning Python libraries, including the NLTK. Let's fire up our Linux machine
    and try some hands-on techniques.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何安装许多开源的机器学习Python库，包括NLTK。让我们启动我们的Linux机器并尝试一些实际技术。
- en: 'Open the Python terminal and import `nltk`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Python终端并导入`nltk`：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Download a book type, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下载书籍类型，如下所示：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/00059.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'If you want to list the available resources that we already downloaded in the
    previous chapter, type `l`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要列出我们在上一章中已经下载的可用资源，请输入`l`：
- en: '![](img/00060.gif)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.gif)'
- en: 'You can also type:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以输入：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00061.gif)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.gif)'
- en: 'To get text from a link, it is recommended to use the `urllib` module to crawl
    a website:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要从链接中获取文本，建议使用`urllib`模块来爬取网站：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As a demonstration, we are going to load a text called `Security.in.Wireless.Ad.Hoc.and.Sensor.Networks`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为演示，我们将加载一个名为`Security.in.Wireless.Ad.Hoc.and.Sensor.Networks`的文本：
- en: '![](img/00062.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: 'We crawled the text file, and used `len` to check its length and `raw[:50]`
    to display some content. As you can see from the screenshot, the text contains
    a lot of symbols that are useless for our projects. To get only what we need,
    we use **tokenization**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们爬取了文本文件，并使用`len`检查其长度和`raw[:50]`显示一些内容。从屏幕截图中可以看到，文本包含许多对我们的项目无用的符号。为了只获取我们需要的内容，我们使用**标记化**：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To summarize what we learned in the previous section, we saw how to download
    a web page, tokenize the text, and normalize the words.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下我们在上一节学到的内容，我们看到了如何下载网页，对文本进行标记化，并对单词进行规范化。
- en: Spam detection with NLTK
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NLTK进行垃圾邮件检测
- en: 'Now it is time to build our spam detector using the NLTK. The principle of
    this type of classifier is simple; we need to detect the words used by spammers.
    We are going to build a spam/non-spam binary classifier using Python and the `nltk`
    library, to detect whether or not an email is spam. First, we need to import the
    library as usual:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用NLTK构建我们的垃圾邮件检测器了。这种分类器的原理很简单；我们需要检测垃圾邮件发送者使用的单词。我们将使用Python和`nltk`库构建一个垃圾邮件/非垃圾邮件二元分类器，以检测电子邮件是否为垃圾邮件。首先，我们需要像往常一样导入该库：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to load data and feed our model with an emails dataset. To achieve
    that, we can use the dataset delivered by the **Internet CONtent FIltering Group**.
    You can visit the website at [https://labs-repos.iit.demokritos.gr/skel/i-config/](https://labs-repos.iit.demokritos.gr/skel/i-config/):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要加载数据并用电子邮件数据集来训练我们的模型。为了实现这一点，我们可以使用**Internet CONtent FIltering Group**提供的数据集。您可以访问该网站[https://labs-repos.iit.demokritos.gr/skel/i-config/](https://labs-repos.iit.demokritos.gr/skel/i-config/)：
- en: '![](img/00063.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: 'Basically, the website provides four datasets:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，该网站提供了四个数据集：
- en: Ling-spam
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ling-spam
- en: PU1
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PU1
- en: PU123A
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PU123A
- en: Enron-spam
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Enron-spam
- en: 'For our project, we are going to use the Enron-spam dataset:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用Enron-spam数据集：
- en: '![](img/00064.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: 'Let''s download the dataset using the `wget` command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`wget`命令下载数据集：
- en: '![](img/00065.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'Extract the `tar.gz` file by using the `tar -xzf enron1.tar.gz` command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tar -xzf enron1.tar.gz`命令提取`tar.gz`文件：
- en: '![](img/00066.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'Shuffle the `cp spam/* emails && cp ham/* emails` object:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 洗牌`cp spam/* emails && cp ham/* emails`对象：
- en: '![](img/00067.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'To shuffle the emails, let''s write a small Python script, `Shuffle.py`, to
    do the job:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要洗牌电子邮件，让我们编写一个小的Python脚本`Shuffle.py`来完成这项工作：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Just change the directory variable, and it will shuffle the files:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 只需更改目录变量，它将对文件进行洗牌：
- en: '![](img/00068.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'After preparing the dataset, you should be aware that, as we learned previously,
    we need to `tokenize` the emails:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 准备数据集后，您应该知道，正如我们之前学到的那样，我们需要对电子邮件进行`标记化`：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/00069.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'Also, we need to perform another step, called lemmatizing. Lemmatizing connects
    words that have different forms, like hacker/hackers and is/are. We need to import
    `WordNetLemmatizer`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要执行另一个步骤，称为词形还原。词形还原将连接具有不同形式的单词，如hacker/hackers和is/are。我们需要导入`WordNetLemmatizer`：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a sentence for the demonstration, and print out the result of the lemmatizer:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个用于演示的句子，并打印出词形还原器的结果：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/00070.gif)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.gif)'
- en: 'Then, we need to remove `stopwords`, such as `of`, `is`, `the`, and so on:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要去除`停用词`，如`of`，`is`，`the`等：
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To process the email, a function called `Process` must be created, to `lemmatize`
    and `tokenize` our dataset:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理电子邮件，必须创建一个名为`Process`的函数，以对我们的数据集进行`词形还原`和`标记化`：
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The second step is feature extraction, by reading the emails'' words:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是通过阅读电子邮件的单词进行特征提取：
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Extract the features:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 提取特征：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s define training the model Python function:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义训练模型的Python函数：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As a classification algorithm, we are going to use `NaiveBayesClassifier`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 作为分类算法，我们将使用`NaiveBayesClassifier`：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, we define the evaluation Python function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义评估Python函数：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/00071.gif)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.gif)'
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned to detect phishing attempts by building three different
    projects from scratch. First, we discovered how to develop a phishing detector
    using two different machine learning techniques, thanks to cutting-edge Python
    machine learning libraries. The third project was a spam filter, based on NLP
    and Naive Bayes classification. In the next chapter, we will build various projects
    to detect malware, using different techniques and Python machine learning libraries.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过从头开始构建三个不同的项目来检测网络钓鱼尝试。首先，我们发现如何利用两种不同的机器学习技术开发网络钓鱼检测器，这要归功于尖端的Python机器学习库。第三个项目是一个基于NLP和朴素贝叶斯分类的垃圾邮件过滤器。在下一章中，我们将使用不同的技术和Python机器学习库构建各种项目来检测恶意软件。
- en: Questions
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: We hope it was easy to go through this chapter. Now, as usual, it is practice
    time. Your job is to try building your own spam detection system. We will guide
    you through the questions.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您能轻松地阅读完本章。现在，像往常一样，是练习时间了。您的任务是尝试构建自己的垃圾邮件检测系统。我们将通过问题来指导您。
- en: 'In this chapter''s GitHub repository, you will find a dataset collected from
    research done by Androutsopoulos, J. Koutsias, K.V. Chandrinos, George Paliouras,
    and C.D. Spyropoulos: *An Evaluation of Naive Bayesian Anti-Spam Filtering*. *Proceedings
    of the workshop on Machine Learning in the New Information Age, G. Potamias, V.
    Moustakis and **M. van Someren (eds.), 11th European Conference on Machine Learning,
    Barcelona, Spain, pp. 9-17, 2000*.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的GitHub存储库中，您将找到由Androutsopoulos、J. Koutsias、K.V. Chandrinos、George Paliouras和C.D.
    Spyropoulos进行的研究收集的数据集：*朴素贝叶斯反垃圾邮件过滤的评估*。*机器学习在新信息时代的研讨会论文集，G. Potamias，V. Moustakis和M.
    van Someren（编辑），第11届欧洲机器学习大会，西班牙巴塞罗那，第9-17页，2000年*。
- en: 'You can now prepare the data:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以准备数据了：
- en: 'The following are some text-cleaning tasks to perform:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些要执行的文本清理任务：
- en: Clean your texts of stopwords, digits, and punctuation marks.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理文本中的停用词、数字和标点符号。
- en: Perform lemmatization.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行词形还原。
- en: Create a word dictionary, including their frequencies.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单词字典，包括它们的频率。
- en: In email texts, you will notice that the first line is the subject of the email
    and the third line is the body of the email (we only need the email bodies).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子邮件文本中，您会注意到第一行是电子邮件的主题，第三行是电子邮件的正文（我们只需要电子邮件正文）。
- en: Remove the non-words from the dictionary.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字典中删除非单词。
- en: Extract the features from the data.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据中提取特征。
- en: Prepare the feature vectors and their labels.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备特征向量及其标签。
- en: Train the model with a linear support vector machine classifier.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用线性支持向量机分类器对模型进行训练。
- en: Print out the confusion matrix of your model.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出模型的混淆矩阵。
