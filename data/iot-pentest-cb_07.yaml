- en: Radio Hacking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线电黑客
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Getting familiar with SDR
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉SDR
- en: Hands-on with SDR tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDR工具的实践
- en: Understanding and exploiting ZigBee
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和利用ZigBee
- en: Gaining Insight into Z-Wave
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解Z-Wave
- en: Understanding and exploiting BLE
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和利用BLE
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Almost all the **Internet of Things** (**IoT**) devices in the current day scenario
    interact with other devices to exchange information and take action. It is highly
    essential to know about the wireless protocols that are used by IoT devices and
    the security issues affecting them, in order to pen test IoT devices effectively.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有当前物联网设备与其他设备进行交互以交换信息并采取行动。了解物联网设备使用的无线协议以及影响它们的安全问题对于有效地对物联网设备进行渗透测试至关重要。
- en: Wireless communication or radio simply is a way of transferring data from the
    source to destination through the communication medium of air using electromagnetic
    waves. The radio signals are the same signals that are used in your common devices
    such as microwave, light, and infra-red; it's just that the signal in each case
    varies in wavelength and frequency. In case of wireless communication, the data
    that needs to be transmitted is first converted into an electric signal using
    the potential difference and the location of the antenna from which the signal
    originates, carried across by a carrier wave, and then demodulated at the other
    end to obtain the actual data that was sent by the source. We won't get into further
    detail about electromagnetic concepts and how an electric signal is generated
    from the data, as it is beyond the scope for this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无线通信或无线电简单地是通过空气这种通信介质使用电磁波从源到目的地传输数据的一种方式。无线电信号是在常见设备中使用的信号，如微波、光和红外线；只是在每种情况下，信号的波长和频率不同。在无线通信的情况下，需要传输的数据首先通过电势差转换为电信号，然后由载波波传输，最后在另一端解调以获取源发送的实际数据。我们不会详细讨论电磁概念以及如何从数据生成电信号，因为这超出了本章的范围。
- en: IoT devices work on various wireless communication protocols ranging from cellular
    to Wi-Fi, depending on the product requirements and device manufacturer's preferences.
    It would be impossible to cover all the various wireless communication protocols
    in a single chapter or book, however, we will be focusing on the overall penetration
    testing methodology and covering the two most common protocols—ZigBee and **Bluetooth
    Low Energy** (**BLE**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备使用各种无线通信协议，从蜂窝到Wi-Fi不等，取决于产品要求和设备制造商的偏好。不可能在单一章节或书籍中涵盖所有各种无线通信协议，但是，我们将专注于整体渗透测试方法论，并涵盖两种最常见的协议——ZigBee和蓝牙低功耗（BLE）。
- en: The different wireless protocols serve their own purpose and have their own
    pros and cons. Each of them operate at a specified frequency (or frequency range)
    and will require a different pen tester hardware and software setup to be able
    to analyze the packets for that communication protocol.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的无线协议有各自的目的和优缺点。它们每个都在指定的频率（或频率范围）上运行，并且需要不同的渗透测试硬件和软件设置，以便能够分析该通信协议的数据包。
- en: Before going into the individual protocols, we will take an in-depth look at
    **Software Defined Radio** (**SDR**), which is one of the most important concepts
    when it comes to radio reversing and hacking for IoT devices. We will also get
    ourselves familiar with the various underlying foundational concepts that are
    required in order to understand radio hacking and SDR in a better way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入各个协议之前，我们将深入研究软件定义无线电（SDR），这是无线电逆向和物联网设备黑客的最重要概念之一。我们还将熟悉各种基础概念，以便更好地理解无线电黑客和SDR。
- en: Getting familiar with SDR
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉SDR
- en: SDR is an extremely useful technique with which we can vary the purpose of a
    given radio device. As the name suggests, the radio in this case is software defined,
    which means that the functionality, or the action that the radio performs, can
    be changed and modified based on our requirements. This is unlike traditional
    radios, where a particular device served a single purpose based on the hardware
    design present in it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SDR是一种极其有用的技术，我们可以通过它改变给定无线电设备的用途。正如其名称所示，这种情况下的无线电是软件定义的，这意味着无线电的功能或操作可以根据我们的需求进行更改和修改。这与传统无线电不同，传统无线电设备根据其硬件设计只能服务于单一目的。
- en: This opens up a plethora of opportunities for us, as we can get started with
    SDR and keep repurposing it to suit our various needs. Repurposing here simply
    means that let's say we are analyzing the FM spectrum, we can have the device
    do it, and, if later on we want to analyze the data coming out from an IoT device
    at 433 MHz, we can use the same device to capture the data, process it, and extract
    the text being sent in it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们打开了大量机会，因为我们可以开始使用SDR，并不断重新定位以满足我们的各种需求。重新定位在这里简单地意味着，假设我们正在分析FM频谱，我们可以让设备来做，如果以后我们想要分析433
    MHz的物联网设备发送的数据，我们可以使用同一设备来捕获数据，处理数据，并提取其中发送的文本。
- en: By now you should have a decent understanding of what SDRs are and what purpose
    they can serve. Before going into the actual hands-on exercises with SDR and analyzing
    different things, in this section, we will get ourselves familiar with the underlying
    concepts and terminologies which you might come across as you go deeper into radio
    hacking and SDR.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对SDR是什么以及它可以服务于什么目的有一个相当好的理解。在进行实际的SDR实践和分析不同事物之前，在本节中，我们将熟悉一些基本概念和术语，这些术语可能在你深入研究无线电黑客和SDR时会遇到。
- en: Key terminologies in radio
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线电中的关键术语
- en: Let's have a quick look at some of the terminologies which you will find yourself
    coming across very often in SDR.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一些你在SDR中经常遇到的术语。
- en: A simple radio system would include several components such as a sender, receiver,
    carrier wave, and medium. These components are pretty much what you would expect
    them to be. The sender is the component that sends the signal, which is received
    by the receiver, via the medium of transmission.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的无线电系统将包括几个组件，如发送器、接收器、载波波和介质。这些组件基本上就是您所期望的。发送器是发送信号的组件，由传输介质传输到接收器。
- en: In most practical scenarios, the data wave that needs to be sent is modulated
    with a carrier wave, which is then sent to the receiver, where the modulated wave
    is demodulated to recover the original data wave which was to be transmitted.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数实际情况下，需要发送的数据波会与载波波调制，然后发送到接收器，接收器会解调调制波以恢复原始数据波。
- en: There are a number of modulation types such as frequency modulation, amplitude
    modulation, and phase modulation. Additionally, there are also a number of digital
    modulation techniques such as **On-off Keying** (**OOK**), **Phase-shift Keying**
    (**PSK**), **Frequency-shift Keying** (**FSK**), and **Amplitude-shift Keying**
    (**ASK**).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多调制类型，如频率调制、幅度调制和相位调制。此外，还有许多数字调制技术，如**开关键控**（**OOK**）、**相移键控**（**PSK**）、**频移键控**（**FSK**）和**幅度键控**（**ASK**）。
- en: 'Some of the common terminologies which you will encounter while working with
    radio systems are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用无线电系统时，您将遇到一些常见术语，如下所示：
- en: '**Wavelength**: This in radio terminologies means the distance between two
    subsequent crests (high points) or two subsequent troughs (low points) in a waveform.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**波长**：在无线电术语中，这意味着波形中两个连续波峰（高点）或两个连续波谷（低点）之间的距离。'
- en: '**Frequency**: This, as the name suggests, refers to how frequent an event
    happens.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频率**：顾名思义，指事件发生的频率。'
- en: '**Gain**: This is the signal-to-noise ratio of the new processed signal versus
    the signal-to-noise ratio of the original signal.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增益**：这是新处理信号的信噪比与原始信号的信噪比之间的比率。'
- en: '**Filters**: This removes unnecessary or unwanted components from a radio signal.
    It can be of various types such as high pass filter (allowing only signals above
    a certain threshold to pass through the filter), low pass filter (allowing only
    signals below a certain threshold to pass through the filter) and band pass filter
    (allowing only signals between a given frequency range to pass through the filter).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滤波器**：这可以从无线电信号中去除不必要或不需要的组件。它可以是各种类型，如高通滤波器（只允许超过一定阈值的信号通过滤波器）、低通滤波器（只允许低于一定阈值的信号通过滤波器）和带通滤波器（只允许在给定频率范围内的信号通过滤波器）。'
- en: '**Sampling**: This involves converting a continuous signal into a discrete-time
    signal with a number of independent values. As expected, if the sampling rate
    is not correct, the signal would appear to be incomplete or distorted and might
    lead to incorrect calculations.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采样**：这涉及将连续信号转换为具有多个独立值的离散时间信号。如预期的那样，如果采样率不正确，信号将显得不完整或失真，并可能导致不正确的计算。'
- en: '**Nyquist''s theorem**: In this case, any signal can be represented by discrete
    samples if the sampling frequency is at least twice the bandwidth of the signal.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**奈奎斯特定理**：在这种情况下，如果采样频率至少是信号带宽的两倍，任何信号都可以用离散样本表示。'
- en: '**Analog-to-Digital Converter** (**ADC**)/**Digital-to-Analog Converter** (**DAC**):
    This converts analog signals to digital signals and vice versa.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模数转换器**（**ADC**）/**数模转换器**（**DAC**）：这将模拟信号转换为数字信号，反之亦然。'
- en: Now that we have a good understanding of the various radio terminologies, let's
    get into looking at some of the tools with which we can play with SDR and use
    it for security research purposes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对各种无线电术语有了很好的理解，让我们开始看一些工具，用这些工具我们可以玩SDR并将其用于安全研究目的。
- en: Hands-on with SDR tools
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SDR工具
- en: In this section, we will look at the most common tools used for SDR and analysis
    of radio signals. We will begin by getting started with the very basic tools and
    then use that to extract more information from radio packets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍用于SDR和无线电信号分析的最常用工具。我们将从最基本的工具开始，然后使用它来从无线电数据包中提取更多信息。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'To perform SDR-based security research, the following tools will be required:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行基于SDR的安全研究，需要以下工具：
- en: 'Hardware:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件：
- en: RTL-SDR
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTL-SDR
- en: 'Software:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件：
- en: GQRX
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GQRX
- en: GNU Radio companion
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Radio伴侣
- en: To install the tools, the following repositories have the best build instructions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些工具，以下存储库具有最佳的构建说明。
- en: Instead of installing from `apt-get`, ensure that you build GNU Radio companion
    to get a better experience of working with SDR.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确保构建GNU Radio伴侣，而不是从`apt-get`安装，以获得更好的SDR工作体验。
- en: SDR security research is also dependent on the performance of your system. Make
    sure that you have enough RAM allocated to the virtual machine you are performing
    these tasks in. If possible, use an Ubuntu instance as host to get the best experience.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SDR安全研究也取决于您系统的性能。确保为您执行这些任务的虚拟机分配了足够的RAM。如果可能的话，使用Ubuntu实例作为主机以获得最佳体验。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: An RTL-SDR is one of the best devices to get started with in the world of SDR.
    It's originally a TV tuner dongle with the Realtek chipset, which can be used
    for a number of radio-based activities. The frequency of these devices varies
    and is typically in the range of 22 MHz-1.7 GHz.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: RTL-SDR是SDR世界中最好的设备之一。它最初是一种带有Realtek芯片组的电视调谐器，可用于许多基于无线电的活动。这些设备的频率各不相同，通常在22
    MHz-1.7 GHz范围内。
- en: Analyzing FM
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析FM
- en: The first thing that we will do in order to get started with SDR is look at
    the frequency spectrum using RTL-SDR. This will give us a better understanding
    of how everything works and get us started with reconnaissance of SDR-based devices.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了开始SDR，我们将首先使用RTL-SDR查看频谱。这将让我们更好地理解一切是如何运作的，并开始对基于SDR的设备进行侦察。
- en: To do this, plug your RTL-SDR into your system. Ensure that the RTL-SDR is connected
    to your virtual machine if you are using one.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，将你的RTL-SDR插入系统。如果你正在使用虚拟机，请确保RTL-SDR连接到你的虚拟机。
- en: 'Next, open up GQRX and select the RTL-SDR device during the initial launch
    menu. Here, as you can see, we have different sections:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开GQRX并在初始启动菜单中选择RTL-SDR设备。在这里，你可以看到我们有不同的部分：
- en: '![](img/027bbb50-5d18-4f1e-a62b-56449c9dced2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/027bbb50-5d18-4f1e-a62b-56449c9dced2.png)'
- en: In the top section, you will be able to set frequencies using either up and
    down arrow keys or by typing the frequency you want to tune your RTL-SDR to.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部部分，你可以使用上下箭头键或输入你想要调谐RTL-SDR的频率。
- en: Just after the frequency section, we have the frequency spectrum. This is where
    you are able to see which frequencies are most active and also notice spikes in
    them when you use your radio-based IoT device. We will get more into this later.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在频率部分之后，我们有频谱部分。在这里，你可以看到哪些频率最活跃，当你使用基于无线电的物联网设备时，也可以注意到它们的尖峰。我们稍后会更深入地讨论这个问题。
- en: Following this, we have the waterfall section, which is a plot of activity versus
    time. This means that you are able to see which frequency had communication activity
    until a few seconds back.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是瀑布部分，显示了活动与时间的关系。这意味着你可以看到几秒前哪个频率有通信活动。
- en: In the right-hand section, we have a Receiver Options, Input controls, and FFT
    Settings, which are various configurations that will help you analyze your data
    in a better way. However, we won't go into each of them in order to keep things
    simple for now. All the panes can be modified and customized as required.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧部分，我们有接收器选项、输入控制和FFT设置，这些是各种配置，将帮助你更好地分析你的数据。然而，为了简单起见，我们不会详细介绍它们。所有的窗格都可以根据需要进行修改和定制。
- en: In this first exercise, we will listen to one of the local FM stations by tuning
    to it and receiving the audio in GQRX.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个练习中，我们将通过调谐到一个当地的FM电台并在GQRX中接收音频来听取其中的内容。
- en: 'To do this, let''s first change the mode to Wide FM stereo, as shown in the
    following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，让我们首先将模式更改为宽FM立体声，如下截图所示：
- en: '![](img/570c9f3a-51c8-42b7-8890-52817095fd02.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/570c9f3a-51c8-42b7-8890-52817095fd02.png)'
- en: 'Once you have done that, change the frequency to your local FM station frequency
    range as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你做到了，将频率更改为你当地的FM电台频率范围如下：
- en: '![](img/b6cc2a9b-2a29-4907-9ffc-f4ef01626c35.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6cc2a9b-2a29-4907-9ffc-f4ef01626c35.png)'
- en: 'As soon as you hit the Capture button, you will be able to see a frequency
    spectrum with spikes at multiple places. The spikes represent the activity at
    that frequency range:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击捕获按钮，你将能够看到一个频谱，在多个地方有尖峰。这些尖峰代表了那个频率范围的活动：
- en: '![](img/f5f840e8-92ac-4671-9c54-99cf71b3e28c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5f840e8-92ac-4671-9c54-99cf71b3e28c.png)'
- en: If you listen to the sound from your speakers now after tuning to one of the
    valid FM stations, which can be identified by the spike, you will be able to hear
    the FM broadcast at that frequency.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你调谐到一个有效的FM电台后现在从扬声器中听到声音，你将能够在那个频率听到FM广播。
- en: RTL-SDR for GSM analysis
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RTL-SDR用于GSM分析
- en: You can also use RTL-SDR for a number of other purposes. One such usage is performing
    cellular analysis, as shown next. We will be using the RTL-SDR to find the exact
    location details about various cellphone users. This can then be used with a unidirectional
    antenna to increase the range and collect a good amount of information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用RTL-SDR进行许多其他用途。其中一个用途是进行蜂窝分析，如下所示。我们将使用RTL-SDR来查找各种手机用户的确切位置详细信息。然后可以使用单向天线来增加范围并收集大量信息。
- en: 'To do this, launch `grgsm_livemon`, which is downloadable from [https://github.com/ptrkrysik/gr-gsm/](https://github.com/ptrkrysik/gr-gsm/).
    Launch it as shown in the following screenshot:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，启动`grgsm_livemon`，可以从[https://github.com/ptrkrysik/gr-gsm/](https://github.com/ptrkrysik/gr-gsm/)下载。如下截图所示启动它：
- en: '![](img/5d6531f4-0b80-45a4-bca7-9aa853fe7652.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d6531f4-0b80-45a4-bca7-9aa853fe7652.png)'
- en: 'This will open a screen of `grgsm_livemon` allowing you to change gain and
    frequency in order to look at the frequency spectrum:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个`grgsm_livemon`的屏幕，允许你改变增益和频率以查看频谱：
- en: '![](img/bd7bd4f6-e65f-4110-99b5-8900f0a9dd66.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd7bd4f6-e65f-4110-99b5-8900f0a9dd66.png)'
- en: So how do we get the frequency on which the activities are happening on a cellular
    network. To do this, we will use a utility called Kalibrate, which is a GSM-frequency
    identifier and is available from [https://github.com/ttsou/kalibrate](https://github.com/ttsou/kalibrate).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何得到在蜂窝网络上发生活动的频率。为此，我们将使用一个叫做Kalibrate的实用工具，它是一个GSM频率识别器，可以从[https://github.com/ttsou/kalibrate](https://github.com/ttsou/kalibrate)获取。
- en: 'Once you have Kalibrate, specify the band to scan—in this case we are scanning
    for GSM900 and setting the gain to 40.0 dB:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你有了Kalibrate，指定要扫描的频段——在这种情况下，我们正在扫描GSM900并设置增益为40.0 dB：
- en: '![](img/95314674-b781-4ebd-87c9-3f608d57b628.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95314674-b781-4ebd-87c9-3f608d57b628.png)'
- en: 'It tells us that there is good amount of traffic at 956.4 MHz + 9.829 kHz.
    Let''s fire up GQRX and look at this frequency, as shown in the following screenshot:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它告诉我们在956.4 MHz + 9.829 kHz有大量的流量。让我们启动GQRX，看看这个频率，如下截图所示：
- en: '![](img/0cac46df-fff1-4ff8-a86f-d78dc0605ac5.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cac46df-fff1-4ff8-a86f-d78dc0605ac5.png)'
- en: 'As expected, there is indeed a lot of activity happening at the identified
    frequency. So, now we have got the frequency which we want to look at, let''s
    go back to GRGSM, set up this frequency, and analyze it further:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 果然，在确定的频率上确实有很多活动。现在我们已经得到了想要观察的频率，让我们回到GRGSM，设置这个频率，并进一步分析：
- en: '![](img/d79d9f0f-4333-49e0-97cc-72d7ee7022b1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d79d9f0f-4333-49e0-97cc-72d7ee7022b1.png)'
- en: 'We can see the same kind of traffic in Gr-gsm as well. Now, to analyze it further,
    we will need to look at the traffic in Wireshark on the loopback `lo` interface.
    As expected, we are able to see some interesting information here. Apply the `gsmtap`
    filter to filter out the messages which are relevant to us:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以在Gr-gsm中看到相同类型的流量。现在，为了进一步分析，我们需要在Wireshark上查看环回`lo`接口上的流量。正如预期的那样，我们能够在这里看到一些有趣的信息。应用`gsmtap`过滤器以过滤出对我们相关的消息：
- en: '![](img/bc323f6c-f768-4e7c-8568-f7bd3ef17ad5.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc323f6c-f768-4e7c-8568-f7bd3ef17ad5.jpg)'
- en: 'As you can see, we have identified the **Mobile Country Code** (**MCC**), **Mobile
    Network Code** (**MNC**), and **Location Area Code** (**LAC**) using which we
    can now pinpoint the location of this cellphone on the map using utilities like
    CellidFinder, which will allow us to find the closest tower to the phone on the
    map:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经使用**移动国家代码**（**MCC**）、**移动网络代码**（**MNC**）和**位置区域代码**（**LAC**）确定了这部手机的位置，现在我们可以使用CellidFinder等实用程序在地图上找到手机最近的基站：
- en: '![](img/8ee447dc-547c-4467-b49e-62742e780745.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ee447dc-547c-4467-b49e-62742e780745.png)'
- en: So this is how you can use RTL-SDR for a number of various purposes and to analyze
    a lot of things ranging from normal FM to flight traffic to even cellular traffic.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以使用RTL-SDR进行各种不同目的的方法，以及分析从正常FM到飞行交通甚至到蜂窝交通的许多事物。
- en: Working with GNU Radio
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GNU Radio
- en: Now, in the previous cases, it was all about just looking at the frequency and
    analyzing it, however, not too deeply. What if we have an IoT device which is
    transmitting raw radio traffic and we want to understand what is going on behind-the-scenes
    and find out what data is it actually transmitting.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在以前的情况下，一切都只是关于查看频率和分析它，然而，并不是太深入。如果我们有一个传输原始无线电流量的物联网设备，并且我们想要了解幕后发生了什么，并找出它实际传输了什么数据，该怎么办。
- en: To do this, we will use a utility called GNU Radio-companion, which allows us
    to build radio blocks in order to process various radio signals. In this utility,
    you can select an input source (such as RTL-SDR source, Osmocom source, HackRF
    source, and signal generators) and apply radio blocks on it, and finally store
    the output in a raw wav file or plot it in a graph.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用一个名为GNU Radio-companion的实用程序，它允许我们构建无线电块以处理各种无线电信号。在这个实用程序中，你可以选择一个输入源（如RTL-SDR源、Osmocom源、HackRF源和信号发生器），并在其上应用无线电块，最后将输出存储在原始wav文件中或在图表中绘制出来。
- en: For this exercise, we are looking at a weather station for which we will capture
    the data using RTL-SDR source and then perform a demodulation and clock recovery
    to find the actual data which was being sent by the weather station.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们正在研究一个气象站，我们将使用RTL-SDR源捕获数据，然后执行解调和时钟恢复，以找到气象站实际发送的数据。
- en: To find out the frequency on which the device operates, we can use GQRX and
    look for the spikes whenever it transmits data. Another option would be to look
    for FCC ID—a standard required for manufacturers to sell devices in the US—which
    performs significant radioactivity. This information is typically located on one
    of the labels on the device.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出设备操作的频率，我们可以使用GQRX，并在它传输数据时寻找频率峰值。另一个选择是寻找FCC ID——制造商在美国销售设备所需的标准——它执行重要的放射性。这些信息通常位于设备的标签之一上。
- en: 'Once we have the FCC ID, we can go to `fccid.io` and enter the `FCC-ID`, which
    will show us the exact frequency being used by the device:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了FCC ID，我们可以去`fccid.io`并输入`FCC-ID`，这将向我们显示设备正在使用的确切频率：
- en: '![](img/698a2181-2933-4bbc-aa4b-c465c0f1b881.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/698a2181-2933-4bbc-aa4b-c465c0f1b881.png)'
- en: Now that we know the frequency, let's go to GNU Radio-companion and create a
    workflow to process the data coming out of the weather station. We won't go very
    in-depth into GNU Radio-companion and its various properties, but we would highly
    recommend you explore it on your own and try with various other radio captures
    as well.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了频率，让我们去GNU Radio-companion并创建一个处理来自气象站的数据的工作流程。我们不会深入研究GNU Radio-companion及其各种属性，但我们强烈建议您自行探索，并尝试使用各种其他无线电捕获。
- en: 'The following are the blocks that we are going to add here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们要添加的块：
- en: '**Osmocom source**: This helps you to get radio packets from RTL-SDR and passes
    them to the following blocks.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Osmocom源**：这可以帮助你从RTL-SDR获取无线电数据包，并将它们传递给以下块。'
- en: '**Complex to Mag^2**: This helps you to change the complex data type to real,
    not considering things such as the phase angle, which are not important to us
    at the moment.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂到Mag^2**：这可以帮助你将复杂数据类型转换为实数，不考虑诸如相位角之类的对我们目前不重要的事物。'
- en: '**Multiply Const**: This helps you to increase the strength of the output data
    that you receive as the original one might be extremely low. A value of 5 or 10
    would be good.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**乘以常数**：这可以帮助你增加接收到的输出数据的强度，因为原始数据可能极低。5或10的值会很好。'
- en: '**File sink**: This helps you to put the output into a file, which could be
    then analyzed in audacity.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件接收器**：这可以帮助你将输出放入一个文件中，然后可以在audacity中进行分析。'
- en: '![](img/9fe5f846-5cfe-4aec-926b-a9a3741aeb69.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fe5f846-5cfe-4aec-926b-a9a3741aeb69.png)'
- en: Double-click on Osmocom source to change its properties and set the frequency,
    which we identified earlier.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 双击Osmocom源以更改其属性，并设置我们之前确定的频率。
- en: Also double-click on Wav file sink and give it an output filename.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还要双击Wav文件接收器并给它一个输出文件名。
- en: 'We are now ready to run this. Once we run this, we will have a new file called
    `monitor.wav`. Import the file in audacity as a raw file. At this step, this looks
    like an OOK; we would need to convert this data into actual data which is understandable.
    One of the ways would be to have the shorter pulse gaps represent digital zero
    and the longer ones represent the digital ones. This is also shown in the following
    screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行这个。一旦我们运行这个，我们将有一个名为`monitor.wav`的新文件。将文件作为原始文件导入audacity。在这一步，这看起来像是OOK；我们需要将这些数据转换为可理解的实际数据。其中一种方法是让较短的脉冲间隔表示数字零，较长的脉冲间隔表示数字一。这也显示在以下截图中：
- en: '![](img/4cef0e57-aa81-4f65-8cd4-1b3976005b29.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cef0e57-aa81-4f65-8cd4-1b3976005b29.png)'
- en: 'If we analyze the data further, we are now able to see the exact data that
    was sent by the weather station including the temperature and humidity data:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步分析数据，现在可以看到气象站发送的确切数据，包括温度和湿度数据：
- en: '![](img/b818cbd7-a1f9-48cc-b1a2-64c9598f7f1c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b818cbd7-a1f9-48cc-b1a2-64c9598f7f1c.png)'
- en: There's more...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a number of other utilities built around RTL-SDR and overall SDR hacking
    which could be used for a number of purposes. For example, the ADS-B project allows
    you to track flights in real-time, RTL-433 to work with 433 MHz signals and additional
    utilities to exploit things such as Keyfobs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多围绕RTL-SDR和整体SDR黑客技术构建的其他实用程序，可以用于许多目的。例如，ADS-B项目允许您实时跟踪飞行，RTL-433用于处理433
    MHz信号，还有其他实用程序可用于利用诸如钥匙扣之类的东西。
- en: Understanding and exploiting ZigBee
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和利用ZigBee
- en: ZigBee is one of the common wireless protocols used in IoT devices because of
    its ability to form mesh networks and perform operations with low power and resource
    consumption. It has found its use in a number of verticals, including Smart homes,
    **Industrial Control Systems** (**ICS**), smart building control, and so on. It
    operates on 2.4 GHz in most countries, 902 to 928 MHz in America and Australia,
    and 868 to 868.6 MHz in Europe.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ZigBee是物联网设备中常用的无线协议之一，因为它能够形成网状网络并以低功耗和资源消耗执行操作。它已经在许多垂直领域中得到应用，包括智能家居、工业控制系统（ICS）、智能建筑控制等。在大多数国家，它在2.4
    GHz运行，在美国和澳大利亚是902到928 MHz，在欧洲是868到868.6 MHz。
- en: In this section, we will be looking at ZigBee and seeing how we can identify
    the ZigBee devices around us and sniff and replay the traffic in order to identify
    security issues.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究ZigBee，看看我们如何识别周围的ZigBee设备，并嗅探和重放流量以识别安全问题。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To work with ZigBee, the following set up is required:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用ZigBee，需要以下设置：
- en: '**Hardware**: Atmel RzRaven USB Stick flashed with KillerBee firmware'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件**：Atmel RzRaven USB Stick刷入了KillerBee固件'
- en: '**Software**: KillerBee'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件**：KillerBee'
- en: Installing KillerBee is extremely straightforward and can be done by following
    the instructions on the official GitHub repo available here [https://github.com/riverloopsec/killerbee](https://github.com/riverloopsec/killerbee).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 安装KillerBee非常简单，可以按照官方GitHub存储库上的说明进行操作，链接在这里[https://github.com/riverloopsec/killerbee](https://github.com/riverloopsec/killerbee)。
- en: Once you have the setup completed, plug your RzUSB stick into your system. You
    should be able to see the LED glow with an amber color. If you find the color
    is blue, this means that your RzUSB stick is not flashed with the KillerBee firmware.
    We won't go into the instructions to flash the firmware - as it is documented
    well in the GitHub repo, and there are a number of online stores from where you
    can get a preflashed RzRaven with KillerBee firmware.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置后，将RzUSB棒插入系统。您应该能够看到LED呈琥珀色发光。如果颜色是蓝色，这意味着您的RzUSB棒未刷入KillerBee固件。我们不会详细介绍刷写固件的说明-因为它在GitHub存储库中有很好的文档，并且有许多在线商店可以购买预刷写了KillerBee固件的RzRaven。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Following are the steps for how we can get started with analyzing ZigBee devices
    around us and finally sniffing the traffic over ZigBee using the RzRaven and KillerBee
    utility.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何开始分析我们周围的ZigBee设备并最终使用RzRaven和KillerBee实用程序嗅探ZigBee流量的步骤。
- en: 'The first step that we will perform is to look at ZigBee devices around us.
    This can be done using the `zbid` utility, as shown in the following screenshot:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将执行的第一步是查看周围的ZigBee设备。可以使用`zbid`实用程序来完成，如下图所示：
- en: '![](img/6d1f581f-6c5a-457d-a409-9b01d0e9b41a.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d1f581f-6c5a-457d-a409-9b01d0e9b41a.png)'
- en: 'We have also flashed the following program to the Arduino. This program tells
    Arduino to interact with XBee connected over serial at pins 2 and 3, and send
    the message `5e87bb4a6cdef053fde67ea9711d51f3` via XBee. The channel that XBee
    sends this traffic on is based on how a given XBee is programmed. If you would
    like to program your own XBee and specify the channel, you can use the utility
    XCTU:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将以下程序刷入了Arduino。该程序告诉Arduino与通过引脚2和3连接的XBee进行交互，并通过XBee发送消息`5e87bb4a6cdef053fde67ea9711d51f3`。XBee发送此流量的通道基于给定XBee的编程方式。如果您想要编程自己的XBee并指定通道，可以使用实用程序XCTU：
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we place both the Xbee and Arduino in the Xbee Shield, which looks similar
    to what is shown in the following image:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将Xbee和Arduino放入Xbee Shield中，这与下图所示的情况类似：
- en: '![](img/c7caa28e-2466-4443-a812-afb7ea431c61.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7caa28e-2466-4443-a812-afb7ea431c61.png)'
- en: 'Power on the shield and run `Zbstumbler`, as shown in the following screenshot:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开盾牌并运行`Zbstumbler`，如下图所示：
- en: '![](img/6c4a07eb-2633-464b-a298-4aabcb6c0b24.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c4a07eb-2633-464b-a298-4aabcb6c0b24.png)'
- en: As we can see, we are able to see devices broadcasting on channel 12.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们能够看到在通道12上广播的设备。
- en: 'The next step is to sniff the traffic on channel 12 and see if it contains
    any sensitive information. For this, we will use the `zbwireshark` utility using
    the syntax shown as follows, which will automatically open Wireshark for ZigBee
    sniffing on the channel specified in the syntax:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是嗅探通道12上的流量，看看它是否包含任何敏感信息。为此，我们将使用`zbwireshark`实用程序，使用以下语法显示的语法，它将自动在指定语法中的通道上打开Wireshark进行ZigBee嗅探：
- en: '[PRE1]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As expected, we will be able to see all the traffic in Wireshark, as shown
    in the following screenshot, along with the sensitive string that we programmed
    the Arduino with:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们将能够在Wireshark中看到所有流量，如下面的屏幕截图所示，以及我们在Arduino中编程的敏感字符串：
- en: '![](img/fd9456e5-8143-4e84-905c-ac498bc55e9e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd9456e5-8143-4e84-905c-ac498bc55e9e.png)'
- en: There's more...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can also perform additional attacks such as replaying the captured traffic
    after modification using utilities such as Zbreplay in the KillerBee tool suite.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行其他攻击，例如使用KillerBee工具套件中的Zbreplay等实用程序修改捕获的流量后进行重放攻击。
- en: Gaining insight into Z-Wave
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Z-Wave
- en: Z-Wave is one of the popular protocols in wireless sensor networks and home
    automation, and operates on 908.42 MHz in US and 868.42 MHz in Europe. Z-Wave
    just like ZigBee supports mesh networking, which makes it secure against issues
    such as node failure.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Z-Wave是无线传感器网络和家庭自动化中的流行协议之一，在美国的频率是908.42 MHz，在欧洲是868.42 MHz。Z-Wave就像ZigBee一样支持网状网络，这使其免受节点故障等问题的影响。
- en: It has been developed by Sigma Systems, which makes it a closed protocol compared
    to ZigBee and others. This is also one of the reasons that the security research
    initiative by the security community against Z-Wave is relatively less compared
    to other popular IoT protocols. There are also projects such as OpenZWave to provide
    an open source alternative; however, they are still in the very early stages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 它由Sigma Systems开发，与ZigBee和其他协议相比，它是一个封闭的协议。这也是安全社区对Z-Wave的安全研究倡议相对较少的原因之一，与其他流行的物联网协议相比。还有一些项目，如OpenZWave提供开源替代方案；然而，它们仍处于非常早期的阶段。
- en: Just like typical radio communication protocols, Z-Wave devices suffer from
    the same set of security issues. One of the most common vulnerabilities in Z-Wave
    devices is the lack of encryption in communication, which makes it vulnerable
    to attacks such as sensitive information transmission in clear text and replay-based
    attacks. However, another thing to note is that projects such as S2 Security in
    Z-Wave drastically increase the security of the Z-Wave implementations in the
    device, additionally protecting it from attacks against key exchange and device
    authentication.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 就像典型的无线通信协议一样，Z-Wave设备遭受相同一组安全问题的影响。 Z-Wave设备中最常见的漏洞之一是通信中缺乏加密，这使其容易受到敏感信息明文传输和基于重放的攻击的影响。然而，还要注意的是，诸如Z-Wave中的S2安全等项目大大增加了设备中Z-Wave实现的安全性，此外还保护免受针对密钥交换和设备认证的攻击。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: To perform attacks against Z-Wave, one of the popular frameworks is EZ-Wave
    ([https://github.com/AFITWiSec/EZ-Wave](https://github.com/AFITWiSec/EZ-Wave))
    developed by *Joe Hall* and *Ben Ramsey*, which uses Hack RF hardware to perform
    attacks against the Z-Wave protocol.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对Z-Wave进行攻击的一种流行框架是EZ-Wave（[https://github.com/AFITWiSec/EZ-Wave](https://github.com/AFITWiSec/EZ-Wave)）由*Joe
    Hall*和*Ben Ramsey*开发，它使用Hack RF硬件对Z-Wave协议进行攻击。
- en: 'The EZ-Wave toolkit comprises three tools, which are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: EZ-Wave工具包包括三个工具，如下所示：
- en: Device discovery and enumeration-EZStumbler
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备发现和枚举-EZStumbler
- en: Reconnaissance on identified devices-EZRecon
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对已识别设备进行侦察-EZRecon
- en: Exploitation-EZFingerprint
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用-EZFingerprint
- en: 'One of the methods of assessment of the Z-Wave protocol is to capture the packets
    in transmission and look for sensitive information being transmitted in clear
    text:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 评估Z-Wave协议的一种方法是捕获传输中的数据包，并查找明文传输的敏感信息：
- en: '![](img/cd4a557a-930c-4fd0-bb0d-dac8983b8bc0.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd4a557a-930c-4fd0-bb0d-dac8983b8bc0.png)'
- en: 'Using all the preceding building blocks, here is what our final flow graph
    looks like:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所有前述的构建模块，我们的最终流程图如下所示：
- en: '![](img/576c7c52-8e9c-4887-a4ab-1a38159dc83c.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/576c7c52-8e9c-4887-a4ab-1a38159dc83c.png)'
- en: 'Image source: http://oldsmokingjoe.blogspot.in/2016/04/z-wave-protocol-analysis-using-ez-wave.html.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图像来源：http://oldsmokingjoe.blogspot.in/2016/04/z-wave-protocol-analysis-using-ez-wave.html。
- en: Once this is done, we can choose to replay the packets or modify and then replay
    based on the target that we want to achieve. Another class of attacks against
    the Z-Wave systems would be Disjoining/Unpairing attacks of Z-Wave device nodes
    from the network, Spoofing attacks, Jamming and Denial of Service attacks, and
    so on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以选择重放数据包，或者根据我们想要实现的目标修改然后重放。另一类针对Z-Wave系统的攻击是从网络中分离/取消配对Z-Wave设备节点的攻击，欺骗攻击，干扰和拒绝服务攻击等。
- en: Understanding and exploiting BLE
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和利用BLE
- en: BLE or Bluetooth Low Energy is one of the most common platforms found in a number
    of smart devices ranging from smart homes to medical device utilities to even
    fitness trackers and wearables. One of the reasons for the growing popularity
    of BLE is that pretty much all smartphones that we use today support BLE, thus
    making it easier to interact with BLE-based IoT devices.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: BLE或蓝牙低功耗是许多智能设备中最常见的平台之一，从智能家居到医疗设备工具，甚至健身追踪器和可穿戴设备都有。 BLE日益受欢迎的原因之一是我们今天使用的几乎所有智能手机都支持BLE，因此更容易与基于BLE的物联网设备进行交互。
- en: BLE is designed for devices with resource and power constraints which BLE effectively
    solves by providing short bursts of long range radio connections, thus significantly
    saving battery consumption.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: BLE设计用于资源和功耗受限的设备，BLE通过提供短暂的远程无线连接有效解决了这个问题，从而显著节省了电池消耗。
- en: BLE was initially introduced in Bluetooth 4.0 specifications focusing on the
    devices which needed a mode of communication with extreme low power consumption,
    where BLE claimed to last from a couple months to several years on a single coin
    cell battery.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: BLE最初是在蓝牙4.0规范中引入的，专注于需要极低功耗通信模式的设备，BLE声称可以在单个纽扣电池上持续几个月到几年。
- en: 'A BLE device can operate in four different modes based on its current connection
    and operational phase:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 基于其当前连接和操作阶段，BLE设备可以以四种不同的模式运行：
- en: '**Central device and peripheral device**: In this classification, the device
    which scans for advertisement packets and initiates connections is called the
    central device, whereas the device that advertises itself for connection is called
    the peripheral device. An example of this would be a smartphone as a central device
    and a fitness tracker as a peripheral.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中心设备和外围设备**：在这种分类中，扫描广告数据包并发起连接的设备称为中心设备，而广告自己进行连接的设备称为外围设备。一个例子是智能手机作为中心设备，健身追踪器作为外围设备。'
- en: '**Broadcaster and observer**: As the name implies, a broadcaster is a device
    that broadcasts data, whereas an observer is a device which scans for advertisement
    packets. However, the major difference here compared to the previous classification
    type is that the broadcaster is nonconnectable and the observer can''t initiate
    connections. An example of this would be a weather station which emits temperature
    data continuously acting as a broadcaster, whereas a display that receives the
    broadcasts and shows it on the screen is an observer.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广播器和观察者**：顾名思义，广播器是一个广播数据的设备，而观察者是一个扫描广告数据包的设备。然而，与以前的分类类型相比，这里的主要区别是广播器是不可连接的，观察者不能发起连接。例如，一个连续发射温度数据的天气站是一个广播器，而接收广播并在屏幕上显示的显示器是一个观察者。'
- en: 'BLE consists of 40 different channels—3 advertisement and 37 data channels,
    as shown in the following image:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: BLE由40个不同的通道组成——3个广告通道和37个数据通道，如下图所示：
- en: '![](img/ead3bba8-fc27-4e0e-842e-b8bd8cfdcf93.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ead3bba8-fc27-4e0e-842e-b8bd8cfdcf93.png)'
- en: 'Source: http://www.connectblue.com/press/articles/shaping-the-wireless-future-with-low-energy-applications-and-systems/'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：http://www.connectblue.com/press/articles/shaping-the-wireless-future-with-low-energy-applications-and-systems/
- en: BLE also performs frequency hopping spread spectrum, which means that it keeps
    changing channels on every event. However, the tools that we are going to use
    in the coming sections will be able to follow a device via the hops and be able
    to sniff the data for the BLE communication.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: BLE还执行频率跳频扩频，这意味着它在每个事件上不断改变通道。然而，在接下来的部分中我们将要使用的工具将能够跟踪设备通过跳频，并能够嗅探BLE通信的数据。
- en: 'To get ourselves better prepared with the foundational concepts of Bluetooth
    Low Energy, here''s what BLE stack looks like:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地准备好自己，了解蓝牙低功耗的基本概念，这是BLE堆栈的外观：
- en: '![](img/e4496114-6634-4e2a-8166-f60a868dc25a.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4496114-6634-4e2a-8166-f60a868dc25a.png)'
- en: 'Image source: http://www.embetronicx.com/'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：http://www.embetronicx.com/
- en: 'As you can see, there are three main layers here: **Application**, **Host**,
    and **Controller**. Also, the **Host** and **Controller** interact through what
    is called the **Host Controller Interface** (**HCI**).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里有三个主要层：**应用程序**、**主机**和**控制器**。此外，**主机**和**控制器**通过所谓的**主机控制器接口**（**HCI**）进行交互。
- en: The **Controller** contains the **Link Layer** (**LL**) and **LE Physical Layer**
    (**PHY**). The physical layer is responsible for the primary task of signal modulation
    and demodulation, and calculating the hopping pattern for the device during a
    connection. The link layer is responsible for a number of tasks such as managing
    a number of things, including the Bluetooth address of the device, encryption
    and connection initiation, and handling advertisement packets.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制器**包含**链路层**（**LL**）和**LE物理层**（**PHY**）。物理层负责信号调制和解调的主要任务，并在连接期间计算设备的跳频模式。链路层负责管理许多任务，包括设备的蓝牙地址、加密和连接初始化，以及处理广告数据包。'
- en: The **Host** layer contains some of the most important things that we will be
    directly working with during BLE exploitation. These include **Generic Access
    Profile** (**GAP**) and **Generic Attribute Profile** (**GATT**).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**主机**层包含我们在BLE开发中将直接使用的一些最重要的东西。这些包括**通用访问配置文件**（**GAP**）和**通用属性配置文件**（**GATT**）。'
- en: GAP is responsible for controlling most of the advertisements and connection
    initiations, as well as defining the roles of various devices present in a communication.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: GAP负责控制大部分广告和连接初始化，以及定义通信中各种设备的角色。
- en: 'GATT sits directly on top of ATT, which is the component responsible for data
    exchange between master/slave and performs a number of operations such as read,
    write, and error handling. GATT adds an overall data organizational layer on top
    of ATT making it more understandable. In GATT, the entire data is categorized
    as per the given diagram:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: GATT直接位于ATT之上，ATT负责主/从之间的数据交换，并执行一些操作，如读取、写入和错误处理。GATT在ATT之上添加了一个整体的数据组织层，使其更易于理解。在GATT中，整个数据按照给定的图表进行分类：
- en: '![](img/6f57e9d2-ac6e-4989-9cbb-203323bac8fc.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f57e9d2-ac6e-4989-9cbb-203323bac8fc.png)'
- en: As we can see from the preceding diagram, the overall data is organized into
    the lowest elements of **Characteristic**, which hold a **Value** and **Descriptor**.
    An example of this would be heart-beats-per-minute and its value being stored
    in characteristic. The characteristics also have a unique UUID, which can be referenced
    from the Bluetooth **Special Interest Group** (**SIG**) database available here
    [https://www.bluetooth.com/specifications/gatt/characteristics](https://www.bluetooth.com/specifications/gatt/characteristics).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图可以看出，整体数据组织成最低层的**特征**，其中包含**值**和**描述符**。一个例子是每分钟心跳和其值存储在特征中。特征还有一个唯一的UUID，可以从蓝牙**特殊兴趣组**（**SIG**）数据库中引用，该数据库位于[https://www.bluetooth.com/specifications/gatt/characteristics](https://www.bluetooth.com/specifications/gatt/characteristics)。
- en: Next, various similar characteristics are enclosed in services. An example of
    a service would be `heart-rate-service`, which contains various characteristics
    such as heart-beats-per-minute, irregular-heart-beats, and panic-attacks. Services
    also have a 16-bit UUID using which they can be referred from to the Bluetooth
    SIG database of Services UUID available here [https://www.bluetooth.com/specifications/gatt/services](https://www.bluetooth.com/specifications/gatt/services).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，各种相似的特征被封装在服务中。服务的一个例子是`心率服务`，其中包含各种特征，如每分钟心跳、不规则心跳和恐慌发作。服务还有一个16位UUID，可以从蓝牙SIG服务UUID数据库中引用，该数据库位于[https://www.bluetooth.com/specifications/gatt/services](https://www.bluetooth.com/specifications/gatt/services)。
- en: Next, this entire service is enclosed within a **Profile**, which could be a
    generic profile, in this case, something like a heart health profile, which contains
    various services such as `heart-rate-service` and `heart-oxygen-service`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，整个服务都包含在一个**配置文件**中，这可以是一个通用配置文件，例如心脏健康配置文件，其中包含各种服务，如`heart-rate-service`和`heart-oxygen-service`。
- en: As mentioned earlier, our goal during sniffing is to find the value of characteristics,
    which are being read and written. These characteristics are usually referred to
    as **handles**, which is what we will see once we capture the traffic.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在嗅探期间，我们的目标是找到正在读取和写入的特征值。这些特征通常被称为**句柄**，一旦我们捕获到流量，就会看到这些句柄。
- en: Moving on, the other important component of the BLE stack is L2CAP. L2CAP stands
    for logical link control and adaption protocol and is responsible for primarily
    taking data from the other layers and encapsulating the data in a proper BLE packet
    structure.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，BLE堆栈的另一个重要组件是L2CAP。L2CAP代表逻辑链路控制和适配协议，主要负责从其他层获取数据并将数据封装在适当的BLE数据包结构中。
- en: That is all that we need to know to get started with BLE exploitation. Now,
    let's get our hands dirty.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们开始BLE利用所需要知道的全部。现在，让我们开始动手吧。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with BLE Exploitation, we need the following tools:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始进行BLE利用，我们需要以下工具：
- en: 'Software:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件：
- en: Blue Hydra or HCI Utils
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blue Hydra或HCI Utils
- en: Ubertooth utils
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubertooth utils
- en: Gattacker
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gattacker
- en: 'Hardware:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件：
- en: BLE adapter dongle
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLE适配器插头
- en: Ubertooth or similar BLE sniffer
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubertooth或类似的BLE嗅探器
- en: When working with BLE, our methodology is to first find out the target device's
    address and sniff the traffic for that specific address while performing an operation
    with the target BLE device.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理BLE时，我们的方法是首先找出目标设备的地址，同时在执行目标BLE设备的操作时嗅探该特定地址的流量。
- en: This will allow us to find specific BLE handles that are being written on the
    device to perform a certain action. To give a better insight to what BLE handles
    are, they are simply a reference to the various properties a BLE characteristic
    has.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够找到正在设备上写入以执行某个操作的特定BLE句柄。为了更好地了解BLE句柄是什么，它们只是对BLE特征具有的各种属性的引用。
- en: In this section, we will ensure that we have everything properly set up, as
    given next.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将确保我们已经正确设置了一切，如下所示。
- en: 'Ensure that the Bluetooth Adapter dongle is connected to your virtual machine
    and you are able to see the `hci` interface, as shown in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 确保蓝牙适配器插头连接到您的虚拟机，并且您能够看到`hci`接口，如下截图所示：
- en: '![](img/2ba5963d-506f-4a75-b767-2547224d0417.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ba5963d-506f-4a75-b767-2547224d0417.png)'
- en: 'Next, install the following tools from their official GitHub repos:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从它们的官方GitHub存储库安装以下工具：
- en: 'Blue Hydra (for performing initial recon on the BLE devices) : [https://github.com/pwnieexpress/blue_hydra](https://github.com/pwnieexpress/blue_hydra)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blue Hydra（用于对BLE设备进行初始侦察）：[https://github.com/pwnieexpress/blue_hydra](https://github.com/pwnieexpress/blue_hydra)
- en: Ubertooth Utils (to perform sniffing and packet capture for our BLE devices)
    [https://github.com/greatscottgadgets/ubertooth](https://github.com/greatscottgadgets/ubertooth)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubertooth Utils（用于对我们的BLE设备执行嗅探和数据包捕获）[https://github.com/greatscottgadgets/ubertooth](https://github.com/greatscottgadgets/ubertooth)
- en: Wireshark (Packet analysis tool, also compatible with BLE) [https://www.wireshark.org/download.html](https://www.wireshark.org/download.html)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wireshark（数据包分析工具，也兼容BLE）[https://www.wireshark.org/download.html](https://www.wireshark.org/download.html)
- en: Once you have all of this installed and configured, we are ready to start interacting
    with BLE devices around us.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装和配置了所有这些，我们就准备好开始与周围的BLE设备进行交互了。
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The first thing that we will do in order to interact with BLE devices around
    us is to look at all the devices around us and find their Bluetooth addresses.
    This can be done using the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是与我们周围的BLE设备进行交互，查看周围所有设备并找到它们的蓝牙地址。可以使用以下命令完成：
- en: '[PRE2]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This uses the `lescan` (Low Energy Scan) functionality of Hcitool to look for
    all the BLE advertisements in the vicinity, as shown in the following screenshot:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使用Hcitool的`lescan`（低功耗扫描）功能来查找附近所有BLE广告，如下截图所示：
- en: '![](img/0db4993d-ecc5-41b0-984c-4bfd38de884f.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0db4993d-ecc5-41b0-984c-4bfd38de884f.png)'
- en: As you can see, we are able to identify a number of devices around us along
    with their addresses. Next, we can use Ubertooth to sniff the traffic for a given
    device as shown next.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们能够识别出我们周围的许多设备以及它们的地址。接下来，我们可以使用Ubertooth来嗅探给定设备的流量，如下所示。
- en: Ubertooth One is a device developed by *Michael Ossman* of GreatScottGadgets
    to help assess the security of Bluetooth devices. It consists of a CC2400 2.4
    GHz RF transceiver combined with an NXP LPC1756 MicroController with a USB port.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Ubertooth One是由*Michael Ossman*的GreatScottGadgets开发的设备，用于评估蓝牙设备的安全性。它由CC2400
    2.4 GHz射频收发器和带有USB端口的NXP LPC1756微控制器组成。
- en: For us as security researchers and penetration testers, it can help identify
    security issues such as clear-text data transmission and also identifying which
    handles are being written and read during a network communication.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们作为安全研究人员和渗透测试人员，它可以帮助识别诸如明文数据传输之类的安全问题，还可以识别在网络通信期间正在被写入和读取的句柄。
- en: 'To use Ubertooth to sniff the connections from a given device following it,
    use the following syntax:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Ubertooth嗅探从给定设备后面的连接，请使用以下语法：
- en: '[PRE3]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace `[address]` with the address of the device, which we identified in the
    previous step.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用设备的地址替换`[address]`，这是我们在上一步骤中识别的设备的地址。
- en: The `[capture-output]` could either be a file or a pipe, in case we want to
    do an active traffic interception.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`[capture-output]`可以是文件，也可以是管道，以便进行主动流量拦截。'
- en: Let's use `/tmp/pipe` as a capture interface with one end of the pipe getting
    input data from the Ubertooth and the other end of the pipe showing the data in
    Wireshark.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`/tmp/pipe`作为捕获接口，其中一个管道的一端从Ubertooth获取输入数据，另一个管道的另一端在Wireshark中显示数据。
- en: To do this, open up another terminal window and type in mkfifo `/tmp/pipe`.
    Once done, go to Wireshark | Capture Interfaces | Manage Interface | New Interface
    | Pipes and add the value `/tmp/pipe` and save the interface.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，打开另一个终端窗口，输入mkfifo `/tmp/pipe`。完成后，转到Wireshark | 捕获接口 | 管理接口 | 新接口 |
    管道，并添加值`/tmp/pipe`并保存接口。
- en: 'Next, start sniffing on the `/tmp/pipe` interface in Wireshark, which you have
    just created. Depending on the action you are performing and your target device,
    you will be able to see the BLE traffic show up in Wireshark, as shown in the
    following screenshot:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在Wireshark中开始嗅探`/tmp/pipe`接口，这是您刚刚创建的。根据您执行的操作和目标设备，您将能够在Wireshark中看到BLE流量显示，如下面的屏幕截图所示：
- en: '![](img/49e2fa34-64cb-409a-b61b-b99733d53d88.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49e2fa34-64cb-409a-b61b-b99733d53d88.png)'
- en: We have also applied a filter in the preceding screenshot of `btl2cap.cid==0x004`
    to ensure that we get the packets which have useful data. As you can also see
    in the image, we have got a number of read/write requests, along with details
    of the handles and the value that was written to that specific handle. In this
    case, the handle 0x0037 and the value 1 correspond to unlocking of a BLE-based
    smart lock.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们还应用了一个过滤器`btl2cap.cid==0x004`，以确保我们获得具有有用数据的数据包。正如您在图像中也可以看到的，我们收到了许多读/写请求，以及句柄的详细信息和写入该特定句柄的值。在这种情况下，句柄0x0037和值1对应于解锁基于BLE的智能锁。
- en: Now that we know what value is being written to the handle in order to perform
    a specific action, we can write that particular handle ourselves, without the
    need for Ubertooth. For this, we will use the BLE adapter dongle and a utility
    called `gatttool`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道为了执行特定操作而写入句柄的值是什么，我们可以自己写入该特定句柄，而无需Ubertooth。为此，我们将使用BLE适配器和一个名为`gatttool`的实用程序。
- en: 'To do this, launch up `gatttool`, as shown next, along with the `-b` and `-I`
    flags providing the Bluetooth address and specifying it open in interactive mode:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，启动`gatttool`，如下所示，以及使用`-b`和`-I`标志提供蓝牙地址并指定在交互模式下打开：
- en: '[PRE4]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, all we need to do here is send a write request to the target device specifying
    the value that we want to write to the handle, as shown in the following screenshot:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在这里需要做的就是向目标设备发送写请求，指定我们要写入句柄的值，如下面的屏幕截图所示：
- en: '![](img/9c233db9-2548-42cc-b0dd-693406dd2ad4.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c233db9-2548-42cc-b0dd-693406dd2ad4.png)'
- en: This has unlocked the smart lock since the smart lock detected that the handle
    `0x0037` now has the value of `01`, which is related to the state of smart lock
    being unlocked.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经解锁了智能锁，因为智能锁检测到句柄`0x0037`现在具有值`01`，这与智能锁解锁的状态相关。
- en: This is how you can interact with a BLE-based IoT device, figure out which handles
    are being written and then write those handles yourself.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以与基于BLE的物联网设备进行交互，找出哪些句柄正在被写入，然后自己写入这些句柄的方法。
- en: 'You can also look at other properties of the device by looking at all the values
    of services, as shown in the following screenshot:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过查看所有服务的所有值来查看设备的其他属性，如下面的屏幕截图所示：
- en: '![](img/d6b20658-7c73-4558-84a7-0ed9256ff595.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6b20658-7c73-4558-84a7-0ed9256ff595.png)'
- en: 'This can also be done for characteristics, as shown in the following screenshot:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这也可以用于特征，如下面的屏幕截图所示：
- en: '![](img/ab8644cf-8f85-4823-8441-5cd24cf6ad3d.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab8644cf-8f85-4823-8441-5cd24cf6ad3d.png)'
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To sniff BLE traffic effectively, it is important to identify the device which
    could be advertising on any of the three advertising channels. For this, it is
    important to have a setup of three Ubertooths rather than one.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效地嗅探BLE流量，重要的是要识别可能在任何三个广告信道上进行广告的设备。为此，重要的是要设置三个Ubertooth而不是一个。
- en: 'Additionally, some of the other tools you can try out are:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以尝试一些其他工具：
- en: '**btlejuice**: This is a handy tool if you would like to perform MITM on BLE
    traffic with a web GUI interface'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**btlejuice**：如果您想要使用Web GUI界面对BLE流量进行中间人攻击，这是一个方便的工具'
- en: '**Gattacker**: This is similar to `btlejuice` but without a GUI'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gattacker**：这类似于`btlejuice`，但没有GUI'
- en: '**BLEah**: This is a BLE info-gathering tool'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLEah**：这是一个BLE信息收集工具'
