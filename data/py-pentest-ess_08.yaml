- en: Client-Side and DDoS Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端验证和DDoS攻击
- en: 'In the previous chapter, you learned how to parse a web page, as well as how
    to glean specific information from an HTML page. In this chapter, we will go through
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何解析网页，以及如何从HTML页面中获取特定信息。在本章中，我们将讨论以下主题：
- en: Validation in a web page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页中的验证
- en: Types of validation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证类型
- en: Penetration testing of validations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证的渗透测试
- en: DoS attacks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DoS攻击
- en: DDoS attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS攻击
- en: Detection of DDoS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS的检测
- en: Introducing client-side validation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入客户端验证
- en: Often, when you access a web page in your web browser, you open a form, fill
    in the form, and submit it. During the filling of the form, some fields may have
    constraints, such as the username, which should be unique; and the password, which
    should be greater than eight characters, and these fields should not be empty.
    For this purpose, two types of validations are used, which are client-side and
    server-side validations. Languages such as PHP and ASP.NET use server-side validation,
    taking the input parameter and matching it with the database of the server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您在Web浏览器中访问网页时，您会打开一个表单，填写表单并提交。在填写表单的过程中，某些字段可能有约束条件，例如用户名应该是唯一的；密码应该大于八个字符，并且这些字段不应为空。为此，使用了两种类型的验证，即客户端验证和服务器端验证。诸如PHP和ASP.NET之类的语言使用服务器端验证，接受输入参数并将其与服务器的数据库进行匹配。
- en: 'In client-side validation, the validation is done at the client side. JavaScript
    is used for client-side validation. A quick response and easy implementation make
    client-side validation beneficial, to some extent. However, the frequent use of
    client-side validation gives attackers an easy way to attack; server-side validation
    is more secure than client-side validation. Normal users can see what is happening
    on a web browser, but a hacker can see what can be done outside the web browser.
    The following image illustrates client-side and server-side validation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端验证中，验证是在客户端完成的。JavaScript用于客户端验证。快速响应和易于实现使客户端验证在一定程度上具有益处。然而，频繁使用客户端验证为攻击者提供了一种攻击方式；服务器端验证比客户端验证更安全。普通用户可以看到在Web浏览器上发生了什么，但黑客可以看到在Web浏览器之外可以做什么。以下图片说明了客户端验证和服务器端验证：
- en: '![](img/1114bf29-1c02-4172-a8ab-bc3389b8a5b6.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1114bf29-1c02-4172-a8ab-bc3389b8a5b6.png)'
- en: PHP plays a middle-layer role. It connects the HTML page to the SQL Server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PHP起到了中间层的作用。它将HTML页面连接到SQL服务器。
- en: Tampering with the client-side parameter with Python
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python篡改客户端参数
- en: The two most commonly used methods, POST and GET, are used to pass the parameters
    in the HTTP protocol. If the website uses the GET method, its passing parameter
    is shown in the URL and you can change this parameter and pass it to a web server;
    this is in contrast to the POST method, where the parameters are not shown in
    the URL.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的两种方法POST和GET用于在HTTP协议中传递参数。如果网站使用GET方法，其传递参数将显示在URL中，您可以更改此参数并将其传递给Web服务器；这与POST方法相反，其中参数不显示在URL中。
- en: In this section, we will use a dummy website with simple JavaScript code, along
    with parameters passed by the POST method and hosted on the Apache web server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用一个带有简单JavaScript代码的虚拟网站，以及通过POST方法传递的参数，并托管在Apache Web服务器上。
- en: 'Let''s look at the `index.php` code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下`index.php`代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I hope you can understand the HTML, JavaScript, and PHP code. The preceding
    code shows a sample form, which comprises two text-submitting fields, name and
    comment:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您能理解HTML、JavaScript和PHP代码。上面的代码显示了一个示例表单，其中包括两个文本提交字段，名称和评论：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code shows validation. If the name field is empty or filled as
    `HACKER`, then it displays an alert box and, if the comment field is empty, it
    will show an alert message where you can enter your comment, as shown in the following
    screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码显示了验证。如果名称字段为空或填写为`HACKER`，则会显示一个警报框，如果评论字段为空，它将显示一个警报消息，您可以在其中输入您的评论，如下面的屏幕截图所示：
- en: '![](img/65ffb5a7-a5f8-4094-9d3b-34ceaabdd5a1.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65ffb5a7-a5f8-4094-9d3b-34ceaabdd5a1.png)'
- en: Alert box of validation
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 验证的警报框
- en: So, our challenge here is to bypass validation and submit the form. You may
    have done this earlier using the Burp suite. Now, we will do this using Python.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里的挑战是绕过验证并提交表单。您可能之前使用Burp套件做过这个，现在我们将使用Python来做这个。
- en: 'In the previous chapter, you saw the BeautifulSoup tool; now, I am going to
    use a Python browser called *mechanize*. The mechanize web browser provides the
    facility to obtain forms in a web page and also facilitates the submission of
    input values. By using mechanize, we are going to bypass the validation, as shown
    in the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您看到了BeautifulSoup工具；现在，我将使用一个名为*mechanize*的Python浏览器。mechanize网络浏览器提供了在网页中获取表单的功能，并且还便于提交输入值。通过使用mechanize，我们将绕过验证，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All our code snippets start with an `import` statement. So here, we are importing
    the `mechanize` module. The next line creates a `br` object of the `mechanize`
    class. The `url = raw_input("Enter URL ")` statement asks for the user input.
    The next five lines represent the browser option that helps in redirection and
    `robots.txt` handling. The `br.open(url)` statement opens the URL given by us.
    The next statement prints forms in the web pages. Now, let''s check the output
    of the `paratemp.py` program:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的代码片段都以`import`语句开始。因此，在这里，我们正在导入`mechanize`模块。下一行创建了`mechanize`类的`br`对象。`url
    = raw_input("输入URL ")`语句要求用户输入。接下来的五行代表了帮助重定向和`robots.txt`处理的浏览器选项。`br.open(url)`语句打开了我们给出的URL。下一条语句打印了网页中的表单。现在，让我们检查`paratemp.py`程序的输出：
- en: '![](img/cb38b115-8782-404d-957e-5c34178514b4.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb38b115-8782-404d-957e-5c34178514b4.png)'
- en: 'The program output shows that two name values are present. The first is `name`
    and the second is `comment`, which will be passed to the action page. Now, we
    have received the parameters. Let''s see the rest of the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 程序输出显示存在两个名称值。第一个是`name`，第二个是`comment`，将传递到操作页面。现在，我们已经收到了参数。让我们看看代码的其余部分：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first line is used to select the form. In our website, only one form is
    present. The `br.form['name'] = 'HACKER'` statement fills the value `HACKER` in
    the name field, the next line fills the empty comment, and the last line submits
    the values.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行用于选择表单。在我们的网站中，只有一个表单。`br.form['name'] = 'HACKER'`语句将值`HACKER`填入名称字段，下一行填写空评论，最后一行提交这些值。
- en: 'Now, let''s see the output from both sides. The output of the code is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从两个方面看输出。代码的输出如下：
- en: '![](img/6dc1573a-95e1-47d0-b743-1c0b53fc93a9.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dc1573a-95e1-47d0-b743-1c0b53fc93a9.png)'
- en: Form submission
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交
- en: 'The output of the website is shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的输出显示在以下截图中：
- en: '![](img/0ed254b7-d848-47dd-b292-be4d86a30b15.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ed254b7-d848-47dd-b292-be4d86a30b15.png)'
- en: Validation bypass
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 验证绕过
- en: The preceding screenshot shows that it has been successful.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示已经成功。
- en: Now, you must have got a fair idea of how to bypass the validations. Generally,
    people think that parameters sent by the POST method are safe. However, in the
    preceding experiment, you have seen that it is safe for normal users in an internal
    network. If the website is used only by internal users, then client-side validation
    is a good choice. However, if you use client-side validation for e-commerce websites,
    then you are just inviting attackers to exploit your website. In the following
    topic, you will see some ill effects of client-side validation on business.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你一定已经对如何绕过验证有了一个大致的了解。一般人认为通过`POST`方法发送的参数是安全的。然而，在前面的实验中，你已经看到对于内部网络中的普通用户来说是安全的。如果网站只被内部用户使用，那么客户端验证是一个不错的选择。然而，如果你在电子商务网站上使用客户端验证，那么你只是在邀请攻击者来利用你的网站。在接下来的话题中，你将看到客户端验证对业务的一些不良影响。
- en: Effects of parameter tampering on business
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数篡改对业务的影响
- en: 'As a pentester, you will often have to analyze the source code. These days,
    the world of e-commerce is growing quickly. Consider an example of an e-commerce
    website, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，你经常需要分析源代码。如今，电子商务领域发展迅速。考虑一个电子商务网站的例子，如下截图所示：
- en: '![](img/b33fc280-f002-4546-bc22-2559fe84a0e8.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b33fc280-f002-4546-bc22-2559fe84a0e8.png)'
- en: Example of a website
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 网站示例
- en: 'The preceding screenshot shows that the price of a `Nokia C7` is `60` and the
    price of an `iPhone 3G` is `600`. You do not know whether these prices came from
    the database or if they are written in the web page. The following screenshot
    shows the price of both mobiles:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示`Nokia C7`的价格为`60`，`iPhone 3G`的价格为`600`。你不知道这些价格是来自数据库还是写在网页上。下面的截图显示了这两款手机的价格：
- en: '![](img/dbefdd2d-f080-4fe7-8949-f94c836e2293.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbefdd2d-f080-4fe7-8949-f94c836e2293.png)'
- en: View source code
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码
- en: 'Now, let''s look at the source code, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下源代码，如下截图所示：
- en: '![](img/4f68e78b-f917-4bdf-b7d1-33899a1031f2.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f68e78b-f917-4bdf-b7d1-33899a1031f2.png)'
- en: Look at the rectangular boxes in the preceding screenshot. The price `60` is
    written in the web page, but the price `600` is taken from the database. The price
    `60` can be changed by URL tampering if the `GET` method is used. The price can
    be changed to `6` instead of `60`. This will badly impact the business. In white-box
    testing, the client gives you the source code and you can analyze this code, but
    in black-box testing, you have to carry out the test by using attacks. If the
    `POST` method is used, you can use the Mozilla add-on Tamper Data ([https://addons.mozilla.org/en-US/firefox/addon/tamper-data/](https://addons.mozilla.org/en-US/firefox/addon/tamper-data/))
    for parameter tampering. You have to do it manually, so there is no need to use
    Python programming.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看看前面截图中的矩形框。网页上写着价格为`60`，但从数据库中取出的价格是`600`。如果使用`GET`方法，可以通过URL篡改来改变价格`60`。价格可以被改成`6`而不是`60`。这将严重影响业务。在白盒测试中，客户会提供给你源代码，你可以分析这段代码，但在黑盒测试中，你必须使用攻击来进行测试。如果使用`POST`方法，可以使用Mozilla的附加组件Tamper
    Data（[https://addons.mozilla.org/en-US/firefox/addon/tamper-data/](https://addons.mozilla.org/en-US/firefox/addon/tamper-data/)）进行参数篡改。你必须手动操作，所以不需要使用Python编程。
- en: Introducing DoS and DDoS
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍DoS和DDoS
- en: In this section, we are going to discuss one of the most deadly attacks, called
    the Denial-of-Service attack. The aim of this attack is to consume machine or
    network resources, making it unavailable for the intended users. Generally, attackers
    use this attack when every other attack fails. This attack can be done at the
    data link, network, or application layer. Usually, a web server is the target
    for hackers. In a DoS attack, the attacker sends a huge number of requests to
    the web server, aiming to consume network bandwidth and machine memory. In a **Distributed
    Denial-of-Service** (**DDoS**) attack, the attacker sends a huge number of requests
    from different IPs. In order to carry out a DDoS attack, the attacker can use
    Trojans or IP spoofing. In this section, we will carry out various experiments
    to complete our reports.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论最致命的攻击之一，称为拒绝服务攻击。这种攻击的目的是消耗机器或网络资源，使其对预期用户不可用。一般来说，攻击者在其他攻击失败时使用这种攻击。这种攻击可以在数据链路、网络或应用层进行。通常，Web服务器是黑客的目标。在DoS攻击中，攻击者向Web服务器发送大量请求，旨在消耗网络带宽和机器内存。在**分布式拒绝服务**（**DDoS**）攻击中，攻击者从不同的IP地址发送大量请求。为了进行DDoS攻击，攻击者可以使用特洛伦或IP欺骗。在本节中，我们将进行各种实验来完成我们的报告。
- en: Single IP, single ports
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个IP，单个端口
- en: In this attack, we send a huge number of packets to the web server using a single
    IP (which might be spoofed) and from a single source port number. This is a very
    low-level DoS attack and will test the web server's request-handling capacity.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次攻击中，我们使用单个IP（可能是伪造的）和单个源端口号向Web服务器发送大量数据包。这是一种非常低级的DoS攻击，将测试Web服务器的请求处理能力。
- en: 'The following is the code of `sisp.py`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`sisp.py`的代码：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I have used scapy to write this code and I hope that you are familiar with
    this. The preceding code asks for three things: the source IP address, the destination
    IP address, and the source port address.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我用scapy编写了这段代码，希望你熟悉。上面的代码要求三样东西：源IP地址、目标IP地址和源端口地址。
- en: 'Let''s check the output on the attacker''s machine:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查攻击者机器上的输出：
- en: '![](img/9f703009-3f39-4ce3-bf68-e2900bcb5957.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f703009-3f39-4ce3-bf68-e2900bcb5957.png)'
- en: Single IP with single port
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 单个IP，单个端口
- en: I have used a spoofed IP in order to hide my identity. You will have to send
    a huge number of packets to check the behavior of the web server. During the attack,
    try to open a website hosted on a web server. Irrespective of whether it works
    or not, write your findings in the reports.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了伪造的IP来隐藏我的身份。你需要发送大量数据包来检查Web服务器的行为。在攻击期间，尝试打开托管在Web服务器上的网站。无论是否成功，都要把你的发现写入报告。
- en: 'Let''s check the output on the server side:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查服务器端的输出：
- en: '![](img/70b97414-fd0f-446c-9b49-a4fe423bc6c6.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70b97414-fd0f-446c-9b49-a4fe423bc6c6.png)'
- en: Wireshark output on the server
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上的Wireshark输出
- en: This output shows that our packet was successfully sent to the server. Repeat
    this program with different sequence numbers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出显示我们的数据包成功发送到了服务器。用不同的序列号重复这个程序。
- en: Single IP, multiple port
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个IP，多个端口
- en: Now, in this attack, we use a single IP address but multiple ports.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这次攻击中，我们使用单个IP地址但是多个端口。
- en: 'Here, I have written the code of the `simp.py` program:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我写了`simp.py`程序的代码：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'I used the `for` loop for the ports. Let''s check the output of the attacker:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我在端口上使用了`for`循环。让我们检查攻击者的输出：
- en: '![](img/d28dba77-5745-43db-a692-8d72108dd2f2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d28dba77-5745-43db-a692-8d72108dd2f2.png)'
- en: Packets from the attacker's machine
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 来自攻击者机器的数据包
- en: 'The preceding screenshot shows that the packet was sent successfully. Now,
    check the output on the target machine:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示数据包成功发送。现在，检查目标机器上的输出：
- en: '![](img/e8efc7b0-36cc-48fa-8613-3ad99b1fe37d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8efc7b0-36cc-48fa-8613-3ad99b1fe37d.png)'
- en: Packets appearing in the target machine
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在目标机器上的数据包
- en: In the preceding screenshot, the rectangular box shows the port numbers. I will
    leave it to you to create multiple IPs with a single port.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，矩形框显示了端口号。我会让你创建单个端口的多个IP地址。
- en: Multiple IP, multiple ports
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个IP，多个端口
- en: 'In this section, we will discuss the multiple IP with multiple port addresses.
    In this attack, we use different IPs to send the packet to the target. Multiple
    IPs denote spoofed IPs. The following program will send a huge number of packets
    from spoofed IPs:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论多个IP和多个端口地址。在这次攻击中，我们使用不同的IP发送数据包到目标。多个IP代表伪造的IP。下面的程序将从伪造的IP发送大量数据包：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we used the `a`, `b`, `c`, and `d` variables to store
    four random strings, ranging from `1` to `254`. The `src` variable stores random
    IP addresses. Here, we have used the `loop_break` variable to break the `for`
    loop after `50` packets. It means 50 packets originate from one IP while the rest
    of the code is the same as the previous one.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用`a`、`b`、`c`和`d`变量来存储四个随机字符串，范围从`1`到`254`。`src`变量存储随机IP地址。在这里，我们使用`loop_break`变量来在`50`个数据包后中断`for`循环。这意味着50个数据包来自一个IP，而其余的代码和之前的一样。
- en: 'Let''s check the output of the `mimp.py` program:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`mimp.py`程序的输出：
- en: '![](img/381dff7b-35b4-42b5-90d3-fc0731cbaf48.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/381dff7b-35b4-42b5-90d3-fc0731cbaf48.png)'
- en: Multiple IP with multiple ports
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 多个IP，多个端口
- en: In the preceding screenshot, you can see that after packet 50, the IP addresses
    get changed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你可以看到在第50个数据包后，IP地址发生了变化。
- en: 'Let''s check the output on the target machine:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查目标机器上的输出：
- en: '![](img/12c21c02-c40e-4f63-a828-3e1f185a1840.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12c21c02-c40e-4f63-a828-3e1f185a1840.png)'
- en: The target machine's output on Wireshark
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 目标机器上Wireshark的输出
- en: Use several machines and execute this code. In the preceding screenshot, you
    can see that the machine replies to the source IP. This type of attack is very
    difficult to detect, because it is very hard to distinguish whether the packets
    are coming from a valid host or a spoofed host.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多台机器执行这段代码。在上面的截图中，你可以看到机器回复了源IP。这种类型的攻击很难检测，因为很难区分数据包是来自有效主机还是伪造主机。
- en: Detection of DDoS
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDoS攻击检测
- en: 'When I was pursuing my Masters of Engineering degree, my friend and I were
    working on a DDoS attack. This is a very serious attack and difficult to detect,
    where it is nearly impossible to guess whether the traffic is coming from a fake
    host or a real host. In a DoS attack, traffic comes from only one source, so we
    can block that particular host. Based on certain assumptions, we can make rules
    to detect DDoS attacks. If the web server is running only traffic containing port
    80, it should be allowed. Now, let''s go through a very simple code for detecting
    a DDoS attack. The program''s name is `DDOS_detect1.py`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我攻读工程硕士学位时，我和朋友一起研究DDoS攻击。这是一种非常严重的攻击，很难检测，几乎不可能猜测流量是来自伪造主机还是真实主机。在DoS攻击中，流量只来自一个来源，所以我们可以阻止那个特定的主机。基于某些假设，我们可以制定规则来检测DDoS攻击。如果Web服务器只运行包含端口80的流量，那就应该允许。现在，让我们来看一个非常简单的检测DDoS攻击的代码。程序的名字是`DDOS_detect1.py`：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In [Chapter 3](4cbd4179-2d24-454b-b279-bcdae27210e2.xhtml), *Sniffing and Penetration
    Testing*, you learned about a sniffer. In the previous code, we used a sniffer
    to get the packet''s source IP address. The `file_txt = open("dos.txt",''a'')`
    statement opens a file in append mode, and this `dos.txt` file is used as a logfile
    to detect the DDoS attack. Whenever the program runs, the `file_txt.writelines(t1)`
    statement writes the current time. The `D_val =10` variable is an assumption just
    for the demonstration of the program. The assumption is made by viewing the statistics
    of hits from a particular IP. Consider a case of a tutorial website. The hits
    from the college and school''s IP would be more. If a huge number of requests
    come in from a new IP, then it might be a case of a DoS. If the count of the incoming
    packets from one IP exceeds the `D_val` variable, then the IP is considered to
    be responsible for a DDoS attack. The `D_val1` variable will be used later in
    the code to avoid redundancy. I hope you are familiar with the code before the
    `if dict.has_key(IP):` statement. This statement will check whether the key (IP
    address) exists in the dictionary or not. If the key exists in `dict`, then the
    `dict[IP]=dict[IP]+1` statement increases the `dict[IP]` value by one, which means
    that `dict[IP]` contains a count of packets that come from a particular IP. The
    `if(dict[IP]>D_val)` and `(dict[IP]<D_val1)` : statements are the criteria to
    detect and write results in the `dos.txt` file; `if(dict[IP]>D_val)` detects whether
    the incoming packet''s count exceeds the `D_val` value or not. If it exceeds it,
    the subsequent statements will write the IP in `dos.txt` after getting new packets.
    To avoid redundancy, the `(dict[IP]<D_val1)` statement has been used. The upcoming
    statements will write the results in the `dos.txt` file.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](4cbd4179-2d24-454b-b279-bcdae27210e2.xhtml)中，*嗅探和渗透测试*，您了解了嗅探器。在前面的代码中，我们使用嗅探器获取数据包的源IP地址。`file_txt
    = open("dos.txt",'a')`语句以追加模式打开文件，这个`dos.txt`文件用作检测DDoS攻击的日志文件。每当程序运行时，`file_txt.writelines(t1)`语句会写入当前时间。`D_val
    =10`变量只是为了演示程序而假设的。这个假设是通过查看来自特定IP的点击统计数据得出的。考虑一个教程网站的情况。来自学校和学院的IP的点击量会更多。如果来自新IP的请求数量很大，那么可能是DoS的情况。如果来自一个IP的入站数据包计数超过了`D_val`变量，那么该IP被认为是DDoS攻击的责任。`D_val1`变量将在代码中稍后使用以避免冗余。我希望在`if
    dict.has_key(IP):`语句之前您对代码很熟悉。这个语句将检查字典中是否存在键（IP地址）。如果键存在于`dict`中，那么`dict[IP]=dict[IP]+1`语句将增加`dict[IP]`的值，这意味着`dict[IP]`包含来自特定IP的数据包计数。`if(dict[IP]>D_val)`和`(dict[IP]<D_val1)`：语句是检测和将结果写入`dos.txt`文件的标准；`if(dict[IP]>D_val)`检测入站数据包的计数是否超过了`D_val`的值。如果超过了，随后的语句将在获取新数据包后将IP写入`dos.txt`。为了避免冗余，使用了`(dict[IP]<D_val1)`语句。接下来的语句将在`dos.txt`文件中写入结果。
- en: Run the program on a server and run `mimp.py` on the attacker's machine.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上运行程序，并在攻击者的机器上运行`mimp.py`。
- en: 'The following screenshot shows the `dos.txt` file. Look at that file. It writes
    a single IP nine times, as we have mentioned `D_val1 = D_val+10`. You can change
    the `D_val` value to set the number of requests made by a particular IP. These
    depend on the old statistics of the website. I hope the preceding code will be
    useful for research purposes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了`dos.txt`文件。看看那个文件。它写了一个IP九次，就像我们提到的`D_val1 = D_val+10`。您可以更改`D_val`的值来设置特定IP发出的请求次数。这取决于网站的旧统计数据。我希望前面的代码对研究目的有用：
- en: '![](img/6b6f3aff-d07f-4c2f-ac83-7a22b8944046.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b6f3aff-d07f-4c2f-ac83-7a22b8944046.png)'
- en: Detecting a DDoS attack
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 检测DDoS攻击
- en: If you are a security researcher, the preceding program should be useful to
    you. You can modify the code such that only the packet that contains port 80 will
    be allowed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是安全研究人员，前面的程序对您应该是有用的。您可以修改代码，使得只有包含端口80的数据包才会被允许。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about client-side validation as well as how to bypass
    client-side validation. We also learned in which situations client-side validation
    is a good choice. We have gone through how to use Python to fill in a form and
    send the parameter where the GET method has been used. As a penetration tester,
    you should know how parameter tampering affects a business. Four types of DoS
    attacks have been presented in this chapter. A single IP attack falls into the
    category of a DoS attack and a Multiple IP attack falls into the category of a
    DDoS attack. This section is helpful not only for a pentester, but also for researchers.
    Taking advantage of Python DDoS-detection scripts, you can modify the code and
    create larger code, which can trigger actions to control or mitigate the DDoS
    attack on the server.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了客户端验证以及如何绕过客户端验证。我们还了解了在哪些情况下客户端验证是一个不错的选择。我们已经学习了如何使用Python填写表单并发送参数，其中使用了GET方法。作为渗透测试人员，您应该知道参数篡改如何影响业务。本章介绍了四种DoS攻击类型。单个IP攻击属于DoS攻击类别，多个IP攻击属于DDoS攻击类别。这一部分不仅对渗透测试人员有帮助，对研究人员也有帮助。利用Python
    DDoS检测脚本，您可以修改代码并创建更大的代码，从而触发控制或减轻服务器上的DDoS攻击的操作。
- en: In the next chapter, you will learn SQL injection and **Cross-Site Scripting**
    attacks (**XSS**). You will learn how to take advantage of Python to carry out
    SQL injection tests. You'll also learn how to automate an XSS attack by using
    Python scripts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习SQL注入和**跨站脚本**攻击（**XSS**）。您将学习如何利用Python进行SQL注入测试。您还将学习如何使用Python脚本自动执行XSS攻击。
