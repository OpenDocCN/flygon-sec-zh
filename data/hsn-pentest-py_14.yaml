- en: Cyber Threat Intelligence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络威胁情报
- en: 'o far, this book has focused on the offensive side of cyber security. We have
    primarily been looking at using Python in the penetration testing domain. In this
    chapter, we will try to understand how Python can be used on the defensive side
    of cybersecurity. When we talk of defensive cyber security, what comes to mind
    is monitoring. **S****ecurity operations center** is a term commonly used for
    the monitoring team, which is responsible for the continuous monitoring of an
    organization''s security landscape. This team makes use of a tool called **Security
    Information and Event Management** (**SIEM**), which acts as an aggregator to
    collect logs from various applications and devices that need to be monitored.
    On top of aggregation, the SIEM has a rule engine in which various rules are configured
    for anomaly detection. The rules vary from organization to organization, depending
    on the business context and the logs to monitor. Nowadays, we often have many
    SIEM solutions built on top of a big data cluster that uses Machine Learning algorithms
    and are driven by AI models in conjunction with a rule engine, which makes monitoring
    more effective. So, where does cyber threat intelligence fit in all this? We will
    learn about this, along with the following topics, in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书一直关注网络安全的攻击方面。我们主要关注使用Python在渗透测试领域。在本章中，我们将尝试理解Python如何在网络安全的防御方面使用。当我们谈论网络安全的防御时，首先想到的是监控。**安全运营中心**是一个常用于监控团队的术语，负责持续监控组织的安全格局。这个团队使用一种称为**安全信息与事件管理**（**SIEM**）的工具，它作为一个聚合器，收集需要监控的各种应用程序和设备的日志。除了聚合，SIEM还有一个规则引擎，其中配置了各种规则用于异常检测。规则因组织而异，取决于业务背景和需要监控的日志。如今，我们经常有许多基于大数据集群构建的SIEM解决方案，这些解决方案使用机器学习算法，并由人工智能模型驱动，结合规则引擎，使监控更加有效。那么网络威胁情报在这一切中的作用是什么？我们将在本章中学习这一点，以及以下主题：
- en: Cyber threat intelligence
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络威胁情报
- en: Tools and API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具和API
- en: 'Threat-scoring: giving a score to each IOC'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 威胁评分：为每个IOC给出一个分数
- en: STIX and TAXII and external lookups
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STIX和TAXII以及外部查找
- en: Introduction to cyber threat intelligence
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络威胁情报简介
- en: '**Cyber threat intelligence** is the procedure of processing raw-gathered information
    and transforming it into actionable intelligence. Broadly, threat intelligence
    is a process that involves manual intelligence gathering as well as the use of
    automated tools to enhance the security landscape of an organization. Let''s try
    to understand both automated and manual threat intelligence in this section.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络威胁情报**是处理原始收集信息并将其转化为可操作情报的过程。广义上说，威胁情报是一个包括手动情报收集和使用自动化工具来增强组织安全格局的过程。让我们在本节中尝试理解自动化和手动威胁情报。'
- en: Manual threat intelligence
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动威胁情报
- en: '**Manual threat intelligence** is the process of gathering intelligence manually
    and transforming it into actionable intelligence. Let''s take an example of manual
    threat intelligence that is organization specific.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 手动威胁情报是手动收集情报并将其转化为可操作情报的过程。让我们以一个特定于组织的手动威胁情报为例。
- en: An analyst working in the cybersecurity team for organization 'X' is well aware
    of the internals of the organization in terms of the top management, the key processes,
    and the key applications. One of this employee's responsibilities, being a part
    of the cyber security and intelligence team, would be to surf the deep/dark web
    and look for potential threats that may target the organization. The range of
    threats will always vary. It could include leaked emails or traces on the dark
    web that could alarm the organization. Another threat might be a propagating ransomware
    targeting a specific industry such as the telecom industry. If the employee detects
    this, the organization gets an early heads-up and can strengthen its defense mechanisms
    against the ransomware.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为组织“X”的网络安全团队工作的分析师对组织的内部情况非常了解，包括高层管理、关键流程和关键应用。作为网络安全和情报团队的一员，这名员工的职责之一就是在深网/暗网上搜索可能针对组织的潜在威胁。威胁的范围总是多种多样的。可能包括泄露的电子邮件或在暗网上的痕迹，这可能会引起组织的警惕。另一个威胁可能是针对特定行业（如电信行业）的勒索软件。如果员工发现了这一点，组织就能提前得到警报，并加强对勒索软件的防御机制。
- en: Another example of manual threat intelligence is gathering information related
    to insider threats. For an organization that has a huge employee base and a large
    number of processes, it's always difficult to monitor each and every person. SIEMs
    often struggle to monitor behavioral threats. Let's say that there is a server
    X (a web server) that usually communicates with servers Y (the database) and Z
    (the application) on a daily basis. However, a few traces from the SIEM were observed
    in which server X is communicating with a server A over the SMB port `445`. This
    behavior is strange and suspicious. Now, to baseline the day-to-day communication
    across various servers and to create a rule to detect anomalies would be too difficult
    for a SIEM, as there is usually a huge number of systems within an organization.
    While there are a few solutions emerging nowadays that are built on top of the
    AI engine and big data to do this kind of anomaly detection, manual threat hunting
    currently still works best. This process of manually identifying anomalies within
    an organization is called **insider threat hunting**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 手动威胁情报的另一个例子是收集与内部威胁相关的信息。对于一个拥有庞大员工群体和大量流程的组织来说，监控每个人总是很困难的。安全信息与事件管理系统（SIEM）通常难以监控行为威胁。假设有一个服务器X（Web服务器），通常每天与服务器Y（数据库）和Z（应用程序）通信。然而，SIEM的一些痕迹表明服务器X正在通过SMB端口`445`与服务器A通信。这种行为很奇怪和可疑。现在，要对各个服务器之间的日常通信进行基线分析，并创建规则以检测异常对于SIEM来说将会非常困难，因为组织内通常有大量系统。虽然现在有一些解决方案是基于人工智能引擎和大数据构建的，用于进行此类异常检测，但手动威胁狩猎目前仍然效果最好。在组织内手动识别异常的这一过程被称为**内部威胁狩猎**。
- en: Automated threat intelligence
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化威胁情报
- en: As we have discussed, **threat intelligence** is an advanced process that enables
    an organization to constantly gather valuable cyber threat insights based on the
    analysis of contextual and situational risks. It can be tailored to the organization's
    specific threat landscape. In simple terms, threat intelligence is the output
    of analysis based on the identification, collection, and enrichment of relevant
    cyber threat data and information. The cyber threat data often includes Indicators
    of Compromise (IOCs), which are malicious IPs, URLs, file hashes, domains, email
    addresses, and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，**威胁情报**是一个先进的过程，使组织能够不断收集基于上下文和情境风险分析的有价值的网络威胁见解。它可以根据组织特定的威胁格局进行定制。简单来说，威胁情报是基于识别、收集和丰富相关网络威胁数据和信息的分析输出。网络威胁数据通常包括威胁迹象（IOCs），如恶意IP、URL、文件哈希、域名、电子邮件地址等。
- en: This process of gathering information and transforming it into actionable intelligence
    to be consumed by security products such as SIEM tools, IDS/IPS systems, firewall,
    proxy servers, WAF, and other security products is what we will focus on in this
    chapter. This process of gathering and contextualizing information can be done
    manually, as described previously, and it can also be automated. Automation can
    further be divided into segregated automation (at script level), or automation
    using a central orchestration engine. We will consider the advantages and disadvantages
    of both.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个收集信息并将其转化为可供安全产品（如SIEM工具、IDS/IPS系统、防火墙、代理服务器、WAF等）使用的可操作情报的过程是我们在本章中将重点关注的。这个收集和情境化信息的过程可以手动完成，如前所述，也可以自动化。自动化可以进一步分为分离的自动化（在脚本级别）或使用中央编排引擎的自动化。我们将考虑两者的优缺点。
- en: There are various security sites and communities that share cyber intelligence
    data openly, as a collaborative measure to fight against hacktivists and to safeguard
    organizations against emerging threats. These communities often use what are called
    threat-sharing feeds, or threat feeds. The data that is shared contains malicious
    URLs, malicious IPs, malicious files, signatures of malicious files, malicious
    domains, malicious C&C servers, and so on. All the data shared has been reported
    by an organization to have done something suspicious. This could be an SSH scanning
    activity, a horizontal scan, a phishing website, a brute-forcing IP, a malware
    signature, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种安全网站和社区公开分享网络情报数据，作为一种协作措施来对抗黑客活动，并保护组织免受新兴威胁。这些社区通常使用所谓的威胁共享源或威胁源。共享的数据包含恶意URL、恶意IP、恶意文件、恶意文件的签名、恶意域名、恶意C&C服务器等。所有共享的数据都是由组织报告的，表示已经做了可疑的事情。这可能是SSH扫描活动、水平扫描、钓鱼网站、暴力IP、恶意软件签名等。
- en: All information that is collected is shared with the SIEM and a rule is created
    on the SIEM to detect any communication within the organization against the IOCs
    tagged as malicious. If the SIEM indicates that there has been communication between
    an internal server or an asset with the IOCs gathered, it would alert the organization,
    which can then take appropriate preventive actions. While this process might seem
    straightforward, it is not actually as simple as it seems. The major challenge
    the industry faces is the quality of the IOCs. It should be noted that millions
    of IOCs have been collected. The better-quality IOCs an organization has, the
    better the detection. However, having millions of IOCs doesn't improve the detection
    by default. We can't just collect IOCs in an automated way and feed them to the
    SIEM. The IOCs that are collected from various sources in different formats such
    as JSON, CSV, STIX, XML, txt, and database files come with lots of noise. This
    means that domains and IPs that are not malicious are also flagged. If this noisy
    data is given directly to the SIEM, and rules are created on top of it, this will
    result in lots and lots of false positive alerts, thereby increasing the effort
    required by the analyst.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 收集的所有信息都与SIEM共享，并在SIEM上创建规则，以检测组织内部针对标记为恶意的IOCs的任何通信。如果SIEM指示内部服务器或资产与收集的IOCs之间存在通信，它将警告组织，然后可以采取适当的预防措施。虽然这个过程可能看起来很简单，但实际上并不像看起来那么简单。行业面临的主要挑战是IOCs的质量。值得注意的是，已经收集了数百万个IOCs。组织拥有的高质量IOCs越多，检测就越好。然而，拥有数百万个IOCs并不能默认提高检测能力。我们不能只是以自动化的方式收集IOCs并将其提供给SIEM。从不同格式（如JSON、CSV、STIX、XML、txt和数据库文件）的各种来源收集的IOCs带有大量噪音。这意味着非恶意的域和IP也被标记。如果直接将这些嘈杂的数据提供给SIEM，并在其上创建规则，这将导致大量的误报警报，从而增加分析师所需的工作量。
- en: In this chapter, we will learn how to remove false positives and enhance the
    quality of collected IOCs. We will write a custom Python algorithm to enhance
    the quality of the IOCs and associate a threat score to each of the IOCs collected.
    The threat scores will be on a scale of 1 to 10\. Scores at the higher end indicate
    a greater potential severity, while scores at the lower end are likely to be less
    severe This will allow us to share only quality IOCs with the SIEM, which would
    result in a better true positive rate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何消除误报警报并提高收集的IOCs的质量。我们将编写一个自定义的Python算法来提高IOCs的质量，并为每个收集的IOCs关联一个威胁分数。威胁分数将在1到10的范围内。较高端的分数表示更严重的潜在严重性，而较低端的分数可能不太严重。这将使我们只与SIEM共享高质量的IOCs，从而提高真正的阳性率。
- en: Cyber threat intelligence platforms
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络威胁情报平台
- en: 'As discussed earlier, the process of intelligence gathering can be automated
    either with the help of different scripts that we can combine, or to have a central
    platform in place capable for both collecting and sharing cyber threat intelligence.
    Central platforms that have this capability are called cyber threat intelligence
    platforms. Let''s try to understand the process of semi-automation and complete
    automation of cyber threat intelligence gathering:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，情报收集的过程可以通过不同的脚本自动化，我们可以将它们组合起来，或者建立一个能够收集和分享网络威胁情报的中央平台。具有这种能力的中央平台被称为网络威胁情报平台。让我们试着理解网络威胁情报收集的半自动化和完全自动化过程：
- en: 'The following diagram represents the problem statement that a threat intelligence
    platform tries to solve. In a large organization, the SIEM tool generates 100–100,000
    events per minute, and the rule engine triggers 20–50 alerts in an hour. The analyst
    needs to validate each alert manually and check if the IP or domain in question
    is legitimate or not. The analyst has to use various security lookup sites, manually
    interpret them, and make a decision as to whether the alert qualifies to be investigated
    further or whether it''s a false positive. This is where a lot of human effort
    goes in and where we require automated cyber threat intelligence:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下图表代表了威胁情报平台试图解决的问题陈述。在一个大型组织中，SIEM工具每分钟生成100-100,000个事件，规则引擎每小时触发20-50个警报。分析师需要手动验证每个警报，并检查相关的IP或域名是否合法。分析师必须使用各种安全查找站点，手动解释它们，并决定警报是否有资格进一步调查，或者是否是误报。这就是大量人力投入的地方，也是我们需要自动化网络威胁情报的地方：
- en: '![](img/abff1fea-c6c6-4c3e-8996-5ccaa5d16960.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abff1fea-c6c6-4c3e-8996-5ccaa5d16960.png)'
- en: 'The various sources from which intelligence data is gathered include the following:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情报数据收集的各种来源包括以下内容：
- en: '![](img/3a94c6e2-38e5-4fef-87e0-85472ea33968.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a94c6e2-38e5-4fef-87e0-85472ea33968.png)'
- en: 'The capabilities of a fully-fledged threat intelligence platform include the
    following:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个完全成熟的威胁情报平台的能力包括以下内容：
- en: '![](img/00538934-7b26-490c-bf42-af07ecf6437f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00538934-7b26-490c-bf42-af07ecf6437f.png)'
- en: Tools and API
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具和API
- en: 'When we talk of cyber threat intelligence platform, there are many commercial
    and open source tools that are available to gather, contextualize, and share intelligence.
    Some of the most well-known commercial tools available include the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论网络威胁情报平台时，有许多商业和开源工具可用于收集、情境化和分享情报。一些最知名的商业工具包括以下内容：
- en: IBM X-Force Exchange
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM X-Force Exchange
- en: Anomali ThreatStream
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anomali ThreatStream
- en: Palo Alto Networks AutoFocus
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Palo Alto Networks AutoFocus
- en: RSA NetWitness Suite
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSA NetWitness套件
- en: LogRhythm Threat Lifecycle Management (TLM) Platform
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogRhythm威胁生命周期管理（TLM）平台
- en: FireEye iSIGHT Threat Intelligence
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FireEye iSIGHT Threat Intelligence
- en: LookingGlass Cyber Solutions
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LookingGlass Cyber Solutions
- en: AlienVault Unified Security Management (USM)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AlienVault统一安全管理（USM）
- en: 'The best-known open source tools available include the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最知名的开源工具包括以下内容：
- en: MISP
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MISP
- en: OpenIOC
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenIOC
- en: OpenTAXII
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenTAXII
- en: Yeti
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yeti
- en: AbuseHelper
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AbuseHelper
- en: sqhunter
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqhunter
- en: sqhunter
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqhunter
- en: All the previously mentioned open source tools are very good, and have different
    capabilities to offer. I personally find that **Malware Information Sharing Platform**
    (**MISP**) is very useful both in terms of its functionality and its features.
    What makes it my favorite is its extensible architecture and its API, which allows
    it to collaborate with other programming languages. This is the open source threat
    intelligence platform that we will be focusing on in this chapter. Our objective
    is to understand what MISP offers out of the box and what additional features
    we can add in order to get a quality IOC feed to the SIEM tool. MISP exposes a
    wonderful `pymisp` API to consume the collected IOCs from Python.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前提到的开源工具都非常好，并且具有不同的功能。我个人发现**恶意软件信息共享平台**（**MISP**）在功能和特性方面都非常有用。它成为我最喜欢的原因是其可扩展的架构和其API，使其能够与其他编程语言协作。这是我们将在本章重点关注的开源威胁情报平台。我们的目标是了解MISP开箱即用提供了什么，以及我们可以添加哪些附加功能，以获得高质量的IOC源文件到SIEM工具。MISP暴露了一个很棒的`pymisp`API，用于从Python中消费收集的IOCs。
- en: MISP
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MISP
- en: '**MISP** is a framework written in cakePHP, which has brilliant community support.
    The objective of the framework is to collect threat intelligence form various
    feed sources that publish malicious content and store it in the backend repository.
    The same content can be retrieved for analysis later on and shared with security
    tools such as SIEM, Firewall, and IDS/IPS systems. The tool has got lots of features,
    which include the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**MISP**是一个用cakePHP编写的框架，有着出色的社区支持。该框架的目标是从发布恶意内容的各种源头收集威胁情报，并将其存储在后端存储库中。相同的内容可以在以后进行分析并与安全工具（如SIEM、防火墙和IDS/IPS系统）共享。该工具有很多功能，包括以下内容：'
- en: It has a central parser, which is capable of parsing all kinds of IOC feed files
    such as free text, CSV, TSV, JSON, and XML. This is a big advantage, because it
    means we don't have to worry about the format in which the intelligence is supplied
    from the source feed. Different feed sources provide intelligence in different
    formats. The central parser parses the IOC information and transforms it in a
    consistent format to match the backend schema that MISP supports.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个中央解析器，能够解析各种IOC源文件，如纯文本、CSV、TSV、JSON和XML。这是一个很大的优势，因为这意味着我们不必担心情报以何种格式从源头提供。不同的源头以不同的格式提供情报。中央解析器解析IOC信息，并将其转换为与MISP支持的后端模式匹配的一致格式。
- en: It has an API that gives us the flexibility to share the intelligence directly
    with the SIEM tools (note that this is a disadvantage, however, as MISP doesn't
    yet have false positive elimination capability).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个API，使我们能够直接与SIEM工具共享情报（但这是一个缺点，因为MISP尚未具有误报消除能力）。
- en: It has the capability to integrate with other MISP instances and have a server
    to serve threat sharing.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有与其他MISP实例集成并具有用于提供威胁共享的服务器的能力。
- en: It has a role-based access to the web interface, which allows analysts to understand
    and co-relate the IOC gathered.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有基于角色的访问Web界面的功能，允许分析人员了解和关联收集的IOC。
- en: It has a queue-based backend worker system, in which a collection of feeds can
    be scheduled to any time/hour of the day. We can also change how often this should
    be repeated. The backend worker and queuing system is based upon Redis and CakeResque.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有基于队列的后端工作系统，其中可以安排一系列源在任何时间/一天的任何时间进行。我们还可以更改这应该重复多久。后端工作程序和排队系统基于Redis和CakeResque。
- en: Not only is MISP very good at collecting threat information, it's also very
    good at correlating it and sharing the information in multiple formats such as
    CSV, STIX, JSON, Text, XML, and Bro-IDS signatures.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MISP不仅在收集威胁信息方面非常出色，而且在相关性和以多种格式共享信息方面也非常出色，例如CSV、STIX、JSON、文本、XML和Bro-IDS签名。
- en: 'The complete list of features offered by MISP can be found at the official
    repository: [https://github.com/MISP/MISP](https://github.com/MISP/MISP).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: MISP提供的完整功能列表可以在官方存储库中找到：[https://github.com/MISP/MISP](https://github.com/MISP/MISP)。
- en: Installing MISP
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MISP
- en: 'The installation instructions can be found at the previously mentioned GitHub
    repository. We have tested the code and used it on CentOS 7\. Perform the following
    instructions to set up MISP on CentOS 7:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装说明可以在先前提到的GitHub存储库中找到。我们已经在CentOS 7上测试了代码并使用了它。执行以下说明在CentOS 7上设置MISP：
- en: '[PRE0]bash'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]bash'
- en: CentOS Specific
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS特定
- en: RUN_PHP='/usr/bin/scl enable rh-php71 '
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: RUN_PHP='/usr/bin/scl enable rh-php71 '
- en: RUN_PYTHON='/usr/bin/scl enable rh-python36 '
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: RUN_PYTHON='/usr/bin/scl enable rh-python36 '
- en: PHP_INI=/etc/opt/rh/rh-php71/php.ini
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: PHP_INI=/etc/opt/rh/rh-php71/php.ini
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install a minimal CentOS 7.x system with the software:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下软件安装一个最小的CentOS 7.x系统：
- en: '[PRE2]bash'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]bash'
- en: Make sure you set your hostname CORRECTLY vs. like an brute (manually in /etc/hostname)
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保将主机名设置为正确的，而不是像一个蛮人（手动在/etc/hostname中）
- en: 'sudo hostnamectl set-hostname misp.local # or whatever you want it to be'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '使用sudo hostnamectl set-hostname misp.local #或者您希望它成为什么'
- en: 'Make sure your system is up2date:'
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保您的系统是最新的：
- en: sudo yum update -y
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum update -y
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the system is installed, you can perform the following steps as root or
    with `sudo`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以以root或使用`sudo`执行以下步骤：
- en: '[PRE4]bash'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]bash'
- en: We need some packages from the Extra Packages for Enterprise Linux repository
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要一些来自企业Linux额外软件包存储库的软件包
- en: sudo yum install epel-release -y
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install epel-release -y
- en: Since MISP 2.4 PHP 5.5 is a minimal requirement, so we need a newer version
    than CentOS base provides
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自MISP 2.4起，PHP 5.5是最低要求，因此我们需要比CentOS基础提供的更新版本
- en: Software Collections is a way do to this, see https://wiki.centos.org/AdditionalResources/Repositories/SCL
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件集合是一种方法，参见https://wiki.centos.org/AdditionalResources/Repositories/SCL
- en: sudo yum install centos-release-scl -y
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install centos-release-scl -y
- en: Install vim (optional)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装vim（可选）
- en: sudo yum install vim -y
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install vim -y
- en: 'Install the dependencies:'
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: sudo yum install gcc git httpd zip redis mariadb mariadb-server python-devel
    python-pip python-zmq libxslt-devel zlib-devel ssdeep-devel -y
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install gcc git httpd zip redis mariadb mariadb-server python-devel
    python-pip python-zmq libxslt-devel zlib-devel ssdeep-devel -y
- en: Install PHP 7.1 from SCL, see https://www.softwarecollections.org/en/scls/rhscl/rh-php71/
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从SCL安装PHP 7.1，参见https://www.softwarecollections.org/en/scls/rhscl/rh-php71/
- en: sudo yum install rh-php71 rh-php71-php-fpm rh-php71-php-devel rh-php71-php-mysqlnd
    rh-php71-php-mbstring rh-php71-php-xml rh-php71-php-bcmath rh-php71-php-opcache
    -y
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install rh-php71 rh-php71-php-fpm rh-php71-php-devel rh-php71-php-mysqlnd
    rh-php71-php-mbstring rh-php71-php-xml rh-php71-php-bcmath rh-php71-php-opcache
    -y
- en: Install Python 3.6 from SCL, see
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从SCL安装Python 3.6，参见
- en: https://www.softwarecollections.org/en/scls/rhscl/rh-python36/
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: https://www.softwarecollections.org/en/scls/rhscl/rh-python36/
- en: sudo yum install rh-python36 -y
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install rh-python36 -y
- en: rh-php71-php only provided mod_ssl mod_php for httpd24-httpd from SCL
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rh-php71-php仅为来自SCL的httpd24-httpd提供mod_ssl mod_php
- en: if we want to use httpd from CentOS base we can use rh-php71-php-fpm instead
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果我们想要使用CentOS基础的httpd，我们可以使用rh-php71-php-fpm
- en: sudo systemctl enable rh-php71-php-fpm.service
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl enable rh-php71-php-fpm.service
- en: sudo systemctl start  rh-php71-php-fpm.service
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl start rh-php71-php-fpm.service
- en: sudo $RUN_PHP "pear channel-update pear.php.net"
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo $RUN_PHP "pear channel-update pear.php.net"
- en: 'sudo $RUN_PHP "pear install Crypt_GPG"    # we need version >1.3.0'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '使用sudo $RUN_PHP "pear install Crypt_GPG"    #我们需要版本>1.3.0'
- en: '[PRE5]bash'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]bash'
- en: GPG needs lots of entropy, haveged provides entropy
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPG需要大量的熵，haveged提供熵
- en: sudo yum install haveged -y
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo yum install haveged -y
- en: sudo systemctl enable haveged.service
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl enable haveged.service
- en: sudo systemctl start  haveged.service
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl start haveged.service
- en: Enable and start redis
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用并启动redis
- en: sudo systemctl enable redis.service
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl enable redis.service
- en: sudo systemctl start  redis.service
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo systemctl start redis.service
- en: '[PRE6]bash'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]bash'
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: sudo mkdir $PATH_TO_MISP
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo mkdir $PATH_TO_MISP
- en: sudo chown apache:apache $PATH_TO_MISP
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo chown apache:apache $PATH_TO_MISP
- en: cd /var/www
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www
- en: sudo -u apache git clone https://github.com/MISP/MISP.git
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo -u apache git clone https://github.com/MISP/MISP.git
- en: cd $PATH_TO_MISP
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: cd $PATH_TO_MISP
- en: sudo -u apache git checkout tags/$(git describe --tags `git rev-list --tags
    --max-count=1`)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo -u apache git checkout tags/$(git describe --tags `git rev-list --tags
    --max-count=1`)
- en: if the last shortcut doesn't work, specify the latest version manually
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果最后一个快捷方式不起作用，请手动指定最新版本
- en: 'example: git checkout tags/v2.4.XY.The following is the one tested : (git checkout
    tags/v2.4.79)'
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例如：git checkout tags/v2.4.XY。以下是经过测试的：（git checkout tags/v2.4.79）
- en: the message regarding a "detached HEAD state" is expected behavior
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于“分离的HEAD状态”的消息是预期行为
- en: (you only have to create a new branch, if you want to change stuff and do a
    pull request for example)
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: （如果要更改内容并进行拉取请求，只需创建一个新分支）
- en: Fetch submodules
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取子模块
- en: sudo -u apache git submodule update --init --recursive
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用apache用户执行git submodule update --init --recursive
- en: Make git ignore filesystem permission differences for submodules
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使git忽略子模块的文件系统权限差异
- en: sudo -u apache git submodule foreach --recursive git config core.filemode false
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用apache用户执行git submodule foreach --recursive git config core.filemode false
- en: Create a python3 virtualenv
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个python3虚拟环境
- en: sudo -u apache $RUN_PYTHON "virtualenv -p python3 $PATH_TO_MISP/venv"
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $RUN_PYTHON "virtualenv -p python3 $PATH_TO_MISP/venv"
- en: sudo mkdir /usr/share/httpd/.cache
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app
- en: sudo chown apache:apache /usr/share/httpd/.cache
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app/files/scripts/python-stix
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U pip setuptools
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U pip setuptools
- en: 'install Mitre''s STIX and its dependencies by running the following commands:'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装Mitre的STIX及其依赖项：
- en: sudo yum install python-importlib python-lxml python-dateutil python-six -y
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: sudo yum install python-importlib python-lxml python-dateutil python-six -y
- en: cd /var/www/MISP/app/files/scripts
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app/files/scripts
- en: sudo -u apache git clone https://github.com/CybOXProject/python-cybox.git
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: post_max_size = 50M
- en: sudo -u apache git clone https://github.com/STIXProject/python-stix.git
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/files/terms
- en: cd /var/www/MISP/app/files/scripts/python-cybox
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: CakeResque通常使用phpredis连接到redis，但它有一个（有缺陷的）通过Redisent的备用连接器。强烈建议使用"yum install
    php-redis"安装phpredis
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: UMASK=$(umask)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: UMASK=$(umask)
- en: umask 0022
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: umask 0022
- en: cd /var/www/MISP/app/files/scripts/python-stix
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mkdir /usr/share/httpd/.composer
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
- en: install maec
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装maec
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U maec
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U maec
- en: install zmq
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装zmq
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U zmq
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U zmq
- en: install redis
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建议：在/etc/opt/rh/rh-php71/php.ini中更改一些PHP设置
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U redis
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U redis
- en: install magic, lief, pydeep
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装magic、lief、pydeep
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U python-magic lief git+https://github.com/kbandla/pydeep.git
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U python-magic lief git+https://github.com/kbandla/pydeep.git
- en: 'install mixbox to accommodate the new STIX dependencies:'
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装mixbox以适应新的STIX依赖项：
- en: cd /var/www/MISP/app/files/scripts/
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app/files/scripts/
- en: sudo -u apache git clone https://github.com/CybOXProject/mixbox.git
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache git clone https://github.com/CybOXProject/mixbox.git
- en: cd /var/www/MISP/app/files/scripts/mixbox
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app/files/scripts/mixbox
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 完成
- en: install PyMISP
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo -u apache $RUN_PHP "php composer.phar install"
- en: cd /var/www/MISP/PyMISP
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/PyMISP
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install enum34
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod -R g+ws /var/www/MISP/app/files/scripts/tmp
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /usr/share/httpd/.cache
- en: Enable python3 for php-fpm
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为php-fpm启用python3
- en: echo 'source scl_source enable rh-python36' | sudo tee -a /etc/opt/rh/rh-php71/sysconfig/php-fpm
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安装PyMISP
- en: sudo sed -i.org -e 's/^;\(clear_env = no\)/\1/' /etc/opt/rh/rh-php71/php-fpm.d/www.conf
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: sudo sed -i.org -e 's/^;\(clear_env = no\)/\1/' /etc/opt/rh/rh-php71/php-fpm.d/www.conf
- en: sudo systemctl restart rh-php71-php-fpm.service
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl restart rh-php71-php-fpm.service
- en: umask $UMASK
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: umask $UMASK
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Install CakeResque along with its dependencies if you intend to use the built-in
    background jobs:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo ln -s ../php-fpm.d/timezone.ini /etc/opt/rh/rh-php71/php.d/99-timezone.ini
- en: '[PRE10]bash'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]bash'
- en: sudo chown -R apache:apache /var/www/MISP
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]bash'
- en: sudo mkdir /usr/share/httpd/.composer
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: cd /var/www/MISP/app/files/scripts/python-cybox
- en: sudo chown apache:apache /usr/share/httpd/.composer
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /usr/share/httpd/.composer
- en: cd /var/www/MISP/app
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: echo 'source scl_source enable rh-python36' | sudo tee -a /etc/opt/rh/rh-php71/sysconfig/php-fpm
- en: sudo -u apache $RUN_PHP "php composer.phar require kamisama/cake-resque:4.1.2"
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: sudo $RUN_PHP "pecl install redis"
- en: sudo -u apache $RUN_PHP "php composer.phar config vendor-dir Vendor"
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $RUN_PHP "php composer.phar config vendor-dir Vendor"
- en: sudo -u apache $RUN_PHP "php composer.phar install"
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $RUN_PHP "php composer.phar require kamisama/cake-resque:4.1.2"
- en: CakeResque normally uses phpredis to connect to redis, but it has a (buggy)
    fallback connector through Redisent. It is highly advised to install phpredis
    using "yum install php-redis"
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo -u apache git clone https://github.com/STIXProject/python-stix.git
- en: sudo $RUN_PHP "pecl install redis"
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: sudo find /var/www/MISP -type d -exec chmod g=rx {} \;
- en: echo "extension=redis.so" |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/redis.ini
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: echo "extension=redis.so" |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/redis.ini
- en: sudo ln -s ../php-fpm.d/redis.ini /etc/opt/rh/rh-php71/php.d/99-redis.ini
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: sudo ln -s ../php-fpm.d/redis.ini /etc/opt/rh/rh-php71/php.d/99-redis.ini
- en: sudo systemctl restart rh-php71-php-fpm.service
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl restart rh-php71-php-fpm.service
- en: If you have not yet set a timezone in php.ini
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果您尚未在php.ini中设置时区
- en: echo 'date.timezone = "Europe/Luxembourg"' |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/timezone.ini
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: echo 'date.timezone = "Europe/Luxembourg"' |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/timezone.ini
- en: sudo ln -s ../php-fpm.d/timezone.ini /etc/opt/rh/rh-php71/php.d/99-timezone.ini
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令作为root用户确保权限设置正确：
- en: 'Recommended: Change some PHP settings in /etc/opt/rh/rh-php71/php.ini'
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo -u apache git clone https://github.com/CybOXProject/python-cybox.git
- en: max_execution_time = 300
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: max_execution_time = 300
- en: memory_limit = 512M
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: memory_limit = 512M
- en: upload_max_filesize = 50M
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: upload_max_filesize = 50M
- en: post_max_size = 50M
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install enum34
- en: for key in upload_max_filesize post_max_size max_execution_time max_input_time
    memory_limit
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
- en: do
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于upload_max_filesize、post_max_size、max_execution_time、max_input_time和memory_limit等键
- en: sudo sed -i "s/^\($key\).*/\1 = $(eval echo \${$key})/" $PHP_INI
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: sudo sed -i "s/^\($key\).*/\1 = $(eval echo \${$key})/" $PHP_INI
- en: done
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
- en: sudo systemctl restart rh-php71-php-fpm.service
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl restart rh-php71-php-fpm.service
- en: '[PRE11]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: sudo cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: sudo cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php
- en: '[PRE12]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Set the permissions as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置权限如下：
- en: '[PRE13]bash'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算使用内置的后台作业，请安装CakeResque以及其依赖项：
- en: 'Make sure the permissions are set correctly using the following commands as
    root:'
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保使用以下命令作为root用户正确设置权限：
- en: sudo chown -R root:apache /var/www/MISP
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R root:apache /var/www/MISP
- en: sudo find /var/www/MISP -type d -exec chmod g=rx {} \;
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 安装redis
- en: sudo chmod -R g+r,o= /var/www/MISP
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod -R g+r,o= /var/www/MISP
- en: sudo chmod -R 750 /var/www/MISP
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod -R 750 /var/www/MISP
- en: sudo chmod -R g+ws /var/www/MISP/app/tmp
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod -R g+ws /var/www/MISP/app/tmp
- en: sudo chmod -R g+ws /var/www/MISP/app/files
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod -R g+ws /var/www/MISP/app/files
- en: sudo chmod -R g+ws /var/www/MISP/app/files/scripts/tmp
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP
- en: sudo chown apache:apache /var/www/MISP/app/files
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/files
- en: sudo chown apache:apache /var/www/MISP/app/files/terms
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mkdir /usr/share/httpd/.cache
- en: sudo chown apache:apache /var/www/MISP/app/files/scripts/tmp
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/files/scripts/tmp
- en: sudo chown apache:apache /var/www/MISP/app/Plugin/CakeResque/tmp
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/Plugin/CakeResque/tmp
- en: sudo chown -R apache:apache /var/www/MISP/app/Config
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP/app/Config
- en: sudo chown -R apache:apache /var/www/MISP/app/tmp
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP/app/tmp
- en: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/orgs
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/orgs
- en: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/custom
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/custom
- en: '[PRE14]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a database and user as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式创建数据库和用户：
- en: '[PRE15]bash'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE15]bash'
- en: Enable, start and secure your mysql database server
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用，启动和保护您的mysql数据库服务器
- en: sudo systemctl enable mariadb.service
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl enable mariadb.service
- en: sudo systemctl start mariadb.service
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl start mariadb.service
- en: sudo yum install expect -y
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: sudo yum install expect -y
- en: Add your credentials if needed, if sudo has NOPASS, comment out the relevant
    lines
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果需要，添加您的凭据，如果sudo有NOPASS，请注释掉相关行
- en: '#pw="Password1234"'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '#pw="Password1234"'
- en: expect -f - <<-EOF
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 期望 -f - <<-EOF
- en: set timeout 10
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 设置超时时间为10
- en: spawn sudo mysql_secure_installation
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 生成sudo mysql_secure_installation
- en: '#expect "*?assword*"'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '#期望"*?assword*"'
- en: '#send -- "$pw\r"'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '#发送 -- "$pw\r"'
- en: expect "Enter current password for root (enter for none):"
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"输入root的当前密码（不输入则为空）："
- en: send -- "\r"
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "\r"
- en: expect "Set root password?"
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"设置root密码？"
- en: send -- "y\r"
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "y\r"
- en: expect "New password:"
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"新密码："
- en: send -- "${DBPASSWORD_ADMIN}\r"
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "${DBPASSWORD_ADMIN}\r"
- en: expect "Re-enter new password:"
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"重新输入新密码："
- en: send -- "${DBPASSWORD_ADMIN}\r"
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "${DBPASSWORD_ADMIN}\r"
- en: expect "Remove anonymous users?"
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"删除匿名用户？"
- en: send -- "y\r"
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "y\r"
- en: expect "Disallow root login remotely?"
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"禁止远程root登录？"
- en: send -- "y\r"
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "y\r"
- en: expect "Remove test database and access to it?"
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"删除测试数据库和对其的访问权限？"
- en: send -- "y\r"
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "y\r"
- en: expect "Reload privilege tables now?"
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 期望"现在重新加载权限表？"
- en: send -- "y\r"
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 -- "y\r"
- en: expect eof
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 期望eof
- en: EOF
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: sudo yum remove tcl expect -y
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: sudo yum remove tcl expect -y
- en: Additionally, it is probably a good idea to make the database server listen
    on localhost only
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 此外，让数据库服务器只在本地侦听可能是一个好主意
- en: echo [mysqld] |sudo tee /etc/my.cnf.d/bind-address.cnf
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: echo [mysqld] |sudo tee /etc/my.cnf.d/bind-address.cnf
- en: echo bind-address=127.0.0.1 |sudo tee -a /etc/my.cnf.d/bind-address.cnf
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: echo bind-address=127.0.0.1 |sudo tee -a /etc/my.cnf.d/bind-address.cnf
- en: sudo systemctl restart mariadb.service
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl restart mariadb.service
- en: Enter the mysql shell
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入mysql shell
- en: mysql -u root -p
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: mysql -u root -p
- en: '[PRE16]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: MariaDB [(none)]> create database misp;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB [(none)]> create database misp;
- en: MariaDB [(none)]> grant usage on *.* to misp@localhost identified by 'XXXXXXXXX';
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB [(none)]> grant usage on *.* to misp@localhost identified by 'XXXXXXXXX';
- en: MariaDB [(none)]> grant all privileges on misp.* to misp@localhost ;
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB [(none)]> grant all privileges on misp.* to misp@localhost ;
- en: MariaDB [(none)]> exit
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB [(none)]> 退出
- en: '[PRE17]bash'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17]bash'
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "create database $DBNAME;"
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "create database $DBNAME;"
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant usage on *.* to $DBNAME@localhost
    identified by '$DBPASSWORD_MISP';"
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant usage on *.* to $DBNAME@localhost
    identified by '$DBPASSWORD_MISP';"
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant all privileges on
    $DBNAME.* to '$DBUSER_MISP'@'localhost';"
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant all privileges on
    $DBNAME.* to '$DBUSER_MISP'@'localhost';"
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "flush privileges;"
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "flush privileges;"
- en: '[PRE18]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Import the empty MySQL database from `MYSQL.sql` as follows:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`MYSQL.sql`导入空的MySQL数据库如下：
- en: '[PRE19]bash sudo -u apache cat $PATH_TO_MISP/INSTALL/MYSQL.sql | mysql -u $DBUSER_MISP
    -p$DBPASSWORD_MISP $DBNAME'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]bash sudo -u apache cat $PATH_TO_MISP/INSTALL/MYSQL.sql | mysql -u $DBUSER_MISP
    -p$DBPASSWORD_MISP $DBNAME'
- en: '[PRE20]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, configure your Apache server:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，配置您的Apache服务器：
- en: '[PRE21]bash'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]bash'
- en: $ sestatus
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: $ sestatus
- en: 'SELinux status: disabled'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux状态：已禁用
- en: '[PRE22]bash'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]bash'
- en: Now configure your apache server with the DocumentRoot /var/www/MISP/app/webroot/
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在使用DocumentRoot /var/www/MISP/app/webroot/配置您的apache服务器
- en: A sample vhost can be found in /var/www/MISP/INSTALL/apache.misp.centos7
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可以在/var/www/MISP/INSTALL/apache.misp.centos7中找到一个示例vhost
- en: sudo cp /var/www/MISP/INSTALL/apache.misp.centos7.ssl /etc/httpd/conf.d/misp.ssl.conf
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: sudo cp /var/www/MISP/INSTALL/apache.misp.centos7.ssl /etc/httpd/conf.d/misp.ssl.conf
- en: 'If a valid SSL certificate is not already created for the server, create a
    self-signed certificate:'
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果服务器尚未创建有效的SSL证书，请创建自签名证书：
- en: sudo openssl req -newkey rsa:4096 -days 365 -nodes -x509 \
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: sudo openssl req -newkey rsa:4096 -days 365 -nodes -x509 \
- en: -subj "/C=${OPENSSL_C}/ST=${OPENSSL_ST}/L=${OPENSSL_L}/O=${OPENSSL_O}/OU=${OPENSSL_OU}/CN=${OPENSSL_CN}/emailAddress=${OPENSSL_EMAILADDRESS}"
    \
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: -subj "/C=${OPENSSL_C}/ST=${OPENSSL_ST}/L=${OPENSSL_L}/O=${OPENSSL_O}/OU=${OPENSSL_OU}/CN=${OPENSSL_CN}/emailAddress=${OPENSSL_EMAILADDRESS}"
    \
- en: -keyout /etc/pki/tls/private/misp.local.key -out /etc/pki/tls/certs/misp.local.crt
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: -keyout /etc/pki/tls/private/misp.local.key -out /etc/pki/tls/certs/misp.local.crt
- en: Since SELinux is enabled, we need to allow httpd to write to certain directories
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 由于启用了SELinux，我们需要允许httpd写入某些目录
- en: sudo chcon -t usr_t /var/www/MISP/venv
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t usr_t /var/www/MISP/venv
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/terms
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/terms
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/scripts/tmp
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/scripts/tmp
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Plugin/CakeResque/tmp
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Plugin/CakeResque/tmp
- en: sudo chcon -R -t usr_t /var/www/MISP/venv
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t usr_t /var/www/MISP/venv
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp/logs
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp/logs
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/orgs
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/orgs
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/custom
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/custom
- en: '[PRE23]bash'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]bash'
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
- en: Allow httpd to connect to the redis server and php-fpm over tcp/ip
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许httpd通过tcp/ip连接到redis服务器和php-fpm
- en: sudo setsebool -P httpd_can_network_connect on
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: sudo setsebool -P httpd_can_network_connect on
- en: Enable and start the httpd service
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用并启动httpd服务
- en: sudo systemctl enable httpd.service
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl enable httpd.service
- en: sudo systemctl start httpd.service
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl start httpd.service
- en: Open a hole in the iptables firewall
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Open a hole in the iptables firewall
- en: sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
- en: sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
- en: sudo firewall-cmd --reload
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --reload
- en: We seriously recommend using only HTTPS / SSL !
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: We seriously recommend using only HTTPS / SSL !
- en: 'Add SSL support by running: sudo yum install mod_ssl'
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Add SSL support by running: sudo yum install mod_ssl'
- en: Check out the apache.misp.ssl file for an example
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Check out the apache.misp.ssl file for an example
- en: '[PRE24]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To rotate these logs, install the supplied `logrotate` script:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'To rotate these logs, install the supplied `logrotate` script:'
- en: '[PRE25]bash'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]bash'
- en: MISP saves the stdout and stderr of it's workers in /var/www/MISP/app/tmp/logs
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MISP saves the stdout and stderr of it's workers in /var/www/MISP/app/tmp/logs
- en: 'To rotate these logs install the supplied logrotate script:'
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'To rotate these logs install the supplied logrotate script:'
- en: sudo cp $PATH_TO_MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: sudo cp $PATH_TO_MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp
- en: sudo chmod 0640 /etc/logrotate.d/misp
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod 0640 /etc/logrotate.d/misp
- en: Now make logrotate work under SELinux as well
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Now make logrotate work under SELinux as well
- en: Allow logrotate to modify the log files
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Allow logrotate to modify the log files
- en: sudo semanage fcontext -a -t httpd_log_t "/var/www/MISP/app/tmp/logs(/.*)?"
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: sudo semanage fcontext -a -t httpd_log_t "/var/www/MISP/app/tmp/logs(/.*)?"
- en: sudo chcon -R -t httpd_log_t /var/www/MISP/app/tmp/logs
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -R -t httpd_log_t /var/www/MISP/app/tmp/logs
- en: Allow logrotate to read /var/www
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Allow logrotate to read /var/www
- en: sudo checkmodule -M -m -o /tmp/misplogrotate.mod $PATH_TO_MISP/INSTALL/misplogrotate.te
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: sudo checkmodule -M -m -o /tmp/misplogrotate.mod $PATH_TO_MISP/INSTALL/misplogrotate.te
- en: sudo semodule_package -o /tmp/misplogrotate.pp -m /tmp/misplogrotate.mod
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: sudo semodule_package -o /tmp/misplogrotate.pp -m /tmp/misplogrotate.mod
- en: sudo semodule -i /tmp/misplogrotate.pp
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: sudo semodule -i /tmp/misplogrotate.pp
- en: '[PRE26]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following script to configure the MISP instance:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Run the following script to configure the MISP instance:'
- en: '[PRE27]bash'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE27]bash'
- en: There are 4 sample configuration files in $PATH_TO_MISP/app/Config that need
    to be copied
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: There are 4 sample configuration files in $PATH_TO_MISP/app/Config that need
    to be copied
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/bootstrap.default.php $PATH_TO_MISP/app/Config/bootstrap.php
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache cp -a $PATH_TO_MISP/app/Config/bootstrap.default.php $PATH_TO_MISP/app/Config/bootstrap.php
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/database.default.php $PATH_TO_MISP/app/Config/database.php
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache cp -a $PATH_TO_MISP/app/Config/database.default.php $PATH_TO_MISP/app/Config/database.php
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/core.default.php $PATH_TO_MISP/app/Config/core.php
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache cp -a $PATH_TO_MISP/app/Config/core.default.php $PATH_TO_MISP/app/Config/core.php
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/config.default.php $PATH_TO_MISP/app/Config/config.php
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache cp -a $PATH_TO_MISP/app/Config/config.default.php $PATH_TO_MISP/app/Config/config.php
- en: echo "<?php
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: echo "<?php;?>
- en: class DATABASE_CONFIG {
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: class DATABASE_CONFIG {
- en: public \$default = array(
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: public \$default = array(
- en: '''datasource'' => ''Database/Mysql'','
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '''datasource'' => ''Database/Mysql'','
- en: //'datasource' => 'Database/Postgres',
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: //'datasource' => 'Database/Postgres',
- en: '''persistent'' => false,'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '''persistent'' => false,'
- en: '''host'' => ''$DBHOST'','
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '''host'' => ''$DBHOST'','
- en: '''login'' => ''$DBUSER_MISP'','
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '''login'' => ''$DBUSER_MISP'','
- en: '''port'' => 3306, // MySQL & MariaDB'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '''port'' => 3306, // MySQL & MariaDB'
- en: //'port' => 5432, // PostgreSQL
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: //'port' => 5432, // PostgreSQL
- en: '''password'' => ''$DBPASSWORD_MISP'','
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '''password'' => ''$DBPASSWORD_MISP'','
- en: '''database'' => ''$DBNAME'','
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '''database'' => ''$DBNAME'','
- en: '''prefix'' => '''','
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '''prefix'' => '''','
- en: '''encoding'' => ''utf8'','
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '''encoding'' => ''utf8'','
- en: );
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}" | sudo -u apache tee $PATH_TO_MISP/app/Config/database.php'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '}" | sudo -u apache tee $PATH_TO_MISP/app/Config/database.php'
- en: 'Configure the fields in the newly created files:'
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Configure the fields in the newly created files:'
- en: 'config.php : baseurl (example: ''baseurl'' => ''http://misp'',) - don''t use
    "localhost" it causes issues when browsing externally'
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'config.php : baseurl (example: ''baseurl'' => ''http://misp'',) - don''t use
    "localhost" it causes issues when browsing externally'
- en: 'core.php : Uncomment and set the timezone: `// date_default_timezone_set(''UTC'');`'
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'core.php : Uncomment and set the timezone: `// date_default_timezone_set(''UTC'');`'
- en: 'database.php : login, port, password, database'
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'database.php : login, port, password, database'
- en: DATABASE_CONFIG has to be filled
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DATABASE_CONFIG has to be filled
- en: 'With the default values provided in section 6, this would look like:'
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'With the default values provided in section 6, this would look like:'
- en: class DATABASE_CONFIG {
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: class DATABASE_CONFIG {
- en: public $default = array(
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: public $default = array(
- en: '''datasource'' => ''Database/Mysql'','
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''datasource'' => ''Database/Mysql'','
- en: '''persistent'' => false,'
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''persistent'' => false,'
- en: '''host'' => ''localhost'','
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''host'' => ''localhost'','
- en: '''login'' => ''misp'', // grant usage on *.* to misp@localhost'
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''login'' => ''misp'', // grant usage on *.* to misp@localhost'
- en: '''port'' => 3306,'
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''port'' => 3306,'
- en: '''password'' => ''XXXXdbpasswordhereXXXXX'', // identified by ''XXXXdbpasswordhereXXXXX'';'
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''password'' => ''XXXXdbpasswordhereXXXXX'', // identified by ''XXXXdbpasswordhereXXXXX'';'
- en: '''database'' => ''misp'', // create database misp;'
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''database'' => ''misp'', // create database misp;'
- en: '''prefix'' => '''','
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''prefix'' => '''','
- en: '''encoding'' => ''utf8'','
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '''encoding'' => ''utf8'','
- en: );
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: );
- en: '#}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '#}'
- en: '[PRE28]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: sudo chown apache:apache /var/www/MISP/app/Config/config.php
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/Config/config.php
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Config/config.php
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Config/config.php
- en: Generate a GPG encryption key.
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Generate a GPG encryption key.
- en: cat >/tmp/gen-key-script <<EOF
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: cat >/tmp/gen-key-script <<EOF
- en: '%echo Generating a default key'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '%echo Generating a default key'
- en: 'Key-Type: default'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'Key-Type: default'
- en: 'Key-Length: $GPG_KEY_LENGTH'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'Key-Length: $GPG_KEY_LENGTH'
- en: 'Subkey-Type: default'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 'Subkey-Type: default'
- en: 'Name-Real: $GPG_REAL_NAME'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 'Name-Real: $GPG_REAL_NAME'
- en: 'Name-Comment: $GPG_COMMENT'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 'Name-Comment: $GPG_COMMENT'
- en: 'Name-Email: $GPG_EMAIL_ADDRESS'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 'Name-Email: $GPG_EMAIL_ADDRESS'
- en: 'Expire-Date: 0'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'Expire-Date: 0'
- en: 'Passphrase: $GPG_PASSPHRASE'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 'Passphrase: $GPG_PASSPHRASE'
- en: Do a commit here, so that we can later print "done"
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Do a commit here, so that we can later print "done"
- en: '%commit'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '%commit'
- en: '%echo done'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '%echo done'
- en: EOF
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: sudo gpg --homedir /var/www/MISP/.gnupg --batch --gen-key /tmp/gen-key-script
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: sudo gpg --homedir /var/www/MISP/.gnupg --batch --gen-key /tmp/gen-key-script
- en: sudo rm -f /tmp/gen-key-script
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: sudo rm -f /tmp/gen-key-script
- en: sudo chown -R apache:apache /var/www/MISP/.gnupg
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown -R apache:apache /var/www/MISP/.gnupg
- en: And export the public key to the webroot
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: And export the public key to the webroot
- en: sudo gpg --homedir /var/www/MISP/.gnupg --export --armor $GPG_EMAIL_ADDRESS
    |sudo tee /var/www/MISP/app/webroot/gpg.asc
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: sudo gpg --homedir /var/www/MISP/.gnupg --export --armor $GPG_EMAIL_ADDRESS
    |sudo tee /var/www/MISP/app/webroot/gpg.asc
- en: sudo chown apache:apache /var/www/MISP/app/webroot/gpg.asc
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown apache:apache /var/www/MISP/app/webroot/gpg.asc
- en: Start the workers to enable background jobs
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Start the workers to enable background jobs
- en: sudo chmod +x /var/www/MISP/app/Console/worker/start.sh
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod +x /var/www/MISP/app/Console/worker/start.sh
- en: sudo -u apache $RUN_PHP /var/www/MISP/app/Console/worker/start.sh
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $RUN_PHP /var/www/MISP/app/Console/worker/start.sh
- en: if [ ! -e /etc/rc.local ]
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: if [ ! -e /etc/rc.local ]
- en: then
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: then
- en: echo '#!/bin/sh -e' | sudo tee -a /etc/rc.local
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: echo '#!/bin/sh -e' | sudo tee -a /etc/rc.local
- en: echo 'exit 0' | sudo tee -a /etc/rc.local
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: echo 'exit 0' | sudo tee -a /etc/rc.local
- en: sudo chmod u+x /etc/rc.local
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod u+x /etc/rc.local
- en: fi
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: sudo sed -i -e '$i \su -s /bin/bash apache -c "scl enable rh-php71 /var/www/MISP/app/Console/worker/start.sh"
    > /tmp/worker_start_rc.local.log\n' /etc/rc.local
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: sudo sed -i -e '$i \su -s /bin/bash apache -c "scl enable rh-php71 /var/www/MISP/app/Console/worker/start.sh"
    > /tmp/worker_start_rc.local.log\n' /etc/rc.local
- en: Make sure it will execute
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保它将被执行
- en: sudo chmod +x /etc/rc.local
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod +x /etc/rc.local
- en: 'echo "Admin (root) DB Password: $DBPASSWORD_ADMIN"'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 'echo "Admin (root) DB Password: $DBPASSWORD_ADMIN"'
- en: 'echo "User (misp) DB Password: $DBPASSWORD_MISP"'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 'echo "User (misp) DB Password: $DBPASSWORD_MISP"'
- en: '[PRE29]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: some misp-modules dependencies
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些misp-modules依赖项
- en: sudo yum install -y openjpeg-devel
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: sudo yum install -y openjpeg-devel
- en: sudo chmod 2777 /usr/local/src
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chmod 2777 /usr/local/src
- en: sudo chown root:users /usr/local/src
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chown root:users /usr/local/src
- en: cd /usr/local/src/
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: cd /usr/local/src/
- en: git clone https://github.com/MISP/misp-modules.git
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: git clone https://github.com/MISP/misp-modules.git
- en: cd misp-modules
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: cd misp-modules
- en: pip install
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pip install
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -I -r REQUIREMENTS
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -I -r REQUIREMENTS
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
- en: sudo yum install rubygem-rouge rubygem-asciidoctor -y
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: sudo yum install rubygem-rouge rubygem-asciidoctor -y
- en: '##sudo gem install asciidoctor-pdf --pre'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '##sudo gem install asciidoctor-pdf --pre'
- en: 'install STIX2.0 library to support STIX 2.0 export:'
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装STIX2.0库以支持STIX 2.0导出：
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install stix2
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache $PATH_TO_MISP/venv/bin/pip install stix2
- en: install additional dependencies for extended object generation and extraction
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装扩展对象生成和提取的其他依赖项
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install maec lief python-magic pathlib
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install maec lief python-magic pathlib
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install git+https://github.com/kbandla/pydeep.git
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install git+https://github.com/kbandla/pydeep.git
- en: Start misp-modules
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动misp-modules
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/misp-modules -l 0.0.0.0 -s &
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -u apache ${PATH_TO_MISP}/venv/bin/misp-modules -l 0.0.0.0 -s &
- en: sudo sed -i -e '$i \sudo -u apache /var/www/MISP/venv/bin/misp-modules -l 127.0.0.1
    -s &\n' /etc/rc.local
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: sudo sed -i -e '$i \sudo -u apache /var/www/MISP/venv/bin/misp-modules -l 127.0.0.1
    -s &\n' /etc/rc.local
- en: '[PRE30]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Threat scoring capability
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁评分能力
- en: Once all the dependencies are resolved and the tool is set up, we will need
    to expanded by enhancing the MISP backend system by adding the IOC threat scoring
    capability on top of it. It should be noted that MISP doesn't come with the capability
    to carry out threat scoring out of the box, which is a very important feature
    for SIEM. The improvisation that we are doing to the MISP backend system/code
    base is to ensure that we have can have the IOC threat scoring capability built
    on top of the MISP. In order to accommodate this, we have created a table at the
    backend called `threat_scoring`. The table records the appropriate threat score
    of every IOC.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有依赖关系都得到解决，并且工具设置好了，我们将需要通过增强MISP后端系统来扩展IOC威胁评分能力。值得注意的是，MISP并不具备开箱即用的威胁评分能力，这是SIEM的一个非常重要的功能。我们对MISP后端系统/代码库所做的改进是确保我们可以在MISP之上构建IOC威胁评分能力。为了适应这一点，我们在后端创建了一个名为`threat_scoring`的表。该表记录了每个IOC的适当威胁评分。
- en: 'After setting up the database, let''s open the MySQL console and remove the
    MISP database as follows:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 设置数据库后，让我们打开MySQL控制台，并按以下方式删除MISP数据库：
- en: '[PRE31]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once we execute these commands, we now need to add the modified database schema
    to the newly created `misp` database. It can be added to backend system as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行这些命令，我们现在需要将修改后的数据库模式添加到新创建的`misp`数据库中。可以按以下方式将其添加到后端系统中：
- en: '[PRE32]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Once the preceding command is executed, we will have the updated instance of
    the MISP backend database.The mod_schema.sql can be found at the GITHUB URL of
    this chapter.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将拥有MISP后端数据库的更新实例。mod_schema.sql可以在本章的GITHUB URL中找到。
- en: MISP UI and API
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MISP UI和API
- en: MISP has a PHP-based frontend and can be accessed via a web browser. It comes
    with many important features. You can refer to the original website to get a complete
    idea of all these features: [https://www.misp-project.org/](https://www.misp-project.org/).
    In this section, let's take a look at a few key features that will give us an
    idea of how to implement threat intelligence and collect IOCs using MISP.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: MISP具有基于PHP的前端，可以通过Web浏览器访问。它带有许多重要功能。您可以参考原始网站，了解所有这些功能的完整概念：[https://www.misp-project.org/](https://www.misp-project.org/)。在本节中，让我们看看一些关键功能，这些功能将让我们了解如何使用MISP实施威胁情报并收集IOCs。
- en: Once we log in to the portal, we can go to the feeds tab to see which feeds
    come configured out of the box in MISP. It should be noted that a feed is nothing
    but a web-based local source that provides IOCs in JSON, CSV, XML, or flat-file
    format. There are various feed sources pre-configured in MISP. Once we schedule
    a feed collection job, MISP's central engine visits all the feed sources configured,
    extracts IOCs from them, and places them in the central database as shown in the
    following screenshot:.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们登录到门户，我们可以转到源选项卡，查看MISP中预先配置的源。值得注意的是，源只是提供JSON、CSV、XML或平面文件格式的IOCs的基于Web的本地来源。MISP中预先配置了各种源。一旦我们安排了源收集作业，MISP的中央引擎就会访问所有配置的源，从中提取IOCs，并将它们放入中央数据库，如下图所示：
- en: '![](img/78cf1144-82b5-4ed1-82ec-ab2699255fe4.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78cf1144-82b5-4ed1-82ec-ab2699255fe4.png)'
- en: As can be seen in the preceding screenshot, we can go to the **Add Feeds** tab
    and configure more feeds from there.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们可以转到**添加源**选项卡，并从那里配置更多的源。
- en: 'In the following screenshot, we can see the central scheduler that downloads
    feeds from configured sources and parses them. We can select any time of the day,
    week, or year to indicate when we want the feeds to be downloaded. We can also
    configure how frequently we want the scheduler to repeat:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到从配置的源下载和解析源的中央调度程序。我们可以选择一天、一周或一年中的任何时间，指示我们希望何时下载源。我们还可以配置调度程序重复的频率：
- en: '![](img/3c18b6f0-82a1-4d0a-afe7-767fa9a8c0ba.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c18b6f0-82a1-4d0a-afe7-767fa9a8c0ba.png)'
- en: We will focus on the highlighted rows in the preceding screenshot. On the second
    line, we have a **fetch_feeds **job. Double-clicking on the frequency and Schedule
    Time/Date fields lets us change the setting. Furthermore, it should be noted that
    the first highlighted row that says `threat_scoring` does not come with default
    installation of MISP. We have injected this by modifying the backend database
    (we covered this in the improvisation section).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于前面截图中的突出显示的行。在第二行，我们有一个**fetch_feeds**作业。双击频率和计划时间/日期字段可以让我们更改设置。此外，应该注意到前面突出显示的`threat_scoring`行不是MISP的默认安装内容。我们通过修改后端数据库注入了这个（我们在改进部分中介绍了这一点）。
- en: 'Once the feeds are downloaded and parsed, they are placed inside a virtual/logical
    entity called **Events**. An event in MISP can be thought of as a collection of
    IOCs. We can have separate events for separate feeds. Alternatively, we can have
    all IP-based IOCs going to separate events, domains, and so on. The following
    screenshot depicts event collection:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦订阅被下载和解析，它们被放置在一个虚拟/逻辑实体中，称为**事件**。MISP中的事件可以被视为IOC的集合。我们可以为不同的订阅创建单独的事件。或者，我们可以将所有基于IP的IOC放入单独的事件中，域名等等。以下截图显示了事件集合：
- en: '![](img/07d5218a-be03-4f51-a296-3f12b6af5d76.png)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07d5218a-be03-4f51-a296-3f12b6af5d76.png)'
- en: 'If we click on the details icon of any of the events highlighted in the previous
    screenshot, we will get to see which IOCs that particular event is actually holding.
    This is captured in the following screenshot:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击前面截图中任何一个事件的详细信息图标，我们将看到该特定事件实际持有的IOC。这在以下截图中显示：
- en: '![](img/51b3f11b-c2a3-4fc5-ac74-6098366115d5.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b3f11b-c2a3-4fc5-ac74-6098366115d5.png)'
- en: MISP API (PyMISP)
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MISP API（PyMISP）
- en: 'As mentioned earlier, MISP comes with a very stable API, with which we can
    fetch events and IOCs referred as attributes within MISP and share them with our
    security tools. The API expects an authentication key to be set. The authentication
    key can be found at the user interface when the user logs in through the MISP
    web portal. An example of how to get the details of a particular event from the
    MISP backend database using the MISP API is shown here:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，MISP配备了一个非常稳定的API，我们可以通过它在MISP中获取事件和被称为属性的IOC，并与我们的安全工具共享。API需要设置身份验证密钥。身份验证密钥可以在用户通过MISP
    Web门户登录时找到。这里展示了如何使用MISP API从MISP后端数据库获取特定事件的详细信息的示例：
- en: '![](img/76d37a28-0ab8-4af5-af61-4a60ac213c79.png)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76d37a28-0ab8-4af5-af61-4a60ac213c79.png)'
- en: The complete details of the MISP API can be found at the following link: [https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples](https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: MISP API的完整详情可以在以下链接找到：[https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples](https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples)。
- en: 'In the preceding code snippet, we are simply initializing the MISP API object
    on line 31 and invoking the `get_api` API method. The preceding code can be run
    as follows:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们只是在第31行初始化了MISP API对象，并调用了`get_api` API方法。前面的代码可以按如下方式运行：
- en: '![](img/6e0cc825-dda5-4853-a0bc-96239fd62a7f.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e0cc825-dda5-4853-a0bc-96239fd62a7f.png)'
- en: As can be seen in the previous screenshot, we get all the IOCs associated with
    the `1512` event ID. The output can also be saved in a JSON file if we specify
    the `out` parameter.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们得到了与`1512`事件ID相关联的所有IOC。如果我们指定`out`参数，输出也可以保存在JSON文件中。
- en: Threat scoring
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁评分
- en: 'As we have discussed before, threat scoring forms a very important part of
    threat intelligence. There are usually millions of collected IOCs and they usually
    contain lots of false positives. If this information is directly fed to the SIEM
    tool, it will result in massive false positive alerts. In order to solve this
    problem, we have made an attempt to write an algorithm that works on top of the
    MISP-collected IOCs and associates a threat score to each. The idea is that an
    IOC with a score of five or more on a scale of 10 is more likely to be a genuinely
    malicious IOC and should be fed to the SIEM. The criteria of threat scoring on
    which this algorithm works is shown here:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，威胁评分是威胁情报的一个非常重要的部分。通常收集到数百万个IOC，它们通常包含大量的误报。如果这些信息直接输入到SIEM工具中，将导致大量的误报警报。为了解决这个问题，我们尝试编写一个算法，该算法在MISP收集的IOC之上工作，并为每个IOC关联一个威胁评分。这个想法是，在10分制上得分为五分或更高的IOC更有可能是真正恶意的IOC，并且应该输入到SIEM中。这个算法工作的威胁评分标准如下所示：
- en: '**Date**: The date of the IOC is given 30% of the weight. If an IOC is one
    to three months old, it gets the entire 100% of the 30%, which is three points.
    If it''s four months old, it gets 90%, or 2.9 points, and so on. The complete
    details will be given in the following section.'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期**：IOC的日期占30%的权重。如果一个IOC是一到三个月前的，它将获得30%的全部100%，即3分。如果是四个月前，它将获得90%，或2.9分，依此类推。完整的细节将在下一节中给出。'
- en: '**Correlation**: The correlation count of the IOC gets 54% of the weight. What
    we mean by correlation is the frequency of occurrence across multiple events or
    multiple feeds. Let''s say that we have configured 30 feeds and the IOCs from
    each feed go to separate events, which results in 30 events. Now, if there is
    an IOC that is found in all 30 events, this indicates that the probability of
    this IOC being highly malicious is very high, as 30 different sources have cited
    it. This IOC would get the entire 100% of the 54% allocated for correlation, or
    5.4 points. If an IOC is featured in 90% of the configured feeds, it gets the
    corresponding amount of points. The actual bifurcation of the correlation weight
    will be given in the following section.'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相关性**：IOC的相关性计数占权重的54%。我们所说的相关性是指在多个事件或多个数据源中出现的频率。假设我们配置了30个数据源，每个数据源的IOC都会进入不同的事件，结果就是30个事件。现在，如果有一个IOC在所有30个事件中都出现，这表明该IOC极有可能是高度恶意的，因为有30个不同的来源引用了它。这个IOC将获得相关性分配的整个54%权重，即5.4分。如果一个IOC出现在90%的配置数据源中，它将获得相应数量的分数。相关性权重的实际分配将在以下部分给出。'
- en: '**Tags**: Many IOC feed sources tag the IOC with the kind of activity that
    it has been associated with, such as scanning, botnet, and phishing websites.
    The weight given to the tags is 15%. It should be noted that this section works
    on the number of tags associated with an IOC, rather than the kind of tag. The
    higher the number of tags, the higher the allocated weight out of the 15% bucket.'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：许多IOC数据源会使用与其关联的活动类型对IOC进行标记，例如扫描、僵尸网络和钓鱼网站。标签所占权重为15%。需要注意的是，该部分根据与IOC关联的标签数量而非标签类型进行工作。标签数量越多，占15%权重的分数就越高。'
- en: '**Comments**: Finally, the remaining 1% is allocated to the tags section. Some
    IOCs also come with certain comments. If an IOC has a comment associated with
    it, it gets the entire 1%, or 0.1 point, and if not, it gets 0 points in this
    section.'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评论**：最后，剩下的1%分配给标签部分。一些IOC也带有特定的评论。如果一个IOC有相关评论，它将获得整个1%，即0.1分，如果没有，它在这一部分将获得0分。'
- en: Threat scoring weighed file
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁评分加权文件
- en: 'These criteria are not hardcoded within program logic, but are instead configured
    in a JSON file, so that the user can change them at any time and the code will
    pick up the updated values and allocate the scores accordingly. We have set the
    following values in our JSON file:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标准并未硬编码在程序逻辑中，而是在JSON文件中配置，以便用户可以随时更改它们，代码将获取更新后的值并相应地分配分数。我们在JSON文件中设置了以下值：
- en: '![](img/daf94c06-d9c7-4e1e-bf1f-59a7146b9f92.png)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daf94c06-d9c7-4e1e-bf1f-59a7146b9f92.png)'
- en: As can be seen in the previous screenshot, `Tags` is given a weight of 15%.
    This is further bifurcated in lines 8–12\. Line 8 indicates that any IOC that
    has a minimum of five tags and a maximum of 10,000 tags will be given the entire
    15%. Line 9 indicates that any IOC with four tags will be given 90% of the 15%
    and so on.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，`标签`的权重为15%。这在8-12行进一步分配。第8行表示任何具有最少五个标签和最多10,000个标签的IOC将获得整个15%。第9行表示任何具有四个标签的IOC将获得15%的90%，依此类推。
- en: '`Date` has a similar bifurcation. With a maximum of 30 points, any IOC that
    is between 0 and 90 days old gets the entire 100% of the 30 points, which is 3\.
    Any IOC which is 91–100 days old gets 90% of the 30 points, which is equal to
    2.7 and so on.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`日期`也有类似的分配。最多30分，任何0到90天的IOC都将获得整个30分的100%，即3分。任何91-100天的IOC将获得30分的90%，即2.7分，依此类推。'
- en: '`Correlation` is given a weight of 54%, as shown in the following screenshot.
    The bifurcation in the case of correlation is little bit different. The number
    35 in line 41 does not indicate an absolute number, but rather a percentage. It
    means that out of the total number of configured feeds, if an IOC is found in
    35% of feeds or events, then it should get the entire 5.4 points. The other rows
    can be interpreted similarly.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`相关性`的权重为54%，如下截图所示。在相关性的情况下，权重的分配有些不同。第41行的数字35并不表示绝对数量，而是一个百分比。这意味着在配置的总数据源中，如果一个IOC在35%的数据源或事件中被发现，那么它应该获得整个5.4分。其他行可以类似地解释。'
- en: 'Finally, there is a weight of 1% given to whether the IOC comes with any comments
    as well:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有1%的权重分配给IOC是否带有任何评论：
- en: '![](img/8552eea4-487d-47b1-8bf3-826fd82b24fc.png)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8552eea4-487d-47b1-8bf3-826fd82b24fc.png)'
- en: Threat scoring algorithm
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁评分算法
- en: 'Take a look at the following code, which we wrote in order to carry out threat
    scoring on top of the MISP IOC collection. The whole code can be found at the
    following link: [https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python):'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下我们编写的以下代码，用于对MISP IOC集合进行威胁评分。完整的代码可以在以下链接找到：[https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python)：
- en: '![](img/e737aa5e-64ba-479c-9982-6201a6a9eece.png)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e737aa5e-64ba-479c-9982-6201a6a9eece.png)'
- en: Let's try to understand the code written so far. This code makes use of the
    concepts we have studied earlier in this book. The idea is to read all the IOCs
    from the MISP `attributes` backend table and give a threat score to each, according
    to the logic discussed earlier. Now, there are millions of attributes, so if we
    try to read them and score them sequentially, it will take a very long time. This
    is where the beauty of Python in terms of multiprocessing comes into the picture.
    We will read all the attributes and, depending upon the processor cores of the
    underlying machine, break the attributes into equal chunks. Each processor core
    will be given one chunk at a time to process. It will also allocate threat scores
    to the IOCs belonging to that chunk. The hardware I am using has an 8 GB RAM and
    a 4-core processor.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着理解到目前为止编写的代码。这段代码利用了我们在本书中学到的概念。其想法是从MISP `attributes`后端表中读取所有IOCs，并根据之前讨论的逻辑为每个IOCs赋予威胁分数。现在，有数百万个属性，所以如果我们尝试按顺序读取它们并对它们进行评分，将需要很长时间。这就是Python在多进程方面的优势所在。我们将读取所有属性，并根据底层机器的处理器核心将属性分成相等的块。每个处理器核心将一次性处理一个块。它还将为属于该块的IOCs分配威胁分数。我使用的硬件具有8GB的RAM和4核处理器。
- en: 'Assuming we have a total number of 2 million attributes, these would be split
    into four chunks, each of which would hold 500,000 attributes. The scoring process
    will be carried out on that chunk by a dedicated processor core. If a sequential
    operation for 2 million chunks would have taken 4 hours, the multiprocessing approach
    would take 1 hour. The logic written between lines 40 and 51 takes care of determining
    the total number of chunks that we will use. It also contains the logic to deduce
    the chunk size as shown in the following screenshot:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们总共有200万个属性，这些属性将被分成四个块，每个块将包含50万个属性。评分过程将由专用处理器核心在该块上执行。如果对200万个块进行顺序操作需要4小时，那么多进程方法将需要1小时。在40和51行之间编写的逻辑负责确定我们将使用的块的总数。它还包含推断块大小的逻辑，如下截图所示：
- en: '![](img/899cd852-6bcc-4b6e-8223-c1f7877b8d4b.png)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![](img/899cd852-6bcc-4b6e-8223-c1f7877b8d4b.png)'
- en: It should be noted that the module imported at line 5, `from DB_Layer.Misp_access
    import MispDB`, represents a custom class called `MISPDB`, declared within the `MISP_access.py` module.
    This class has the raw SQL code to pull data from the `misp` database.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，在第5行导入的模块`from DB_Layer.Misp_access import MispDB`代表一个名为`MISPDB`的自定义类，声明在`MISP_access.py`模块中。该类具有从`misp`数据库中提取数据的原始SQL代码。
- en: 'Between lines 54 and 56, we are placing the chunks in a custom list called `limit_offset`.
    Let''s assume that we have 2 million attributes in the backend database table.
    After line 56, this list would be updated as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在54和56行之间，我们将块放入一个名为`limit_offset`的自定义列表中。假设我们在后端数据库表中有200万个属性。在第56行之后，该列表将更新如下：
- en: '[PRE33]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Between lines 61 and 64, we are invoking a separate process for each chunk.
    The method that the process will execute is `StartProcessing()`, and we are passing
    the current chunk as an argument. In the remaining lines, 69–97, we are updating
    the status to return the status codes to the code that would have invoked the `UpdateThreatScore()` method.
    Let''s take a look at the method that the processor core executes:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在61和64行之间，我们为每个块调用一个单独的进程。进程将执行的方法是`StartProcessing()`，我们将当前块作为参数传递。在剩余的69-97行中，我们正在更新状态以将状态代码返回给调用`UpdateThreatScore()`方法的代码。让我们来看一下处理器核心执行的方法：
- en: '![](img/7a234eb7-5432-4944-b272-f6f9ab167d24.png)'
  id: totrans-460
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a234eb7-5432-4944-b272-f6f9ab167d24.png)'
- en: 'The central piece of logic of the following code lies in line 186, where the
    code takes the current chunk and invokes the `self.Scoring()` method. This method
    produces a threat score by combining the tag, correlation, date, and comment threat
    score for each attribute. Finally, it updates the backend `threat_scoring` database
    table once it obtains the cumulative score. This is shown in the next snippets:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的核心逻辑位于第186行，代码接受当前块并调用`self.Scoring()`方法。该方法通过组合每个属性的标签、相关性、日期和注释威胁分数产生威胁分数。最后，一旦获得累积分数，它将更新后端`threat_scoring`数据库表。这在下面的片段中显示：
- en: '![](img/88243024-a2ea-4d99-a1b3-49809a0ec11f.png)![](img/e9571b63-e818-4336-9f89-8ca2b9854ec3.png)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88243024-a2ea-4d99-a1b3-49809a0ec11f.png)![](img/e9571b63-e818-4336-9f89-8ca2b9854ec3.png)'
- en: 'As can be seen, the `Scoring()` method further invokes four different methods
    under lines 130-133\. It sums up the score and pushes it to the database table.
    Let''s take a look at the four methods it invokes:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '如图所示，`Scoring()`方法在130-133行下进一步调用四种不同的方法。它将分数总结并将其推送到数据库表中。让我们看一下它调用的四种方法： '
- en: '![](img/6a03cbb7-42a3-436a-af1f-ae34bd7bcb80.png)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a03cbb7-42a3-436a-af1f-ae34bd7bcb80.png)'
- en: 'As can be seen in the following screenshot, all four methods read the configuration
    values from the JSON file and pass them to a common method called `ComputeScore`,
    which finally computes the score based on the configuration values passed and
    returns the computed score:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，所有四种方法都从JSON文件中读取配置值，并将它们传递给一个名为`ComputeScore`的公共方法，该方法最终根据传递的配置值计算分数并返回计算出的分数：
- en: '![](img/592aeacb-513c-4776-bd72-b49f73f883f8.png)'
  id: totrans-466
  prefs: []
  type: TYPE_IMG
  zh: '![](img/592aeacb-513c-4776-bd72-b49f73f883f8.png)'
- en: 'The following code attaches all the pieces together and returns the computed
    score. This code will be invoked in parallel for all the chunks on a separate
    processor core:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将所有部分连接在一起并返回计算出的分数。该代码将在单独的处理器核心上并行调用所有块：
- en: '![](img/de53cecf-76e6-483b-b4b9-c70c13c68106.png)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de53cecf-76e6-483b-b4b9-c70c13c68106.png)'
- en: 'Finally, we will create an object of the class and call the `Update` method
    as shown here:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建该类的对象并调用`Update`方法，如下所示：
- en: '[PRE34]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Executing the code
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行代码
- en: 'The whole code can be found at the following GitHub repository, [https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python),
    and can be invoked as follows:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 整个代码可以在以下GitHub存储库中找到，[https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python)，并且可以按如下方式调用：
- en: '[PRE35]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The code puts all the execution and debug messages in a `log` file, which will
    be created automatically at the same folder and will be called `TS.log`. It will
    have the following contents once the code is successfully executed:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码将所有执行和调试消息放入一个`log`文件中，该文件将自动在相同的文件夹中创建，并称为`TS.log`。一旦代码成功执行，它将具有以下内容：
- en: '![](img/defaafd2-3eae-4c08-9347-4e6af961b15f.png)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
  zh: '![](img/defaafd2-3eae-4c08-9347-4e6af961b15f.png)'
- en: 'While the code is executing, there are four parallel read/write operations
    executing on the database, as each processor core will read and write separately.
    This is shown in the following screenshot:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码执行时，有四个并行的读/写操作在数据库上执行，因为每个处理器核心将分别读取和写入。如下图所示：
- en: '![](img/9cefea88-0164-4d30-9ca6-d8891f904035.png)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cefea88-0164-4d30-9ca6-d8891f904035.png)'
- en: As can be seen, there are four user accounts called `misp` that are trying to
    read and write from the database simultaneously.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，有四个名为`misp`的用户帐户正在尝试同时从数据库中读取和写入。
- en: 'The following screenshot represents the schema of threat scoring table:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图表示了威胁评分表的架构：
- en: '![](img/0c120729-2415-42ea-b26d-6cf205936074.png)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c120729-2415-42ea-b26d-6cf205936074.png)'
- en: The following screenshot shows the threat-scoring of the IOC's.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了IOC的威胁评分。
- en: '![](img/3417b7fb-52d5-48a3-a3ee-f7ba1e9a448e.png)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3417b7fb-52d5-48a3-a3ee-f7ba1e9a448e.png)'
- en: 'The following screenshot displays few IP addresses:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一些IP地址：
- en: '![](img/52963b02-1dc2-493d-8de3-dc9c158b23c1.png)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52963b02-1dc2-493d-8de3-dc9c158b23c1.png)'
- en: STIX and TAXII and external lookups
  id: totrans-485
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STIX和TAXII和外部查找
- en: The term **STIX and TAXII** is commonly used in the threat intelligence domain.
    We'll try and understand what it is here using the following example.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: STIX和TAXII术语在威胁情报领域中经常被使用。我们将尝试使用以下示例来理解它是什么。
- en: Let's assume that we have an organization A that has lots of threat intelligence
    data. The data is collected from external feeds as well as from internal threat
    intelligence data. Organization A is a banking organization and uses platform
    X to store and manage their threat intelligence data. Now, organization A wants
    to help the banking community by sharing their threat intelligence data with other
    organizations in the banking sector (such as organizations B and C). They expect
    the other organizations to share their data as well. The problem is that while
    organization A uses platform X to manage their threat intelligence data, organizations
    B and C use an entirely different platform. So how does organization A share its
    intelligence with B and C? This is where STIX and TAXII comes handy.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为A的组织，它拥有大量的威胁情报数据。数据来自外部源以及内部威胁情报数据。组织A是一家银行组织，使用平台X来存储和管理他们的威胁情报数据。现在，组织A希望通过与银行部门中的其他组织（如B和C组织）共享他们的威胁情报数据来帮助银行社区。他们也希望其他组织也分享他们的数据。问题是，虽然组织A使用平台X来管理他们的威胁情报数据，但组织B和C使用完全不同的平台。那么组织A如何与B和C分享其情报呢？这就是STIX和TAXII派上用场的地方。
- en: STIX and TAXII help to solve the problem of threat intelligence sharing by providing
    a platform that uses a common format to store and retrieve intelligence. For example,
    if an organization X needs to use a website belonging to organization Y, they
    will do so over an HTTP/HTTPS protocol served by the web server used by organization
    Y. HTTP is the mode of communication for web-based information served by a web
    server. Similarly, STIX is the protocol used to exchange threat intelligence data
    and is served by a server called a TAXII server. The TAXII server is able to understand
    the STIX content and is able to serve it to clients. On a granular level, the
    content of STIX is nothing but an XML document, which is formatted in a certain
    manner and with certain tags that comply with the STIX format so that the TAXII
    server can understand. This means that all organizations using a TAXII server
    will be able to share threat intelligence data under the STIX protocol.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: STIX和TAXII通过提供一个使用通用格式存储和检索情报的平台来解决威胁情报共享的问题。例如，如果组织X需要使用属于组织Y的网站，它们将通过组织Y使用的Web服务器上的HTTP/HTTPS协议进行。
    HTTP是由Web服务器提供的基于Web的信息的通信模式。同样，STIX是用于交换威胁情报数据的协议，并由称为TAXII服务器的服务器提供。TAXII服务器能够理解STIX内容并将其提供给客户端。在细粒度上，STIX的内容只是一个XML文档，它以一定的方式格式化，并带有符合STIX格式的特定标记，以便TAXII服务器能够理解。这意味着所有使用TAXII服务器的组织都将能够在STIX协议下共享威胁情报数据。
- en: 'MISP has the capability to integrate with a TAXII server as well. The content
    shared via the TAXII server within MISP is placed in the database of the TAXII
    server, as well as in the MISP database. To get the complete details of MISP and
    TAXII server integration, refer to the official URL: [https://github.com/MISP/MISP-Taxii-Server](https://github.com/MISP/MISP-Taxii-Server).'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: MISP还具有与TAXII服务器集成的能力。通过TAXII服务器在MISP中共享的内容被放置在TAXII服务器的数据库中，以及在MISP数据库中。要获取有关MISP和TAXII服务器集成的完整详细信息，请参阅官方网址：[https://github.com/MISP/MISP-Taxii-Server](https://github.com/MISP/MISP-Taxii-Server)。
- en: 'The TAXII sever has clients written in Python, which makes the integration
    seamless and very easy. Just as we have different web servers in the market, such
    as Apache, nginx, and Tomcat, there are a few different implementations of TAXII
    servers, which include the following:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: TAXII服务器有用Python编写的客户端，这使得集成无缝且非常容易。就像市场上有不同的Web服务器，例如Apache、nginx和Tomcat一样，TAXII服务器有一些不同的实现，包括以下内容：
- en: '[https://github.com/eclecticiq/OpenTAXII](https://github.com/eclecticiq/OpenTAXII)'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/eclecticiq/OpenTAXII](https://github.com/eclecticiq/OpenTAXII)'
- en: '[https://github.com/oasis-open/cti-taxii-server](https://github.com/oasis-open/cti-taxii-server)'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/oasis-open/cti-taxii-server](https://github.com/oasis-open/cti-taxii-server)'
- en: '[https://github.com/freetaxii/server](https://github.com/freetaxii/server)'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/freetaxii/server](https://github.com/freetaxii/server)'
- en: '[https://github.com/SecurityRiskAdvisors/sra-taxii2-server](https://github.com/SecurityRiskAdvisors/sra-taxii2-server)'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/SecurityRiskAdvisors/sra-taxii2-server](https://github.com/SecurityRiskAdvisors/sra-taxii2-server)'
- en: '[https://github.com/StephenOTT/TAXII-springboot-bpmn](https://github.com/StephenOTT/TAXII-springboot-bpmn)'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/StephenOTT/TAXII-springboot-bpmn](https://github.com/StephenOTT/TAXII-springboot-bpmn)'
- en: We can read more about the capabilities of each in the official GitHub repositories.
    It will be useful for you to know which implementations have which features.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在官方GitHub存储库中了解每个的功能。了解哪些实现具有哪些功能对您将会很有用。
- en: External lookups
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部查找
- en: 'There are many paid and open source external lookup sites that expose APIs
    to get information about IOCs. Some of the most famous ones include the following:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多付费和开源的外部查找网站暴露了获取有关IOC信息的API。其中一些最著名的包括以下内容：
- en: 'IPvoid: [http://www.ipvoid.com/](http://www.ipvoid.com/)'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPvoid：[http://www.ipvoid.com/](http://www.ipvoid.com/)
- en: 'URLvoid: [https://www.urlvoid.com/](https://www.urlvoid.com/)'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URLvoid：[https://www.urlvoid.com/](https://www.urlvoid.com/)
- en: 'Cymon: [https://api.cymon.io/v2/ioc/search/](https://api.cymon.io/v2/ioc/search/)'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cymon：[https://api.cymon.io/v2/ioc/search/](https://api.cymon.io/v2/ioc/search/)
- en: 'Malware Domain: [http://www.malwaredomainlist.com/mdl.php](http://www.malwaredomainlist.com/mdl.php)'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件域：[http://www.malwaredomainlist.com/mdl.php](http://www.malwaredomainlist.com/mdl.php)
- en: 'Threat Miner: [https://www.threatminer.org/](https://www.threatminer.org/)'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Threat Miner：[https://www.threatminer.org/](https://www.threatminer.org/)
- en: 'Threatcrowd: [https://www.threatcrowd.org/](https://www.threatcrowd.org/)'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Threatcrowd：[https://www.threatcrowd.org/](https://www.threatcrowd.org/)
- en: 'Many of these have exposed APIs with which the process of the IOC lookup can
    be completely automated. For example, let''s take a look at the following code
    snippet that automates the IOC lookup with the help of the API exposed by Cymon:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 其中许多都暴露了API，可以完全自动化IOC查找的过程。例如，让我们看一下通过Cymon暴露的API自动化IOC查找的以下代码片段：
- en: '[PRE36]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We can search on these websites and read the API documentation in order to automate
    the process of IOC lookup against these websites.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这些网站上搜索并阅读API文档，以便自动化IOC针对这些网站的查找过程。
- en: Summary
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have explored the use of Python in defensive security. It
    should be noted that we have only captured a small portion of how Python can be
    used in defensive security. There are numerous other uses, including orchestration,
    automating repetitive tasks, developing correlating scripts that relate IDS/IPS
    signatures with Qualys/Nessus CVEs. This chapter has laid a foundation of how
    Python can be used and I would encourage the reader to carry out further research.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Python在防御安全中的用途。应该注意的是，我们只捕捉了Python在防御安全中的一小部分用途。还有许多其他用途，包括编排、自动化重复任务、开发将IDS/IPS签名与Qualys/Nessus
    CVE相关联的脚本。本章奠定了Python的用途基础，我鼓励读者进行进一步研究。
- en: In the next chapter, we are going to see a few other general cyber security
    use cases in which Python comes in handy.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到一些其他常见的网络安全用例，其中Python非常方便。
- en: Questions
  id: totrans-511
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How could we further improve the threat scoring algorithm?
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何进一步改进威胁评分算法？
- en: Can we use the previously discussed threat scoring code with a Python-based
    scheduler?
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否使用先前讨论过的威胁评分代码与基于Python的调度程序？
- en: Further reading
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'STIX and TAXII: [https://threatconnect.com/stix-taxii/](https://threatconnect.com/stix-taxii/)'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STIX和TAXII：[https://threatconnect.com/stix-taxii/](https://threatconnect.com/stix-taxii/)
- en: MISP: [https://github.com/longld/peda](https://github.com/longld/peda)
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MISP：[https://github.com/longld/peda](https://github.com/longld/peda)
- en: 'Threat Intelligence: [https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/](https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/)'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 威胁情报：[https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/](https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/)
