- en: Chapter 2. Customizing Your Shell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 自定义您的Shell
- en: Almost every aspect of your bash terminal is customizable. Now that you've learned
    to make use of some of the important information processing utilities, we can
    move on to learning how to use them to customize your shell. A lot of what we
    will cover in this chapter involves grabbing information from one program, piping
    it into another program, and filtering out whatever details are important to us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您的bash终端的几乎每个方面都是可定制的。现在您已经学会了如何利用一些重要的信息处理实用程序，我们可以继续学习如何使用它们来自定义您的shell。本章中我们将涵盖的大部分内容涉及从一个程序中获取信息，将其传输到另一个程序，并过滤出对我们重要的任何细节。
- en: You will also learn something about bash scripting, which is what a large chunks
    of the applications in your Kali Linux—and the larger Linux family—are made of.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将学习一些关于bash脚本的知识，这是您的Kali Linux和更大的Linux家族中许多应用程序的组成部分。
- en: Formatting the terminal output
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化终端输出
- en: Everything printed on your bash terminal is done by the cursor, which is just
    another component of your bash terminal you can control using very convenient
    shorthands. This section will cover how to control the color and basic formatting
    of the output printed on your terminal and you will also see some very cool tips
    and tricks in action later in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的bash终端上打印的所有内容都是由光标完成的，光标只是您的bash终端的另一个组件，您可以使用非常方便的快捷方式来控制它。本节将介绍如何控制在终端上打印的输出的颜色和基本格式，并且您还将在本章后面看到一些非常酷的技巧和窍门。
- en: To start off, let's talk about control sequences. Control sequences are character
    patterns that introduce special behavior for text being displayed on your terminal.
    These special characters always precede the output they format. Control sequences
    are often delimited by escape characters, and the one we are interested in is
    denoted by `\e`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们谈谈控制序列。控制序列是引入在您的终端上显示的文本的特殊行为的字符模式。这些特殊字符总是在它们格式化的输出之前。控制序列通常由转义字符分隔，我们感兴趣的是由`\e`表示的一个。
- en: 'Using this control sequence, we can do pretty cool things; observe the following
    command line:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个控制序列，我们可以做一些很酷的事情；观察以下命令行：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s a screenshot of the previous command in action:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上一个命令行的操作截图：
- en: '![Formatting the terminal output](img/5107OT_02_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_01.jpg)'
- en: 'Another example would be the following command line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子将是以下命令行：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s a screenshot of the previous command in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上一个命令行的操作截图：
- en: '![Formatting the terminal output](img/5107OT_02_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_02.jpg)'
- en: 'How does this work? Well we need to discuss some of the basic text formatting
    control sequences. These control the style of the text, which includes properties
    such as emboldening text, underlining, and inverting the terminal printing. The
    control sequences are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何工作的？我们需要讨论一些基本的文本格式控制序列。这些控制文本的样式，包括诸如加粗文本、下划线和倒置终端打印等属性。控制序列如下：
- en: '[**0m**: This will remove all formatting and print normal text. We will use
    this to reset all the properties of the terminal text. It acts as a control to
    limit the amount of text we would like to affect with whatever formatting precedes
    it.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**0m**：这将删除所有格式并打印普通文本。我们将使用它来重置终端文本的所有属性。它作为一个控制，限制我们希望受到其前面的任何格式影响的文本量。'
- en: '**[1m**: This will embolden any text following it. For instance, consider the
    following command line:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[1m**：这将使其后的任何文本加粗。例如，考虑以下命令行：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The previous command line would give the following output on your terminal
    screen:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令行将在您的终端屏幕上输出以下内容：
- en: '![Formatting the terminal output](img/5107OT_02_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_03.jpg)'
- en: '**[2m**: This will *dim* the text being printed, following is a demonstration:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[2m**：这将*减弱*正在打印的文本，以下是一个演示：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here''s what the output should look like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Formatting the terminal output](img/5107OT_02_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_04.jpg)'
- en: '**[4m**: This will underline any text following it.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[4m**：这将给其后的任何文本加下划线。'
- en: '**[5m**: On some terminals, this will cause the text following it to blink
    on and off.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[5m**：在某些终端上，这将导致其后的文本闪烁。'
- en: '**[7m**: This causes the video or colors following it to be inverted. Consider
    the following example:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[7m**：这会导致其后的视频或颜色被倒置。考虑以下示例：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous command line would give the following output on your terminal
    screen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令行将在您的终端屏幕上输出以下内容：
- en: '![Formatting the terminal output](img/5107OT_02_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_05.jpg)'
- en: '**[8m**: This will hide any text following it, which means the text simply
    won''t be printed.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[8m**：这将隐藏其后的任何文本，这意味着文本将不会被打印。'
- en: Please don't forget that there control sequences only work if they are preceded
    by the `\e` escape character. Another way to write this escape character is to
    use the octal format \033, which is supported on some older versions of the bash
    terminal.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要忘记，这些控制序列只有在它们之前加上`\e`转义字符时才起作用。另一种写这个转义字符的方法是使用八进制格式\033，这在一些旧版本的bash终端上是支持的。
- en: 'Another useful function of these control sequences is that you can reset a
    given attribute. For instance, if you underline and embolden a piece of text,
    and you would like to only remove the underline for a given section of text, you
    can do that as shown in the following example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些控制序列的另一个有用功能是，您可以重置给定的属性。例如，如果您在一段文本中加下划线和加粗，并且您只想删除给定文本段的下划线，您可以像以下示例中所示那样做：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command should print out the following text on your terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令应在您的终端上打印出以下文本：
- en: '![Formatting the terminal output](img/5107OT_02_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![格式化终端输出](img/5107OT_02_06.jpg)'
- en: 'It''s not hard to figure out how the rest of these resetting escape sequences
    work; if you wish to turn off a given formatting rule, all you need to do is precede
    the control number with a `2`, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 弄清楚这些重置转义序列的其余部分并不难；如果您希望关闭给定的格式规则，您只需要在控制数字前加上`2`，如下所示：
- en: '`[21m` turns of emboldening'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[21m` 关闭加粗'
- en: '`[22m` turns off dimming'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[22m` 关闭变暗'
- en: '`[25m` turns off blinking'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[25m` 关闭闪烁'
- en: And so on and so forth.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。
- en: 'We''re not done here! You can also control the color of the text being printed
    by using other control sequences. Just like the reset control sequences they work
    by prefixing a given number that controls the kind of color to another number
    that controls the color being selected. Here''s how they work:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有结束！您还可以使用其他控制序列来控制正在打印的文本的颜色。就像重置控制序列一样，它们通过在控制所选颜色的给定数字之前加上控制颜色种类的另一个数字来工作。它们的工作原理如下：
- en: '`[3xm` simply changes the text to the color indexed by the number `x`. The
    number `x` can be anyone of the following:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[3xm` 只是将文本更改为数字`x`索引的颜色。数字`x`可以是以下任何一个：'
- en: '`0` for black'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0` 代表黑色'
- en: '`1` for red'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` 代表红色'
- en: '`2` for green'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` 代表绿色'
- en: '`3` for yellow'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3` 代表黄色'
- en: '`4` for blue'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4` 代表蓝色'
- en: '`5` for magenta'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5` 代表品红色'
- en: '`6` for cyan'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6` 代表青色'
- en: '`7` for light gray'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7` 代表浅灰色'
- en: 'Consider the following examples:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also combine these with the other formatting options as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将这些与其他格式选项结合使用，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The prompt string
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示字符串
- en: The prompt string is the string that marks or delimits your bash command line.
    The default prompt string for Kali Linux is `root@kali:#`. This string is not
    a static value and can be changed to whatever you'd like it to be. This section
    will cover some very useful modifications you can make to your prompt string.
    We're going to make it display some helpful information about your Linux System.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 提示字符串是标记或界定您的bash命令行的字符串。Kali Linux的默认提示字符串是`root@kali:#`。这个字符串不是静态值，可以更改为您想要的任何值。本节将介绍一些非常有用的修改，您可以对提示字符串进行。我们将使它显示有关您的Linux系统的一些有用信息。
- en: 'To control the value displayed as your prompt string, you need to modify the
    value of the PS1 variable, as seen in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制显示为提示字符串的值，您需要修改PS1变量的值，如下面的屏幕截图所示：
- en: '![The prompt string](img/5107OT_02_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![提示字符串](img/5107OT_02_07.jpg)'
- en: 'So you might be wondering when and how this value is set for your bash terminal.
    Well, as it turns out, the prompt string is set in the `~/.bashrc` file that is
    usually executed as soon as your terminal starts up. Following is the part of
    the `.bashrc` file that mentions the prompt string:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以您可能想知道何时以及如何为您的bash终端设置这个值。事实证明，提示字符串是在通常在终端启动时执行的`~/.bashrc`文件中设置的。以下是提到提示字符串的`.bashrc`文件的部分：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://%20http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://%20http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的邮箱。
- en: 'In the preceding code, we can see that the prompt string has three possible
    settings so that your terminal can accommodate color printing, though it needs
    to make sure the actual shell can support it. This is why it first checks if the
    `color_prompt` variable is set affirmatively. Let''s look at the first possible
    `PS1` setting (should color printing be supported) in detail, using the following
    code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们可以看到提示字符串有三种可能的设置，以便您的终端可以适应彩色打印，尽管它需要确保实际的shell可以支持它。这就是为什么它首先检查`color_prompt`变量是否被肯定设置。让我们详细看一下第一个可能的`PS1`设置（如果支持彩色打印），使用以下代码：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous code works as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码工作如下：
- en: The `${debian_chroot:+($debian_chroot)}` part of the code uses variable expansion
    to grab details about whether the shell is being executed on a chrooted filesystem
    and displays information to indicate this. It's not completely crucial to understand
    this just yet, because for most cases you probably will never make use of this.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的`${debian_chroot:+($debian_chroot)}`部分使用变量扩展来获取关于shell是否在chroot文件系统上执行的详细信息，并显示信息以指示这一点。现在完全理解这一点并不是完全必要的，因为在大多数情况下，您可能永远不会使用它。
- en: The `\[\033[01;32m\]` part, as discussed in the previous section, causes the
    terminal to print bold green text. The format here is slightly different from
    the examples discussed in the previous section, because escaped brackets are used
    to demarcate the beginning and end of the control sequences. As we've seen in
    previous examples, these are not a hard requirement for later bash shell versions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`\[\033[01;32m\]` 部分，如前一节所讨论的，会导致终端打印粗体绿色文本。这里的格式与前一节讨论的示例略有不同，因为转义括号用于标记控制序列的开始和结束。正如我们在之前的示例中看到的，这些对于后来的bash
    shell版本并不是硬性要求。'
- en: The `\u` part is another one of those really useful escape characters. This
    one acts as a shorthand for your username or the username of current user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`\u` 部分是另一个非常有用的转义字符。这个字符作为您的用户名或当前用户的用户名的简写。'
- en: The `\h` part this escape character follows the `@` sign in this example—the
    `@` sign is just plain text, nothing special about it. The `\h` escape character
    will print your current hostname in its place when the prompt string is displayed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`\h` 部分这个转义字符跟在这个例子中的`@`符号后面——`@`符号只是普通文本，没有什么特别的。当提示字符串显示时，`\h`转义字符将打印您当前的主机名。'
- en: The `\[\033[00m\]` part as discussed in the previous section. This will reset
    all the formatting rules so that everything following it is printed as normal
    text. After resetting the formatting, we see `\[\033[01;34m\]`. This will format
    all the text that precedes it so that it appears emboldened in blue.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`\[\033[00m\]` 部分如前一节所讨论的。这将重置所有格式规则，使其后的所有内容都打印为普通文本。重置格式后，我们看到 `\[\033[01;34m\]`。这将格式化所有在它之前的文本，使其以蓝色加粗显示。'
- en: The `\w` part is a shorthand for the current working directory. Directly after
    the working directory is a good old line feed that is printed by using the `\n`
    escape character shorthand. Following this is the`\$` escape character, which
    is a shorthand that will print a `$` sign if anything besides the root user is
    currently using the shell and a `#` when the root user is logged in.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`\w` 部分是当前工作目录的简写。直接在工作目录之后是一个好老的换行符，通过使用`\n`转义字符简写打印出来。接着是`\$`转义字符，如果除了root用户之外的任何人当前在使用shell，它将打印出`$`符号，当root用户登录时打印`#`。'
- en: The bash shell offers a few other useful shorthands to make use of in your prompt
    string, each causing a different piece of information to be printed directly into
    your prompt string. To find out more about these, please see the links provided
    in the *Further reading* section of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: bash shell提供了一些其他有用的简写，可以在您的提示字符串中使用，每个简写都会直接打印一些不同的信息到您的提示字符串中。要了解更多信息，请参阅本章*进一步阅读*部分提供的链接。
- en: Prompt string customizations
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示字符串自定义
- en: Now that you know how text formatting and the general process of editing your
    prompt string works, let's walk through some useful customizations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道文本格式和编辑提示字符串的一般过程是如何工作的，让我们走一遍一些有用的自定义。
- en: You should see your prompt string as something that should supply you with general
    information that you will find useful most of the time. To get you going with
    your own prompt string modifications, we will discuss how to display some of this
    information neatly in your terminal prompt.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该将您的提示字符串视为应该为您提供大部分时间都会有用的一般信息。为了让您开始进行自己的提示字符串修改，我们将讨论如何在终端提示中整洁地显示一些这些信息。
- en: 'We can add bits of information as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加如下信息：
- en: The current working directory by using the `\w` escape character
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`\w`转义字符来获取当前工作目录
- en: The current date time by using the date command and a little command substitution
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用日期命令和一些命令替换来获取当前日期时间
- en: The number of jobs running in the background by using the `\j` escape character
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`\j`转义字符来获取后台运行的作业数量
- en: The privilege level of the current user by using the `\$` escape character
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`\$`转义字符来获取当前用户的特权级别
- en: The return code of the previous command by using the `\$?` escape characters
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`\$?`转义字符来获取上一个命令的返回代码
- en: 'Following is what the prompt string looks like once these details have been
    added:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了这些细节，提示字符串看起来像这样：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you look closely enough, you should see all the escape characters we''ve
    mentioned being used in the prompt string. If all goes well and you manage to
    set your prompt string exactly as in the example, you should see the following
    code appear on your terminal screen:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，您应该看到我们提到的所有转义字符都被用在提示字符串中。如果一切顺利，并且您设定提示字符串与示例完全相同，您应该在终端屏幕上看到以下代码出现：
- en: '![Prompt string customizations](img/5107OT_02_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![提示字符串自定义](img/5107OT_02_08.jpg)'
- en: In the preceding screenshot, we can see the `\$?` escape character in action.
    The user visits a directory that doesn't exist and the return code is set to `1`,
    indicating that the previous command exited under an erroneous condition or did
    not succeed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到`\$?`转义字符的作用。用户访问一个不存在的目录，返回代码设置为`1`，表示上一个命令以错误条件退出或未成功。
- en: There are a number of excellent modifications you could make. What was demonstrated
    here serve merely as an example (though it is useful in their own right) in an
    effort to get you cracking away at your own modifications. See the *Further reading*
    section for even more powerful and dazzling modifications you can make to your
    prompt string.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以进行许多出色的修改。这里演示的仅仅是一个例子（尽管它们本身就很有用），旨在让您开始进行自己的修改。请参阅*进一步阅读*部分，了解您可以对提示字符串进行更强大和令人眼花缭乱的修改。
- en: Aliases
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 别名
- en: 'Aliases are a way of effectively assigning a name to a given collection of
    commands or a single command line. The `.bashrc` file that comes with every standard
    issue bash shell includes a few useful ones by default. A few of them are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是一种有效地为一组命令或单个命令分配名称的方式。每个标准问题bash shell附带的`.bashrc`文件默认包含一些有用的别名。其中一些如下：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What these do is allow you to use one—usually simpler—command to invoke a number
    of complex commands. So, with respect to the previous code, you can use `grep`
    to invoke `grep –-color=auto`, which enables text output highlighting or color
    printing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些别名允许您使用一个通常更简单的命令来调用一系列复杂的命令。因此，关于前面的代码，您可以使用`grep`来调用`grep --color=auto`，这样可以启用文本输出高亮或彩色打印。
- en: 'The general purpose or aim of aliases is to make things simpler. So, for instance,
    if you need to SSH into a given host very often and want to avoid entering the
    IP address or domain name of the said host repeatedly, you could add an alias
    to your `.bashrc` as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 别名的一般目的或目标是使事情变得更简单。例如，如果您经常需要SSH到特定主机，并且想要避免重复输入该主机的IP地址或域名，您可以将别名添加到您的`.bashrc`中，如下所示：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Another example would be if you practice password cracking with John The Ripper
    and you''d like to make use of a given cipher and cracking mode very often; you
    could add these aliases to make invoking `john` in the desired way a less tedious
    exercise:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是，如果您使用John The Ripper进行密码破解，并且经常使用给定的密码和破解模式，您可以添加这些别名，以使以期望的方式调用`john`变得不那么乏味：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Otherwise, you can also use them if you''d like to use specific word lists,
    for example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您也可以使用它们，例如，如果您想使用特定的单词列表：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You should immediately see the benefit of relying on `alias` to simplify fire
    off certain complex commands.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该立即看到依赖`alias`简化某些复杂命令的好处。
- en: Customizing the command history
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义命令历史
- en: Often, during a penetration test or whenever you're using some pretty lengthy
    command lines to accomplish your tasks, you may want to reuse them quite often
    or recall them for future use. Making sure that your terminal records the correct
    details about your commands and—more importantly—records enough of them is an
    important modification.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在渗透测试期间或在使用一些非常冗长的命令行来完成任务时，您可能经常要重复使用它们或将其记住以备将来使用。确保您的终端记录有关命令的正确细节，更重要的是，记录足够多的命令是一个重要的修改。
- en: 'As with other topics discussed, there''s of course a main page dedicated to
    customizing command history behavior. You can reach this man page by executing
    the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他讨论的主题一样，当然有一个专门的主页用于自定义命令历史记录行为。您可以通过执行以下命令来访问此man页面：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Look for the section that mentions the `HISTORY` variable and those associated
    to it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 查找提到`HISTORY`变量及其相关内容的部分。
- en: 'Of course, like most other components and functions of the bash terminal, you
    have quite a bit of say in how things get done when it comes to command logging.
    These environment variables that control what gets logged and how are discussed
    as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，与bash终端的大多数其他组件和功能一样，您在命令记录方面有很大的发言权。控制记录内容和方式的这些环境变量将如下所述讨论：
- en: '`HISTSIZE`: This controls the number of commands that are initialized to the
    history.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTSIZE`：这控制初始化到历史记录中的命令数量。'
- en: '`HISTFILE`: This specifies which file should be used to initialize the command
    history.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTFILE`：这指定应使用哪个文件来初始化命令历史记录。'
- en: '`HISTFILEZIE`: This specifies how many commands from `HISTFILE` should be used
    to initialize the command history. If `HISTFILE` is longer than `HISTFILESIZE`
    lines, it will be truncated.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTFILEZIE`：这指定应使用多少来自`HISTFILE`的命令来初始化命令历史记录。如果`HISTFILE`比`HISTFILESIZE`行长，它将被截断。'
- en: '`HISTCONTROL`: This determines certain attributes about which commands a logged,
    for instance:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTCONTROL`：这确定某些关于记录哪些命令的属性，例如：'
- en: 'If set to `ignorespace` it will ignore (and not record to the history) all
    the commands that start with a space, for example:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为`ignorespace`，它将忽略（并且不记录到历史记录中）所有以空格开头的命令，例如：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If set to `ignoredups`, bash will not record any command that has the same invocation
    as the preceding command
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为`ignoredups`，bash将不记录与前一个命令相同调用的任何命令。
- en: If set to `erasedups`, bash will completely erase any duplicate commands throughout
    the entire history
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为`erasedups`，bash将完全擦除整个历史记录中的任何重复命令
- en: 'You can also combine different options by separating them with colons, for
    example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过用冒号分隔它们来组合不同的选项，例如：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Try adding some settings of you own to the end of your `.bashrc` file to automatically
    apply when you start up your terminal.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在您的`.bashrc`文件的末尾添加一些设置，以便在启动终端时自动应用。
- en: Protecting sensitive information from leakage
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护敏感信息免于泄露
- en: The `.bash_history` file is where all your commands will be saved. Usually,
    this is located in the root of your home folder; for Kali Linux users, this is
    the `/root` folder. An important thing to remember about this file is that it
    is likely to contain all the commands you've executed on your machine during terminal
    use. This means if you've entered anything sensitive into the command line, such
    as a password, username, or any important and sensitive information, the file
    will contain it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bash_history`文件是保存所有命令的地方。通常，它位于您的主文件夹的根目录中；对于Kali Linux用户，这是`/root`文件夹。关于这个文件的一个重要事项是，它很可能包含您在终端使用期间在计算机上执行的所有命令。这意味着如果您在命令行中输入了任何敏感信息，比如密码、用户名或任何重要和敏感信息，该文件都会包含它。'
- en: It's best to make sure that this is information is not duplicated and always
    saved in places relevant to its protection, namely a place that requires the same
    amount of effort or knowledge to compromise or access as the resource it protects.
    For instance, if you need to protect a password for a website, it should be as
    hard or harder for an unauthorized party to access storage that protects the password
    as the actual site it's used for. In the information security profession, we say
    storage is insecure or inadequate if this is not the case.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最好确保此信息不重复，并始终保存在与其保护相关的位置，即需要与保护信息相同数量的工作量或知识来破坏或访问的位置。例如，如果您需要保护网站的密码，未经授权的一方访问保护密码的存储应与实际用于该网站的位置一样难或更难。在信息安全行业中，如果情况不是这样，我们会说存储是不安全或不足的。
- en: 'To make sure you don''t save any sensitive information to your command line,
    you may want to offload sensitive information to a more secure location and include
    it in your bash environment when necessary. Perform the following steps to do
    that:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您不将任何敏感信息保存到命令行中，您可能希望将敏感信息转移到更安全的位置，并在必要时将其包含在您的bash环境中。执行以下步骤来完成这一点：
- en: 'Create a file for your sensitive environment variables. Here, we will call
    our `sens_env.sh`, as shown in the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的敏感环境变量创建一个文件。在这里，我们将称之为`sens_env.sh`，如下命令所示：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save it in a safe location and encrypt it if possible. Try using `TrueCrypt`
    for this and see the *Further reading* section for information about using `TrueCrypt`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存在安全位置并在可能的情况下加密。尝试使用`TrueCrypt`进行此操作，并参阅*进一步阅读*部分以获取有关使用`TrueCrypt`的信息。
- en: 'Enter the following command into this file for each username, password, or
    secure credential you need to save securely:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个用户名、密码或安全凭据将以下命令输入到此文件中，以安全保存：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Each time you need to use the information saved in this file, all you need
    to do is decrypt, unzip, or access it anyway you are required to, and then execute
    the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次您需要使用此文件中保存的信息时，您只需解密、解压缩或以任何所需的方式访问它，然后执行以下命令：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will execute these commands without exposing the sensitive information
    to your `.bash_history` file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行这些命令，而不会将敏感信息暴露到您的`.bash_history`文件中。
- en: 'You can use this information by substituting the information for the variables
    used to reference them, for instance, as shown in the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将信息替换为用于引用它们的变量来使用此信息，例如，如下命令所示：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This way only the command executed will be saved in the history, and it will
    not contain the actual username, but instead the variable used to refer it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这样只有执行的命令会保存在历史记录中，它不会包含实际的用户名，而是用于引用它的变量。
- en: 'Another important thing to remember is that if you need to save sensitive information
    in your `.bash_history` file or for any other reason would like to backup or make
    a copy of your `.bash_history` file, you can do so by executing the following
    command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情要记住的是，如果您需要在`.bash_history`文件中保存敏感信息，或者出于任何其他原因想要备份或复制您的`.bash_history`文件，您可以通过执行以下命令来实现：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The history command allows you to issue commands that affect the history file.
    Here, we are using `–w switch`, which tells it to save a copy of the current contents
    to the file specified by the `[FILENAME]` argument.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: history命令允许您发出影响历史文件的命令。在这里，我们使用`-w开关`，告诉它将当前内容保存到由`[FILENAME]`参数指定的文件中。
- en: That's about it for command history. Please see the *Further reading* section
    for more information.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 关于命令历史就是这些。有关更多信息，请参阅*进一步阅读*部分。
- en: Customizing tab completion
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义Tab补全
- en: Tab completion is what happens when you type a command and press the *Tab* key
    twice on your keyboard. The list of possible options that shows up is the completion
    suggestion. Believe it or not, you can actually control the commands and even
    the arguments that show up when you use tab completion, depending on which command
    you are executing. Being able to control your tab completion can prove to be quite
    an invaluable skill during your everyday experiences with bash. So, without rambling
    on about it for too long, let's find out how tab completion actually works.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在键入命令并在键盘上按两次*Tab*键时，会发生Tab补全。显示的可能选项列表是补全建议。信不信由你，你实际上可以控制在使用Tab补全时显示的命令甚至参数，这取决于您正在执行的命令。能够控制您的Tab补全在您日常使用bash时可能会证明是一项非常宝贵的技能。因此，不要对此过多地唠叨，让我们来看看Tab补全实际是如何工作的。
- en: When you press the *Tab* key twice, a special predefined function is executed
    by the bash shell. This function determines which command you are executing (if
    any) and hooks in (this is just jargon for schedules) another defined function
    that is in charge of determining which options to display as suggestions. What
    we will do in this section is actually develop one or two of these functions to
    make use some of the tools on the Kali bash command line a little more user-friendly
    and once again devise another way to put more useful information right at your
    fingertips.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当您两次按下*Tab*键时，bash shell会执行一个特殊的预定义函数。此函数确定您正在执行的命令（如果有的话），并挂接（这只是调度的行话）另一个定义的函数，负责确定要显示为建议的选项。在本节中，我们将开发一个或两个这些函数，以使Kali
    bash命令行上的一些工具更加用户友好，并再次设计另一种方式将更有用的信息放在您的指尖。
- en: 'Following is an example of a completion function (this one is for `tcpdump`):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个补全函数的示例（这是为`tcpdump`的一个示例）：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There are a couple of things to note in the previous example. First of all,
    the `_tcpdump` function being defined is the function that will get called when
    you press *TAB* twice after typing `tcpdump` into your command line. This is because
    of the very last line in the previous example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中有几件事情需要注意。首先，定义的`_tcpdump`函数是在您在命令行中输入`tcpdump`后按两次*TAB*键时将被调用的函数。这是因为上一个示例中的最后一行：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This says that when completion suggestions for `tcpdump` are to be determined,
    the function—specified by `–F` option—that will be called is `_tcpdump`. The sole
    purpose of a completion function is to fill the `COMPREPLY` environment variable
    with the suggestions needed to complete the command. The `COMPREPLY` variable
    is what is stuck into the command line when you require suggestions. There are
    a number of other very useful environment variables that are designed to help
    you in scripting your completion function. They are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当要确定`tcpdump`的补全建议时，将调用由`-F`选项指定的函数——`_tcpdump`。补全函数的唯一目的是使用所需的建议填充`COMPREPLY`环境变量以完成命令。当您需要建议时，`COMPREPLY`变量将被插入到命令行中。还有许多其他非常有用的环境变量，旨在帮助您编写补全函数。它们如下：
- en: '`COMP_LINE`, which is the current command line.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMP_LINE`，这是当前的命令行。'
- en: '`COMP_WORDS`, which is an array holding the individual words currently appearing
    on the command line.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMP_WORDS`，这是一个包含当前出现在命令行上的单词的数组。'
- en: '`COMP_CWORD`, which is the index of the last word entered into the command
    line. This index is used to calculate the current word using the `COMP_WORDS`
    array as follows:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMP_CWORD`，这是输入到命令行中的最后一个单词的索引。使用此索引来使用`COMP_WORDS`数组计算当前单词，如下所示：'
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So basically, the game you play when you develop a completion function for a
    given command is to check the last entered word—or for that matter any word entered—to
    determine what exactly to put into the `COMPREPLY` array. Of course, this is simply
    a bash script being executed and anything goes. If you'd like to determine the
    suggestions to display in another way, you can of course do this. For instance,
    you could record all the invocations of the given command to a special file using
    the `history` command, and then suggest the `host common` command executed based
    on the options supplied. If you know a little about natural language processing
    or machine learning, the applications of this simple functionality become endless.
    For instance, think about a bash terminal that learns to suggest the command you
    like best at a given time of day, even according to the music you're listening
    to, or network connections currently active on your machine.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，当你为给定的命令开发完成函数时，你玩的游戏是检查最后输入的单词，或者说任何输入的单词，以确定到底应该放入`COMPREPLY`数组中的内容。当然，这只是一个简单的bash脚本被执行，任何事情都有可能。如果你想以另一种方式确定要显示的建议，当然可以这样做。例如，你可以使用`history`命令记录给定命令的所有调用到一个特殊文件中，然后根据提供的选项建议执行`host
    common`命令。如果你对自然语言处理或机器学习有一些了解，这种简单功能的应用就变得无穷无尽。例如，想象一下一个bash终端，它学会在一天中的特定时间建议你最喜欢的命令，甚至根据你正在听的音乐或当前在你的机器上活动的网络连接。
- en: 'Another important piece of information that you may need to develop your own
    completion functions is where to stick your function when you''re done. Most of
    the completion functions currently installed on your system appear at `/etc/bash_completion.d/`.
    However, if you''re going to develop your own extensions to the completion system,
    you would probably want to put your scripts in a place that is under your control.
    A popular convention is to create a directory called `.bash_completion.d/` in
    the root of your `home` folder, by using the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要开发自己的完成函数的另一个重要信息是在完成时将函数放在哪里。你系统上当前安装的大多数完成函数出现在`/etc/bash_completion.d/`。然而，如果你要开发自己的完成系统扩展，你可能希望将你的脚本放在一个你控制的地方。一个常见的约定是在你的`home`文件夹的根目录下创建一个名为`.bash_completion.d/`的目录，使用以下命令：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'All of your own completion scripts should appear in this folder, saved under
    the name corresponding to the command it completes. For instance, the one we will
    develop for John the Ripper—designated `john` on the command line—will be called
    `john`. Also, for your completion functions to take effect, you''d probably want
    to avoid having to execute them yourself before using any of the affected commands.
    So to make this easy and autonomous, you should stick this command in your `.bashrc`
    file as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你自己的所有完成脚本应该出现在这个文件夹中，保存为与其完成的命令相对应的名称。例如，我们将为John the Ripper开发的脚本——在命令行上指定为`john`——将被称为`john`。另外，为了使你的完成函数生效，你可能希望在使用任何受影响的命令之前避免自己执行它们。因此，为了使这变得简单和自主，你应该将这个命令放在你的`.bashrc`文件中，如下所示：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once you''ve executed the preceding command, you probably want to unzip the
    `rockyou.txt.gz` wordlist that comes with your Kali Linux install, by using the
    following command-line code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行了上述命令后，你可能想要解压随Kali Linux安装的`rockyou.txt.gz`单词列表，使用以下命令行代码：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You're now ready to write a completion function for `john`. Here's what it should
    look like
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以为`john`编写一个完成函数了。以下是它应该是什么样子的
- en: '(the following code will be made available on this book''s website):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: （以下代码将在本书的网站上提供）
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the first few lines of the function, the script grabs the current word and
    the previous word—the word preceding the current—and stores then in the `cur`
    and `prev` variables respectively. What it does then is step into a case statement,
    which is basically a compounded if statement with many comparisons and many unique
    logical exit points, and compares the word to the following strings:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的前几行，脚本抓取当前单词和前一个单词——当前单词之前的单词——并将它们分别存储在`cur`和`prev`变量中。然后它进入一个`case`语句，这基本上是一个带有许多比较和许多独特逻辑退出点的复合if语句，并将单词与以下字符串进行比较：
- en: '`--format`: This is the option John the Ripper uses to specify the cipher format
    being cracked. The script fills the `COMPREPLY` array with all the formats with
    names similar to the current word `$cur`.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--format`：这是John the Ripper用来指定要破解的密码格式的选项。脚本用与当前单词`$cur`相似的所有格式填充`COMPREPLY`数组。'
- en: '`--wordlist`: This is the option John the Ripper uses to specify the word that
    is to be used, if any. Here, the script simply grabs all the files in the `/usr/share/wordlists`
    directory and uses them as the suggestions to be returned.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--wordlist`：这是John the Ripper用来指定要使用的单词的选项。在这里，脚本简单地抓取`/usr/share/wordlists`目录中的所有文件，并将它们用作要返回的建议。'
- en: What follows is an `if` statement that is used to match any options being typed
    into the command line, which would be anything starting with a hyphen. It then
    fills the `COMPREPLY` array with anything matching the current one closely enough.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个`if`语句，用于匹配输入到命令行的任何选项，这可能是以连字符开头的任何内容。然后它用与当前单词`$cur`相匹配的任何内容填充`COMPREPLY`数组。
- en: Please note this script is only meant for demonstration; it is missing completion
    suggestions for the other command line arguments for `john`. As an exercise, you
    could fill in the rest of John the Ripper's command-line options and possible
    arguments for those functions by adding a few cases to the `switch` statement.
    You can find out more about John the Ripper's arguments from the manual page or
    by executing `man john`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个脚本只是用于演示；它缺少`john`的其他命令行参数的完成建议。作为练习，你可以通过向`switch`语句添加一些情况来填写John the
    Ripper的其余命令行选项和可能的参数。你可以从手册页或通过执行`man john`了解更多关于John the Ripper的参数。
- en: Another really useful application you could use this for is the Metasploit command-line
    interface. We will be covering this collection of tools in later chapters, and
    you may find it very useful to write a set of tab completion rules for it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用这个非常有用的应用程序来处理Metasploit命令行界面。我们将在后面的章节中介绍这一系列工具，您可能会发现为其编写一组选项完成规则非常有用。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered text output formatting and colorizing terminal text.
    We then saw how text formatting can be used to modify the bash prompt string and
    also discussed novel tricks and tips that you can use to display some helpful
    information using your `prompt` string. We then moved onto aliases and discussed
    making some complex and tedious commands a lot simpler by using simple mnemonic
    aliases. Finally, we covered tab completion and learned how to modify it to suit
    our needs. We also discussed an example involving the John the Ripper password
    and hash cracking tool.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了文本输出格式化和给终端文本上色。然后我们看到了如何使用文本格式化来修改bash提示字符串，并讨论了一些新颖的技巧和提示，您可以使用您的`prompt`字符串来显示一些有用的信息。然后我们转向别名，并讨论了如何通过使用简单的助记符别名来简化一些复杂和繁琐的命令。最后，我们介绍了选项完成，并学习了如何修改它以满足我们的需求。我们还讨论了一个涉及John
    the Ripper密码和哈希破解工具的例子。
- en: Hopefully, you've taken a few useful tips from this chapter and will be able
    to make much needed and productive modifications to your terminal so that you
    can wield it effectively during penetration tests. A good exercise would be to
    look at some of the tools installed on the Kali Linux command line and think about
    ways to make them easier and more efficient to use by whipping out one or two
    of the tricks covered in this chapter. For instance, think about some useful aliases,
    tab completion scripts, and text formatting tricks to use with commands Nmap,
    Wireshark, Aircrack-NG, or Netcat.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您从本章中获得了一些有用的技巧，并能够对您的终端进行急需的和有益的修改，以便在渗透测试期间有效地使用它。一个很好的练习是查看Kali Linux命令行上安装的一些工具，并考虑通过使用本章介绍的一两个技巧来使它们更易于使用和更高效。例如，考虑一些有用的别名、选项完成脚本和文本格式化技巧，以便与Nmap、Wireshark、Aircrack-NG或Netcat命令一起使用。
- en: The next chapter will focus on how to use some of the Kali Linux tools to make
    sure your data, especially evidence from penetration tests and sensitive information
    security-related work, is protected at all times.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍如何使用一些Kali Linux工具来确保您的数据，特别是来自渗透测试和敏感信息安全相关工作的证据，始终受到保护。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The Linux documentation project, Tab Expansions, at [http://tldp.org/LDP/abs/html/tabexpansion.html](http://tldp.org/LDP/abs/html/tabexpansion.html)
    [accessed 2014/04/28]
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux文档项目，选项扩展，在[http://tldp.org/LDP/abs/html/tabexpansion.html](http://tldp.org/LDP/abs/html/tabexpansion.html)上
    [访问时间2014/04/28]
- en: The Linux documentation project, Aliases, at [http://tldp.org/LDP/abs/html/aliases.html](http://tldp.org/LDP/abs/html/aliases.html)
    [accessed 2014/04/28]
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux文档项目，别名，在[http://tldp.org/LDP/abs/html/aliases.html](http://tldp.org/LDP/abs/html/aliases.html)上
    [访问时间2014/04/28]
- en: Openwall – John the ripper Options at [http://www.openwall.com/john/doc/OPTIONS.shtml](http://www.openwall.com/john/doc/OPTIONS.shtml)
    [accessed 2014/04/28]
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Openwall – John the ripper选项在[http://www.openwall.com/john/doc/OPTIONS.shtml](http://www.openwall.com/john/doc/OPTIONS.shtml)上
    [访问时间2014/04/28]
- en: Ubuntu Man Pages, John at [http://manpages.ubuntu.com/manpages/natty/man8/john.8.html](http://manpages.ubuntu.com/manpages/natty/man8/john.8.html)
    [accessed 2014/04/28]
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Man Pages，John在[http://manpages.ubuntu.com/manpages/natty/man8/john.8.html](http://manpages.ubuntu.com/manpages/natty/man8/john.8.html)上
    [访问时间2014/04/28]
- en: ArchLinux Wiki and Color Bash Prompt at [https://wiki.archlinux.org/index.php/Color_Bash_Prompt](https://wiki.archlinux.org/index.php/Color_Bash_Prompt)
    [accessed 2014/04/28]
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArchLinux Wiki和Color Bash Prompt在[https://wiki.archlinux.org/index.php/Color_Bash_Prompt](https://wiki.archlinux.org/index.php/Color_Bash_Prompt)上
    [访问时间2014/04/28]
- en: Bash history facilities at [http://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html](http://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html)
    [accessed 2014/04/28]
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash历史设施在[http://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html](http://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html)上
    [访问时间2014/04/28]
- en: TrueCrypt at [http://www.truecrypt.org/](http://www.truecrypt.org/) [accessed
    2014/04/28]
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TrueCrypt在[http://www.truecrypt.org/](http://www.truecrypt.org/)上 [访问时间2014/04/28]
