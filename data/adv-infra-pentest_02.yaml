- en: Advanced Linux Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Linux利用
- en: Now that we have a clear understanding of the different penetration testing
    methodologies, phases, and requirements, the game is just starting. It is time
    to buckle your seat belt because, in this chapter, you will dive into securing
    the Linux environment, from a high-level overview of Linux infrastructure penetration
    testing, to discovering the dark depths of kernel vulnerabilities. This chapter
    outlines the skills and tools required to bulletproof Linux infrastructures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对不同的渗透测试方法、阶段和要求有了清晰的理解，游戏才刚刚开始。是时候系好安全带了，因为在本章中，您将深入了解如何保护Linux环境，从对Linux基础设施渗透测试的高层概述，到发现内核漏洞的深层内容。本章概述了保护Linux基础设施所需的技能和工具。
- en: Linux basics
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux基础知识
- en: Unix is an operating system developed by Bell Labs. Basically, it works on a
    command-line interface, and is designed for large systems. This operating system
    is not free, but it is proprietary and portable. Linux is a Unix clone developed
    by Linus Torvalds in 1991\. It is open source, and you can use it in anything
    that has a processor. Linux is flexible, and you can modify and implement it as
    it is licensed under a GNU **General Public License** (**GPL**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Unix是由贝尔实验室开发的操作系统。基本上，它是基于命令行界面工作的，并且设计用于大型系统。这个操作系统不是免费的，而是专有的和可移植的。Linux是由Linus
    Torvalds在1991年开发的Unix克隆。它是开源的，您可以在任何有处理器的设备上使用。Linux是灵活的，您可以根据需要进行修改和实现，因为它是根据GNU通用公共许可证（GPL）许可的。
- en: Linux commands
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux命令
- en: 'In this subsection, let''s open the command line and execute some basic commands.
    In every Linux host, there are command-line interfaces named *shells* that interpret
    and execute typed commands and scripts. There are many shell environments, such
    as **Bourne Again Shell** (**Bash**, which is the most common shell), **C shell**
    (**csh**), **Korn shell** (**ksh**), and so on. To find the shells available for
    your environment, just open the command-line interface and type `cat /etc/shells`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，让我们打开命令行并执行一些基本命令。在每个Linux主机上，都有名为*shell*的命令行界面，用于解释和执行键入的命令和脚本。有许多shell环境，如**Bourne
    Again Shell**（**Bash**，最常见的shell）、**C shell**（**csh**）、**Korn shell**（**ksh**）等。要找到您的环境可用的shell，只需打开命令行界面并键入`cat
    /etc/shells`：
- en: '![](img/00027.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: 'Now, let''s get around some vital basic Linux commands from the shell:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从shell中了解一些重要的基本Linux命令：
- en: '`pwd`: To know which directory you are in'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pwd`: 知道您所在的目录'
- en: '`ls`: To list files in a directory'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ls`: 列出目录中的文件'
- en: '`cd`: To enter a directory'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd`: 进入一个目录'
- en: '`mkdir`: To create a new directory'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir`: 创建一个新目录'
- en: '`rmdir`: To remove a directory'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rmdir`: 删除一个目录'
- en: '`touch`: To create a new file'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touch`: 创建一个新文件'
- en: '`cat`: To read a file'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`: 读取一个文件'
- en: '`cp`: To copy a file'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp`: 复制文件'
- en: '`mv`: To move a file'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mv`: 移动一个文件'
- en: '`man`: To be shown how to use a command'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`man`: 显示如何使用一个命令'
- en: Linux is case-sensitive (to give users many command option possibilities `-T`, `-
    t`, `-a`, `- A`, and so on), so you need to check how you are writing every command.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是区分大小写的（为了给用户提供多种命令选项的可能性，如`-T`、`- t`、`-a`、`- A`等），因此您需要检查您如何编写每个命令。
- en: 'As a penetration tester, there are multiple important commands that you need
    to know in order to test the security posture of a Linux infrastructure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，有多个重要的命令需要了解，以便测试Linux基础设施的安全状况：
- en: '`hostname`: Information about the host'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname`: 主机信息'
- en: '`cat /proc/version`: Kernel information'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat /proc/version`: 内核信息'
- en: '`uname -r`: Kernel release'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uname -r`: 内核版本'
- en: '`uname -a`: More detailed information about the system'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uname -a`: 关于系统的更详细信息'
- en: '`cat /proc/cpuinfo`: Reads information about the processor'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat /proc/cpuinfo`: 读取有关处理器的信息'
- en: '`echo $PATH`: Display information about the `PATH` variable'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo $PATH`: 显示有关`PATH`变量的信息'
- en: '`history`: Display command history'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`history`: 显示命令历史'
- en: Streams
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流
- en: 'Linux is provided with input/output redirection capabilities to facilitate
    tasks. It gives you the ability to manipulate the I/O streams using the following
    three types of streams:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Linux提供了输入/输出重定向功能，以便简化任务。它使您能够使用以下三种类型的流来操作I/O流：
- en: '**Standard input (stdin)**: In this stream, the input is taken from the keyboard'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准输入（stdin）**：在这个流中，输入来自键盘'
- en: '**Standard output (stdout)**: This stream displays the result directly on the
    screen'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准输出（stdout）**：这个流直接在屏幕上显示结果'
- en: '**Standard error (stderr)**: This is another type of standard output stream,
    but it carries error information instead of showing the output on the screen'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准错误（stderr）**：这是另一种标准输出流类型，但它携带错误信息而不是在屏幕上显示输出'
- en: Redirection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向
- en: Redirection is another Linux capability to enhance productivity. You can redirect
    the stream using simple symbols. You can redirect the output of a command to a
    text file using `>`, or `>>` if you want to append the file and not overwrite
    it; for example, `ls >  Simple_file.txt`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向是Linux的另一个功能，可以提高生产力。您可以使用简单的符号重定向流。您可以使用`>`将命令的输出重定向到文本文件，如果要追加文件而不是覆盖它，则使用`>>`；例如，`ls
    > Simple_file.txt`。
- en: 'Also, if you want to redirect a stream from one command to another, it is recommended
    to use the pipes like the following line, which lists the first two files in the
    current directory, `ls | head -2`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果您想将一个命令的流重定向到另一个命令，建议使用管道，就像下面的行一样，它列出当前目录中的前两个文件，`ls | head -2`：
- en: '![](img/00028.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: Linux directory structure
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux目录结构
- en: 'There is a standard structure for Linux directories. According to Linux, generally,
    everything is a file, even directories and devices. In order to work properly,
    Linux manages these files in a specific way under a hierarchical design:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Linux目录有一个标准结构。根据Linux的说法，一般来说，一切都是文件，甚至目录和设备也是文件。为了正常工作，Linux以分层设计的特定方式管理这些文件：
- en: '`/root`: All the files and directories start from this directory'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/root`: 所有文件和目录都从这个目录开始'
- en: '`/home`: Contains personal files of all users'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home`: 包含所有用户的个人文件'
- en: '`/bin`: Contains all the binaries (executables)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/bin`: 包含所有二进制文件（可执行文件）'
- en: '`/sbin`: Like `/bin`, but it contains the system binaries'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sbin`：类似于`/bin`，但它包含系统二进制文件'
- en: '`/lib`: Contains required library files'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/lib`：包含所需的库文件'
- en: '`/usr`: Contains binaries used by a normal user'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr`：包含普通用户使用的二进制文件'
- en: '`/opt`: Contains optional add-on applications'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/opt`：包含可选的附加应用程序'
- en: '`/etc`: Contains all the required configuration files for the programs'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc`：包含程序所需的所有配置文件'
- en: '`/dev`: Contains device files'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/dev`：包含设备文件'
- en: '`/media`: Contains files of temporary removable devices'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/media`：包含临时可移动设备的文件'
- en: '`/mnt`: Contains mount point for filesystems'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/mnt`：包含文件系统的挂载点'
- en: '`/boot`: Contains boot loader files'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/boot`：包含引导加载程序文件'
- en: '`/tmp`: Contains temporary files'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`：包含临时文件'
- en: '`/var`: Contains variable files, such as logs'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var`：包含变量文件，如日志'
- en: '`/proc`: Contains information about the system processes:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/proc`：包含有关系统进程的信息：'
- en: There are many types of file in Linux operation systems. Each file is represented
    by a specific symbol—directories, regular files, and sockets, which are communication
    techniques between applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Linux操作系统中有许多类型的文件。每个文件都由特定的符号表示——目录、普通文件和套接字，这是应用程序之间的通信技术。
- en: Users and groups
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组
- en: The following subsection will cover the required Linux commands to manage user
    accounts and groups. To create a new user, use the `useradd` command; for example,
    `useradd <user>`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的小节将涵盖管理用户账户和组所需的Linux命令。要创建新用户，请使用`useradd`命令；例如，`useradd <user>`。
- en: 'Also, you are capable of adding more information about the new user, such as
    the related shell, the user directory, and expiration date:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以添加有关新用户的更多信息，例如相关的shell、用户目录和过期日期：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Every user must have a password, and in order to change the password, they
    need root access. To change a user password, use the `passwd` command, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户必须有一个密码，并且为了更改密码，他们需要root访问权限。要更改用户密码，请使用`passwd`命令，如下所示：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To remove a user, use the `userdel` command. For example, `userdel -r <user>`, where
    the `-r` option is added to delete the files of the selected user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除用户，请使用`userdel`命令。例如，`userdel -r <user>`，其中添加了`-r`选项以删除所选用户的文件。
- en: Using groups is a technique for managing Linux accounts. Organizing users into
    groups is a security measure, and an isolation approach. To list all the groups
    in a Linux system, show the `group` file in the `/etc` directory using the `cat`
    command.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组是管理Linux账户的一种技术。将用户组织成组是一种安全措施和隔离方法。要列出Linux系统中的所有组，请使用`cat`命令在`/etc`目录中显示`group`文件。
- en: 'As you can see from the screenshot, the `group` file contains all the groups
    in your Linux system. Just type `cat /etc/group`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕截图中可以看出，`group`文件包含您的Linux系统中的所有组。只需键入`cat /etc/group`：
- en: '![](img/00029.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: To create a new group, use the `newgrp` command `newgrp <Group_Name>`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新组，请使用`newgrp`命令`newgrp <Group_Name>`。
- en: Permissions
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限
- en: 'Linux is a multiuser operating system. To protect user accounts and groups,
    different rights are given to each user and group. There are three main permissions
    in a Linux system: read, write, and execution. These can be described as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个多用户操作系统。为了保护用户账户和组，给每个用户和组赋予不同的权限。在Linux系统中有三种主要权限：读取、写入和执行。这可以描述如下：
- en: '**Read** is the ability to view a file and list the content if the target is
    a directory. It is represented by the letter (`r`).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取**是查看文件和如果目标是目录则列出内容的能力。它由字母（`r`）表示。'
- en: '**Write** allows a user to modify certain files and contents of a directory.
    It is represented by the letter (`w`).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入**允许用户修改某些文件和目录内容。它由字母（`w`）表示。'
- en: '**Execute** allows a user to run a script or a program and change directories.
    It is represented by the letter (`x`).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**允许用户运行脚本或程序并更改目录。它由字母（`x`）表示。'
- en: 'There are three types of permissions as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种权限类型如下：
- en: '**Set User Identification** (**SUID**): When SUID is set, the file will be
    executed with the same permission as the user.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置用户标识**（**SUID**）：当设置SUID时，文件将以与用户相同的权限执行。'
- en: '**Set Group ID** (**SGID**): It is the same as SUID, but the file will be executed
    with the same permission as the group.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置组ID**（**SGID**）：与SUID相同，但文件将以与组相同的权限执行。'
- en: '**Sticky Bit**: This permission is used when you can create, modify, or execute,
    but you can''t delete files of another user. Generally used on shared libraries.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘着位**：当您可以创建、修改或执行文件，但无法删除另一个用户的文件时使用。通常用于共享库。'
- en: The chmod command
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chmod命令
- en: 'To change the permissions of a file, you need to use the `chmod` command, `chmod
    <letters> <file or directory>`. You can also use an octal format instead of letters, `chmod
    <octal format> <file or directory>`. To convert the permission from the letters
    format to the octal format, you need to convert every permission into a value:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件的权限，您需要使用`chmod`命令，`chmod <letters> <file or directory>`。您还可以使用八进制格式代替字母，`chmod
    <octal format> <file or directory>`。要将权限从字母格式转换为八进制格式，您需要将每个权限转换为一个值：
- en: '| **Value** | **User** | **Group** | **Other** |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **值** | **用户** | **组** | **其他** |'
- en: '| 4 | Read | Read | Read |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 读取 | 读取 | 读取 |'
- en: '| 2 | Write | Write | Write |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 写入 | 写入 | 写入 |'
- en: '| 1 | Execute | Execute | Execute |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 执行 | 执行 | 执行 |'
- en: 'Now, let''s take an example and see how to use the `chmod` command with the
    octal format in an easy way. Let''s suppose that we need to give the user the
    permission to read and write, the group only to read, and others only to execute.
    Then, the octal format will be `641`, because:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们举个例子，看看如何以八进制格式轻松使用`chmod`命令。假设我们需要给用户读取和写入的权限，组只能读取，其他人只能执行。那么，八进制格式将是`641`，因为：
- en: '**User**: *Read + Write = 6*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：*读取 + 写入 = 6*'
- en: '**Group**: *Read = 4*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：*读取 = 4*'
- en: '**Other**: *Execute = 1*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他**：*执行 = 1*'
- en: The final command will be: `chmod 641 <file>`
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的命令将是：`chmod 641 <file>`
- en: The chown command
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chown命令
- en: Now, to change the owner of a file, use the `chown` command `chown user:group
    <file>`. To include all the contained files, add the option `-R` (recursive mode).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要更改文件的所有者，请使用`chown`命令`chown user:group <file>`。要包括所有包含的文件，请添加选项`-R`（递归模式）。
- en: The chroot command
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chroot命令
- en: '`chroot` is a technique for separating a non-root process and its children
    from the other system components. This isolation is designed in the Linux operating
    system, to make sure that when a subsystem is compromised, it won''t affect the
    entire system. The idea is to make the process think that it runs in the root
    folder, but in fact, it will be in a directory created by the administrator. So,
    let''s take a look at the required steps to build a chroot jail:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`chroot`是一种用于将非根进程及其子进程与其他系统组件隔离的技术。这种隔离是设计在Linux操作系统中的，以确保当一个子系统被 compromise
    时，不会影响整个系统。其思想是让进程认为它在根文件夹中运行，但实际上它将在管理员创建的一个目录中。因此，让我们来看看构建chroot监狱所需的步骤：'
- en: 'First, you need to create a new user and name it; for example, `prisoner`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个新用户并命名它; 例如，`prisoner`：
- en: '![](img/00030.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: Add the user to group root `gpasswd -a prisoner root`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户添加到root组`gpasswd -a prisoner root`
- en: 'You can check whether you added the new user by verifying `/etc/group`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过验证`/etc/group`来检查是否已添加新用户：
- en: '![](img/00031.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: Now create a new directory named `chroot`, and enter it
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为`chroot`的新目录，并进入它
- en: Create these folders:`bin`, `dev`, `etc`, `home`, `home/prisoner`, `lib`, `var`, `usr`,
    and `usr/bin`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建这些文件夹：`bin`，`dev`，`etc`，`home`，`home/prisoner`，`lib`，`var`，`usr`和`usr/bin`
- en: 'Here, at least the `bin` and `lib` directories are needed:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里，至少需要`bin`和`lib`目录：
- en: '![](img/00032.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: 'Next, copy the `bash` utility using the `cp` command, `cp /bin/bash /chroot/bin`,
    including the required shared libraries:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`cp`命令复制`bash`实用程序，`cp /bin/bash /chroot/bin`，包括所需的共享库：
- en: '![](img/00033.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: 'Finally, use the `chroot` command to build the jail `chroot /chroot /bin/bash`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`chroot`命令构建监狱`chroot /chroot /bin/bash`：
- en: '![](img/00034.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: The power of the find command
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: find命令的强大
- en: In the previous chapter, we discovered the importance of knowing how to extract
    the right information from a huge amount of data. When you are dealing with Linux,
    knowing how to find and extract information will help you use time efficiently.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们发现了从大量数据中提取正确信息的重要性。当您处理Linux时，知道如何查找和提取信息将帮助您有效地使用时间。
- en: '`find` is a very useful command to help users locate any file based on defined
    criteria. The format of the `find` command is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`是一个非常有用的命令，可以帮助用户根据定义的条件定位任何文件。`find`命令的格式如下：'
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Wildcards are a great additional ability for helping users. They are inspired
    by the wild card term that describes the fact of assigning any value to a card.
    For example, when you use the asterisk wildcard (`*`) in a command, it means the
    `*` could be of any value such as the example here, to list all the text files
    in a directory:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符是帮助用户的一个很好的附加能力。它们受到通配符术语的启发，该术语描述了为卡分配任何值的事实。例如，当您在命令中使用星号通配符（`*`）时，它表示`*`可以是任何值，例如在这里的示例中，列出目录中的所有文本文件：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot illustrates the output for the preceding command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了前面命令的输出：
- en: '![](img/00035.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: 'The question mark (`?`) and square brackets ( `[xyz]` ) are also types of wildcards.
    Thus, the question mark represents only one value, whereas the brackets represent
    any of the values in between. There are some other representations such as `[:digit:] `:
    all  digits, ` [:upper:]`: all upper-case letters and so on.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 问号（`?`）和方括号（`[xyz]`）也是通配符的一种类型。因此，问号表示只有一个值，而方括号表示其中任何一个值。还有一些其他表示，例如`[:digit:]`：所有数字，`[:upper:]`：所有大写字母等。
- en: 'These are some other examples of find command usage for Linux exploitation:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Linux利用的find命令用法的一些其他示例：
- en: 'To display the bash history of the current user:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前用户的bash历史记录：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To find the root SUIDs:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找根SUIDs：
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To display the files in `/var/log`, use the `ls /var/log` command:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显示`/var/log`中的文件，请使用`ls /var/log`命令：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/00036.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: Jobs, cron, and crontab
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业，cron和crontab
- en: 'Automation is an essential aspect of the Linux operating system. It is important for
    system administrators and also for penetration testers to automate many tasks
    to avoid wasting time in repeating them. As discussed in the previous chapter,
    penetration testing is a time-limited mission. So, good time management is an
    in-demand skill for every successful pentester. Linux gives users scheduling capabilities
    to run commands or scripts in a specific time, and in a repeatable manner. The
    cron utility is the key to achieve this. Cron gives you the ability to run a background
    job as a routine in a defined time. The following is a cron command format:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是Linux操作系统的一个重要方面。对于系统管理员和渗透测试人员来说，自动化许多任务以避免重复是很重要的。如前一章所讨论的，渗透测试是一个有时间限制的任务。因此，良好的时间管理是每个成功的渗透测试人员所需的技能。Linux为用户提供了在特定时间和可重复的方式运行命令或脚本的调度能力。cron实用程序是实现这一点的关键。Cron使您能够在定义的时间作为例行工作运行后台作业。以下是cron命令的格式：
- en: '`<Day of the week> <Month> <Day of the Month> <Hour> <Minutes> <Command>`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`<星期几> <月份> <月份中的日期> <小时> <分钟> <命令>`'
- en: 'All the cron jobs could be listed using `crontab -l`. They also could be found
    in `/etc/crontab`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 所有cron作业都可以使用`crontab -l`列出。它们也可以在`/etc/crontab`中找到：
- en: '![](img/00037.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: Security models
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全模型
- en: 'Security models are specific mechanisms to represent security policies in a
    logical way. These models are based on the **Trusted Computing Base** (**TCB**),
    which is described in the US Department of Defense Standard 5200.28\. This standard
    is also known as the Orange Book. It presents TCB as trusted system components
    that are responsible for the access control to any system. TCB is limited by an
    fictional boundary called a *security perimeter*. Every connection between the
    TCB and other subsystem should be possible using secure channels sometimes named
    *security paths*. Security models are present to prevent unauthorized information
    flow. In other words, they assert that the information is flowing from a low-level
    security to a high level, and not the opposite. There are also other models named
    *noninterference models,* which focus on the behaviors done on each subject and
    not on the information flow. The following are some well-known security models:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 安全模型是用逻辑方式表示安全策略的特定机制。这些模型基于**可信计算基础**（**TCB**），该基础在美国国防部标准5200.28中描述。这个标准也被称为橙皮书。它将TCB呈现为负责对任何系统进行访问控制的可信系统组件。TCB受到称为*安全边界*的虚构边界的限制。TCB与其他子系统之间的每个连接应该使用安全通道，有时被称为*安全路径*。安全模型存在是为了防止未经授权的信息流动。换句话说，它们断言信息是从低级安全级别流向高级别，而不是相反。还有其他称为*非干扰模型*的模型，它们关注于每个主体上执行的行为，而不是信息流。以下是一些知名的安全模型：
- en: '**Bell-LaPadula Model**: This model is based on the confidentiality of an object.
    It dictates a no-read-up policy and no-write-down (the first is named *Simple
    Security Property*, and the second property is named *Star Security Property*).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贝尔-拉帕杜拉模型**：该模型基于对象的保密性。它规定了不读取上行政策和不写入下行（第一个被称为*简单安全属性*，第二个属性被称为*星级安全属性*）。'
- en: '**Biba Model**: This is a hierarchical system that concentrates on the integrity
    of the objects. It has two properties: the *Simple Integrity Axiom* which dictates
    a no-read-down policy, and the *Star Integrity Axiom* which dictate no-write-up
    policy.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Biba模型**：这是一个集中在对象完整性的分层系统。它有两个属性：*简单完整性公理*规定了不下行读取策略，*星级完整性公理*规定了不上行写入策略。'
- en: '**Clark-Wilson Model**: This dictates that only authorized users should change
    the integrity of data.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克拉克-威尔逊模型**：规定只有授权用户才能改变数据的完整性。'
- en: Security controls
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全控制
- en: 'Before exploring access controls, let''s discover some important terms in security
    controls. By definition, a control as a noun means an entity that checks based
    on a standard. Security controls are divided into three main categories:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索访问控制之前，让我们了解安全控制中的一些重要术语。根据定义，名词控制意味着根据标准进行检查的实体。安全控制分为三个主要类别：
- en: '**Management security controls**: These use managerial techniques and planning
    to reduce the following risks:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理安全控制**：这些使用管理技术和计划来减少以下风险：'
- en: Vulnerability analysis
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞分析
- en: Pentesting
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试
- en: Risk analysis
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险分析
- en: '**Technical security controls**: This is also known as **operational security
    controls**. They use both technologies and awareness as safeguards. These are
    some examples:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术安全控制**：也被称为**运营安全控制**。它们使用技术和意识作为保障。以下是一些例子：'
- en: Firewalls
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙
- en: Encryption
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Intrusion detection systems
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入侵检测系统
- en: Antivirus
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防病毒软件
- en: Training
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 培训
- en: '**Physical security controls**: These are the physical safeguards used to protect
    the following data:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理安全控制**：这些是用于保护以下数据的物理保障：'
- en: Cameras
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像头
- en: Gates
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 门
- en: Biometrics
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生物识别技术
- en: Sensors
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器
- en: '![](img/00038.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: Access control models
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制模型
- en: 'Access controls are a form of technical security controls. Subjects and objects
    are two important terminologies. A subject is an active entity, such as an action
    (modification or access to a file, for example). An object is a static system
    entity, such as text file or a database. Basically, there are three types of access
    control models, described as the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 访问控制是技术安全控制的一种形式。主体和对象是两个重要的术语。主体是一个主动实体，例如一个动作（例如修改或访问文件）。对象是一个静态系统实体，例如文本文件或数据库。基本上，有三种访问控制模型，描述如下：
- en: '**Mandatory Access Control (MAC)**: The system checks the identity of a subject
    and its permissions with the object permissions. So usually, both subjects and
    objects have labels using a ranking system (top secret, confidential, and so on).'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制访问控制（MAC）**：系统检查主体的身份和其权限与对象权限。因此，通常主体和对象都使用排名系统（绝密，机密等）进行标记。'
- en: '**Discretionary Access Control (DAC)**: The object owner is allowed to set
    permissions to users. Passwords are a form of DAC.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主访问控制（DAC）**：对象所有者被允许为用户设置权限。密码是DAC的一种形式。'
- en: '**Role-Based Access Control (RBAC)**: As its name indicates, the access is
    based on assigned roles.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制（RBAC）**：顾名思义，访问是基于分配的角色。'
- en: Linux attack vectors
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux攻击向量
- en: 'An attack is an actual act by a threat agent against assets of an information
    system. The path used to attack the target is called an **attack vector**. There
    are three main types of attack vector and threat:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击是威胁代理对信息系统资产的实际行为。用于攻击目标的路径称为**攻击向量**。有三种主要类型的攻击向量和威胁：
- en: '**Network threats**: This refers to the threat against the networks of the
    organization'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络威胁**：指对组织网络的威胁'
- en: '**Host threats**: These are the threats against the host, including hardware
    and the operating system'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机威胁**：这些是针对主机的威胁，包括硬件和操作系统'
- en: '**Application threats**: This refers to the threat against the system programs'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序威胁**：这指的是针对系统程序的威胁'
- en: Linux enumeration with LinEnum
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LinEnum进行Linux枚举
- en: Enumeration is a key for every successful attack. It is a critical phase in
    hacking systems, and a vital part of information gathering. During this phase,
    the attacker establishes a connection between them and the target (locally or
    remotely) to gather as much information as possible to decide on an attacking
    vector. To enumerate a Linux host, you can use a utility called **LinEnum**, and
    download it from [https://github.com/rebootuser/LinEnum.](https://github.com/rebootuser/LinEnum)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是每次成功攻击的关键。这是黑客系统的关键阶段，也是信息收集的重要部分。在此阶段，攻击者在本地或远程之间建立连接以收集尽可能多的信息，以决定攻击向量。要枚举Linux主机，您可以使用一个名为**LinEnum**的实用程序，并从[https://github.com/rebootuser/LinEnum](https://github.com/rebootuser/LinEnum)下载它。
- en: 'It is a useful shell script that gathers information about a Linux host using
    a checklist of at least 65 items, such as kernel and sensitive users information,
    in order to find an escalation point:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个有用的shell脚本，使用至少65个项目的清单收集有关Linux主机的信息，例如内核和敏感用户信息，以便找到升级点：
- en: '![](img/00039.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'The following screenshot shows, for example, information about the logged user
    and the system groups (two items of the checklist):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了有关已登录用户和系统组的信息（清单的两个项目）：
- en: '![](img/00040.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: OS detection with Nmap
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap进行OS检测
- en: 'The first step is to check whether the host is alive. To verify the state of
    a machine, type `nmap –sP <target>`; the target could be an IP address, or a range
    of addresses:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是检查主机是否存活。要验证机器的状态，请键入`nmap -sP <目标>`；目标可以是IP地址或一系列地址：
- en: '![](img/00041.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: 'Basically, the check is using an ICMP request, thus, many network administrators
    are blocking this protocol request due to firewalls and intrusion detection systems.
    Hence, penetration testers could use TCP or UDP requests (don''t worry; we will
    cover network aspects and protocols in the next chapter in a detailed way). To
    achieve it, you can use the nping utility:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，检查是使用ICMP请求，因此，许多网络管理员由于防火墙和入侵检测系统而阻止此协议请求。因此，渗透测试人员可以使用TCP或UDP请求（不用担心；我们将在下一章节中详细介绍网络方面和协议）。要实现这一点，您可以使用nping实用程序：
- en: '![](img/00042.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: 'Nmap has a great capability to detect operating systems, thanks to its huge
    database of footprinting based on TCP and UDP packets. To detect the OS, just
    use the `-O` Nmap option, `nmap –O <Target>`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap具有检测操作系统的强大能力，这要归功于其基于TCP和UDP数据包的足迹数据库。要检测操作系统，只需使用`-O` Nmap选项，`nmap -O
    <目标>`：
- en: '![](img/00043.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: 'To detect the OS and services, use `nmap –n –A –T5 <target>`. It detects active
    services based on ports. The following are some services with their ports:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 检测操作系统和服务，使用`nmap -n -A -T5 <目标>`。它基于端口检测活动服务。以下是一些带有端口的服务：
- en: '| **Services** | **Ports** |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| **服务** | **端口** |'
- en: '| `telnet` | `23` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `telnet` | `23` |'
- en: '| `ftp` | `21` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `ftp` | `21` |'
- en: '| `http` | `80` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `http` | `80` |'
- en: '| `pop3` | `110` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `pop3` | `110` |'
- en: '| `https` | `443` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `https` | `443` |'
- en: '| `ntp` | `123` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `ntp` | `123` |'
- en: '| `ldap` | `389` |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `ldap` | `389` |'
- en: '| `postfix` | `25` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `postfix` | `25` |'
- en: '| `Imap` | `143` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `Imap` | `143` |'
- en: 'As a penetration tester, every step should be recorded; that is why Nmap is
    giving an output option to export the scan results. Just use the `-oN` option
    (you can choose between three formats: text (N), greppable (G), or XML (X) ): `nmap
    –n –A –T5 <target> -oN report.txt`.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，每一步都应该记录下来；这就是为什么Nmap提供了输出选项来导出扫描结果。只需使用`-oN`选项（您可以在文本（N）、可搜索（G）或XML（X）之间进行选择）：`nmap
    -n -A -T5 <目标> -oN report.txt`。
- en: Privilege escalation
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限提升
- en: '**Privilege escalation** is the process of attempting to gain unauthorized
    high privilege, mostly trying to get root privilege. It is pivoting from the user
    account to the root account. In order to gain administrative privilege, the attacker
    exploits weakness in systems (programming bugs, misconfiguration, and so on).
    There are two types of privilege escalation: vertical and horizontal. When the
    attacker is moving from a lower privilege to a higher privilege, it is a vertical
    escalation. If he is moving from one account to another with the same privilege,
    it is a horizontal escalation. To achieve root permissions in Linux environment,
    attackers use many techniques:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限提升**是试图获得未经授权的高权限的过程，大多数情况下是尝试获取root权限。它是从用户帐户到root帐户的转移。为了获得管理权限，攻击者利用系统的弱点（编程错误，配置错误等）。权限提升有两种类型：垂直和水平。当攻击者从较低权限移动到较高权限时，它是垂直提升。如果他从一个帐户移动到另一个帐户并具有相同的权限，则是水平提升。为了在Linux环境中获得root权限，攻击者使用许多技术：'
- en: '**Exploiting Linux services**: As discussed previously, attackers try to find
    bugs to leverage privileges. Linux services and configurations are good entry
    points for every hacker and penetration tester. We have the following examples:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用Linux服务**：如前所述，攻击者试图找到漏洞来提升权限。Linux服务和配置是每个黑客和渗透测试人员的良好入口点。我们有以下示例：'
- en: '**X11 service**: X11 is a graphical engine for Linux environments. Many interfaces
    can run on top of it, such as Gnome and KDE. The X11 service basically runs over 6000-60063
    ports. As discussed before, you can use Nmap to enumerate the host for active
    X11 services. One of the weaknesses of X11 is that an attacker can keylog every
    written information using an xspy tool, for example. The image here describes
    a Linux XServer environment:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X11服务**：X11是Linux环境的图形引擎。许多界面可以在其上运行，例如Gnome和KDE。X11服务基本上在6000-60063端口上运行。如前所述，您可以使用Nmap枚举主机以获取活动的X11服务。X11的一个弱点是攻击者可以使用xspy工具记录每个输入的信息。这里的图像描述了Linux
    XServer环境：'
- en: '![](img/00044.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: '**Case study of Linux Bluetooth stack (BlueZ) information leak vulnerability –
    CVE-2017-1000250**:This vulnerability is a combination of a UserLand and a kernel
    land exploiting to leak information, including encryption keys in Bluetooth communications.
    The kernel-user vulnerability is a weakness in the lowest Bluetooth stack named
    L2CAP. It is a huge threat to many Bluetooth devices, including the ones that
    run Linux BlueZ: mobile, and IoT. To test the exploit on an android mobile, download
    it from this GitHub repository [https://github.com/ojasookert/CVE-2017-0785](https://github.com/ojasookert/CVE-2017-0785)
    and run the Python script: `./CVE-2017-0785.py TARGET=XX:XX:XX:XX:XX:XX`. Before
    that, make sure that you''ve installed the required Python libraries `pybluez`
    and `pwntools` using the `pip` utility as shown in the following screenshot:'
  id: totrans-187
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux蓝牙堆栈（BlueZ）信息泄漏漏洞的案例研究– CVE-2017-1000250**：这个漏洞是一个用户空间和内核空间的组合，用于泄露信息，包括蓝牙通信中的加密密钥。内核用户漏洞是最低蓝牙堆栈L2CAP中的一个弱点。这对许多蓝牙设备构成了巨大威胁，包括运行Linux
    BlueZ的设备：移动设备和物联网设备。要在安卓手机上测试漏洞，可以从GitHub存储库[https://github.com/ojasookert/CVE-2017-0785](https://github.com/ojasookert/CVE-2017-0785)下载并运行Python脚本：`./CVE-2017-0785.py
    TARGET=XX:XX:XX:XX:XX:XX`。在此之前，请确保已经使用`pip`工具安装了所需的Python库`pybluez`和`pwntools`，如下截图所示：'
- en: '[PRE7]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/00045.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: '**Wildcards**: They could be deadly weapons. Researchers (back to the future:
    Unix Wildcards Gone Wild – Leon Juranic) show that wildcards can be used to inject
    arbitrary commands.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通配符**：它们可能是致命的武器。研究人员（回到未来：Unix通配符失控– Leon Juranic）表明通配符可以用于注入任意命令。'
- en: '**SUID abuse**: This can be done using a program (such as Nmap) that requires
    root privilege to run other commands on the system.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SUID滥用**：这可以通过需要以root权限运行系统上其他命令的程序（如Nmap）来实现。'
- en: '****Linux kernel exploitation****: This is the most dangerous technique. If
    an attacker could exploit the kernel, he will get full control of the compromised
    system.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****Linux内核利用****：这是最危险的技术。如果攻击者能够利用内核，他将完全控制受损系统。'
- en: Linux privilege checker
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux特权检查器
- en: 'Linux privilege checker is an enumeration tool with privilege escalation checking
    capabilities. To give it a try, download it from [http://www.securitysift.com/download/linuxprivchecker.py](http://www.securitysift.com/download/linuxprivchecker.py).
    You can download it using the `wget` command as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Linux特权检查器是一个具有特权升级检查功能的枚举工具。要尝试它，可以从[http://www.securitysift.com/download/linuxprivchecker.py](http://www.securitysift.com/download/linuxprivchecker.py)下载。可以使用`wget`命令进行下载，如下所示：
- en: '[PRE8]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/00046.gif)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.gif)'
- en: You can run it on your system by typing **`./linuxprivchecker.py`** or **`python linuxprivchecker.py`**.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在系统上运行它，输入**`./linuxprivchecker.py`**或**`python linuxprivchecker.py`**。
- en: '![](img/00047.gif)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.gif)'
- en: Another tool for Unix and Linux operating systems is called unix-privesc-checker.
    It is available at [http://pentestmonkey.net/tools/audit/unix-privesc-check](http://pentestmonkey.net/tools/audit/unix-privesc-check).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于Unix和Linux操作系统的工具称为unix-privesc-checker。它可以在[http://pentestmonkey.net/tools/audit/unix-privesc-check](http://pentestmonkey.net/tools/audit/unix-privesc-check)上找到。
- en: Linux kernel exploitation
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux内核利用
- en: There are many motives for hacking, but nothing can be compared with the excitement
    of fully taking control of the systems. This can be done by exploiting the Linux
    kernel. Attacking the core of the system will make hackers feel on top of the
    world; that is why the kernel represents a high-priority target for every hacker.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多黑客动机，但没有什么可以与完全控制系统的兴奋相比。这可以通过利用Linux内核来实现。攻击系统核心将使黑客感到世界之巅；这就是为什么内核对每个黑客来说都是一个高优先级目标。
- en: UserLand versus kernel land
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户空间与内核空间
- en: 'Most operating systems rely on a ring protection model. This model represents
    superposed conceptual rings varying from high to low privileges. There are four
    layers numbered from 0 to 3:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数操作系统依赖于环保护模型。该模型代表从高特权到低特权的重叠概念环。有四个从0到3编号的层：
- en: '**Ring 3**: This layer is the usual interaction layer, with the user normally
    in the user mode.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ring 3**：这一层是通常的交互层，用户通常处于用户模式。'
- en: '**Ring 2**: This layer contains operations with low privilege.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ring 2**：这一层包含低特权操作。'
- en: '**Ring 1**: This is the layer of input/output operations.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ring 1**：这是输入/输出操作的层。'
- en: '**Ring 0**: This is the most sensitive layer. The kernel resides in this layer.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ring 0**：这是最敏感的层。内核位于此层。'
- en: '![](img/00048.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'Linux, like many recent operating systems, doesn''t rely exactly on a ring
    protection mechanism, but it is working on a two-layer mode: user mode, and kernel
    mode. The memory is divided into two sections and lands: UserLand and kernel land.
    The first is used by normal programs, so the processes in this land are using
    a limited part of memory. The second section is using all the memory, and it runs
    the most trusted codes.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多最近的操作系统一样，Linux并不完全依赖于环保护机制，而是在两层模式下工作：用户模式和内核模式。内存分为两个部分和空间：用户空间和内核空间。第一个被正常程序使用，因此该空间中的进程使用有限的内存。第二部分使用所有内存，并运行最受信任的代码。
- en: System calls
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统调用
- en: 'System calls, or *syscalls*, are the interfaces between the **UserLand** and
    the **kernel land**. It varies from an architecture to another; for example, in
    older processors, interrupts are used for transactions between the two spaces.
    Now, in newer architecture, optimized instructions are used:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用，或*syscalls*，是**用户空间**和**内核空间**之间的接口。它在不同的架构中有所不同；例如，在旧处理器中，中断用于两个空间之间的交易。现在，在新架构中，使用了优化指令：
- en: '![](img/00049.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Linux kernel subsystems
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux内核子系统
- en: 'The Linux kernel is composed of many components:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核由许多组件组成：
- en: '**Memory manager**: This is responsible for access to memory'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存管理器**：这负责访问内存'
- en: '**Process scheduler**: This is responsible for managing processes'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程调度器**：这负责管理进程'
- en: '**Virtual filesystem**: This represents a common file interface to a huge variety
    of devices'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟文件系统**：这代表了对各种设备的常见文件接口'
- en: '**Network interface**: This manages network standard and networking devices'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络接口**：这管理网络标准和网络设备'
- en: '**Inter-process communications**: This manages communication between many processes
    in a single system'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程间通信**：这管理单个系统中许多进程之间的通信'
- en: '**Device drivers**: These are present to make the device hardware usable'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备驱动程序**：这些存在是为了使设备硬件可用'
- en: '![](img/00050.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: Process
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程
- en: 'A process is an instance of a program. When a program is loaded into memory,
    then it is named a **process**. A process could be in different states: new, running,
    waiting, ready, and terminated. In Linux, each process has an identity named `PID`.
    You can check them using the `ps` command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 进程是程序的一个实例。当程序加载到内存中时，它被称为**进程**。进程可以处于不同的状态：新建、运行、等待、就绪和终止。在Linux中，每个进程都有一个名为`PID`的标识。您可以使用`ps`命令来检查它们：
- en: '![](img/00051.jpeg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Threads
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程
- en: Threads are like processes. Although processes are running on a separate memory
    space, threads are running on a shared memory. They can be scheduled for execution.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 线程类似于进程。虽然进程在单独的内存空间运行，线程在共享内存上运行。它们可以被调度执行。
- en: Security-Enhanced Linux
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全增强型Linux
- en: '**Security-Enhanced Linux** (**SELinux**) is a security project developed by
    the United States National Security Agency (NSA). It is a **Linux Security Module**
    (**LSM**) integrated in the Linux kernel, starting from 2.6.0 kernel release.
    It implements a mandatory access control (MAC) system to protect the environment.
    It specifies the policies of how users interact with the system. When a subject
    such as a process wants to request an action from a file, the SELinux security
    server check with the **access vector cache** (**AVC**) to grant access, thanks
    to a security policies database. It is an extra security layer on top of the normal
    Linux systems. The following is an illustration of a SELinux process workflow:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全增强型Linux**（**SELinux**）是由美国国家安全局（NSA）开发的安全项目。它是集成在Linux内核中的**Linux安全模块**（**LSM**），从2.6.0内核版本开始。它实现了强制访问控制（MAC）系统以保护环境。它指定了用户如何与系统交互的策略。当一个主体（如一个进程）想要从一个文件请求操作时，SELinux安全服务器会通过**访问向量缓存**（**AVC**）检查访问权限，这要归功于安全策略数据库。它是在普通Linux系统之上的额外安全层。以下是SELinux流程的示例：'
- en: '![](img/00052.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: 'You can check the global configuration file of the SELinux under the `/etc/selinux`
    directory:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`/etc/selinux`目录下检查SELinux的全局配置文件：
- en: '![](img/00053.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: Memory models and the address spaces
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存模型和地址空间
- en: 'Memory management is an important capability of every operating system. It
    is also integrated into Linux kernel. Linux manages memory in a virtual way. In
    other words, there is no correspondence between the physical memory addresses,
    and the addresses used and seen by the program. This technique gives the users
    and developers flexibility. Linux is dealing with the following five types of
    addresses:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理是每个操作系统的重要能力。它也集成到Linux内核中。Linux以虚拟方式管理内存。换句话说，物理内存地址与程序使用和看到的地址之间没有对应关系。这种技术给用户和开发人员带来了灵活性。Linux处理以下五种类型的地址：
- en: '**User virtual addresses**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户虚拟地址**'
- en: '**Physical addresses**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理地址**'
- en: '**Bus addresses**'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总线地址**'
- en: '**Kernel logical addresses**'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核逻辑地址**'
- en: '**Kernel virtual addresses**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核虚拟地址**'
- en: 'The memory is divided into 4,096 byte memory chunks named pages, to facilitate
    internal handling. The 12 least significant bits are the offset; the rest is the
    page number. On the recent x86 architecture, Linux kernel divides the virtual
    space, usually 4 GB into 3 GB dedicated to UserLand, and 1 GB for kernel land.
    This operation is named **segmentation**. The kernel uses a page table for the
    correspondence between physical and virtual addresses. To manage the different
    regions of memory, it uses a **virtual memory area** (**VMA**):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 内存被划分为4096字节的内存块，称为页面，以便进行内部处理。最低有效位是偏移量；其余部分是页号。在最近的x86架构上，Linux内核将虚拟空间（通常为4GB）划分为3GB用于用户空间，1GB用于内核空间。这个操作被称为**分段**。内核使用页表来对应物理和虚拟地址。为了管理内存的不同区域，它使用**虚拟内存区域**（**VMA**）：
- en: '![](img/00054.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'To show a memory map for a process, you can display the `/proc/1/maps` file
    using the `cat` command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示进程的内存映射，可以使用`cat`命令显示`/proc/1/maps`文件：
- en: '![](img/00055.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: Linux kernel vulnerabilities
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux内核漏洞
- en: Linux kernel is the most critical component in Linux infrastructure. Thus, taking
    control of it will grant access to all the system and sensitive information. If
    hackers get root access to even the hardware, they will not be stopped from damaging
    the systems or stealing critical information. There are many kernel vulnerabilities
    classified based on the attack surface (memory, pointers, logic, and so on).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核是Linux基础设施中最关键的组件。因此，控制它将授予对系统和敏感信息的访问权限。如果黑客甚至获得硬件的根访问权限，他们将无法阻止损坏系统或窃取关键信息。根据攻击面（内存、指针、逻辑等），有许多内核漏洞被分类。
- en: NULL pointer dereference
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空指针解引用
- en: 'NULL pointer dereferences are availability exploits. Generally, they are caused
    by a NULL pointer error, and it results a `NullPointerException`. This exception
    is raised when a pointer, which is a programming object that refers to an address
    with value of NULL, is pointing to a valid memory space. To avoid this type of
    attack, you just need to evoke an exception handler:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 空指针解引用是一种可用性漏洞。通常是由空指针错误引起的，导致`NullPointerException`。当指针指向一个值为NULL的地址时，指向有效内存空间时，会引发此异常。为了避免这种类型的攻击，您只需要调用异常处理程序：
- en: '![](img/00056.gif)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.gif)'
- en: Arbitrary kernel read/write
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任意内核读/写
- en: Arbitrary kernel read/write is a critical exploit that can be done by passing
    data to the kernel.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 任意内核读/写是通过向内核传递数据来完成的关键攻击。
- en: Case study CVE-2016-2443 Qualcomm MSM debug fs kernel arbitrary write
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究CVE-2016-2443 高通MSM调试fs内核任意写
- en: 'This exploit is using a Linux branch for Qualcomm SoC on android named MSM.
    It is high and critical. It targets the debug filesystem also known as `debugfs`, which
    is a RAM-based file system generally used for debugging aims by making information
    available for user space. That is why it is a good entry to inject some information
    to the Linux kernel. This exploit gives you the ability to pass data to kernel
    causing a kernel panic via the echo command: `echo "41414141 42424242" > /sys/kernel/debug/mddi/reg`.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞利用是使用了一个名为MSM的安卓高通SoC的Linux分支。它是高危且关键的。它针对的是调试文件系统，也被称为`debugfs`，这是一个基于RAM的文件系统，通常用于调试目的，通过使信息对用户空间可用。这就是为什么它是一个很好的入口，可以向Linux内核注入一些信息。这个漏洞利用使你能够通过echo命令向内核传递数据，导致内核恐慌：`echo
    "41414141 42424242" > /sys/kernel/debug/mddi/reg`。
- en: Thus, it will lead to an information leak.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这将导致信息泄漏。
- en: Memory corruption vulnerabilities
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存损坏漏洞
- en: 'Memory management is a vital component of Linux kernel. So, it is an important
    surface attack. The two major memory corruption exploits that are threats to the
    kernel and the Linux infrastructure in general are kernel stack, and kernel heap
    vulnerabilities:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理是Linux内核的一个重要组成部分。因此，这是一个重要的攻击面。对内核和Linux基础设施构成威胁的两个主要内存损坏漏洞是内核栈和内核堆漏洞：
- en: '![](img/00057.jpeg),'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/00057.jpeg),'
- en: Kernel stack vulnerabilities
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核栈漏洞
- en: 'The stack is a special memory space. In programming, it is an abstract data
    type used to collect elements using two operations: push and pop. This section
    grows automatically, but when it becomes closer to another memory section, it
    will cause a problem and a confusion to the system. That is why attackers are
    using this technique to confuse the system with other memory areas.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 栈是一个特殊的内存空间。在编程中，它是一个抽象数据类型，用于使用push和pop两种操作来收集元素。这个部分会自动增长，但当它接近另一个内存部分时，会导致问题和对系统的混淆。这就是为什么攻击者使用这种技术来混淆系统与其他内存区域。
- en: Kernel heap vulnerabilities
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核堆漏洞
- en: 'The heap is used for dynamic memory allocation. It resides in the RAM like
    the stack, but it is slower. The kernel heap is using the following three types
    of allocators:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 堆用于动态内存分配。它和栈一样存在于RAM中，但速度较慢。内核堆使用以下三种分配器：
- en: '**SLAB**: This is a cache-friendly allocator.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLAB**：这是一个缓存友好的分配器。'
- en: '**Simple list of blocks** (**SLOB**): This is an allocator used in small systems.
    It uses a first-fit algorithm.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单块列表**（**SLOB**）：这是在小型系统中使用的分配器。它使用首次适配算法。'
- en: '**SLUB**: It is the default Linux allocator.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLUB**：这是默认的Linux分配器。'
- en: Kernel heap exploits are dangerous because in most cases, the attacker doesn't
    need to prepare a Linux module debugging environment.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 内核堆漏洞利用是危险的，因为在大多数情况下，攻击者不需要准备Linux模块调试环境。
- en: Race conditions
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 竞争条件
- en: Programming with threads is not an easy mission when it comes to scheduling.
    The bug that occurs when many threads are racing to change the same data structure
    is named **race conditions**. In other words, it happens when two threats are
    trying to do the same job. To avoid race conditions, an atomic operation is needed.
    Thus, when an operation is started, it cannot be stopped or interrupted. Linux
    provides a solution named *Mutex*, which is the abbreviation of mutual exclusion
    object. Like its name indicates, mutexes are locks to prevent threads to perform
    simultaneously. The Dirty Cow (CVE-2016-5195) is a privilege escalation exploit
    found in Linux kernel based on race conditions. To download the exploit, you can
    check this GitHub repository at [https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs](https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用线程进行编程时，调度并不是一件容易的任务。当许多线程竞争更改相同的数据结构时发生的错误被称为**竞争条件**。换句话说，当两个线程试图执行相同的任务时就会发生。为了避免竞争条件，需要原子操作。因此，当一个操作开始时，它不能被停止或中断。Linux提供了一个名为*Mutex*的解决方案，它是
    mutual exclusion object 的缩写。正如其名称所示，mutexes 是用来防止线程同时执行的锁。Dirty Cow（CVE-2016-5195）是基于竞争条件的Linux内核特权升级漏洞利用。要下载这个漏洞利用，你可以在这个GitHub仓库中查看：[https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs](https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs)。
- en: 'The following screenshot describes the steps for a C language exploit version
    for Dirty Cow (CVE-2016-5195):'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图描述了Dirty Cow（CVE-2016-5195）的C语言漏洞利用版本的步骤：
- en: '![](img/00058.jpeg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: Logical and hardware-related bugs
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑和硬件相关的漏洞
- en: Logical and hardware-related exploits are very dangerous. Imagine an attacker
    who can not only compromise the operating system, but also have full control on
    the hardware itself. It could be a disaster. Next, we will take a look at related
    hardware vulnerability that allows attackers to attack a Linux hardware infrastructure.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑和硬件相关的漏洞利用是非常危险的。想象一下，一个攻击者不仅可以 compromise 操作系统，还可以完全控制硬件本身。这可能是一场灾难。接下来，我们将看一下相关的硬件漏洞，允许攻击者攻击Linux硬件基础设施。
- en: Case study CVE-2016-4484 – Cryptsetup Initrd root Shell
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究CVE-2016-4484 - Cryptsetup Initrd root Shell
- en: 'This exploit was presented in the Deepsec In-depth security conference 2016
    in Vienna. The talk was titled *Abusing LUKS to Hack the System*. During the session,
    the researcher showed a dangerous way to use a vulnerability in Cryptsetup to
    decrypt the host partition. This exploit gives you root access to the attacked
    machine, and the ability to do whatever with the disk. The vulnerability was caused
    by a mishandling of password check. Thus, when a user attempts to enter password
    more than three times, the system proceeds with the boot sequence normally:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞利用是在2016年维也纳的Deepsec深度安全会议上展示的。演讲的标题是*滥用LUKS来黑客系统*。在会议期间，研究人员展示了一种危险的方法，利用Cryptsetup中的漏洞来解密主机分区。这个漏洞利用使你能够获得对被攻击机器的root访问权限，并能够对磁盘进行任何操作。这个漏洞是由于密码检查的处理不当引起的。因此，当用户尝试输入密码超过三次时，系统会正常进行引导序列：
- en: '![](img/00059.jpeg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: Linux Exploit Suggester
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux Exploit Suggester
- en: 'Linux Exploit Suggester is a simple script developed by **PenturaLabs** to
    help penetration testers search for Linux vulnerabilities. Let''s download the
    tool from GitHub:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Linux Exploit Suggester是由**PenturaLabs**开发的一个简单脚本，用于帮助渗透测试人员搜索Linux漏洞。让我们从GitHub下载该工具：
- en: '`#git clone https://github.com/mzet-/linux-exploit-suggester`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`#git clone https://github.com/mzet-/linux-exploit-suggester`'
- en: '![](img/00060.gif)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.gif)'
- en: 'The tool uses the `uname -r` command to collect information about the Linux
    OS release version and later give you a list of privilege escalation exploits
    for that specific release. If you already know the release version, you can enter
    it directly using the `-k` option, as shown in the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具使用`uname -r`命令来收集有关Linux操作系统发布版本的信息，然后为您提供该特定版本的特权升级漏洞列表。如果您已经知道发布版本，可以直接使用`-k`选项输入，如下面的屏幕截图所示：
- en: '![](img/00061.gif)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.gif)'
- en: And later, you can use a website such as [https://www.cvedetails.com ](https://www.cvedetails.com)to
    search for more information about founded vulnerabilities.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以使用网站，如[https://www.cvedetails.com ](https://www.cvedetails.com)搜索更多关于发现的漏洞的信息。
- en: '![](img/00062.jpeg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: Buffer overflow prevention techniques
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓冲区溢出预防技术
- en: There are many techniques implemented to avoid buffer overflow attacks. In the
    upcoming sections, we will cover some of the well-known mechanisms.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多实施的技术来避免缓冲区溢出攻击。在接下来的部分中，我们将介绍一些众所周知的机制。
- en: Address space layout randomization
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地址空间布局随机化
- en: '**Address space layout randomization** (**ASLR**) is a defense mechanism developed by
    the Pax Project against buffer overflow attacks. This memory-protection process
    randomizes the executable location when loaded in memory. Because, as we learned
    in the previous sections, if locations are predictable, then system exploitation
    will be easy. It started as a Linux patch in 2001, but later was integrated in
    many other operating systems. ASLR can be defeated using the following techniques:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**地址空间布局随机化**（**ASLR**）是由Pax项目开发的一种防御机制，用于防范缓冲区溢出攻击。这种内存保护过程在加载到内存中时随机化可执行位置。因为，正如我们在前面的部分中所学到的，如果位置是可预测的，那么系统的利用将会很容易。它最初是作为Linux的补丁在2001年推出的，但后来被集成到许多其他操作系统中。可以使用以下技术来打败ASLR：'
- en: Bruteforcing all the possible 256 addresses until the exploit works
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解所有可能的256个地址，直到利用程序起作用
- en: Generating block of NOPs until we get a legitimate memory
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成NOP块，直到获得合法的内存
- en: Stack canaries
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆栈哨兵
- en: Stack canaries are used to detect buffer overflow attacks before they occur.
    Not to prevent them exactly, but they are implemented by compilers to make the
    exploitation more harder by using canaries in potentially vulnerable functions.
    The function prologue puts a value into the canary location and the epilogue checks
    to make sure that value is not altered.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈哨兵用于在发生缓冲区溢出攻击之前检测它们。它们并不是确切地防止它们，而是由编译器实施的，通过在潜在易受攻击的函数中使用哨兵来使利用更加困难。函数序言将一个值放入哨兵位置，而尾声则检查确保该值未被更改。
- en: '![](img/00063.jpeg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: Non-executable stack
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可执行堆栈
- en: '**Non-executable stack** (**NX**) is a virtual memory protection mechanism
    to block shell code injection from executing on the stack by restricting a particular
    memory and implementing the NX bit. But this technique is not really worthy against
    return to lib attacks, although they do not need executable stacks.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**不可执行堆栈**（**NX**）是一种虚拟内存保护机制，通过限制特定内存并实施NX位来阻止堆栈上的shell代码注入执行。但是，这种技术对于返回到lib攻击并不真正值得，尽管它们不需要可执行堆栈。'
- en: Linux return oriented programming
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux返回导向编程
- en: '**Return oriented programming** (**ROP**) is a well-known technique to bypass
    most of the discussed protection mechanisms. It is done by finding what we call
    ROP gadgets (code snippets) and jump to them. In this technique, the attacker
    hijacks and manipulates program control flow and executes a chain of instructions
    that reside in memory to perform the attack. This is called ROP chaining.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回导向编程**（**ROP**）是一种众所周知的技术，可以绕过大多数讨论过的保护机制。它是通过找到我们所谓的ROP小工具（代码片段）并跳转到它们来完成的。在这种技术中，攻击者劫持和操纵程序控制流，并执行驻留在内存中的一系列指令来执行攻击。这被称为ROP链接。'
- en: Linux hardening
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux加固
- en: 'In the previous sections, we discovered the required methods and tools to attack
    the Linux infrastructure. Now it is time to deploy safeguards and learn how to
    defend against these attacks and secure your infrastructure. To harden your Linux
    systems, you need to do the following:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们发现了攻击Linux基础设施所需的方法和工具。现在是时候部署保障措施，并学习如何防御这些攻击并保护您的基础设施了。要加固您的Linux系统，您需要执行以下操作：
- en: Update Linux kernel and applications
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新Linux内核和应用程序
- en: Avoid using insecure services such as FTP and telnet and use SFTP and OpenSSH
    instead
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用不安全的服务，如FTP和telnet，改用SFTP和OpenSSH
- en: Minimize the attack surface by using only the needed applications and services
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过仅使用所需的应用程序和服务来最小化攻击面
- en: If possible, use SELinux
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，使用SELinux
- en: Use a strong password policy
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用强密码策略
- en: Keep an eye on faillog records
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密切关注faillog记录
- en: Harden `/etc/sysctl.conf`
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加固`/etc/sysctl.conf`
- en: Use an authentication server
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认证服务器
- en: '**Center of Internet Security** (**CIS**) provides many hardening guides for
    a various number of operating systems including Linux. It is highly recommended
    to visit it: [https://www.cisecurity.org/](https://www.cisecurity.org/).'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心**（**CIS**）为各种操作系统提供了许多加固指南，包括Linux。强烈建议访问：[https://www.cisecurity.org/](https://www.cisecurity.org/)。'
- en: '![](img/00064.jpeg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: 'Now, download the benchmark of your Linux distribution from this link [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/).
    The following is the Debian hardening guide:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从此链接[https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)下载您的Linux发行版的基准。以下是Debian加固指南：
- en: '![](img/00065.jpeg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: Summary
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter concluded the different attack surfaces of Linux infrastructure,
    starting from the basic Linux commands, especially those necessary to perform
    system footprinting and enumeration. In later sections, we had the chance not
    only to learn the latest Linux exploitation techniques in addition to real-world
    study cases, but to also understand the theories and concepts behind every Linux
    security layer. We didn't stop there; as penetration testers, we had the opportunity
    to discover how to exploit the inner core of a Linux infrastructure. At the end
    of this chapter, we gained skills to operate and secure a Linux infrastructure
    from both an attacker and a defender's perspective. The next chapter will broaden
    your vision, giving you a clear understanding about how to penetrate large corporate
    networks and databases, from networking refresher terminologies to gaining the
    required skills to penetrate large-scale network companies.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了Linux基础设施的不同攻击面，从基本的Linux命令开始，特别是那些用于执行系统足迹和枚举的命令。在后面的部分，我们不仅有机会学习最新的Linux利用技术，还有真实案例研究，还能理解每个Linux安全层背后的理论和概念。我们并没有止步于此；作为渗透测试人员，我们有机会发现如何利用Linux基础设施的内核。在本章结束时，我们获得了操作和保护Linux基础设施的技能，既从攻击者的角度，也从防御者的角度。下一章将拓宽你的视野，让你清楚地了解如何渗透大型企业网络和数据库，从网络基础术语到获取渗透大型网络公司所需的技能。
